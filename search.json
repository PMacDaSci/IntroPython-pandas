[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "This workshop is designed to give beginners a solid foundation in Python programming, with a specific focus on applications in cancer biology. Participants will gain a thorough understanding of essential programming concepts through a blend of theoretical lessons, hands-on coding exercises, and practical applications.\nThe workshop will cover essential programming concepts and gradually introduce more advanced topics, with a focus on using the pandas library for efficient data handling and analysis and plotnine (ggplot) library for data visualization. By the end of the workshop, attendees will be equipped with the skills to enhance the reproducibility and efficiency of scientific research through powerful data analysis tools and effective visualization techniques."
  },
  {
    "objectID": "index.html#learning-objectives",
    "href": "index.html#learning-objectives",
    "title": "Introduction",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nParticipants will gain the following skills:\n\nProficiency in using Python for data analysis.\nBasic Python programming skills.\nReading, tidying, and joining datasets using pandas library.\nData manipulation and transformation using pandas library.\nCreating various types of plots using plotnine library."
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "Introduction",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore starting this course you will need to ensure that your computer is set up with the required software. If you have any difficulty installing any of this software then please contact one of the trainers for help.\n\nStep 1: Installing Python\nThere are multiple ways you can use Python at Peter Mac. The easiest and most convenient way is to install Python on your own computer. However, if you prefer to avoid the installation process or need additional computational capabilities the alternative option is to use the cluster.\n\nInstall Python on your own computer\nFor new users, we recommend installing Anaconda. Anaconda conveniently installs Python, the Jupyter Notebook, and other commonly used packages.\n\n\nWindows\n\nIf you have admin rights, follow Anaconda Navigator Installation. Otherwise, contact the IT Support.\n\n\n\nmacOS\n\nInstall the Anaconda Navigator from the PeterMac Self-Service → Research Applications tab or from the Anaconda Navigator Installation.\n\n\n\nLinux\n\nInstall the Anaconda Navigator from here.\n\n\nIf you are using Anaconda/Conda on your laptop/desktop on the Peter Mac network you may need to provide proxy settings by adding the following proxy servers as shown here\nTo update the .condarc file follow the quick start guide.\n\nIf you are having trouble opening the Anaconda Navigator please follow their troubleshooting page.\nOnce installed, open the anaconda-navigator directly or type the following command in the terminal to open it.\n\nanaconda-navigator\n\n\n\n\nFigure 1: Anaconda Navigator\n\n\nUseful links:\n\nGetting started with Navigator\nHow to create a Python environment?\nCreating and managing Python environments\nUsing multiple versions of Python with Navigator\nInstalling and managing Python packages\nHow to install and run Pandas from Anaconda Navigator?\nHow to use special characters in username/password for HTTP proxy?\n\n\n\nUse Python on the cluster?\nFollow the quick start guide on this page.\n\n\n\nStep 2: Installing Integrated Development Environment (IDE)\nOnce Python is installed, the next step is to install a preferred Integrated Development Environment (IDE) to start coding with Python. If you are a new user, we suggest using the Jupyter Notebook. Alternatively, if you are accustomed to using R Studio, it can also serve as a platform for Python coding.\n\nInstall Jupyter Notebook on your own computer\n\nOpen Anaconda Navigator and click install Jupyter Notebook.\nLaunch the Jupyter Notebook directly from the Anaconda Navigator or start the notebook server from the command line by typing the following command.\n\n\njupyter notebook \n\n\nYou should see the notebook home page open in your web browser.\n\n\n\n\nFigure 2: Jupyter Notebook\n\n\n\nTo install Jupyter Notebook, see Installing Jupyter Notebook.\n\nUseful links:\n\nJupyter Notebook Documentation\nHow to use Jupyter Notebooks - DataCamp\nJupyter Notebook: An Introduction\n\n\n\n\nUse Jupyter Notebook on Open OnDemand\nFollow the guide on this page.\nUseful links:\n\nUsing Jupyter on the cluster\nHow to login and use Ope OnDemand\n\n\n\nUse R Studio for Python coding\nThe RStudio IDE is a free and open-source IDE for Python, as well as R. You can write scripts, import modules, and interactively use Python within the RStudio IDE. Whether your intention is to seamlessly combine R and Python or solely concentrate on Python programming, there are several ways you can advance your coding:\n\nRun Python Scripts in the RStudio IDE\nUse R and Python in a single project with the reticulate Package\nUse your Python editor of choice within RStudio tools\n\n\n\nStep 3: Installing a Python library\nIf you are currently using Python using conda (or Anaconda) or if you are using the cluster, a Python library can be installed with Anaconda or Miniconda. For example, to install the pandas and plotnine libraries of Python use the following command on the terminal.\n\nconda install conda-forge::pandas, plotnine, matplotlib, numpy\n\nIf you installed Python using Pip, then a Python library can be installed via pip from Python Package Index (PyPI). To install the required libraries of Python use the following command on the terminal.\n\npip install pandas, matplotlib, plotnine, numpy\n\nIf Anaconda Navigator is installed and you prefer to use the Navigator instead of typing commands on a terminal refer to Installing and managing Python packages.\nUseful links:\n\nInstalling conda packages\nInstalling and managing Python packages\nPython Package Index (PyPI)"
  },
  {
    "objectID": "index.html#data",
    "href": "index.html#data",
    "title": "Introduction",
    "section": "Data",
    "text": "Data\nThe Metabric study characterized the genomic mutations and gene expression profiles for 2509 primary breast tumours. In addition to the gene expression data generated using microarrays, genome-wide copy number profiles were obtained using SNP microarrays. Targeted sequencing was performed for 2509 primary breast tumours, along with 548 matched normals, using a panel of 173 of the most frequently mutated breast cancer genes as part of the Metabric study.\nRefrences:\n\nCurtis et al., Nature 486:346-52, 2012\nPereira et al., Nature Communications 7:11479, 2016\n\nBoth the clinical data and the gene expression values were downloaded from cBioPortal.\nWe excluded observations for patient tumor samples lacking expression data, resulting in a data set with fewer rows.\nThe following table illustrates the column names and descriptions of the metabric data frame we will be using for subsequent analysis.\n\n\nDescription of column names in the metabric dataset\n\n\nColumn Name\nDescription\n\n\n\n\nPatient_Id\n#Identifier to uniquely specify a patient.\n\n\nLymph_Nodes_Examined_Positive\nNumber of lymphnodes positive\n\n\nNpi\nNottingham prognostic index\n\n\nCellularity\nTumor Content\n\n\nChemotherapy\nChemotherapy.\n\n\nCohort\nCohort\n\n\nEr_Ihc\nER status measured by IHC\n\n\nHer2_Snp6\nHER2 status measured by SNP6\n\n\nIntclust\nIntegrative Cluster\n\n\nAge_At_Diagnosis\nAge at Diagnosis\n\n\nOs_Months\nOverall survival in months since initial diagonosis.\n\n\nOs_Status\nOverall patient survival status.\n\n\nClaudin_Subtype\nPam50 + Claudin-low subtype.\n\n\nThreegene\n3-Gene classifier subtype\n\n\nVital_Status\nThe survival state of the person.\n\n\nRadio_Therapy\nRadio Therapy\n\n\nCancer_Type\nCancer Type\n\n\nCancer_Type_Detailed\nCancer Type Detailed\n\n\nEr_Status\nER Status\n\n\nHer2_Status\nHER2 Status\n\n\nGrade\nNumeric value to express the degree of abnormality of cancer cells, a measure of differentiation and aggressiveness.\n\n\nOncotree_Code\nOncotree Code\n\n\nPr_Status\nPR Status\n\n\nSample_Type\nThe type of sample (i.e., normal, primary, met, recurrence).\n\n\nTumor_Size\nTumor size in mm.\n\n\nTumor_Stage\nTumor stage.\n\n\nTmb_Nonsynonymous\nTMB (nonsynonymous)\n\n\nFOXA1\nFOXA1 Expression data\n\n\nMLPH\nMLPH Expression data\n\n\nESR1\nESR1 Expression data\n\n\nERBB2\nERBB2 Expression data\n\n\nTP53\nTP53 Expression data\n\n\nPIK3CA\nPIK3CA Expression data\n\n\nGATA3\nGATA3 Expression data\n\n\nPGR\nPGR Expression data"
  },
  {
    "objectID": "index.html#credits-and-acknowledgement",
    "href": "index.html#credits-and-acknowledgement",
    "title": "Introduction",
    "section": "Credits and Acknowledgement",
    "text": "Credits and Acknowledgement\nThese content were adapted from the following course materials:\n\nR for Data Science book\nOHI Data Science Training\nData Carpentry\nWEHI tidyr coursebook by Brendan R. E. Ansell\ncontent developed by Maria Doyle."
  },
  {
    "objectID": "vignettes/4_Visualization.html",
    "href": "vignettes/4_Visualization.html",
    "title": "Visualizing Data",
    "section": "",
    "text": "In this section, you’ll learn how to use plotnine in Python to create data visualizations using the grammar of graphics. The grammar of graphics is a high-level framework that simplifies the process of creating plots, allowing you to focus on meaningful and aesthetically pleasing visualizations rather than low-level details.\nSeveral Python packages implement a grammar of graphics, but this tutorial focuses on plotnine due to its maturity and ease of use. plotnine is inspired by ggplot2 from the R programming language, making it a familiar tool for those with an R background. Essentially, plotnine serves as the Python equivalent of ggplot2.\nThe plotnine package streamlines plot creation using data frames by providing an intuitive interface to define variables, customize displays, and modify visual attributes. This approach allows you to adapt to changes in the data or switch between plot types with minimal code modifications, resulting in high-quality, publication-ready plots with little manual adjustment.\nLike ggplot2, plotnine prefers data in the “long” format, where each variable occupies a column, and each observation corresponds to a row. Organizing data this way enhances efficiency when generating complex and varied visualizations, making the plotting process more consistent and flexible.\nWe will be using an extended version of the Metabric dataset in which columns have been added for the mRNA expression values for selected genes, including estrogen receptor alpha (ESR1), progesterone receptor (PGR), GATA3 and FOXA1.\n\nfrom plotnine import ggplot, aes, geom_line\nimport pandas as pd\nimport numpy as np\n\n# Load the Metabric dataset from the URL into a DataFrame\nmetabric = pd.read_csv(\"https://zenodo.org/record/6450144/files/metabric_clinical_and_expression_data.csv\")"
  },
  {
    "objectID": "vignettes/4_Visualization.html#overview",
    "href": "vignettes/4_Visualization.html#overview",
    "title": "Visualizing Data",
    "section": "",
    "text": "In this section, you’ll learn how to use plotnine in Python to create data visualizations using the grammar of graphics. The grammar of graphics is a high-level framework that simplifies the process of creating plots, allowing you to focus on meaningful and aesthetically pleasing visualizations rather than low-level details.\nSeveral Python packages implement a grammar of graphics, but this tutorial focuses on plotnine due to its maturity and ease of use. plotnine is inspired by ggplot2 from the R programming language, making it a familiar tool for those with an R background. Essentially, plotnine serves as the Python equivalent of ggplot2.\nThe plotnine package streamlines plot creation using data frames by providing an intuitive interface to define variables, customize displays, and modify visual attributes. This approach allows you to adapt to changes in the data or switch between plot types with minimal code modifications, resulting in high-quality, publication-ready plots with little manual adjustment.\nLike ggplot2, plotnine prefers data in the “long” format, where each variable occupies a column, and each observation corresponds to a row. Organizing data this way enhances efficiency when generating complex and varied visualizations, making the plotting process more consistent and flexible.\nWe will be using an extended version of the Metabric dataset in which columns have been added for the mRNA expression values for selected genes, including estrogen receptor alpha (ESR1), progesterone receptor (PGR), GATA3 and FOXA1.\n\nfrom plotnine import ggplot, aes, geom_line\nimport pandas as pd\nimport numpy as np\n\n# Load the Metabric dataset from the URL into a DataFrame\nmetabric = pd.read_csv(\"https://zenodo.org/record/6450144/files/metabric_clinical_and_expression_data.csv\")"
  },
  {
    "objectID": "vignettes/4_Visualization.html#building-a-basic-plot",
    "href": "vignettes/4_Visualization.html#building-a-basic-plot",
    "title": "Visualizing Data",
    "section": "Building a Basic Plot",
    "text": "Building a Basic Plot\nThe construction of ggplot graphics is incremental, allowing for the addition of new elements in layers. This approach grants users extensive flexibility and customization options, enabling the creation of tailored plots to suit specific needs.\n\n\n\n\n\nTo build a ggplot using plotnine, the following templates can be used for different types of plots. This will be consistently used in subsequent examples.\n\n\n\n\n\nThree things are required for a ggplot:\n\n1. The data\nWe first specify the data frame that contains the relevant data to create a plot. Here we are sending the metabric dataset to the ggplot() function.\n\nimport plotnine\nplotnine.options.figure_size = (6, 4)\nplotnine.options.dpi = 50\n\n\n# render plot background\nggplot(data = metabric).draw()\n\n\n\n\n\n\n\n\nThis command results in an empty gray panel. We must specify how various columns of the data frame should be depicted in the plot.\n\n\n2. Aesthetics aes()\nNext, we specify the columns in the data we want to map to visual properties (called aesthetics or aes function). e.g. the columns for x values, y values and colours.\nSince we are interested in generating a scatter plot, each point will have an x and a y coordinate. Therefore, we need to specify the x-axis to represent the year and y-axis to represent the count.\n\nggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")).draw()\n\n\n\n\n\n\n\n\nThis results in a plot which includes the grid lines, the variables and the scales for x and y axes. However, the plot is empty or lacks data points.\n\n\n3. Geometric Representation geom_()\nFinally, we specify the type of plot (the geom). There are different types of geoms:\n\n\n\n\n\n\n\n\n\n\ngeom_blank() draws an empty plot.\n\n\n\n\n\n\n\n\n\ngeom_segment() draws a straight line. geom_vline() draws a vertical line and geom_hline() draws a horizontal line.\n\n\n\n\n\n\n\n\n\ngeom_curve() draws a curved line.\n\n\n\n\n\n\n\n\n\ngeom_line()/geom_path() makes a line plot. geom_line() connects points from left to right and geom_path() connects points in the order they appear in the data.\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_point() produces a scatterplot.\n\n\n\n\n\n\n\n\n\ngeom_jitter() adds a small amount of random noise to the points in a scatter plot.\n\n\n\n\n\n\n\n\n\ngeom_dotplot() produces a dot plot.\n\n\n\n\n\n\n\n\n\ngeom_smooth() adds a smooth trend line to a plot.\n\n\n\n\n\n\n\n\n\ngeom_quantile() draws fitted quantile with lines (a scatter plot with regressed quantiles).\n\n\n\n\n\n\n\n\n\ngeom_density() creates a density plot.\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_histogram() produces a histogram.\n\n\n\n\n\n\n\n\n\ngeom_bar() makes a bar chart. Height of the bar is proportional to the number of cases in each group.\n\n\n\n\n\n\n\n\n\ngeom_col() makes a bar chart. Height of the bar is proportional to the values in data.\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() produces a box plot.\n\n\n\n\n\n\n\n\n\ngeom_violin() creates a violin plot.\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_ribbon() produces a ribbon (y interval defined line).\n\n\n\n\n\n\n\n\n\ngeom_area() draws an area plot, which is a line plot filled to the y-axis (filled lines).\n\n\n\n\n\n\n\n\n\ngeom_rect(), geom_tile() and geom_raster() draw rectangles.\n\n\n\n\n\n\n\n\n\ngeom_polygon() draws polygons, which are filled paths.\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_text() adds text to a plot.\n\n\n\n\n\n\n\n\n\ngeom_text() adds label to a plot.\n\n\n\n\n\nThe range of geoms available in plotnine package can be obtained by navigating to the help page of geoms package in the plotnine package as follows:\n\n\nimport plotnine\nhelp(plotnine.geoms)\n\nHelp on package plotnine.geoms in plotnine:\n\nNAME\n    plotnine.geoms - Plotting objects\n\nPACKAGE CONTENTS\n    annotate\n    annotation_logticks\n    annotation_stripes\n    geom\n    geom_abline\n    geom_area\n    geom_bar\n    geom_bin_2d\n    geom_blank\n    geom_boxplot\n    geom_col\n    geom_count\n    geom_crossbar\n    geom_density\n    geom_density_2d\n    geom_dotplot\n    geom_errorbar\n    geom_errorbarh\n    geom_freqpoly\n    geom_histogram\n    geom_hline\n    geom_jitter\n    geom_label\n    geom_line\n    geom_linerange\n    geom_map\n    geom_path\n    geom_point\n    geom_pointdensity\n    geom_pointrange\n    geom_polygon\n    geom_qq\n    geom_qq_line\n    geom_quantile\n    geom_raster\n    geom_rect\n    geom_ribbon\n    geom_rug\n    geom_segment\n    geom_sina\n    geom_smooth\n    geom_spoke\n    geom_step\n    geom_text\n    geom_tile\n    geom_violin\n    geom_vline\n\nCLASSES\n    builtins.object\n        plotnine.geoms.annotate.annotate\n            plotnine.geoms.annotation_logticks.annotation_logticks\n            plotnine.geoms.annotation_stripes.annotation_stripes\n        plotnine.geoms.geom_path.arrow\n    plotnine.geoms.geom.geom(abc.ABC)\n        plotnine.geoms.geom_abline.geom_abline\n        plotnine.geoms.geom_blank.geom_blank\n        plotnine.geoms.geom_boxplot.geom_boxplot\n        plotnine.geoms.geom_crossbar.geom_crossbar\n        plotnine.geoms.geom_dotplot.geom_dotplot\n        plotnine.geoms.geom_errorbar.geom_errorbar\n        plotnine.geoms.geom_errorbarh.geom_errorbarh\n        plotnine.geoms.geom_hline.geom_hline\n        plotnine.geoms.geom_linerange.geom_linerange\n        plotnine.geoms.geom_map.geom_map\n        plotnine.geoms.geom_path.geom_path\n            plotnine.geoms.geom_density_2d.geom_density_2d\n            plotnine.geoms.geom_freqpoly.geom_freqpoly\n            plotnine.geoms.geom_line.geom_line\n            plotnine.geoms.geom_qq_line.geom_qq_line\n            plotnine.geoms.geom_quantile.geom_quantile\n            plotnine.geoms.geom_step.geom_step\n        plotnine.geoms.geom_point.geom_point\n            plotnine.geoms.geom_count.geom_count\n            plotnine.geoms.geom_jitter.geom_jitter\n            plotnine.geoms.geom_pointdensity.geom_pointdensity\n            plotnine.geoms.geom_qq.geom_qq\n            plotnine.geoms.geom_sina.geom_sina\n        plotnine.geoms.geom_pointrange.geom_pointrange\n        plotnine.geoms.geom_polygon.geom_polygon\n        plotnine.geoms.geom_raster.geom_raster\n        plotnine.geoms.geom_rect.geom_rect\n            plotnine.geoms.geom_bar.geom_bar\n                plotnine.geoms.geom_col.geom_col\n                plotnine.geoms.geom_histogram.geom_histogram\n            plotnine.geoms.geom_bin_2d.geom_bin_2d\n            plotnine.geoms.geom_tile.geom_tile\n        plotnine.geoms.geom_ribbon.geom_ribbon\n            plotnine.geoms.geom_area.geom_area\n                plotnine.geoms.geom_density.geom_density\n        plotnine.geoms.geom_rug.geom_rug\n        plotnine.geoms.geom_segment.geom_segment\n            plotnine.geoms.geom_spoke.geom_spoke\n        plotnine.geoms.geom_smooth.geom_smooth\n        plotnine.geoms.geom_text.geom_text\n            plotnine.geoms.geom_label.geom_label\n        plotnine.geoms.geom_violin.geom_violin\n        plotnine.geoms.geom_vline.geom_vline\n\n    class annotate(builtins.object)\n     |  annotate(geom: 'str | type[geom_base_class]', x: 'float | None' = None, y: 'float | None' = None, xmin: 'float | None' = None, xmax: 'float | None' = None, xend: 'float | None' = None, xintercept: 'float | None' = None, ymin: 'float | None' = None, ymax: 'float | None' = None, yend: 'float | None' = None, yintercept: 'float | None' = None, **kwargs: 'Any')\n     |\n     |  Create an annotation layer\n     |\n     |  Parameters\n     |  ----------\n     |  geom :\n     |      geom to use for annotation, or name of geom (e.g. 'point').\n     |  x :\n     |      Position\n     |  y :\n     |      Position\n     |  xmin :\n     |      Position\n     |  ymin :\n     |      Position\n     |  xmax :\n     |      Position\n     |  ymax :\n     |      Position\n     |  xend :\n     |      Position\n     |  yend :\n     |      Position\n     |  xintercept :\n     |      Position\n     |  yintercept :\n     |      Position\n     |  kwargs :\n     |      Other aesthetics or parameters to the geom.\n     |\n     |  Notes\n     |  -----\n     |  The positioning aethetics `x, y, xmin, ymin, xmax, ymax, xend, yend,\n     |  xintercept, yintercept` depend on which `geom` is used.\n     |\n     |  You should choose or ignore accordingly.\n     |\n     |  All `geoms` are created with `stat=\"identity\"`{.py}.\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, geom: 'str | type[geom_base_class]', x: 'float | None' = None, y: 'float | None' = None, xmin: 'float | None' = None, xmax: 'float | None' = None, xend: 'float | None' = None, xintercept: 'float | None' = None, ymin: 'float | None' = None, ymax: 'float | None' = None, yend: 'float | None' = None, yintercept: 'float | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add to ggplot\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this annotation\n     |\n     |      Returns\n     |      -------\n     |      out : layer\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  __annotations__ = {'_annotation_geom': 'geom_base_class'}\n\n    class annotation_logticks(plotnine.geoms.annotate.annotate)\n     |  annotation_logticks(sides: 'str' = 'bl', alpha: 'float' = 1, color: 'str | TupleFloat3 | TupleFloat4' = 'black', size: 'float' = 0.5, linetype: \"Literal['solid', 'dashed', 'dashdot', 'dotted'] | Sequence[float]\" = 'solid', lengths: 'TupleFloat3' = (0.036, 0.0225, 0.012), base: 'float | None' = None)\n     |\n     |  Marginal log ticks.\n     |\n     |  If added to a plot that does not have a log10 axis\n     |  on the respective side, a warning will be issued.\n     |\n     |  Parameters\n     |  ----------\n     |  sides :\n     |      Sides onto which to draw the marks. Any combination\n     |      chosen from the characters `btlr`, for *bottom*, *top*,\n     |      *left* or *right* side marks. If `coord_flip()` is used,\n     |      these are the sides *after* the flip.\n     |  alpha :\n     |      Transparency of the ticks\n     |  color :\n     |      Colour of the ticks\n     |  size :\n     |      Thickness of the ticks\n     |  linetype :\n     |      Type of line\n     |  lengths:\n     |      length of the ticks drawn for full / half / tenth\n     |      ticks relative to panel size\n     |  base :\n     |      Base of the logarithm in which the ticks will be\n     |      calculated. If `None`, the base used to log transform\n     |      the scale will be used.\n     |\n     |  Method resolution order:\n     |      annotation_logticks\n     |      plotnine.geoms.annotate.annotate\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, sides: 'str' = 'bl', alpha: 'float' = 1, color: 'str | TupleFloat3 | TupleFloat4' = 'black', size: 'float' = 0.5, linetype: \"Literal['solid', 'dashed', 'dashdot', 'dotted'] | Sequence[float]\" = 'solid', lengths: 'TupleFloat3' = (0.036, 0.0225, 0.012), base: 'float | None' = None)\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.annotate.annotate:\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add to ggplot\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this annotation\n     |\n     |      Returns\n     |      -------\n     |      out : layer\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.annotate.annotate:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n\n    class annotation_stripes(plotnine.geoms.annotate.annotate)\n     |  annotation_stripes(fill: 'Sequence[str]' = ('#AAAAAA', '#CCCCCC'), fill_range: \"Literal['auto', 'cycle', 'no', 'nocycle']\" = 'auto', direction: \"Literal['horizontal', 'vertical']\" = 'vertical', extend: 'TupleFloat2' = (0, 1), **kwargs: 'Any')\n     |\n     |  Alternating stripes, centered around each label.\n     |\n     |  Useful as a background for geom_jitter.\n     |\n     |  Parameters\n     |  ----------\n     |  fill :\n     |      List of colors for the strips.\n     |  fill_range :\n     |      How to fill stripes beyond the range of scale:\n     |\n     |      ```python\n     |      \"cycle\"      # keep cycling the colors of the\n     |                   # stripes after the range ends\n     |      \"nocycle\"    # stop cycling the colors of the\n     |                   # stripes after the range ends\n     |      \"auto\"       # \"cycle\" for continuous scales and\n     |                   # \"nocycle\" for discrete scales.\n     |      \"no\"         # Do not add stripes passed the range\n     |                   # passed the range of the scales\n     |      ```\n     |  direction :\n     |      Orientation of the stripes\n     |  extend :\n     |      Range of the stripes. The default is (0, 1), top to bottom.\n     |      The values should be in the range [0, 1].\n     |  **kwargs :\n     |      Other aesthetic parameters for the rectangular stripes.\n     |      They include; `alpha`, `color`, `linetype`, and `size`.\n     |\n     |  Method resolution order:\n     |      annotation_stripes\n     |      plotnine.geoms.annotate.annotate\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, fill: 'Sequence[str]' = ('#AAAAAA', '#CCCCCC'), fill_range: \"Literal['auto', 'cycle', 'no', 'nocycle']\" = 'auto', direction: \"Literal['horizontal', 'vertical']\" = 'vertical', extend: 'TupleFloat2' = (0, 1), **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.annotate.annotate:\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add to ggplot\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this annotation\n     |\n     |      Returns\n     |      -------\n     |      out : layer\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.annotate.annotate:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n\n    class arrow(builtins.object)\n     |  arrow(angle: 'float' = 30, length: 'float' = 0.2, ends: \"Literal['first', 'last', 'both']\" = 'last', type: \"Literal['open', 'closed']\" = 'open')\n     |\n     |  Define arrow (actually an arrowhead)\n     |\n     |  This is used to define arrow heads for\n     |  [](`~plotnine.geoms.geom_path`).\n     |\n     |  Parameters\n     |  ----------\n     |  angle :\n     |      angle in degrees between the tail a\n     |      single edge.\n     |  length :\n     |      of the edge in \"inches\"\n     |  ends :\n     |      At which end of the line to draw the\n     |      arrowhead\n     |  type :\n     |      When it is closed, it is also filled\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, angle: 'float' = 30, length: 'float' = 0.2, ends: \"Literal['first', 'last', 'both']\" = 'last', type: \"Literal['open', 'closed']\" = 'open')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  draw(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', constant: 'bool' = True, **params: 'Any')\n     |      Draw arrows at the end(s) of the lines\n     |\n     |      Parameters\n     |      ----------\n     |      data : dataframe\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params : panel_view\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      constant: bool\n     |          If the path attributes vary along the way. If false,\n     |          the arrows are per segment of the path\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  get_paths(self, x1: 'npt.ArrayLike', y1: 'npt.ArrayLike', x2: 'npt.ArrayLike', y2: 'npt.ArrayLike', panel_params: 'panel_view', coord: 'coord', ax: 'Axes') -&gt; 'list[Path]'\n     |      Compute paths that create the arrow heads\n     |\n     |      Parameters\n     |      ----------\n     |      x1, y1, x2, y2 : array_like\n     |          List of points that define the tails of the arrows.\n     |          The arrow heads will be at x1, y1. If you need them\n     |          at x2, y2 reverse the input.\n     |      panel_params : panel_view\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |\n     |      Returns\n     |      -------\n     |      out : list of Path\n     |          Paths that create arrow heads\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n\n    class geom_abline(plotnine.geoms.geom.geom)\n     |  geom_abline(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Lines specified by slope and intercept\n     |\n     |  **Usage**\n     |\n     |      geom_abline(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=False,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +---------------+-----------------+\n     |      | Aesthetic     | Default value   |\n     |      +===============+=================+\n     |      | **intercept** |                 |\n     |      +---------------+-----------------+\n     |      | **slope**     |                 |\n     |      +---------------+-----------------+\n     |      | alpha         | `1`{.py}        |\n     |      +---------------+-----------------+\n     |      | color         | `'black'`{.py}  |\n     |      +---------------+-----------------+\n     |      | group         |                 |\n     |      +---------------+-----------------+\n     |      | linetype      | `'solid'`{.py}  |\n     |      +---------------+-----------------+\n     |      | size          | `0.5`{.py}      |\n     |      +---------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=False\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_abline\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_path.geom_path\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  DEFAULT_PARAMS = {'inherit_aes': False, 'na_rm': False, 'position': 'i...\n     |\n     |  REQUIRED_AES = {'intercept', 'slope'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_area(plotnine.geoms.geom_ribbon.geom_ribbon)\n     |  geom_area(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Area plot\n     |\n     |  An area plot is a special case of geom_ribbon,\n     |  where the minimum of the range is fixed to 0,\n     |  and the position adjustment defaults to 'stack'.\n     |\n     |  **Usage**\n     |\n     |      geom_area(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"stack\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          outline_type=\"upper\",\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **x**       |                  |\n     |      +-------------+------------------+\n     |      | **y**       |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | color       | `'none'`{.py}    |\n     |      +-------------+------------------+\n     |      | fill        | `'#333333'`{.py} |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |      | linetype    | `'solid'`{.py}   |\n     |      +-------------+------------------+\n     |      | size        | `0.5`{.py}       |\n     |      +-------------+------------------+\n     |      | where       | `True`{.py}      |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |\n     |      **Aesthetics Descriptions**\n     |\n     |      `where`\n     |\n     |      :   Define where to exclude horizontal regions from being filled.\n     |          Regions between any two `False` values are skipped.\n     |          For sensible demarcation the value used in the *where* predicate\n     |          expression should match the `ymin` value or expression. i.e.\n     |\n     |          ```python\n     |           aes(ymin=0, ymax=\"col1\", where=\"col1 &gt; 0\")  # good\n     |           aes(ymin=0, ymax=\"col1\", where=\"col1 &gt; 10\")  # bad\n     |\n     |           aes(ymin=col2, ymax=\"col1\", where=\"col1 &gt; col2\")  # good\n     |           aes(ymin=col2, ymax=\"col1\", where=\"col1 &gt; col3\")  # bad\n     |          ```\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"stack\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.geom_ribbon\n     |\n     |  Method resolution order:\n     |      geom_area\n     |      plotnine.geoms.geom_ribbon.geom_ribbon\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'outline_type': 'upper', 'position':...\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_ribbon.geom_ribbon:\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_ribbon.geom_ribbon:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_polygon.geom_polygon\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_ribbon.geom_ribbon:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'none', 'fill': '#333333', 'linety...\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_bar(plotnine.geoms.geom_rect.geom_rect)\n     |  geom_bar(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Bar plot\n     |\n     |  **Usage**\n     |\n     |      geom_bar(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"count\",\n     |          position=\"stack\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          width=None,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **x**       |                  |\n     |      +-------------+------------------+\n     |      | **y**       |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | color       | `None`{.py}      |\n     |      +-------------+------------------+\n     |      | fill        | `'#595959'`{.py} |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |      | linetype    | `'solid'`{.py}   |\n     |      +-------------+------------------+\n     |      | size        | `0.5`{.py}       |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"count\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"stack\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  width : float, default=None\n     |      Bar width. If `None`{.py}, the width is set to\n     |      `90%` of the resolution of the data.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.geom_histogram\n     |\n     |  Method resolution order:\n     |      geom_bar\n     |      plotnine.geoms.geom_rect.geom_rect\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'stack', 'stat': 'count'...\n     |\n     |  NON_MISSING_AES = {'xmax', 'xmin', 'ymax', 'ymin'}\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_polygon.geom_polygon\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': None, 'fill': '#595959', 'linetype...\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    geom_bin2d = class geom_bin_2d(plotnine.geoms.geom_rect.geom_rect)\n     |  geom_bin2d(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Heatmap of 2d bin counts\n     |\n     |  Divides the plane into rectangles, counts the number of\n     |  cases in each rectangle, and then (by default) maps the number\n     |  of cases to the rectangle's fill. This is a useful alternative\n     |  to geom_point in the presence of overplotting.\n     |\n     |  **Usage**\n     |\n     |      geom_bin_2d(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"bin_2d\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **xmax**    |                  |\n     |      +-------------+------------------+\n     |      | **xmin**    |                  |\n     |      +-------------+------------------+\n     |      | **ymax**    |                  |\n     |      +-------------+------------------+\n     |      | **ymin**    |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | color       | `None`{.py}      |\n     |      +-------------+------------------+\n     |      | fill        | `'#595959'`{.py} |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |      | linetype    | `'solid'`{.py}   |\n     |      +-------------+------------------+\n     |      | size        | `0.5`{.py}       |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"bin_2d\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_bin_2d\n     |      plotnine.geoms.geom_rect.geom_rect\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'bin...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_polygon.geom_polygon\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': None, 'fill': '#595959', 'linetype...\n     |\n     |  REQUIRED_AES = {'xmax', 'xmin', 'ymax', 'ymin'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_bin_2d(plotnine.geoms.geom_rect.geom_rect)\n     |  geom_bin_2d(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Heatmap of 2d bin counts\n     |\n     |  Divides the plane into rectangles, counts the number of\n     |  cases in each rectangle, and then (by default) maps the number\n     |  of cases to the rectangle's fill. This is a useful alternative\n     |  to geom_point in the presence of overplotting.\n     |\n     |  **Usage**\n     |\n     |      geom_bin_2d(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"bin_2d\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **xmax**    |                  |\n     |      +-------------+------------------+\n     |      | **xmin**    |                  |\n     |      +-------------+------------------+\n     |      | **ymax**    |                  |\n     |      +-------------+------------------+\n     |      | **ymin**    |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | color       | `None`{.py}      |\n     |      +-------------+------------------+\n     |      | fill        | `'#595959'`{.py} |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |      | linetype    | `'solid'`{.py}   |\n     |      +-------------+------------------+\n     |      | size        | `0.5`{.py}       |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"bin_2d\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_bin_2d\n     |      plotnine.geoms.geom_rect.geom_rect\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'bin...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_polygon.geom_polygon\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': None, 'fill': '#595959', 'linetype...\n     |\n     |  REQUIRED_AES = {'xmax', 'xmin', 'ymax', 'ymin'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_blank(plotnine.geoms.geom.geom)\n     |  geom_blank(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  An empty plot\n     |\n     |  **Usage**\n     |\n     |      geom_blank(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_blank\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'ide...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      da :\n     |          Canvas on which to draw\n     |      lyr :\n     |          Layer that the geom belongs to.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          The DrawingArea after a layer has been drawn onto it.\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  DEFAULT_AES = {}\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  REQUIRED_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_boxplot(plotnine.geoms.geom.geom)\n     |  geom_boxplot(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Box and whiskers plot\n     |\n     |  **Usage**\n     |\n     |      geom_boxplot(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"boxplot\",\n     |          position=\"dodge2\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          width=None,\n     |          outlier_alpha=1,\n     |          outlier_color=None,\n     |          outlier_shape=\"o\",\n     |          outlier_size=1.5,\n     |          outlier_stroke=0.5,\n     |          notch=False,\n     |          varwidth=False,\n     |          notchwidth=0.5,\n     |          fatten=2,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **lower**   |                  |\n     |      +-------------+------------------+\n     |      | **middle**  |                  |\n     |      +-------------+------------------+\n     |      | **upper**   |                  |\n     |      +-------------+------------------+\n     |      | **x**       |                  |\n     |      +-------------+------------------+\n     |      | **ymax**    |                  |\n     |      +-------------+------------------+\n     |      | **ymin**    |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | color       | `'#333333'`{.py} |\n     |      +-------------+------------------+\n     |      | fill        | `'white'`{.py}   |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |      | linetype    | `'solid'`{.py}   |\n     |      +-------------+------------------+\n     |      | shape       | `'o'`{.py}       |\n     |      +-------------+------------------+\n     |      | size        | `0.5`{.py}       |\n     |      +-------------+------------------+\n     |      | weight      | `1`{.py}         |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"boxplot\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"dodge2\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  width : float, default=None\n     |      Box width. If `None`{.py}, the width is set to\n     |      `90%` of the resolution of the data. Note that if the stat\n     |      has a width parameter, that takes precedence over this one.\n     |  outlier_alpha : float, default=1\n     |      Transparency of the outlier points.\n     |  outlier_color : str | tuple, default=None\n     |      Color of the outlier points.\n     |  outlier_shape : str, default=\"o\"\n     |      Shape of the outlier points. An empty string hides the outliers.\n     |  outlier_size : float, default=1.5\n     |      Size of the outlier points.\n     |  outlier_stroke : float, default=0.5\n     |      Stroke-size of the outlier points.\n     |  notch : bool, default=False\n     |      Whether the boxes should have a notch.\n     |  varwidth : bool, default=False\n     |      If `True`{.py}, boxes are drawn with widths proportional to\n     |      the square-roots of the number of observations in the\n     |      groups.\n     |  notchwidth : float, default=0.5\n     |      Width of notch relative to the body width.\n     |  fatten : float, default=2\n     |      A multiplicative factor used to increase the size of the\n     |      middle bar across the box.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_boxplot\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2' from plotnine.geoms.geom_path.geom_path\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': '#333333', 'fill': 'white', 'linet...\n     |\n     |  DEFAULT_PARAMS = {'fatten': 2, 'na_rm': False, 'notch': False, 'notchw...\n     |\n     |  REQUIRED_AES = {'lower', 'middle', 'upper', 'x', 'ymax', 'ymin'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_col(plotnine.geoms.geom_bar.geom_bar)\n     |  geom_col(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Bar plot with base on the x-axis\n     |\n     |  This is an alternate version of [](`~plotnine.geoms.geom_bar`) that maps\n     |  the height of bars to an existing variable in your data. If\n     |  you want the height of the bar to represent a count of cases,\n     |  use [](`~plotnine.geoms.geom_bar`).\n     |\n     |  **Usage**\n     |\n     |      geom_col(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"stack\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          width=None,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **x**       |                  |\n     |      +-------------+------------------+\n     |      | **y**       |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | color       | `None`{.py}      |\n     |      +-------------+------------------+\n     |      | fill        | `'#595959'`{.py} |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |      | linetype    | `'solid'`{.py}   |\n     |      +-------------+------------------+\n     |      | size        | `0.5`{.py}       |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"stack\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  width : float, default=None\n     |      Bar width. If `None`{.py}, the width is set to\n     |      `90%` of the resolution of the data.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.geom_bar\n     |\n     |  Method resolution order:\n     |      geom_col\n     |      plotnine.geoms.geom_bar.geom_bar\n     |      plotnine.geoms.geom_rect.geom_rect\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'stack', 'stat': 'identi...\n     |\n     |  NON_MISSING_AES = {'xmax', 'xmin', 'ymax', 'ymin'}\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_bar.geom_bar:\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_polygon.geom_polygon\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': None, 'fill': '#595959', 'linetype...\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_count(plotnine.geoms.geom_point.geom_point)\n     |  geom_count(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Plot overlapping points\n     |\n     |  This is a variant [](`~plotnine.geoms.geom_point`) that counts the number\n     |  of observations at each location, then maps the count to point\n     |  area. It useful when you have discrete data and overplotting.\n     |\n     |  **Usage**\n     |\n     |      geom_count(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"sum\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | fill        | `None`{.py}     |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | shape       | `'o'`{.py}      |\n     |      +-------------+-----------------+\n     |      | size        | `1.5`{.py}      |\n     |      +-------------+-----------------+\n     |      | stroke      | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"sum\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_count\n     |      plotnine.geoms.geom_point.geom_point\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'sum...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a point in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'fill': None, 'shape': 'o...\n     |\n     |  NON_MISSING_AES = {'color', 'shape', 'size'}\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_crossbar(plotnine.geoms.geom.geom)\n     |  geom_crossbar(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Vertical interval represented by a crossbar\n     |\n     |  **Usage**\n     |\n     |      geom_crossbar(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          width=0.5,\n     |          fatten=2,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | **ymax**    |                 |\n     |      +-------------+-----------------+\n     |      | **ymin**    |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | fill        | `None`{.py}     |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | linetype    | `'solid'`{.py}  |\n     |      +-------------+-----------------+\n     |      | size        | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  width : float, default=0.5\n     |      Box width as a fraction of the resolution of the data.\n     |  fatten : float, default=2\n     |      A multiplicative factor used to increase the size of the\n     |      middle bar across the box.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_crossbar\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a rectangle with a horizontal strike in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2' from plotnine.geoms.geom_path.geom_path\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'fill': None, 'linetype':...\n     |\n     |  DEFAULT_PARAMS = {'fatten': 2, 'na_rm': False, 'position': 'identity',...\n     |\n     |  REQUIRED_AES = {'x', 'y', 'ymax', 'ymin'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_density(plotnine.geoms.geom_area.geom_area)\n     |  geom_density(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Smooth density estimate\n     |\n     |  **Usage**\n     |\n     |      geom_density(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"density\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          outline_type=\"upper\",\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | fill        | `None`{.py}     |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | linetype    | `'solid'`{.py}  |\n     |      +-------------+-----------------+\n     |      | size        | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |      | weight      | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | where       | `True`{.py}     |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |\n     |      **Aesthetics Descriptions**\n     |\n     |      `where`\n     |\n     |      :   Define where to exclude horizontal regions from being filled.\n     |          Regions between any two `False` values are skipped.\n     |          For sensible demarcation the value used in the *where* predicate\n     |          expression should match the `ymin` value or expression. i.e.\n     |\n     |          ```python\n     |           aes(ymin=0, ymax=\"col1\", where=\"col1 &gt; 0\")  # good\n     |           aes(ymin=0, ymax=\"col1\", where=\"col1 &gt; 10\")  # bad\n     |\n     |           aes(ymin=col2, ymax=\"col1\", where=\"col1 &gt; col2\")  # good\n     |           aes(ymin=col2, ymax=\"col1\", where=\"col1 &gt; col3\")  # bad\n     |          ```\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"density\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.geom_ribbon\n     |\n     |  Method resolution order:\n     |      geom_density\n     |      plotnine.geoms.geom_area.geom_area\n     |      plotnine.geoms.geom_ribbon.geom_ribbon\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'fill': None, 'linetype':...\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'outline_type': 'upper', 'position':...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_area.geom_area:\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_area.geom_area:\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_ribbon.geom_ribbon:\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_ribbon.geom_ribbon:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_polygon.geom_polygon\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_density_2d(plotnine.geoms.geom_path.geom_path)\n     |  geom_density_2d(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  2D density estimate\n     |\n     |  This is a 2d version of [](`~plotnine.geoms.geom_density`).\n     |\n     |  **Usage**\n     |\n     |      geom_density_2d(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"density_2d\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | linetype    | `'solid'`{.py}  |\n     |      +-------------+-----------------+\n     |      | size        | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"density_2d\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_density_2d\n     |      plotnine.geoms.geom_path.geom_path\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'den...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_dotplot(plotnine.geoms.geom.geom)\n     |  geom_dotplot(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Dot plot\n     |\n     |  **Usage**\n     |\n     |      geom_dotplot(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"bindot\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          stackdir=\"up\",\n     |          stackratio=1,\n     |          dotsize=1,\n     |          stackgroups=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | fill        | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"bindot\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  stackdir : Literal[\"up\", \"down\", \"center\", \"centerwhole\"], default=\"up\"\n     |      Direction in which to stack the dots. Options are\n     |  stackratio : float, default=1\n     |      How close to stack the dots. If value is less than 1,\n     |      the dots overlap, if greater than 1 they are spaced.\n     |  dotsize : float, default=1\n     |      Diameter of dots relative to `binwidth`.\n     |  stackgroups : bool, default=False\n     |      If `True`{.py}, the dots are stacked across groups.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.stat_bindot\n     |\n     |  Method resolution order:\n     |      geom_dotplot\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a point in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2' from plotnine.geoms.geom_path.geom_path\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'fill': 'black'}\n     |\n     |  DEFAULT_PARAMS = {'dotsize': 1, 'na_rm': False, 'position': 'identity'...\n     |\n     |  NON_MISSING_AES = {'shape', 'size'}\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_errorbar(plotnine.geoms.geom.geom)\n     |  geom_errorbar(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Vertical interval represented as an errorbar\n     |\n     |  **Usage**\n     |\n     |      geom_errorbar(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          width=0.5,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **ymax**    |                 |\n     |      +-------------+-----------------+\n     |      | **ymin**    |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | linetype    | `'solid'`{.py}  |\n     |      +-------------+-----------------+\n     |      | size        | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  width : float, default=0.5\n     |      Bar width as a fraction of the resolution of the data.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_errorbar\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_path.geom_path\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'ide...\n     |\n     |  REQUIRED_AES = {'x', 'ymax', 'ymin'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_errorbarh(plotnine.geoms.geom.geom)\n     |  geom_errorbarh(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Horizontal interval represented as an errorbar\n     |\n     |  **Usage**\n     |\n     |      geom_errorbarh(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          height=0.5,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **xmax**    |                 |\n     |      +-------------+-----------------+\n     |      | **xmin**    |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | linetype    | `'solid'`{.py}  |\n     |      +-------------+-----------------+\n     |      | size        | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  height : float, default=0.5\n     |      Bar height as a fraction of the resolution of the data.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_errorbarh\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_path.geom_path\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  DEFAULT_PARAMS = {'height': 0.5, 'na_rm': False, 'position': 'identity...\n     |\n     |  REQUIRED_AES = {'xmax', 'xmin', 'y'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_freqpoly(plotnine.geoms.geom_path.geom_path)\n     |  geom_freqpoly(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Frequency polygon\n     |\n     |  **Usage**\n     |\n     |      geom_freqpoly(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"bin\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          lineend=\"butt\",\n     |          linejoin=\"round\",\n     |          arrow=None,\n     |          **kwargs\n     |      )\n     |\n     |  See [](`~plotnine.geoms.geom_path`) for documentation\n     |  of the parameters.\n     |\n     |  Method resolution order:\n     |      geom_freqpoly\n     |      plotnine.geoms.geom_path.geom_path\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'arrow': None, 'lineend': 'butt', 'linejoin': 'round...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_histogram(plotnine.geoms.geom_bar.geom_bar)\n     |  geom_histogram(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Histogram\n     |\n     |  **Usage**\n     |\n     |      geom_histogram(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"bin\",\n     |          position=\"stack\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **x**       |                  |\n     |      +-------------+------------------+\n     |      | **y**       |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | color       | `None`{.py}      |\n     |      +-------------+------------------+\n     |      | fill        | `'#595959'`{.py} |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |      | linetype    | `'solid'`{.py}   |\n     |      +-------------+------------------+\n     |      | size        | `0.5`{.py}       |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"bin\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"stack\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.geom_bar\n     |\n     |  Method resolution order:\n     |      geom_histogram\n     |      plotnine.geoms.geom_bar.geom_bar\n     |      plotnine.geoms.geom_rect.geom_rect\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'stack', 'stat': 'bin'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_bar.geom_bar:\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_bar.geom_bar:\n     |\n     |  NON_MISSING_AES = {'xmax', 'xmin', 'ymax', 'ymin'}\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_polygon.geom_polygon\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': None, 'fill': '#595959', 'linetype...\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_hline(plotnine.geoms.geom.geom)\n     |  geom_hline(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Horizontal line\n     |\n     |  **Usage**\n     |\n     |      geom_hline(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=False,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +----------------+-----------------+\n     |      | Aesthetic      | Default value   |\n     |      +================+=================+\n     |      | **yintercept** |                 |\n     |      +----------------+-----------------+\n     |      | alpha          | `1`{.py}        |\n     |      +----------------+-----------------+\n     |      | color          | `'black'`{.py}  |\n     |      +----------------+-----------------+\n     |      | group          |                 |\n     |      +----------------+-----------------+\n     |      | linetype       | `'solid'`{.py}  |\n     |      +----------------+-----------------+\n     |      | size           | `0.5`{.py}      |\n     |      +----------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=False\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_hline\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_path.geom_path\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2' from plotnine.geoms.geom_path.geom_path\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  DEFAULT_PARAMS = {'inherit_aes': False, 'na_rm': False, 'position': 'i...\n     |\n     |  REQUIRED_AES = {'yintercept'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_jitter(plotnine.geoms.geom_point.geom_point)\n     |  geom_jitter(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Scatter plot with points jittered to reduce overplotting\n     |\n     |  **Usage**\n     |\n     |      geom_jitter(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"jitter\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          width=None,\n     |          height=None,\n     |          random_state=None,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | fill        | `None`{.py}     |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | shape       | `'o'`{.py}      |\n     |      +-------------+-----------------+\n     |      | size        | `1.5`{.py}      |\n     |      +-------------+-----------------+\n     |      | stroke      | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"jitter\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  width : float, default=None\n     |      Proportion to jitter in horizontal direction.\n     |      The default value is that from\n     |      [](`~plotnine.positions.position_jitter`)\n     |  height : float, default=None\n     |      Proportion to jitter in vertical direction.\n     |      The default value is that from\n     |      [](`~plotnine.positions.position_jitter`).\n     |  random_state : int | ~numpy.random.RandomState, default=None\n     |      Seed or Random number generator to use. If `None`, then\n     |      numpy global generator [](`numpy.random`) is used.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.position_jitter\n     |  plotnine.geom_point\n     |\n     |  Method resolution order:\n     |      geom_jitter\n     |      plotnine.geoms.geom_point.geom_point\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'height': None, 'na_rm': False, 'position': 'jitter'...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a point in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'fill': None, 'shape': 'o...\n     |\n     |  NON_MISSING_AES = {'color', 'shape', 'size'}\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_label(plotnine.geoms.geom_text.geom_text)\n     |  geom_label(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Textual annotations with a background\n     |\n     |  **Usage**\n     |\n     |      geom_label(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          parse=False,\n     |          family=None,\n     |          fontweight=\"normal\",\n     |          fontstyle=\"normal\",\n     |          nudge_x=0,\n     |          nudge_y=0,\n     |          adjust_text=None,\n     |          format_string=None,\n     |          path_effects=None,\n     |          boxstyle=\"round\",\n     |          boxcolor=None,\n     |          label_padding=0.25,\n     |          label_r=0.25,\n     |          label_size=0.7,\n     |          tooth_size=None,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **label**   |                 |\n     |      +-------------+-----------------+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | angle       | `0`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | fill        | `'white'`{.py}  |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | ha          | `'center'`{.py} |\n     |      +-------------+-----------------+\n     |      | lineheight  | `1.2`{.py}      |\n     |      +-------------+-----------------+\n     |      | size        | `11`{.py}       |\n     |      +-------------+-----------------+\n     |      | va          | `'center'`{.py} |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |\n     |      **Aesthetics Descriptions**\n     |\n     |      `ha`\n     |\n     |      :   Horizontal alignment. One of *left*, *center* or *right.*\n     |\n     |      `va`\n     |\n     |      :   Vertical alignment. One of *top*, *center*, *bottom*, *baseline*.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  boxstyle : str, default=\"round\"\n     |      Options are:\n     |      ```python\n     |      'circle'\n     |      'darrow'\n     |      'larrow'\n     |      'rarrow'\n     |      'round '\n     |      'round4'\n     |      'roundtooth'\n     |      'sawtooth'\n     |      'square'\n     |      ````\n     |  boxcolor: str, tuple[float, float, float, float], default=None\n     |      Color of box around the text. If None, the color is\n     |      the same as the text.\n     |  label_padding : float, default=0.25\n     |      Amount of padding\n     |  label_r : float, default=0.25\n     |      Rounding radius of corners.\n     |  label_size : float, default=0.7\n     |      Linewidth of the label boundary.\n     |  tooth_size : float, default=None\n     |      Size of the `roundtooth` or `sawtooth` if they\n     |      are the chosen *boxstyle*. The default depends\n     |      on Matplotlib\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.geom_text : For documentation of the\n     |      parameters. [](`~matplotlib.patches.BoxStyle`) for the\n     |      parameters that affect the boxstyle.\n     |\n     |  Method resolution order:\n     |      geom_label\n     |      plotnine.geoms.geom_text.geom_text\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Static methods defined here:\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw letter 'a' in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'angle': 0, 'color': 'black', 'fill': 'whit...\n     |\n     |  DEFAULT_PARAMS = {'adjust_text': None, 'boxcolor': None, 'boxstyle': '...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_text.geom_text:\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_text.geom_text:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_text.geom_text:\n     |\n     |  REQUIRED_AES = {'label', 'x', 'y'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_line(plotnine.geoms.geom_path.geom_path)\n     |  geom_line(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Connected points\n     |\n     |  **Usage**\n     |\n     |      geom_line(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          lineend=\"butt\",\n     |          linejoin=\"round\",\n     |          arrow=None,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | linetype    | `'solid'`{.py}  |\n     |      +-------------+-----------------+\n     |      | size        | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.geom_path : For documentation of other parameters.\n     |\n     |  Method resolution order:\n     |      geom_line\n     |      plotnine.geoms.geom_path.geom_path\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  DEFAULT_PARAMS = {'arrow': None, 'lineend': 'butt', 'linejoin': 'round...\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_linerange(plotnine.geoms.geom.geom)\n     |  geom_linerange(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Vertical interval represented by lines\n     |\n     |  **Usage**\n     |\n     |      geom_linerange(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **ymax**    |                 |\n     |      +-------------+-----------------+\n     |      | **ymin**    |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | linetype    | `'solid'`{.py}  |\n     |      +-------------+-----------------+\n     |      | size        | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_linerange\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_path.geom_path\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'ide...\n     |\n     |  REQUIRED_AES = {'x', 'ymax', 'ymin'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_map(plotnine.geoms.geom.geom)\n     |  geom_map(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Draw map feature\n     |\n     |  The map feature are drawn without any special projections.\n     |\n     |  **Usage**\n     |\n     |      geom_map(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +--------------+------------------+\n     |      | Aesthetic    | Default value    |\n     |      +==============+==================+\n     |      | **geometry** |                  |\n     |      +--------------+------------------+\n     |      | alpha        | `1`{.py}         |\n     |      +--------------+------------------+\n     |      | color        | `'#111111'`{.py} |\n     |      +--------------+------------------+\n     |      | fill         | `'#333333'`{.py} |\n     |      +--------------+------------------+\n     |      | group        |                  |\n     |      +--------------+------------------+\n     |      | linetype     | `'solid'`{.py}   |\n     |      +--------------+------------------+\n     |      | shape        | `'o'`{.py}       |\n     |      +--------------+------------------+\n     |      | size         | `0.5`{.py}       |\n     |      +--------------+------------------+\n     |      | stroke       | `0.5`{.py}       |\n     |      +--------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Notes\n     |  -----\n     |  This geom is best suited for plotting a shapefile read into\n     |  geopandas dataframe. The dataframe should have a `geometry`\n     |  column.\n     |\n     |  Method resolution order:\n     |      geom_map\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': '#111111', 'fill': '#333333', 'lin...\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'ide...\n     |\n     |  REQUIRED_AES = {'geometry'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_path(plotnine.geoms.geom.geom)\n     |  geom_path(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Connected points\n     |\n     |  **Usage**\n     |\n     |      geom_path(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          lineend=\"butt\",\n     |          linejoin=\"round\",\n     |          arrow=None,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | linetype    | `'solid'`{.py}  |\n     |      +-------------+-----------------+\n     |      | size        | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  lineend : Literal[\"butt\", \"round\", \"projecting\"], default=\"butt\"\n     |      Line end style. This option is applied for solid linetypes.\n     |  linejoin : Literal[\"round\", \"miter\", \"bevel\"], default=\"round\"\n     |      Line join style. This option is applied for solid linetypes.\n     |  arrow : ~plotnine.geoms.geom_path.arrow, default=None\n     |      Arrow specification. Default is no arrow.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.arrow : for adding arrowhead(s) to paths.\n     |\n     |  Method resolution order:\n     |      geom_path\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  DEFAULT_PARAMS = {'arrow': None, 'lineend': 'butt', 'linejoin': 'round...\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_point(plotnine.geoms.geom.geom)\n     |  geom_point(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Plot points (Scatter plot)\n     |\n     |  **Usage**\n     |\n     |      geom_point(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | fill        | `None`{.py}     |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | shape       | `'o'`{.py}      |\n     |      +-------------+-----------------+\n     |      | size        | `1.5`{.py}      |\n     |      +-------------+-----------------+\n     |      | stroke      | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_point\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a point in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'fill': None, 'shape': 'o...\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'ide...\n     |\n     |  NON_MISSING_AES = {'color', 'shape', 'size'}\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_pointdensity(plotnine.geoms.geom_point.geom_point)\n     |  geom_pointdensity(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Scatterplot with density estimation at each point\n     |\n     |  **Usage**\n     |\n     |      geom_pointdensity(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"pointdensity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | fill        | `None`{.py}     |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | shape       | `'o'`{.py}      |\n     |      +-------------+-----------------+\n     |      | size        | `1.5`{.py}      |\n     |      +-------------+-----------------+\n     |      | stroke      | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"pointdensity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_pointdensity\n     |      plotnine.geoms.geom_point.geom_point\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'poi...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a point in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'fill': None, 'shape': 'o...\n     |\n     |  NON_MISSING_AES = {'color', 'shape', 'size'}\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_pointrange(plotnine.geoms.geom.geom)\n     |  geom_pointrange(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Vertical interval represented by a line with a point\n     |\n     |  **Usage**\n     |\n     |      geom_pointrange(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          fatten=4,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | **ymax**    |                 |\n     |      +-------------+-----------------+\n     |      | **ymin**    |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | fill        | `None`{.py}     |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | linetype    | `'solid'`{.py}  |\n     |      +-------------+-----------------+\n     |      | shape       | `'o'`{.py}      |\n     |      +-------------+-----------------+\n     |      | size        | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  fatten : float, default=2\n     |      A multiplicative factor used to increase the size of the\n     |      point along the line-range.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_pointrange\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a point in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'fill': None, 'linetype':...\n     |\n     |  DEFAULT_PARAMS = {'fatten': 4, 'na_rm': False, 'position': 'identity',...\n     |\n     |  REQUIRED_AES = {'x', 'y', 'ymax', 'ymin'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_polygon(plotnine.geoms.geom.geom)\n     |  geom_polygon(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Polygon, a filled path\n     |\n     |  **Usage**\n     |\n     |      geom_polygon(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **x**       |                  |\n     |      +-------------+------------------+\n     |      | **y**       |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | color       | `None`{.py}      |\n     |      +-------------+------------------+\n     |      | fill        | `'#333333'`{.py} |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |      | linetype    | `'solid'`{.py}   |\n     |      +-------------+------------------+\n     |      | size        | `0.5`{.py}       |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Notes\n     |  -----\n     |  All paths in the same `group` aesthetic value make up a polygon.\n     |\n     |  Method resolution order:\n     |      geom_polygon\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2' from plotnine.geoms.geom_path.geom_path\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': None, 'fill': '#333333', 'linetype...\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'ide...\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_qq(plotnine.geoms.geom_point.geom_point)\n     |  geom_qq(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Quantile-Quantile plot\n     |\n     |  **Usage**\n     |\n     |      geom_qq(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"qq\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | fill        | `None`{.py}     |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | shape       | `'o'`{.py}      |\n     |      +-------------+-----------------+\n     |      | size        | `1.5`{.py}      |\n     |      +-------------+-----------------+\n     |      | stroke      | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"qq\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_qq\n     |      plotnine.geoms.geom_point.geom_point\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'qq'...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a point in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'fill': None, 'shape': 'o...\n     |\n     |  NON_MISSING_AES = {'color', 'shape', 'size'}\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_qq_line(plotnine.geoms.geom_path.geom_path)\n     |  geom_qq_line(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Quantile-Quantile Line plot\n     |\n     |  **Usage**\n     |\n     |      geom_qq_line(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"qq_line\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | linetype    | `'solid'`{.py}  |\n     |      +-------------+-----------------+\n     |      | size        | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"qq_line\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_qq_line\n     |      plotnine.geoms.geom_path.geom_path\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'qq_...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_quantile(plotnine.geoms.geom_path.geom_path)\n     |  geom_quantile(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Quantile lines from a quantile regression\n     |\n     |  **Usage**\n     |\n     |      geom_quantile(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"quantile\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          lineend=\"butt\",\n     |          linejoin=\"round\",\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **x**       |                  |\n     |      +-------------+------------------+\n     |      | **y**       |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | color       | `'#3366FF'`{.py} |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |      | linetype    | `'solid'`{.py}   |\n     |      +-------------+------------------+\n     |      | size        | `0.5`{.py}       |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"quantile\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  lineend : Literal[\"butt\", \"round\", \"projecting\"], default=\"butt\"\n     |      Line end style. This option is applied for solid linetypes.\n     |  linejoin : Literal[\"round\", \"miter\", \"bevel\"], default=\"round\"\n     |      Line join style. This option is applied for solid linetypes.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_quantile\n     |      plotnine.geoms.geom_path.geom_path\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': '#3366FF', 'linetype': 'solid', 's...\n     |\n     |  DEFAULT_PARAMS = {'lineend': 'butt', 'linejoin': 'round', 'na_rm': Fal...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_raster(plotnine.geoms.geom.geom)\n     |  geom_raster(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Rasterized Rectangles specified using center points\n     |\n     |  **Usage**\n     |\n     |      geom_raster(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=True,\n     |          vjust=0.5,\n     |          hjust=0.5,\n     |          interpolation=None,\n     |          filterrad=4.0,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **x**       |                  |\n     |      +-------------+------------------+\n     |      | **y**       |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | fill        | `'#333333'`{.py} |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=True\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |\n     |  hjust : float, default=0.5\n     |      Horizontal justification for the rectangle at point `x`.\n     |      Default is 0.5, which centers the rectangle horizontally.\n     |      Must be in the range `[0, 1]`.\n     |  vjust : float, default=0.5\n     |      Vertical justification for the rectangle at point `y`\n     |      Default is 0.5, which centers the rectangle vertically.\n     |      Must be in the range `[0, 1]`.\n     |  interpolation : str, default=None\n     |      How to calculate values between the center points of\n     |      adjacent rectangles. The default is `None`{.py} not to\n     |      interpolate. Allowed values are:\n     |      ```python\n     |      \"antialiased\"\n     |      \"nearest\"\n     |      \"bilinear\"\n     |      \"bicubic\"\n     |      \"spline16\"\n     |      \"spline36\"\n     |      \"hanning\"\n     |      \"hamming\"\n     |      \"hermite\"\n     |      \"kaiser\"\n     |      \"quadric\"\n     |      \"catrom\"\n     |      \"gaussian\"\n     |      \"bessel\"\n     |      \"mitchell\"\n     |      \"sinc\"\n     |      \"lanczos\"\n     |      \"blackman\"\n     |      ```\n     |  filterrad : float, default=4.0\n     |      The filter radius for filters that have a radius parameter, i.e.\n     |      when interpolation is one of: `sinc`, `lanczos`, `blackman`.\n     |      Must be a number greater than zero.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.geom_rect\n     |  plotnine.geom_tile\n     |\n     |  Method resolution order:\n     |      geom_raster\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_polygon.geom_polygon\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'fill': '#333333'}\n     |\n     |  DEFAULT_PARAMS = {'filterrad': 4.0, 'hjust': 0.5, 'interpolation': Non...\n     |\n     |  NON_MISSING_AES = {'fill', 'xmax', 'xmin', 'ymax', 'ymin'}\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_rect(plotnine.geoms.geom.geom)\n     |  geom_rect(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Rectangles\n     |\n     |  **Usage**\n     |\n     |      geom_rect(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **xmax**    |                  |\n     |      +-------------+------------------+\n     |      | **xmin**    |                  |\n     |      +-------------+------------------+\n     |      | **ymax**    |                  |\n     |      +-------------+------------------+\n     |      | **ymin**    |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | color       | `None`{.py}      |\n     |      +-------------+------------------+\n     |      | fill        | `'#595959'`{.py} |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |      | linetype    | `'solid'`{.py}   |\n     |      +-------------+------------------+\n     |      | size        | `0.5`{.py}       |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_rect\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_polygon.geom_polygon\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': None, 'fill': '#595959', 'linetype...\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'ide...\n     |\n     |  REQUIRED_AES = {'xmax', 'xmin', 'ymax', 'ymin'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_ribbon(plotnine.geoms.geom.geom)\n     |  geom_ribbon(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Ribbon plot\n     |\n     |  **Usage**\n     |\n     |      geom_ribbon(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          outline_type=\"both\",\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **x**       |                  |\n     |      +-------------+------------------+\n     |      | **ymax**    |                  |\n     |      +-------------+------------------+\n     |      | **ymin**    |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | color       | `'none'`{.py}    |\n     |      +-------------+------------------+\n     |      | fill        | `'#333333'`{.py} |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |      | linetype    | `'solid'`{.py}   |\n     |      +-------------+------------------+\n     |      | size        | `0.5`{.py}       |\n     |      +-------------+------------------+\n     |      | where       | `True`{.py}      |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |\n     |      **Aesthetics Descriptions**\n     |\n     |      `where`\n     |\n     |      :   Define where to exclude horizontal regions from being filled.\n     |          Regions between any two `False` values are skipped.\n     |          For sensible demarcation the value used in the *where* predicate\n     |          expression should match the `ymin` value or expression. i.e.\n     |\n     |          ```python\n     |           aes(ymin=0, ymax=\"col1\", where=\"col1 &gt; 0\")  # good\n     |           aes(ymin=0, ymax=\"col1\", where=\"col1 &gt; 10\")  # bad\n     |\n     |           aes(ymin=col2, ymax=\"col1\", where=\"col1 &gt; col2\")  # good\n     |           aes(ymin=col2, ymax=\"col1\", where=\"col1 &gt; col3\")  # bad\n     |          ```\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  outline_type : Literal[\"upper\", \"lower\", \"both\", \"full\"], default=\"both\"\n     |      How to stroke to outline of the region / area.\n     |      If `upper`, draw only upper bounding line.\n     |      If `lower`, draw only lower bounding line.\n     |      If `both`, draw both upper & lower bounding lines.\n     |      If `full`, draw closed polygon around the area.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_ribbon\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_polygon.geom_polygon\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'none', 'fill': '#333333', 'linety...\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'outline_type': 'both', 'position': ...\n     |\n     |  REQUIRED_AES = {'x', 'ymax', 'ymin'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_rug(plotnine.geoms.geom.geom)\n     |  geom_rug(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Marginal rug plot\n     |\n     |  **Usage**\n     |\n     |      geom_rug(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          sides=\"bl\",\n     |          length=0.03,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | linetype    | `'solid'`{.py}  |\n     |      +-------------+-----------------+\n     |      | size        | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  sides : str, default=\"bl\"\n     |      Sides onto which to draw the marks. Any combination\n     |      chosen from the characters `\"btlr\"`, for *bottom*, *top*,\n     |      *left* or *right* side marks.\n     |  length: float, default=0.03\n     |      length of marks in fractions of horizontal/vertical panel size.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_rug\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_path.geom_path\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  DEFAULT_PARAMS = {'length': 0.03, 'na_rm': False, 'position': 'identit...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  REQUIRED_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_segment(plotnine.geoms.geom.geom)\n     |  geom_segment(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Line segments\n     |\n     |  **Usage**\n     |\n     |      geom_segment(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          lineend=\"butt\",\n     |          arrow=None,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **xend**    |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | **yend**    |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | linetype    | `'solid'`{.py}  |\n     |      +-------------+-----------------+\n     |      | size        | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  lineend : Literal[\"butt\", \"round\", \"projecting\"], default=\"butt\"\n     |      Line end style. This option is applied for solid linetypes.\n     |  arrow : ~plotnine.geoms.geom_path.arrow, default=None\n     |      Arrow specification. Default is no arrow.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.arrow : for adding arrowhead(s) to segments.\n     |\n     |  Method resolution order:\n     |      geom_segment\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_path.geom_path\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2' from plotnine.geoms.geom_path.geom_path\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  DEFAULT_PARAMS = {'arrow': None, 'lineend': 'butt', 'na_rm': False, 'p...\n     |\n     |  NON_MISSING_AES = {'linetype', 'shape', 'size'}\n     |\n     |  REQUIRED_AES = {'x', 'xend', 'y', 'yend'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_sina(plotnine.geoms.geom_point.geom_point)\n     |  geom_sina(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Draw a sina plot\n     |\n     |  A sina plot is a data visualization chart suitable for plotting\n     |  any single variable in a multiclass dataset. It is an enhanced\n     |  jitter strip chart, where the width of the jitter is controlled\n     |  by the density distribution of the data within each class.\n     |\n     |  **Usage**\n     |\n     |      geom_sina(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"sina\",\n     |          position=\"dodge\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | fill        | `None`{.py}     |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | shape       | `'o'`{.py}      |\n     |      +-------------+-----------------+\n     |      | size        | `1.5`{.py}      |\n     |      +-------------+-----------------+\n     |      | stroke      | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"sina\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"dodge\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.stat_sina\n     |\n     |  References\n     |  ----------\n     |  Sidiropoulos, N., S. H. Sohi, T. L. Pedersen, B. T. Porse, O. Winther,\n     |  N. Rapin, and F. O. Bagger. 2018.\n     |  \"SinaPlot: An Enhanced Chart for Simple and Truthful Representation of\n     |  Single Observations over Multiple Classes.\"\n     |  J. Comp. Graph. Stat 27: 673–76.\n     |\n     |  Method resolution order:\n     |      geom_sina\n     |      plotnine.geoms.geom_point.geom_point\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'dodge', 'stat': 'sina'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a point in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_point.geom_point:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'fill': None, 'shape': 'o...\n     |\n     |  NON_MISSING_AES = {'color', 'shape', 'size'}\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_smooth(plotnine.geoms.geom.geom)\n     |  geom_smooth(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  A smoothed conditional mean\n     |\n     |  **Usage**\n     |\n     |      geom_smooth(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"smooth\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          legend_fill_ratio=0.5,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **x**       |                  |\n     |      +-------------+------------------+\n     |      | **y**       |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `0.4`{.py}       |\n     |      +-------------+------------------+\n     |      | color       | `'black'`{.py}   |\n     |      +-------------+------------------+\n     |      | fill        | `'#999999'`{.py} |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |      | linetype    | `'solid'`{.py}   |\n     |      +-------------+------------------+\n     |      | size        | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | ymax        | `None`{.py}      |\n     |      +-------------+------------------+\n     |      | ymin        | `None`{.py}      |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"smooth\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  legend_fill_ratio : float, default=0.5\n     |      How much (vertically) of the legend box should be filled by\n     |      the color that indicates the confidence intervals. Should be\n     |      in the range [0, 1].\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_smooth\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw letter 'a' in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : dataframe\n     |          Legend data\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2' from plotnine.geoms.geom_path.geom_path\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 0.4, 'color': 'black', 'fill': '#999999', 'lin...\n     |\n     |  DEFAULT_PARAMS = {'legend_fill_ratio': 0.5, 'na_rm': False, 'position'...\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_spoke(plotnine.geoms.geom_segment.geom_segment)\n     |  geom_spoke(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Line segment parameterised by location, direction and distance\n     |\n     |  **Usage**\n     |\n     |      geom_spoke(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          lineend=\"butt\",\n     |          arrow=None,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **angle**   |                 |\n     |      +-------------+-----------------+\n     |      | **radius**  |                 |\n     |      +-------------+-----------------+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | linetype    | `'solid'`{.py}  |\n     |      +-------------+-----------------+\n     |      | size        | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.geom_segment : For documentation of extra\n     |      parameters.\n     |\n     |  Method resolution order:\n     |      geom_spoke\n     |      plotnine.geoms.geom_segment.geom_segment\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  REQUIRED_AES = {'angle', 'radius', 'x', 'y'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_segment.geom_segment:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_path.geom_path\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2' from plotnine.geoms.geom_path.geom_path\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_segment.geom_segment:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  DEFAULT_PARAMS = {'arrow': None, 'lineend': 'butt', 'na_rm': False, 'p...\n     |\n     |  NON_MISSING_AES = {'linetype', 'shape', 'size'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_step(plotnine.geoms.geom_path.geom_path)\n     |  geom_step(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Stepped connected points\n     |\n     |  **Usage**\n     |\n     |      geom_step(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          direction=\"hv\",\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | linetype    | `'solid'`{.py}  |\n     |      +-------------+-----------------+\n     |      | size        | `0.5`{.py}      |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  direction : Literal[\"hv\", \"vh\", \"mid\"], default=\"hv\"\n     |      horizontal-vertical steps,\n     |      vertical-horizontal steps or steps half-way between adjacent\n     |      x values.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.geom_path : For documentation of extra parameters.\n     |\n     |  Method resolution order:\n     |      geom_step\n     |      plotnine.geoms.geom_path.geom_path\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any') from plotnine.geoms.geom.geom\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_PARAMS = {'direction': 'hv', 'na_rm': False, 'position': 'iden...\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a horizontal line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom_path.geom_path:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_text(plotnine.geoms.geom.geom)\n     |  geom_text(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Textual annotations\n     |\n     |  **Usage**\n     |\n     |      geom_text(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          parse=False,\n     |          family=None,\n     |          fontweight=\"normal\",\n     |          fontstyle=\"normal\",\n     |          nudge_x=0,\n     |          nudge_y=0,\n     |          adjust_text=None,\n     |          format_string=None,\n     |          path_effects=None,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+-----------------+\n     |      | Aesthetic   | Default value   |\n     |      +=============+=================+\n     |      | **label**   |                 |\n     |      +-------------+-----------------+\n     |      | **x**       |                 |\n     |      +-------------+-----------------+\n     |      | **y**       |                 |\n     |      +-------------+-----------------+\n     |      | alpha       | `1`{.py}        |\n     |      +-------------+-----------------+\n     |      | angle       | `0`{.py}        |\n     |      +-------------+-----------------+\n     |      | color       | `'black'`{.py}  |\n     |      +-------------+-----------------+\n     |      | group       |                 |\n     |      +-------------+-----------------+\n     |      | ha          | `'center'`{.py} |\n     |      +-------------+-----------------+\n     |      | lineheight  | `1.2`{.py}      |\n     |      +-------------+-----------------+\n     |      | size        | `11`{.py}       |\n     |      +-------------+-----------------+\n     |      | va          | `'center'`{.py} |\n     |      +-------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |\n     |      **Aesthetics Descriptions**\n     |\n     |      `ha`\n     |\n     |      :   Horizontal alignment. One of *left*, *center* or *right.*\n     |\n     |      `va`\n     |\n     |      :   Vertical alignment. One of *top*, *center*, *bottom*, *baseline*.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  parse : bool, default=False\n     |      If `True`{.py}, the labels will be rendered with\n     |      [latex](http://matplotlib.org/users/usetex.html).\n     |  family : str, default=None\n     |      Font family.\n     |  fontweight : int | str, default=\"normal\"\n     |      Font weight.\n     |  fontstyle : Literal[\"normal\", \"italic\", \"oblique\"], default=\"normal\"\n     |      Font style.\n     |  nudge_x : float, default=0\n     |      Horizontal adjustment to apply to the text\n     |  nudge_y : float, default=0\n     |      Vertical adjustment to apply to the text\n     |  adjust_text: dict, default=None\n     |      Parameters to [](`~adjustText.adjust_text`) will repel\n     |      overlapping texts. This parameter takes priority of over\n     |      `nudge_x` and `nudge_y`.\n     |      `adjust_text` does not work well when it is used in the\n     |      first layer of the plot, or if it is the only layer.\n     |      For more see the documentation at\n     |      https://github.com/Phlya/adjustText/wiki .\n     |  format_string : str, default=None\n     |      If not `None`{.py}, then the text is formatted with this\n     |      string using [](`str.format`) e.g:\n     |\n     |      ```python\n     |      # 2.348 -&gt; \"2.35%\"\n     |      geom_text(format_string=\"{:.2f}%\")\n     |      ```\n     |  path_effects : list, default=None\n     |      If not `None`{.py}, then the text will use these effects.\n     |      See\n     |      [](https://matplotlib.org/tutorials/advanced/patheffects_guide.html)\n     |      documentation for more details.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.geom_label\n     |  matplotlib.text.Text\n     |  matplotlib.patheffects\n     |\n     |  Method resolution order:\n     |      geom_text\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw letter 'a' in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'angle': 0, 'color': 'black', 'ha': 'center...\n     |\n     |  DEFAULT_PARAMS = {'adjust_text': None, 'family': None, 'fontstyle': 'n...\n     |\n     |  REQUIRED_AES = {'label', 'x', 'y'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_tile(plotnine.geoms.geom_rect.geom_rect)\n     |  geom_tile(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Rectangles specified using a center points\n     |\n     |  **Usage**\n     |\n     |      geom_tile(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **x**       |                  |\n     |      +-------------+------------------+\n     |      | **y**       |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | color       | `None`{.py}      |\n     |      +-------------+------------------+\n     |      | fill        | `'#333333'`{.py} |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |      | height      | `None`{.py}      |\n     |      +-------------+------------------+\n     |      | linetype    | `'solid'`{.py}   |\n     |      +-------------+------------------+\n     |      | size        | `0.1`{.py}       |\n     |      +-------------+------------------+\n     |      | width       | `None`{.py}      |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  See Also\n     |  --------\n     |  plotnine.geom_rect\n     |\n     |  Method resolution order:\n     |      geom_tile\n     |      plotnine.geoms.geom_rect.geom_rect\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': None, 'fill': '#333333', 'height':...\n     |\n     |  DEFAULT_PARAMS = {'na_rm': False, 'position': 'identity', 'stat': 'ide...\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom_rect.geom_rect:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_polygon.geom_polygon\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_violin(plotnine.geoms.geom.geom)\n     |  geom_violin(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Violin Plot\n     |\n     |  **Usage**\n     |\n     |      geom_violin(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"ydensity\",\n     |          position=\"dodge\",\n     |          na_rm=False,\n     |          inherit_aes=True,\n     |          show_legend=None,\n     |          raster=False,\n     |          draw_quantiles=None,\n     |          style=\"full\",\n     |          scale=\"area\",\n     |          trim=True,\n     |          width=None,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +-------------+------------------+\n     |      | Aesthetic   | Default value    |\n     |      +=============+==================+\n     |      | **x**       |                  |\n     |      +-------------+------------------+\n     |      | **y**       |                  |\n     |      +-------------+------------------+\n     |      | alpha       | `1`{.py}         |\n     |      +-------------+------------------+\n     |      | color       | `'#333333'`{.py} |\n     |      +-------------+------------------+\n     |      | fill        | `'white'`{.py}   |\n     |      +-------------+------------------+\n     |      | group       |                  |\n     |      +-------------+------------------+\n     |      | linetype    | `'solid'`{.py}   |\n     |      +-------------+------------------+\n     |      | size        | `0.5`{.py}       |\n     |      +-------------+------------------+\n     |      | weight      | `1`{.py}         |\n     |      +-------------+------------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"ydensity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"dodge\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=True\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  draw_quantiles : float | list[float], default=None\n     |      draw horizontal lines at the given quantiles (0..1)\n     |      of the density estimate.\n     |  style : str, default=\"full\"\n     |      The type of violin plot to draw. The options are:\n     |\n     |      ```python\n     |      'full'        # Regular (2 sided violins)\n     |      'left'        # Left-sided half violins\n     |      'right'       # Right-sided half violins\n     |      'left-right'  # Alternate (left first) half violins by the group\n     |      'right-left'  # Alternate (right first) half violins by the group\n     |      ```\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_violin\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |      For efficiency, geoms that do not need to partition\n     |      different groups before plotting should override this\n     |      method and avoid the groupby.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Attributes are of interest\n     |          to the geom are:\n     |\n     |          ```python\n     |          \"panel_params.x.range\"  # tuple\n     |          \"panel_params.y.range\"  # tuple\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea' from plotnine.geoms.geom_polygon.geom_polygon\n     |      Draw a rectangle in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': '#333333', 'fill': 'white', 'linet...\n     |\n     |  DEFAULT_PARAMS = {'draw_quantiles': None, 'na_rm': False, 'position': ...\n     |\n     |  REQUIRED_AES = {'x', 'y'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2'\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\n    class geom_vline(plotnine.geoms.geom.geom)\n     |  geom_vline(mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |\n     |  Vertical line\n     |\n     |  **Usage**\n     |\n     |      geom_vline(\n     |          mapping=None,\n     |          data=None,\n     |          *,\n     |          stat=\"identity\",\n     |          position=\"identity\",\n     |          na_rm=False,\n     |          inherit_aes=False,\n     |          show_legend=None,\n     |          raster=False,\n     |          **kwargs\n     |      )\n     |\n     |  Parameters\n     |  ----------\n     |  mapping : ~plotnine.mapping.aes, default=None\n     |      Aesthetic mappings created with [aes](:class:`plotnine.mapping.aes`). If specified and `inherit_aes=True`{.py}, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n     |\n     |      +----------------+-----------------+\n     |      | Aesthetic      | Default value   |\n     |      +================+=================+\n     |      | **xintercept** |                 |\n     |      +----------------+-----------------+\n     |      | alpha          | `1`{.py}        |\n     |      +----------------+-----------------+\n     |      | color          | `'black'`{.py}  |\n     |      +----------------+-----------------+\n     |      | group          |                 |\n     |      +----------------+-----------------+\n     |      | linetype       | `'solid'`{.py}  |\n     |      +----------------+-----------------+\n     |      | size           | `0.5`{.py}      |\n     |      +----------------+-----------------+\n     |\n     |      The **bold** aesthetics are required.\n     |  data : ~pandas.DataFrame, default=None\n     |      The data to be displayed in this layer. If `None`{.py}, the data from from the `ggplot()`{.py} call is used. If specified, it overrides the data from the `ggplot()`{.py} call.\n     |  stat : str | ~plotnine.stats.stat.stat, default=\"identity\"\n     |      The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n     |  position : str | ~plotnine.positions.position.position, default=\"identity\"\n     |      Position adjustment. If it is a string, it must be registered and known to Plotnine.\n     |  na_rm : bool, default=False\n     |      If `False`{.py}, removes missing values with a warning. If `True`{.py} silently removes missing values.\n     |  inherit_aes : bool, default=False\n     |      If `False`{.py}, overrides the default aesthetics.\n     |  show_legend : bool | dict, default=None\n     |      Whether this layer should be included in the legends. `None`{.py} the default, includes any aesthetics that are mapped. If a [](:class:`bool`), `False`{.py} never includes and `True`{.py} always includes. A [](:class:`dict`) can be used to *exclude* specific aesthetis of the layer from showing in the legend. e.g `show_legend={'color': False}`{.py}, any other aesthetic are included by default.\n     |  raster : bool, default=False\n     |      If `True`, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n     |  **kwargs: Any\n     |      Aesthetics or parameters used by the `stat`.\n     |\n     |  Method resolution order:\n     |      geom_vline\n     |      plotnine.geoms.geom.geom\n     |      abc.ABC\n     |      builtins.object\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, mapping: 'aes | None' = None, data: 'DataLike | None' = None, **kwargs: 'Any')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  draw_panel(self, data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot all groups\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |\n     |  draw_legend(data: 'pd.Series[Any]', da: 'DrawingArea', lyr: 'layer') -&gt; 'DrawingArea'\n     |      Draw a vertical line in the box\n     |\n     |      Parameters\n     |      ----------\n     |      data : Series\n     |          Data Row\n     |      da : DrawingArea\n     |          Canvas\n     |      lyr : layer\n     |          Layer\n     |\n     |      Returns\n     |      -------\n     |      out : DrawingArea\n     |\n     |  legend_key_size(data: 'pd.Series[Any]', min_size: 'TupleInt2', lyr: 'layer') -&gt; 'TupleInt2' from plotnine.geoms.geom_path.geom_path\n     |      Calculate the size of key that would fit the layer contents\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          A row of the data plotted to this layer\n     |      min_size :\n     |          Initial size which should be expanded to fit the contents.\n     |      lyr :\n     |          Layer\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  DEFAULT_AES = {'alpha': 1, 'color': 'black', 'linetype': 'solid', 'siz...\n     |\n     |  DEFAULT_PARAMS = {'inherit_aes': False, 'na_rm': False, 'position': 'i...\n     |\n     |  REQUIRED_AES = {'xintercept'}\n     |\n     |  __abstractmethods__ = frozenset()\n     |\n     |  __annotations__ = {}\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  __deepcopy__(self, memo: 'dict[Any, Any]') -&gt; 'geom'\n     |      Deep copy without copying the self.data dataframe\n     |\n     |      geoms should not override this method.\n     |\n     |  __radd__(self, plot: 'ggplot') -&gt; 'ggplot'\n     |      Add layer representing geom object on the right\n     |\n     |      Parameters\n     |      ----------\n     |      plot :\n     |          ggplot object\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          ggplot object with added layer.\n     |\n     |  draw_layer(self, data: 'pd.DataFrame', layout: 'Layout', coord: 'coord', **params: 'Any')\n     |      Draw layer across all panels\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          DataFrame specific for this layer\n     |      layout :\n     |          Layout object created when the plot is getting\n     |          built\n     |      coord :\n     |          Type of coordinate axes\n     |      params :\n     |          Combined *geom* and *stat* parameters. Also\n     |          includes the stacking order of the layer in\n     |          the plot (*zorder*)\n     |\n     |  handle_na(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Remove rows with NaN values\n     |\n     |      geoms that infer extra information from missing values\n     |      should override this method. For example\n     |      [](`~plotnine.geoms.geom_path`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data without the NaNs.\n     |\n     |      Notes\n     |      -----\n     |      Shows a warning if the any rows are removed and the\n     |      `na_rm` parameter is False. It only takes into account\n     |      the columns of the required aesthetics.\n     |\n     |  setup_data(self, data: 'pd.DataFrame') -&gt; 'pd.DataFrame'\n     |      Modify the data before drawing takes place\n     |\n     |      This function is called *before* position adjustments are done.\n     |      It is used by geoms to create the final aesthetics used for\n     |      drawing. The base class method does nothing, geoms can override\n     |      this method for two reasons:\n     |\n     |      1. The `stat` does not create all the aesthetics (usually\n     |         position aesthetics) required for drawing the `geom`,\n     |         but those aesthetics can be computed from the available\n     |         data. For example [](`~plotnine.geoms.geom_boxplot`)\n     |         and [](`~plotnine.geoms.geom_violin`).\n     |\n     |      2. The `geom` inherits from another `geom` (superclass) which\n     |         does the drawing and the superclass requires certain aesthetics\n     |         to be present in the data. For example\n     |         [](`~plotnine.geoms.geom_tile`) and\n     |         [](`~plotnine.geoms.geom_area`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  to_layer(self) -&gt; 'layer'\n     |      Make a layer that represents this geom\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Layer\n     |\n     |  use_defaults(self, data: 'pd.DataFrame', aes_modifiers: 'dict[str, Any]') -&gt; 'pd.DataFrame'\n     |      Combine data with defaults and set aesthetics from parameters\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data used for drawing the geom.\n     |      aes_modifiers :\n     |          Aesthetics\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          Data used for drawing the geom.\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  aesthetics() -&gt; 'set[str]'\n     |      Return all the aesthetics for this geom\n     |\n     |      geoms should not override this method.\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from plotnine.geoms.geom.geom:\n     |\n     |  draw_group(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a group.\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |      coord : coord\n     |          Coordinate (e.g. coord_cartesian) system of the geom.\n     |      ax : axes\n     |          Axes on which to plot.\n     |      params : dict\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  draw_unit(data: 'pd.DataFrame', panel_params: 'panel_view', coord: 'coord', ax: 'Axes', **params: 'Any')\n     |      Plot data belonging to a unit.\n     |\n     |      A matplotlib plot function may require that an aethestic\n     |      have a single unique value. e.g. `linestyle=\"dashed\"`{.py}\n     |      and not `linestyle=[\"dashed\", \"dotted\", ...]`{.py}.\n     |      A single call to such a function can only plot lines with\n     |      the same linestyle. However, if the plot we want has more\n     |      than one line with different linestyles, we need to group\n     |      the lines with the same linestyle and plot them as one\n     |      unit. In this case, draw_group calls this function to do\n     |      the plotting. For an example see\n     |      [](`~plotnine.geoms.geom_point`).\n     |\n     |      Parameters\n     |      ----------\n     |      data :\n     |          Data to be plotted by this geom. This is the\n     |          dataframe created in the plot_build pipeline.\n     |      panel_params :\n     |          The scale information as may be required by the\n     |          axes. At this point, that information is about\n     |          ranges, ticks and labels. Keys of interest to\n     |          the geom are:\n     |\n     |          ```python\n     |          \"x_range\"  # tuple\n     |          \"y_range\"  # tuple\n     |          ```\n     |\n     |          In rare cases a geom may need access to the x or y scales.\n     |          Those are available at:\n     |\n     |          ```python\n     |          \"scales\"   # SimpleNamespace\n     |          ```\n     |      coord :\n     |          Coordinate (e.g. coord_cartesian) system of the\n     |          geom.\n     |      ax :\n     |          Axes on which to plot.\n     |      params :\n     |          Combined parameters for the geom and stat. Also\n     |          includes the `zorder`.\n     |\n     |  from_stat(stat: 'stat') -&gt; 'geom'\n     |      Return an instantiated geom object\n     |\n     |      geoms should not override this method.\n     |\n     |      Parameters\n     |      ----------\n     |      stat :\n     |          `stat`\n     |\n     |      Returns\n     |      -------\n     |      :\n     |          A geom object\n     |\n     |      Raises\n     |      ------\n     |      PlotnineError\n     |          If unable to create a `geom`.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from plotnine.geoms.geom.geom:\n     |\n     |  __dict__\n     |      dictionary for instance variables\n     |\n     |  __weakref__\n     |      list of weak references to the object\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from plotnine.geoms.geom.geom:\n     |\n     |  NON_MISSING_AES = set()\n     |\n     |  aes_params = {}\n     |\n     |  legend_geom = 'point'\n\nDATA\n    __all__ = ('annotate', 'annotation_logticks', 'annotation_stripes', 'g...\n\nFILE\n    /opt/anaconda3/lib/python3.12/site-packages/plotnine/geoms/__init__.py\n\n\n\n\n\nSince we are interested in creating a scatter plot, the geometric representation of the data will be in point form. Therefore we use the geom_point() function.\nTo plot the expression of estrogen receptor alpha (ESR1) against that of the transcription factor, GATA3:\n\n# first import the relevant geom function \nfrom plotnine import geom_point\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point() \n  )\nplot.draw()\n\n\n\n\n\n\n\n\nNotice that we use the + sign to add a layer of points to the plot. This concept bears resemblance to Adobe Photoshop, where layers of images can be rearranged and edited independently. In ggplot, each layer is added over the plot in accordance with its position in the code using the + sign."
  },
  {
    "objectID": "vignettes/4_Visualization.html#customizing-plots",
    "href": "vignettes/4_Visualization.html#customizing-plots",
    "title": "Visualizing Data",
    "section": "Customizing Plots",
    "text": "Customizing Plots\n\nAdding Colour\nThe above plot could be made more informative. For instance, the additional information regarding the ER status could be incorporated into the plot. To do this, we can utilize aes() and specify which column in the metabric data frame should be represented as the color of the points.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(aes(colour = \"ER_status\")) \n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nNotice that we specify the colour = ER_status argument in the aes() mapping inside the geom_() function instead of ggplot() function. Aesthetic mappings can be set in both ggplot() and individual geom() layers and we will discuss the difference in the Section: Adding Layers.\nTo colour points based on a continuous variable, for example: Nottingham prognostic index (NPI):\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(aes(colour = \"Nottingham_prognostic_index\")) \n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nHere, a color scale is used for continuous variables, while discrete or categorical values are represented using discrete colors.\nNote that some patient samples lack expression values, leading ggplot to remove those points with missing values for ESR1 and GATA3.\n\n\nAdding Shape\nLet’s add shape to points.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\", shape = \"factor(Survival_status)\")) + \n  geom_point()\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nSome aesthetics like shape can only be used with categorical variables:\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(mapping = aes(shape = \"Survival_time\"))\n  )\nplot.draw()  \n\nValueError: Unrecognized marker style 0.0\n\n\nThe shape argument allows you to customize the appearance of all data points by assigning the symbol/letter associated with predefined shapes given here.\nTo use asterix instead of points in the plot:\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(shape = \"*\")\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nIt would be useful to be able to change the shape of all the points. We can do so by setting the size to a single value rather than mapping it to one of the variables in the data set - this has to be done outside the aesthetic mappings (i.e. outside the aes() bit) as above.\n\n\n\n\n\n\nAesthetic Setting vs. Mapping\n\n\n\nInstead of mapping an aesthetic property to a variable, you can set it to a single value by specifying it in the layer parameters (outside aes()). We map an aesthetic to a variable (e.g., aes(shape = \"Survival_status\")) or set it to a constant (e.g., shape = \"*\"). If you want appearance to be governed by a variable in your data frame, put the specification inside aes(); if you want to override the default size or colour, put the value outside of aes().\n\n# size outside aes()\nplot1 = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(shape = \"*\")  \n  )\nplot1.draw()  \n\n# size inside aes()\nplot2 = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(mapping = aes(shape = \"Survival_status\"))\n  )\nplot2.draw()  \n\n\n\n\nThe above plots are created with similar code, but have rather different outputs. The first plot sets the size to a value and the second plot maps (not sets) the size to the three-gene classifier variable.\n\n\n\n\n\n\n\n\n\n\n\n\nIt is usually preferable to use colours to distinguish between different categories but sometimes colour and shape are used together when we want to show which group a data point belongs to in two different categorical variables.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(mapping = aes(colour = \"factor(PAM50)\", shape = \"Survival_status\"))\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\n\n\nAdding Size and Transparency\nWe can adjust the size and/or transparency of the points.\nLet’s first increase the size of points.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(mapping = aes(colour = \"PAM50\"), size = 2)\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nNote that here we add the size argument outside of the the aesthetic mapping.\nSize is not usually a good aesthetic to map to a variable and hence is not advised.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(mapping = aes(colour = \"PAM50\", size = \"ER_status\"))\n  )\nplot.draw()  \n\n/opt/anaconda3/lib/python3.12/site-packages/plotnine/scales/scale_size.py:51: PlotnineWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n\n\n\n\nBecause this value is discrete, the default size scale uses evenly spaced sizes for points categorized on ER status.\nTransparency can be useful when we have a large number of points as we can more easily tell when points are overlaid, but like size, it is not usually mapped to a variable and sits outside the aes().\nLet’s change the transparency of points.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(mapping = aes(colour = \"3-gene_classifier\"), alpha = 0.5)\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\n\n\nAdding Layers\nWe can add another layer to this plot using a different geometric representation (or geom_ function) we discussed previously.\nLet’s add trend lines to this plot using the geom_smooth() function which provide a summary of the data.\n\nfrom plotnine import geom_smooth\nplot = (\n  ggplot(data = metabric) + geom_point(mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_smooth(mapping = aes(x = \"GATA3\", y = \"ESR1\"), method=\"lm\")\n  )\nplot.draw()  \n# Method can be one of ['lm', 'ols', 'wls', 'rlm', 'glm', 'gls', 'lowess', 'loess', 'mavg', 'gpr'] by default method is set to lm (linear model)\n\n\n\n\n\n\n\n\nNote that the shaded area surrounding the black line represents the standard error bounds on the fitted model.\nThere is some annoying duplication of code used to create this plot. We’ve repeated the exact same aesthetic mapping for both geoms. We can avoid this by putting the mappings in the ggplot() function instead.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point() + \n  geom_smooth()\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nGeom layers specified earlier in the command are drawn first, preceding subsequent geom layers. The sequence of geom layers specified in the command determines their order of appearance in the plot.\nIf you switch the order of the geom_point() and geom_smooth() functions above, you’ll notice a change in the regression line. Specifically, the regression line will now be plotted underneath the points.\nLet’s make the plot look a bit prettier by reducing the size of the points and making them transparent. We’re not mapping size or alpha to any variables, just setting them to constant values, and we only want these settings to apply to the points, so we set them inside geom_point().\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(size = 1, alpha = 0.5) + \n  geom_smooth() \n  )\nplot.draw()  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAesthetic Specifications in Plot vs. Layers\n\n\n\nAesthetic mappings can be provided either in the initial ggplot() call, in individual layers, or through a combination of both approaches. When there’s only one layer in the plot, the method used to specify aesthetics doesn’t impact the result.\n\n# colour argument inside ggplot()\nplot1 = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\", colour = \"ER_status\")) + \n  geom_point(size = 0.5, alpha = 0.5) + \n  geom_smooth() \n  )\nplot1.draw()  \n\n# colour argument inside geom_point()\nplot2 = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(mapping = aes(colour = \"ER_status\"), size = 0.5, alpha = 0.5) + \n  geom_smooth() \n  )\nplot2.draw()  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the left plot, since we specified the colour (i.e., colour = \"ER_status\") inside the ggplot() function, the geom_smooth() function will fit regression lines for each type of ER status and will have coloured regression lines as shown above. This is because, when aesthetic mappings are defined in ggplot(), at the global level, they’re passed down to each of the subsequent geom layers of the plot.\nIf we want to add colour only to the points and fit a regression line across all points, we could specify the colour inside geom_point() function (i.e., right plot).\n\n\nSuppose you’ve spent a bit of time getting your scatter plot just right and decide to add another layer but you’re a bit worried about interfering with the code you so lovingly crafted, you can set the inherit.aes option to False and set the aesthetic mappings explicitly for your new layer.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\", colour = \"ER_status\")) + \n  geom_point(size = 0.5, alpha = 0.5) + \n  geom_smooth(aes(x = \"GATA3\", y = \"ESR1\"), inherit_aes=False)\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\n\n\nCoordinate Space\nggplot automatically selects the scale and type of coordinate space for each axis. The majority of plots utilize Cartesian coordinate space, characterized by linear x and y scales.\n\nfrom plotnine import lims, xlim,ylim, coord_cartesian\n# assign a variable to the plot\ngata_esrp = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(aes(colour = \"ER_status\"), size = 0.5, alpha = 0.5) + \n  geom_smooth()\n  )\ngata_esrp.draw()  \n\n\n\n\n\n\n\n\nWe can change the axes limits as follows:\n\n# change both x and y axes\nt1 = gata_esrp + lims(x = (0, 13), y = (0, 14))\nt1.draw()\n\n# change x axis\nt2 = gata_esrp + xlim(5, 9)  \nt2.draw()\n\n# change x axis\nt3 = gata_esrp + ylim(0, 13)\nt3.draw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNotice that we assigned a variable named gata_esrp to our plot and modify it by adding labels. In ggplot, you have the flexibility to assign a variable to plot and then modify it by adding layers to the plot. This approach allows you to progressively build up your visualization, incorporating various elements to convey the desired information effectively.\n\n\n\n\n\n\nlims()/xlim()/ylim() vs. coord_cartesian()\n\n\n\nWhen you set the limits using any of the lims()/xlim()/ylim() functions, it discards all data points outside the specified range. Consequently, the regression line is computed across the remaining data points. In contrast, coord_cartesian() adjust limits without discarding the data, thus offering a visual zoom effect.\n\np1 = (gata_esrp + ylim(7, 10))\np1.draw()\n\np2 = (gata_esrp + coord_cartesian(ylim = (7, 10)))\np2.draw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAxis Labels\nBy default, ggplot use the column names specified inside the aes() as the axis labels. We can change this using the xlab() and ylab() functions.\n\nfrom plotnine import xlab, ylab\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(aes(colour = \"ER_status\"), size = 0.5, alpha = 0.5) + \n  geom_smooth() + \n  xlab(\"GATA3 Expression\") + \n  ylab(\"ESR1 Expression\")\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\n\n\nCustomizing Plots\nYou can customize plots to include a title, a subtitle, a caption or a tag.\nTo add a title:\n\nfrom plotnine import ggtitle\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(aes(colour = \"ER_status\"), size = 0.5, alpha = 0.5) + \n  geom_smooth() + \n  ggtitle(\"Expression of estrogen receptor alpha against the transcription factor\")\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nWe can use the labs() function to add a title and additional information.\n\nfrom plotnine import labs\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(aes(colour = \"ER_status\"), size = 0.5, alpha = 0.5) + \n  geom_smooth() + \n  labs(\n    title = \"Expression of estrogen receptor alpha against the transcription factor\", \n    subtitle = \"ESR1 vs GATA3\", \n    caption = \"This is a caption\", \n    y = \"ESR1 Expression\")\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\n\n\nThemes\nThemes control the overall appearance of the plot, including background color, grid lines, axis labels, and text styles. ggplot offers several built-in themes, and you can also create custom themes to match your preferences or the requirements of your publication. The default theme has a grey background.\n\nfrom plotnine import theme_bw\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(aes(colour = \"ER_status\"), size = 0.5, alpha = 0.5) + \n  geom_smooth() + \n  theme_bw()\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nTry these themes yourselves: theme_classic(), theme_dark(), theme_grey() (default), theme_light(), theme_linedraw(), theme_minimal(), theme_void() and theme_test().\n\n\nFacets\nTo enhance readability and clarity, we can break the above plot into sub-plots, called faceting. Facets are commonly used to split a plot into multiple panels based on the values of one or more variables. This can be useful for exploring relationships in the data across different subsets or categories.\nTo do this, we specify the column name that will form each facet.\n\nfrom plotnine import facet_wrap, facet_grid\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(aes(colour = \"PR_status\"), size = 0.5, alpha = 0.5) + \n  geom_smooth() + \n  facet_wrap(\"PR_status\")\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nNote that the aesthetics and geoms including the regression line that were specified for the original plot, are applied to each of the facets.\nFaceting is usually better than displaying groups using different colours when there are more than two or three groups when it can be difficult to really tell which points belong to each group. A case in point is for the three-gene classification in the GATA3 vs ESR1 scatter plot we created above. Let’s create a faceted version of that plot.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(aes(colour = \"3-gene_classifier\"), size = 0.5, alpha = 0.5) + \n  geom_smooth() + \n  facet_wrap(\"3-gene_classifier\")\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nThis helps explain why the function is called facet_wrap(). When it has too many subplots to fit across the page, it wraps around to another row. We can control how many rows or columns to use with the nrow and ncol arguments.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(aes(colour = \"3-gene_classifier\"), size = 0.5, alpha = 0.5) + \n  geom_smooth() + \n  facet_wrap(\"3-gene_classifier\", nrow = 1)\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(aes(colour = \"3-gene_classifier\"), size = 0.5, alpha = 0.5) + \n  geom_smooth() + \n  facet_wrap(\"3-gene_classifier\", ncol = 2)\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nWe can combine faceting on one variable with a colour aesthetic for another variable. For example, let’s show the tumour stage status (Neoplasm histologic grade) using faceting and the HER2 status using colours.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\", colour = \"HER2_status\")) + \n  geom_point(size = 0.5, alpha = 0.5) + \n  facet_wrap(\"Neoplasm_histologic_grade\")\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nInstead of this we could facet on more than variable.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(size = 0.5, alpha = 0.5) + \n  facet_wrap([\"Neoplasm_histologic_grade\", \"HER2_status\"])\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nFaceting on two variables is usually better done using the other faceting function, **facet_grid(). Note that the variable expressions along the rows and the columns of the facet grid is set using rows= and cols= variables as follows:\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\")) + \n  geom_point(size = 0.5, alpha = 0.5) + \n  facet_grid([\"Neoplasm_histologic_grade\", \"HER2_status\"])\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nAgain we can use colour aesthetics alongside faceting to add further information to our visualization.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"GATA3\", y = \"ESR1\", colour = \"PAM50\")) + \n  geom_point(size = 0.5, alpha = 0.5) + \n  facet_grid([\"Neoplasm_histologic_grade\", \"HER2_status\"])\n  )\nplot.draw()"
  },
  {
    "objectID": "vignettes/4_Visualization.html#bar-chart",
    "href": "vignettes/4_Visualization.html#bar-chart",
    "title": "Visualizing Data",
    "section": "Bar chart",
    "text": "Bar chart\nThe metabric study redefined how we think about breast cancer by identifying and characterizing several new subtypes, referred to as integrative clusters. Let’s create a bar chart of the number of patients whose cancers fall within each subtype in the metabric cohort.\nThe geom_bar is the geom used to plot bar charts. It requires a single aesthetic mapping of the categorical variable of interest to x.\n\nfrom plotnine import geom_bar\nplot = (\n  ggplot(data = metabric) + \n  geom_bar(aes(x = \"Integrative_cluster\"))\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nThe dark grey bars are a big ugly - what if we want each bar to be a different colour?\n\nplot = (\n  ggplot(data = metabric) + \n  geom_bar(aes(x = \"Integrative_cluster\", colour = \"Integrative_cluster\"))\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nColouring the edges wasn’t quite what we had in mind. Look at the help for geom_bar to see what other aesthetic we should have used.\n\nplot = (\n  ggplot(data = metabric) + \n  geom_bar(aes(x = \"Integrative_cluster\", fill = \"Integrative_cluster\"))\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nWhat happens if we colour (fill) with something other than the integrative cluster?\n\nplot = (\n  ggplot(data = metabric) + \n  geom_bar(aes(x = \"Integrative_cluster\", fill = \"ER_status\"))\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nWe get a stacked bar plot.\nNote the similarity in what we did here to what we did with the scatter plot - there is a common grammar.\nLet’s try another stacked bar plot, this time with a categorical variable with more than two categories.\n\n# define 3-gene_classifier column as a categorical column\nmetabric[\"3-gene_classifier\"] = pd.Categorical(metabric[\"3-gene_classifier\"], \n  categories = ['ER+/HER2- High Prolif', 'ER+/HER2- Low Prolif', 'ER-/HER2-', 'HER2+', 'Undefined'])\n\n# set missing values to the Undefined category defined above  \nmetabric[\"3-gene_classifier\"] = metabric[\"3-gene_classifier\"].fillna('Undefined')\n\nplot = (\n  ggplot(data = metabric) + geom_bar(aes(x = \"Integrative_cluster\", fill = '3-gene_classifier'))\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nWe can rearrange the three gene groups into adjacent (dodged) bars by specifying a different position within geom_bar():\n\nplot = (\n  ggplot(data = metabric) + \n  geom_bar(aes(x = \"Integrative_cluster\", fill = \"3-gene_classifier\"), position = 'dodge')\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nWhat if want all the bars to be the same colour but not dark grey, e.g. blue?\nYou can set the aesthetics to a fixed value but this needs to be outside the mapping, just like we did before for size and transparency in the scatter plots.\n\nplot = (\n  ggplot(data = metabric) + \n  geom_bar(aes(x = \"Integrative_cluster\"), fill = \"blue\")\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nSetting this inside the aes() mapping told ggplot2 to map the colour aesthetic to some variable in the data frame, one that doesn’t really exist.\n\n\n\n\n\n\nExpand To Learn About Statistical transformations\n\n\n\n\n\nYou may have noticed that ggplot didn’t just plot values from our data set but had to do some calculation first for the bar chart, i.e. it had to sum the number of observations in each category.\nEach geom has a statistical transformation. In the case of the scatter plot, geom_point uses the “identity” transformation which means just use the values as they are (i.e. not really a transformation at all). The statistical transformation for geom_bar is “count”, which means it will count the number of observations for each category in the variable mapped to the x aesthetic.\nYou can see which statistical transformation is being used by a geom by looking at the stat argument in the help page for that geom.\nThere are some circumstances where you’d want to change the stat, for example if we already had count values in our table.\n\n# the previous plot\nplot1 = (\n  ggplot(data = metabric) + \n  geom_bar(aes(x = \"Integrative_cluster\"))\n  )\nplot1.draw()  \n\n# Count the occurrences of each category in the 'Integrative_cluster' column\ncounts = metabric[\"Integrative_cluster\"].value_counts()\n# Convert the series to a DataFrame with index as a column\ncounts_df = counts.reset_index()\n# same plot after computing counts and using the identity stat\nplot2 = (\n  ggplot(data = counts_df) + \n  geom_bar(aes(x = \"Integrative_cluster\", y = \"count\"), stat = \"identity\")\n  )\nplot2.draw()"
  },
  {
    "objectID": "vignettes/4_Visualization.html#box-plot",
    "href": "vignettes/4_Visualization.html#box-plot",
    "title": "Visualizing Data",
    "section": "Box plot",
    "text": "Box plot\nBox plots (or box & whisker plots) are a particular favourite seen in many seminars and papers. Box plots summarize the distribution of a set of values by displaying the minimum and maximum values, the median (i.e. middle-ranked value), and the range of the middle 50% of values (inter-quartile range). The whisker line extending above and below the IQR box define Q3 + (1.5 x IQR), and Q1 - (1.5 x IQR) respectively.\n To create a box plot from Metabric dataset:\n\nfrom plotnine import geom_boxplot, geom_jitter\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"ER_status\", y = \"GATA3\")) + \n  geom_boxplot()\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nSee geom_boxplot help to explain how the box and whiskers are constructed and how it decides which points are outliers and should be displayed as points.\nHow about adding another layer to display all the points?\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"ER_status\", y = \"GATA3\")) + \n  geom_boxplot() + \n  geom_point()\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nIdeally, we’d like these points to be spread out a bit. The help page of geom_point fucntion points to geom_jitter as more suitable when one of the variables is categorical.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"ER_status\", y = \"GATA3\")) + \n  geom_boxplot() + \n  geom_jitter()\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nWell, that’s a bit of a mess. We can bring the geom_boxplot() layer forward:\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"ER_status\", y = \"GATA3\")) + \n  geom_jitter() + \n  geom_boxplot(alpha = 0.5) \n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nStill not the best plot. We can reduce the spread or jitter and make the points smaller and transparent:\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"ER_status\", y = \"GATA3\")) + \n  geom_boxplot() + \n  geom_jitter(width = 0.3, size = 0.5, alpha = 0.25)\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nDisplaying points in this way makes much more sense when we only have a few observations and where the box plot masks the fact, perhaps giving the false impression that the sample size is larger than it actually is. Here it makes less sense as we have very many observations.\nLet’s try a colour aesthetic to also look at how estrogen receptor expression differs between HER2 positive and negative tumours.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"ER_status\", y = \"GATA3\", colour = \"HER2_status\")) + \n  geom_boxplot() \n  )\nplot.draw()"
  },
  {
    "objectID": "vignettes/4_Visualization.html#violin-plot",
    "href": "vignettes/4_Visualization.html#violin-plot",
    "title": "Visualizing Data",
    "section": "Violin plot",
    "text": "Violin plot\nA violin plot is used to visualize the distribution of a numeric variable across different categories. It combines aspects of a box plot and a kernel density plot.\nThe width of the violin at any given point represents the density of data at that point. Wider sections indicate a higher density of data points, while narrower sections indicate lower density. By default, violin plots are symmetric.\n\nfrom plotnine import geom_violin, position_dodge\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"ER_status\", y = \"GATA3\", colour = \"HER2_status\")) + \n  geom_violin()\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nInside each violin plot, a box plot is often included, showing additional summary statistics such as the median, quartiles, and potential outliers. This helps provide a quick overview of the central tendency and spread of the data within each category.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"ER_status\", y = \"GATA3\", colour = \"HER2_status\")) + \n  geom_violin() + \n  geom_boxplot(width = 0.8, alpha = 0.4)\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nIn the above plot, the violin plots and box plots are misaligned. You can read the cause of this here.\nTo align them, we can use the position_dodge() function to manually adjusting the horizontal position as follows.\n\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"ER_status\", y = \"GATA3\", colour = \"HER2_status\")) + \n  geom_violin(position = position_dodge(0.8)) + \n  geom_boxplot(width = 0.8, alpha = 0.4)\n  )\nplot.draw()"
  },
  {
    "objectID": "vignettes/4_Visualization.html#histogram",
    "href": "vignettes/4_Visualization.html#histogram",
    "title": "Visualizing Data",
    "section": "Histogram",
    "text": "Histogram\nThe geom for creating histograms is, rather unsurprisingly, geom_histogram().\n\nfrom plotnine import geom_histogram\nplot = (\n  ggplot(data = metabric) + \n  geom_histogram(aes(x = \"Age_at_diagnosis\"))\n  )\nplot.draw()  \n\n/opt/anaconda3/lib/python3.12/site-packages/plotnine/stats/stat_bin.py:109: PlotnineWarning: 'stat_bin()' using 'bins = 24'. Pick better value with 'binwidth'.\n\n\n\n\n\n\n\n\n\nThe warning message hints at picking a more optimal number of bins by specifying the binwidth argument.\n\nplot = (\n  ggplot(data = metabric) + \n  geom_histogram(aes(x = \"Age_at_diagnosis\"), binwidth = 5)\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nOr we can set the number of bins.\n\nplot = (\n  ggplot(data = metabric) + \n  geom_histogram(aes(x = \"Age_at_diagnosis\"), bins = 20)\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nThese histograms are not very pleasing, aesthetically speaking - how about some better aesthetics?\n\nplot = (\n  ggplot(data = metabric) + \n  geom_histogram(aes(x = \"Age_at_diagnosis\"), bins = 20, colour = \"darkblue\", fill = \"grey\")\n  )\nplot.draw()"
  },
  {
    "objectID": "vignettes/4_Visualization.html#density-plot",
    "href": "vignettes/4_Visualization.html#density-plot",
    "title": "Visualizing Data",
    "section": "Density plot",
    "text": "Density plot\nDensity plots are used to visualize the distribution of a continuous variable in a dataset. These are essentially smoothed histograms, where the area under the curve for each sub-group will sum to 1. This allows us to compare sub-groups of different size.\n\nfrom plotnine import geom_density\nplot = (\n  ggplot(data = metabric) + \n  geom_density(aes(x = \"Age_at_diagnosis\", colour = \"Integrative_cluster\"))\n  )\nplot.draw()"
  },
  {
    "objectID": "vignettes/4_Visualization.html#categorical-variables",
    "href": "vignettes/4_Visualization.html#categorical-variables",
    "title": "Visualizing Data",
    "section": "Categorical variables",
    "text": "Categorical variables\nSeveral of the variables in the Metabric data set are categorical. Some of these have been read into Python as character types (e.g. the three gene classifier), other as numerical values (e.g. tumour stage). We also have some binary variables that are essentially categorical variables but with only 2 possible values (e.g. ER status).\nIn many of the plots given above, ggplot has treated character variables as categorical in situations where a categorical variable is expected. For example, when we displayed points on a scatter plot using different colours for each three gene classification, or when we created separate box plots in the same graph for ER positive and negative patients.\nBut what about when our categorical variable has been read into Python as a continuous variable, e.g. Tumour_stage, which is read in as a double type.\n\nplot = (\n  ggplot(data = metabric) + \n  geom_point(aes(x = \"GATA3\", y = \"ESR1\", colour = \"Tumour_stage\"))\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\n\nmetabric.Tumour_stage.unique()\n\narray([ 2.,  1.,  4.,  3., nan,  0.])\n\n\nTumour stage has only 5 discrete states but ggplot doesn’t know these are supposed to be a restricted set of values and has used a colour scale to show them as if they were continuous. We need to tell Python that these are categorical (or factors).\nLet’s convert our tumour stage variable to a factor using the Categorical() function.\n\nmetabric[\"Tumour_stage\"] = pd.Categorical(metabric[\"Tumour_stage\"])\n# or directly convert the type to category\n# metabric[\"Tumour_stage\"] = metabric[\"Tumour_stage\"].astype(\"category\")\nmetabric[[\"Tumour_stage\", \"Patient_ID\"]].head()\n\n\n\n\n\n\n\n\nTumour_stage\nPatient_ID\n\n\n\n\n0\n2.0\nMB-0000\n\n\n1\n1.0\nMB-0002\n\n\n2\n2.0\nMB-0005\n\n\n3\n2.0\nMB-0006\n\n\n4\n2.0\nMB-0008\n\n\n\n\n\n\n\nPython actually stores categorical variables as integers but with some additional metadata about which of the integer values, or ‘categories’, corresponds to each category.\n\ntype(metabric[\"Tumour_stage\"])\nmetabric[\"Tumour_stage\"].cat.categories\n\nIndex([0.0, 1.0, 2.0, 3.0, 4.0], dtype='float64')\n\n\n\nplot = (\n  ggplot(data = metabric) + \n  geom_point(aes(x = \"GATA3\", y = \"ESR1\", colour = \"Tumour_stage\"))\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nIn this case the order of the categories makes sense but for other variables you may wish for more control over the ordering. Take the integrative cluster variable for example. We created a bar plot of the numbers of patients in the Metabric cohort within each integrative cluster. Did you notice the ordering of the clusters? 10 came just after 1 and before 2. That looked a bit odd as we’d have naturally expected it to come last of all. Python, on the other hand, is treating this vector as a character vector (mainly because of the ‘ER-’ and ‘ER+’ subtypes of cluster 4, and sorts the values into alphanumerical order.\n\nmetabric[\"Integrative_cluster\"] = pd.Categorical(metabric[\"Integrative_cluster\"])\nmetabric[\"Integrative_cluster\"].cat.categories\n\nIndex(['1', '10', '2', '3', '4ER+', '4ER-', '5', '6', '7', '8', '9'], dtype='object')\n\n\nWe can create a factor using the Categorical() function and specify the categories using the categories argument.\n\nmetabric[\"Integrative_cluster\"] = pd.Categorical(metabric[\"Integrative_cluster\"], \n  categories = [\"1\", \"2\", \"3\", \"4ER-\", \"4ER+\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\nmetabric[\"Integrative_cluster\"].cat.categories\n\nIndex(['1', '2', '3', '4ER-', '4ER+', '5', '6', '7', '8', '9', '10'], dtype='object')\n\n\n\nplot = (\n  ggplot(data = metabric) + \n  geom_bar(aes(x = \"Integrative_cluster\", fill = \"Integrative_cluster\"))\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\n\nLine plot\nA line plot is used to display the trend or pattern in data over a continuous range of values, typically along the x-axis (horizontal axis).\nBefore we create a line plot, let’s start by reading a subset of cancer_mort dataset using the read_csv() function:\n\n# first read the dataset\ncancer_mort_full = pd.read_csv(\"data/Australian_Cancer_Incidence_and_Mortality.csv\")  \n# lets consider the rows with cancer types that starts with B letters only. \n# this is done for illustartion purposes. \ncancer_mort = cancer_mort_full[cancer_mort_full.Cancer_Type.str.contains('^B[a-z]+')]\n\nNext, we filter the cancer_mort data frame to plot only the counts for the female patients in the age group 55-59 and are categorized as moratality cases.\n\n# define a new subset from cancer_mort dataset\ncancer_mort_55 = cancer_mort.query(\"Age == '55-59' and Type == 'Mortality' and Sex == 'Female'\")\n\n\nfrom plotnine import geom_line\nplot = (\n  ggplot(data = cancer_mort_55, mapping = aes(x = \"Year\", y = \"Count\")) + \n  geom_line(aes(colour = \"Cancer_Type\"))\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nAnother aesthetic available for geom_line is linetype.\n\ncancer_count = (\n  ggplot(data = cancer_mort_55, mapping = aes(x = \"Year\", y = \"Count\")) + \n  geom_line(aes(linetype = \"Cancer_Type\")) \n  )\ncancer_count.draw()"
  },
  {
    "objectID": "vignettes/4_Visualization.html#saving-plot-images",
    "href": "vignettes/4_Visualization.html#saving-plot-images",
    "title": "Visualizing Data",
    "section": "Saving plot images",
    "text": "Saving plot images\nUse ggsave() to save a plot.\n\ncancer_count.save(\"Cancer_type_vs_count.png\")\n\nYou can alter the width and height of the plot and can change the image file type.\n\ncancer_count.save(\"Cancer_type_vs_count.pdf\", width = 20, height = 12, units = \"cm\")"
  },
  {
    "objectID": "vignettes/4_Visualization.html#customizing-plots---continued",
    "href": "vignettes/4_Visualization.html#customizing-plots---continued",
    "title": "Visualizing Data",
    "section": "Customizing Plots - continued",
    "text": "Customizing Plots - continued\n\nScales\nOne of the components of the plot is called scales. ggplot automatically adds default scales behind the scene equivalent to the following:\n\nfrom plotnine import geom_smooth, scale_x_continuous, scale_y_continuous, scale_colour_discrete\nplot = (\n  ggplot(\n    data = metabric, \n    mapping = aes(x = \"Nottingham_prognostic_index\", y = \"ESR1\", colour = \"ER_status\")) + \n  geom_point(size = 0.6, alpha = 0.5) + \n  geom_smooth(method = \"lm\") + \n  scale_x_continuous() + \n  scale_y_continuous() + \n  scale_colour_discrete()\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nNote that we have three aesthetics and ggplot adds a scale for each.\n\nplot.mapping\n\n{'x': 'Nottingham_prognostic_index', 'y': 'ESR1', 'color': 'ER_status'}\n\n\nThe x and y variables (Nottingham_prognostic_index and ESR1) are continuous so ggplot adds a continuous scale for each. ER_status is a discrete variable in this case so ggplot adds a discrete scale for colour.\nGeneralizing, the scales that are required follow the naming scheme:\n\nscale_&lt;NAME_OF_AESTHETIC&gt;_&lt;NAME_OF_SCALE&gt;\n\nLook at the help page for scale_y_continuous to see what we can change about the y-axis scale (To view the help page run the command: help(plotnine.scale_y_continuous)).\nFirst we’ll change the breaks, i.e. where ggplot puts ticks and numeric labels, on the y axis.\n\nscat_plot = (\n  ggplot(\n    data = metabric, \n    mapping = aes(x = \"Nottingham_prognostic_index\", y = \"ESR1\", colour = \"ER_status\")) + \n  geom_point(size = 0.6, alpha = 0.5) + \n  geom_smooth(method = \"lm\")\n  )\n\nplot = (\n  scat_plot + scale_y_continuous(breaks = np.arange(5, 15, 2.5).tolist())\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\narange() is a useful function for generating regular sequences of numbers. In this case we wanted numbers from 5 to 15 going up in steps of 2.5.\n\nnp.arange(5, 15, 2.5)\n\narray([ 5. ,  7.5, 10. , 12.5])\n\n\nWe could do the same thing for the x axis using scale_x_continuous().\nWe can also adjust the extents of the x or y axis.\n\nplot = (\n  scat_plot + \n  scale_y_continuous(breaks = np.arange(5, 15, 2.5).tolist(), limits = (4, 12))\n  )\nplot.draw()  \n\n/opt/anaconda3/lib/python3.12/site-packages/plotnine/layer.py:364: PlotnineWarning: geom_point : Removed 160 rows containing missing values.\n\n\n\n\n\n\n\n\n\nHere, just for demonstration purposes, we set the upper limit to be less than the largest values of ESR1 expression and ggplot warned us that some rows have been removed from the plot.\nWe can change the minor breaks, e.g. to add more lines that act as guides. These are shown as thin white lines when using the default theme.\n\nplot = (\n  scat_plot + \n  scale_y_continuous(\n    breaks = np.arange(5, 12.5, 2.5).tolist(), \n    limits = (5, 13.5), \n    minor_breaks = np.arange(5, 13.5, 0.5).tolist())\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nOr we can remove the minor breaks entirely.\n\nplot = (\n  scat_plot + \n  scale_y_continuous(\n    breaks = np.arange(6, 14, 2).tolist(), \n    limits = (5, 13.5), \n    minor_breaks = False)\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nSimilarly we could remove all breaks entirely.\n\nplot = (\n  scat_plot + scale_y_continuous(breaks = False)\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nA more typical scenario would be to keep the breaks, because we want to display the ticks and their lables, but remove the grid lines. Somewhat confusingly the position of grid lines are controlled by a scale but preventing these from being displayed requires changing the theme. The theme controls the way in which non-data components are displayed – we’ll look at how these can be customized later. For now, though, here’s an example of turning off the display of all grid lines for major and minor breaks for both axes.\n\nfrom plotnine import theme, element_blank\nplot = (\n  scat_plot + \n  scale_y_continuous(breaks = np.arange(4, 14, 2), limits = (4, 14)) + \n  theme(panel_grid = element_blank())\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nBy default, the scales are expanded by 5% of the range on either side. We can add or reduce the space as follows.\n\nplot = (\n  scat_plot + \n  scale_x_continuous(expand = (0.01, 0)) + \n  scale_y_continuous(expand = (0.25, 0))\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nHere expand = argument refers to multiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) : Do not expand.\n(0, 1) : Expand lower and upper limits by 1 unit.\n(1, 0) : Expand lower and upper limits by 100%.\n(0, 0, 0, 0) : Do not expand, as (0, 0).\n(0, 0, 0, 1) : Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) : Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) : Expand upper limit by 10% plus 2 units.\n\nHere we only added 1% (0.01) of the range of NPI values on either side along the x axis but we added 25% (0.25) of the range of ESR1 expression on either side along the y axis.\n\n\nColours\nThe colour asthetic is used with a categorical variable, ER_status, in the scatter plots we’ve been customizing. The default colour scale used by ggplot for categorical variables is scale_colour_discrete. We can manually set the colours we wish to use using scale_colour_manual instead.\n\nfrom plotnine import scale_colour_manual  \nplot = (\n  ggplot(\n    data = metabric, \n    mapping = aes(x = \"Nottingham_prognostic_index\", y = \"ESR1\", colour = \"ER_status\")) + \n  geom_point(size = 0.6, alpha = 0.5) + \n  geom_smooth(method = \"lm\") + scale_colour_manual(values = [\"dodgerblue\", \"firebrick\"])\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nThe following figure displays the names of the colors available to use in the scale_colour_manual() function in plotnine. These color names can be directly used to customize the appearance of your plots.\n\n\n\n\n\n\n\n\n\nTo view the list of available color names, you can also refer to the matplotlib color documentation, as plotnine uses matplotlib’s color names for setting custom colors in plots.\nSetting colours manually is ok when we only have two or three categories but when we have a larger number it would be handy to be able to choose from a selection of carefully-constructed colour palettes. Helpfully, ggplot provides access to the ColorBrewer palettes through the functions scale_colour_brewer() and scale_fill_brewer().\n\nfrom plotnine import scale_colour_brewer\nscat_plot = (\n  ggplot(\n    data = metabric, \n    mapping = aes(x = \"Nottingham_prognostic_index\", y = \"ESR1\", colour = \"3-gene_classifier\")) + \n  geom_point(size = 0.6, alpha = 0.5, na_rm = True) + \n  geom_smooth(method = \"lm\") + \n  scale_colour_brewer(type = \"qualitative\", palette = \"Set1\")\n  )\nscat_plot.draw()  \n\n\n\n\n\n\n\n\nLook at the help page for scale_colour_brewer to see what other colour palettes are available and visit the ColorBrewer website to see what these look like.\nInterestingly, you can set other attributes other than just the colours at the same time.\n\n# remove legend title for colour now that the labels are self-explanatory\nfrom plotnine import labs\nscat_plot = (\n  ggplot(\n    data = metabric, \n    mapping = aes(x = \"Nottingham_prognostic_index\", y = \"ESR1\", colour = \"ER_status\")) + \n  geom_point(size = 0.6, alpha = 0.5) + \n  geom_smooth(method = \"lm\") + \n  scale_colour_manual(values = [\"dodgerblue\", \"firebrick\"], labels = [\"ER-negative\", \"ER-positive\"]) + \n  labs(colour = '')\n  )\nscat_plot.draw()  \n\n\n\n\n\n\n\n\nWe have applied our own set of mappings from categories in the data to aesthetic values.\nFor continuous variables we may wish to be able to change the colours used in the colour gradient. To demonstrate this we’ll use the Nottingham prognostic index (NPI) values to colour points in the scatter plot of ESR1 vs GATA3 expression on a continuous scale.\n\nplot = (\n  ggplot(\n    data = metabric, \n    mapping = aes(x = \"GATA3\", y = \"ESR1\", colour = \"Nottingham_prognostic_index\")) + \n  geom_point(size = 0.5, na_rm = True)\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nHigher NPI scores correspond to worse prognosis and lower chance of 5 year survival. We’ll emphasize those points on the scatter plot by adjusting our colour scale.\n\nfrom plotnine import scale_colour_gradient, scale_colour_gradient2\nplot = (\n  ggplot(\n    data = metabric, \n    mapping = aes(x = \"GATA3\", y = \"ESR1\", colour = \"Nottingham_prognostic_index\")) + \n  geom_point(size = 0.75, na_rm = True) + \n  scale_colour_gradient(low = \"white\", high = \"firebrick\")\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nIn some cases it might make sense to specify two colour gradients either side of a mid-point.\n\nplot = (\n  ggplot(\n    data = metabric, \n    mapping = aes(x = \"GATA3\", y = \"ESR1\", colour = \"Nottingham_prognostic_index\")) + \n  geom_point(size = 0.75, na_rm = True) + \n  scale_colour_gradient2(low = \"dodgerblue\", mid = \"#808080\", high = \"firebrick\", midpoint = 4.5)\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nAs before we can override the default labels and other aspects of the colour scale within the scale function.\n\nplot = (\n  ggplot(\n    data = metabric, \n    mapping = aes(x = \"GATA3\", y = \"ESR1\", colour = \"Nottingham_prognostic_index\")) + \n  geom_point(size = 0.75, na_rm = True) + \n  scale_colour_gradient(\n    low = \"lightblue\", high = \"darkblue\", name = \"NPI Values\", \n    breaks = np.arange(2,7), limits = (1.5, 6.5))\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\n\n\nThemes\nThemes can be used to customize non-data components of a plot. Let’s create a plot showing the expression of estrogen receptor alpha (ESR1) for each of the Integrative cluster breast cancer subtypes.\n\n# plot the ESR1 expression for each integrative cluster\nintclust_plot = (\n  ggplot(data = metabric) + \n  geom_boxplot(aes(x = \"Integrative_cluster\", y = \"ESR1\", fill = \"Integrative_cluster\")) + \n  labs(x = \"Integrative cluster\", y = \"ESR1 expression\")\n  )\nintclust_plot.draw()  \n\n\n\n\n\n\n\n\nThe default theme has the characteristic grey background which isn’t particularly suitable for printing on paper. We can change to one of a number of alternative themes available in the ggplot2 package, e.g. the black and white theme.\n\nfrom plotnine import theme_bw\nplot = (intclust_plot + theme_bw())\nplot.draw()  \n\n\n\n\n\n\n\n\nEach of these themes is really just a collection of attributes relating to how various non-data elements of the plot will be displayed. We can override any of these individual settings using the theme() function. A look at the help page (help(plotnine.theme)) shows that there are a very large number of settings that you can change. The following example demonstrates a few of these.\n\nplot = (\n  intclust_plot + \n  theme_bw() + \n  theme(\n    panel_grid_major_x = element_blank(), \n    axis_ticks_major_x = element_blank(), \n    legend_position = \"none\")\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nHere’s another example that also involves customizing the labels, scales and colours.\n\nfrom plotnine import scale_fill_manual, element_line, element_text\nplot = (\n  ggplot(data = metabric) + \n  geom_bar(aes(x = \"3-gene_classifier\", fill = \"ER_status\")) + \n  scale_y_continuous(limits = (0, 700), breaks = np.arange(0, 800, 100), expand = (0,0)) + \n  scale_fill_manual(values = [\"firebrick\", \"dodgerblue\"]) + \n  labs(x = '', y = \"samples\", fill = \"ER status\") + \n  theme_bw() + \n  theme(\n    panel_border = element_blank(), \n    panel_grid = element_blank(), \n    axis_ticks_major_x = element_blank(), \n    axis_text_x = element_text(angle = 45, hjust = 1, vjust = 1), \n    axis_line_y = element_line(), \n    axis_ticks_length = 8, \n    legend_position = \"bottom\")\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\n\n\nPosition adjustments\nAll geoms in ggplot have a position adjustment that can be set using the position argument. This has different effects for different types of plot but essentially this resolves how overlapping geoms are displayed.\nFor example, let’s consider the stacked bar plot we created earlier showing the numbers of patients in each of the 3-gene classifications subdivided by ER status. The default position value for geom_bar() is “stack” which is why the plot is shown as a stacked bar chart. An alternative way of representing these data would be to show separate bars for each ER status side-by-side by setting position = \"dodge\".\n\nplot = (\n  ggplot(data = metabric) + \n  geom_bar(aes(x = \"3-gene_classifier\", fill = \"ER_status\"), position = \"dodge\") + \n  scale_y_continuous(limits = (0, 700), breaks = np.arange(0, 800, 100), expand = (0,0)) + \n  scale_fill_manual(values = [\"firebrick\", \"dodgerblue\"]) + \n  labs(x = '', y = \"samples\", fill = \"ER status\") + \n  theme_bw() + \n  theme(\n    panel_border = element_blank(), \n    panel_grid = element_blank(), \n    axis_ticks_major_x = element_blank(), \n    axis_text_x = element_text(angle = 45, hjust = 1, vjust = 1), \n    axis_line_y = element_line(), axis_ticks_length = 8)\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nAnother position adjustment we’ve come across is geom_jitter(), which is just a convenient shortcut for geom_point(position = \"jitter\"). A variation on this, position_jitterdodge(), comes in handy when we are overlaying points on top of a box plot. We show an example of just such a plot in which first use postion = \"jitter\".\n\nfrom plotnine import scale_color_brewer, theme_minimal\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"3-gene_classifier\", y = \"ESR1\", colour = \"PR_status\")) + \n  geom_boxplot() + \n  geom_point(position = \"jitter\", size = 0.5, alpha = 0.3) + \n  labs(x = \"3-gene classification\", y = \"ESR1 expression\", colour = \"PR status\") + \n  scale_color_brewer(type = \"qualitative\", palette = \"Set1\") + \n  theme_minimal() + \n  theme(\n    panel_grid_major_x = element_blank(), \n    axis_text_x = element_text(angle = 45, hjust = 1, vjust = 1), \n    axis_ticks_major_x = element_blank())\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nThe PR-negative and PR-positive points have distinct colours but are overlapping in a way that is aesthetically displeasing. What we want is for the points to have both jitter and to be dodged in the same way as the boxes. With position_jitterdodge() we get a better looking plot.\n\nfrom plotnine import position_jitterdodge\nplot = (\n  ggplot(data = metabric, mapping = aes(x = \"3-gene_classifier\", y = \"ESR1\", colour = \"PR_status\")) + \n  geom_boxplot() + \n  geom_point(position = position_jitterdodge(), size = 0.5, alpha = 0.3) + \n  labs(x = \"3-gene classification\", y = \"ESR1 expression\", colour = \"PR status\") + \n  scale_color_brewer(type = \"qualitative\", palette = \"Set1\") + \n  theme_minimal() + \n  theme(\n    panel_grid_major_x = element_blank(), \n    axis_text_x = element_text(angle = 45, hjust = 1, vjust = 1), \n    axis_ticks_major_x = element_blank())\n  )\nplot.draw()  \n\n\n\n\n\n\n\n\nThis concludes the visualization section and the Introduction to Python materials. By now, you should be able to pre-process data, analyze it to uncover insights, and finally create aesthetically pleasing, publication-worthy plots. These skills will equip you with a solid foundation in data manipulation and visualization, enabling you to communicate your findings effectively through both analysis and visual storytelling."
  },
  {
    "objectID": "vignettes/3_Data_manipulation.html",
    "href": "vignettes/3_Data_manipulation.html",
    "title": "Data Manipulation with pandas",
    "section": "",
    "text": "In this section, we will explore various data manipulation and analysis techniques using the Pandas library. We’ll begin by learning how to set, update, or replace data within a DataFrame. Then, we’ll cover how to handle missing data effectively. Next, we will delve into grouping data, transforming it, and joining different datasets to prepare for downstream analysis. Finally, we’ll look at generating summary statistics to gain a deeper understanding of the underlying data.\nWe will use the following DataFrames in this section.\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame(\n    {\n        \"A\": np.random.uniform(low=0, high=1, size=12),\n        \"B\": pd.date_range(start=\"20230102\", periods=12),\n        \"C\": pd.Series(range(1, 13), index=[\"R1\", \"R2\", \"R3\", \"R4\", \"R5\", \"R6\", \"R7\", \"R8\" ,\"R9\", \"R10\", \"R11\", \"R12\"]),\n        \"D\": np.random.randint(1, high=100, size=12),\n        \"E\": pd.Categorical([\"red\", \"green\", \"blue\", \"white\", \"pink\", \"brown\", \"black\", \"purple\", \"orange\", \"grey\", \"violet\", \"yellow\"]),\n        \"F\": \"foo\",\n    }, index = [\"R1\", \"R2\", \"R3\", \"R4\", \"R5\", \"R6\", \"R7\", \"R8\" ,\"R9\", \"R10\", \"R11\", \"R12\"]\n)\n\ncms = pd.read_csv('data/patient_satisfaction/cms_hospital_patient_satisfaction.csv')"
  },
  {
    "objectID": "vignettes/3_Data_manipulation.html#statistics-on-data",
    "href": "vignettes/3_Data_manipulation.html#statistics-on-data",
    "title": "Data Manipulation with pandas",
    "section": "Statistics on data",
    "text": "Statistics on data\nThe pandas library provides a wide range of statistical functions and methods to compute summary statistics for your data. Below provides some of the key statistical measures you can compute using this library.\nConsider the following dataset which contains 15 rows. Each row contains 8 features (columns).\n\n\ncms\n\n\n\n\n\n\n\n\nID\nFacility Name\nCounty\nHospital Type\nStar Rating\nNo of Surveys\nResponse Rate\nOverall Rating\n\n\n\n\n0\n50424\nSCRIPPS GREEN HOSPITAL\nSAN DIEGO\nAcute Care Hospital\n4\n3110\n41\n5\n\n\n1\n140103\nST BERNARD HOSPITAL\nCOOK\nAcute Care Hospital\n1\n264\n6\n2\n\n\n2\n100051\nSOUTH LAKE HOSPITAL\nLAKE\nAcute Care Hospital\n2\n1382\n20\n2\n\n\n3\n40062\nMERCY HOSPITAL FORT SMITH\nSEBASTIAN\nAcute Care Hospital\n3\n2506\n35\n3\n\n\n4\n440048\nBAPTIST MEMORIAL HOSPITAL\nSHELBY\nAcute Care Hospital\n2\n1799\n18\n2\n\n\n5\n450011\nST JOSEPH REGIONAL HEALTH CENTER\nBRAZOS\nAcute Care Hospital\n3\n1379\n24\n3\n\n\n6\n151317\nGREENE COUNTY GENERAL HOSPITAL\nGREENE\nCritical Access Hospital\n3\n114\n22\n3\n\n\n7\n61327\nSOUTHWEST MEMORIAL HOSPITAL\nMONTEZUMA\nCritical Access Hospital\n4\n247\n34\n3\n\n\n8\n490057\nSENTARA GENERAL HOSPITAL\nVIRGINIA BEACH\nAcute Care Hospital\n4\n619\n32\n3\n\n\n9\n110215\nPIEDMONT FAYETTE HOSPITAL\nFAYETTE\nAcute Care Hospital\n2\n1714\n21\n2\n\n\n10\n50704\nMISSION COMMUNITY HOSPITAL\nLOS ANGELES\nAcute Care Hospital\n3\n241\n14\n3\n\n\n11\n100296\nDOCTORS HOSPITAL\nMIAMI-DADE\nAcute Care Hospital\n4\n393\n24\n3\n\n\n12\n440003\nSUMNER REGIONAL MEDICAL CENTER\nSUMNER\nAcute Care Hospital\n4\n680\n35\n2\n\n\n13\n501339\nWHIDBEY GENERAL HOSPITAL\nISLAND\nCritical Access Hospital\n3\n389\n29\n3\n\n\n14\n50116\nNORTHRIDGE MEDICAL CENTER\nLOS ANGELES\nAcute Care Hospital\n3\n1110\n20\n2\n\n\n\n\n\n\n\n\nYou can compute the mean of a Series (a single column of data) or a DataFrame (a table of data) using the .mean() method.\n\nCalculate the mean value for a certain column:\n\ncms['No of Surveys'].mean()\n\n1063.1333333333334\n\n\nCalculate the mean value for each column:\n\ncms.mean(numeric_only = True)\n\nID                211738.200000\nStar Rating            3.000000\nNo of Surveys       1063.133333\nResponse Rate         25.000000\nOverall Rating         2.733333\ndtype: float64\n\n\nCalculate the mean value for each row:\n\ncms.mean(axis=1, numeric_only = True)\n\n0      10716.8\n1      28075.2\n2      20291.4\n3       8521.8\n4      88373.8\n5      90284.0\n6      30291.8\n7      12323.0\n8      98143.0\n9      22390.8\n10     10193.0\n11     20144.0\n12     88144.8\n13    100352.6\n14     10250.2\ndtype: float64\n\n\nThe median is the middle value of a dataset when the values are arranged in ascending order. It is not affected by extreme values (outliers) and is often used to describe the central tendency of data. In Pandas, you can compute the median using the .median() method.\n\ncms.median(numeric_only = True)\n\nID                110215.0\nStar Rating            3.0\nNo of Surveys        680.0\nResponse Rate         24.0\nOverall Rating         3.0\ndtype: float64\n\n\nThe standard deviation measures the amount of variation or dispersion in a dataset. A lower standard deviation indicates that data points are close to the mean, while a higher standard deviation indicates greater variability. In Pandas, you can compute the standard deviation using the .std() method.\n\ncms.std(numeric_only = True)\n\nID                188317.557348\nStar Rating            0.925820\nNo of Surveys        909.054600\nResponse Rate          9.296697\nOverall Rating         0.798809\ndtype: float64\n\n\nVariance quantifies how much individual data points deviate from the mean. It is the square of the standard deviation. In Pandas, you can compute the variance using the .var() method.\n\ncms.var(numeric_only = True)\n\nID                3.546350e+10\nStar Rating       8.571429e-01\nNo of Surveys     8.263803e+05\nResponse Rate     8.642857e+01\nOverall Rating    6.380952e-01\ndtype: float64\n\n\nYou can also compute the sum of values using .sum() and count the total number of non-missing values using .count().\n\ncms.sum(numeric_only = True)\n\nID                3176073\nStar Rating            45\nNo of Surveys       15947\nResponse Rate         375\nOverall Rating         41\ndtype: int64\n\n\n\ncms.count()\n\nID                15\nFacility Name     15\nCounty            15\nHospital Type     15\nStar Rating       15\nNo of Surveys     15\nResponse Rate     15\nOverall Rating    15\ndtype: int64\n\n\n\ncms[\"Overall Rating\"].sum()\n\n41\n\n\n\nHere is a quick reference summary table of common useful functions.\n\n\n\nFunction\nDescription\n\n\n\n\ncount\nNumber of non-NA observations\n\n\nsum\nSum of values\n\n\nmean\nMean of values\n\n\nmedian\nArithmetic median of values\n\n\nmin\nMinimum\n\n\nmax\nMaximum\n\n\nmode\nMode\n\n\nabs\nAbsolute Value\n\n\nprod\nProduct of values\n\n\nstd\nBessel-corrected sample standard deviation\n\n\nvar\nUnbiased variance\n\n\nsem\nStandard error of the mean\n\n\nskew\nSample skewness (3rd moment)\n\n\nkurt\nSample kurtosis (4th moment)\n\n\nquantile\nSample quantile (value at %)\n\n\ncumsum\nCumulative sum\n\n\ncumprod\nCumulative product\n\n\ncummax\nCumulative maximum\n\n\ncummin\nCumulative minimum\n\n\n\nAnother useful function to count the frequency of values is shown below.\nConsider the DataFrame,\n\nd = {\n  \"a\": pd.Series(np.random.randint(0, 5, size=10)),\n  \"b\": pd.Series(np.random.randint(-3, 3, size=10))\n}\ndf2 = pd.DataFrame(d)\ndf2\n\n\n\n\n\n\n\n\na\nb\n\n\n\n\n0\n4\n-2\n\n\n1\n1\n-2\n\n\n2\n3\n-1\n\n\n3\n0\n-2\n\n\n4\n0\n-3\n\n\n5\n2\n-2\n\n\n6\n4\n-1\n\n\n7\n1\n-1\n\n\n8\n4\n0\n\n\n9\n1\n-1\n\n\n\n\n\n\n\n\nFrequency of values in all rows:\n\ndf2.value_counts()\n\na  b \n1  -1    2\n0  -3    1\n   -2    1\n1  -2    1\n2  -2    1\n3  -1    1\n4  -2    1\n   -1    1\n    0    1\nName: count, dtype: int64\n\n\nFrequency of values in a single column:\n\ndf2['a'].value_counts()\n\na\n4    3\n1    3\n0    2\n3    1\n2    1\nName: count, dtype: int64\n\n\n\nAdditionally, two powerful functions, agg and transform, allow you to perform calculations and transformations on DataFrames. These two functions applies user defined function that reduces or broadcasts its results, repectively. However, these functions serve different purposes and have distinct use cases and we will explore these in detail later."
  },
  {
    "objectID": "vignettes/3_Data_manipulation.html#missing-data",
    "href": "vignettes/3_Data_manipulation.html#missing-data",
    "title": "Data Manipulation with pandas",
    "section": "Missing data",
    "text": "Missing data\nHandling missing values is an essential part of data pre-processing and analysis in Pandas. Missing values can arise due to various reasons, such as data collection errors, incomplete data or sensor failures.\nLet’s create a DataFrame with missing values.\nConsider the following DataFrame:\n\ndf = pd.DataFrame(np.random.randn(6, 4), index=['a', 'b', 'c', 'd', 'e', 'f'], columns=list(\"ABCD\"))\n\ndates = pd.date_range(\"20130101\", periods=6)\ndf[\"E\"] = dates\n\ns1 = pd.Series([1, 2, 3, 4, 5, 6], index=['a', 'b', 'c', 'd', 'e', 'f'])\ndf[\"F\"] = s1\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01\n1\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02\n2\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6\n\n\n\n\n\n\n\nRe-indexing allows you to change/add/delete the index on a specified axis. This returns a copy of the data which includes several missing values.\n\ndf1 = df.reindex(index=['a', 'b', 'c', 'h', 'd', 'e', 'f', 'g'], columns=list(df.columns) + [\"G\", \"H\"])\ndf1.loc['c' : 'f', \"G\"] = 1\ndf1.loc['h','C'] = 0.634336\ndf1\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01\n1.0\nNaN\nNaN\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02\n2.0\nNaN\nNaN\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\nNaN\n\n\nh\nNaN\nNaN\n0.634336\nNaN\nNaT\nNaN\n1.0\nNaN\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\nNaN\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\nNaN\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\nNaN\n\n\ng\nNaN\nNaN\nNaN\nNaN\nNaT\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\nDetecting missing values\nPandas provides several methods for detecting and dealing with missing values.\nisna() and isnull() methods return a DataFrame of the same shape as the input, with Boolean values indicating whether each element is missing (True) or not (False).\n\npd.isna(df1)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\n\n\nb\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\n\n\nc\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\nh\nTrue\nTrue\nFalse\nTrue\nTrue\nTrue\nFalse\nTrue\n\n\nd\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\ne\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\nf\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\ng\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\n\n\n\n\n\n\n\npd.isnull(df1)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\n\n\nb\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\n\n\nc\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\nh\nTrue\nTrue\nFalse\nTrue\nTrue\nTrue\nFalse\nTrue\n\n\nd\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\ne\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\nf\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\ng\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\n\n\n\n\n\n\nnotna() and notnull() methods are the opposite of isna()and isnull(). They return True for non-missing values and False for missing values.\n\npd.notna(df1)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\nFalse\n\n\nb\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\nFalse\n\n\nc\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\n\n\nh\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\nd\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\n\n\ne\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\n\n\nf\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\n\n\ng\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n\n\n\n\n\n\npd.notnull(df1)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\nFalse\n\n\nb\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\nFalse\n\n\nc\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\n\n\nh\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\nd\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\n\n\ne\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\n\n\nf\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\n\n\ng\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n\n\n\n\n\nCheck if a column does not contain missing values:\n\ndf1[\"G\"].notna()\n\na    False\nb    False\nc     True\nh     True\nd     True\ne     True\nf     True\ng    False\nName: G, dtype: bool\n\n\nSubsetting rows to return rows that does not contain missing values in column G:\n\ndf1[df1[\"G\"].notna()]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\nNaN\n\n\nh\nNaN\nNaN\n0.634336\nNaN\nNaT\nNaN\n1.0\nNaN\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\nNaN\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\nNaN\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\nNaN\n\n\n\n\n\n\n\nThe info() method provides a summary of the DataFrame, including the count of non-null values in each column.\n\ndf1.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 8 entries, a to g\nData columns (total 8 columns):\n #   Column  Non-Null Count  Dtype         \n---  ------  --------------  -----         \n 0   A       6 non-null      float64       \n 1   B       6 non-null      float64       \n 2   C       7 non-null      float64       \n 3   D       6 non-null      float64       \n 4   E       6 non-null      datetime64[ns]\n 5   F       6 non-null      float64       \n 6   G       5 non-null      float64       \n 7   H       0 non-null      float64       \ndtypes: datetime64[ns](1), float64(7)\nmemory usage: 876.0+ bytes\n\n\n\n\nHandling missing values\nOnce you’ve detected missing values, you can choose from several strategies to handle them.\nConsider the following DataFrame,\n\ndf1\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01\n1.0\nNaN\nNaN\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02\n2.0\nNaN\nNaN\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\nNaN\n\n\nh\nNaN\nNaN\n0.634336\nNaN\nNaT\nNaN\n1.0\nNaN\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\nNaN\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\nNaN\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\nNaN\n\n\ng\nNaN\nNaN\nNaN\nNaN\nNaT\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\nDropping missing values\nConsider the following DataFrame for this example,\n\n# dataframe excluding column H\ndf_without_colH = df1.loc[:, \"A\":\"G\"]   \ndf_without_colH\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01\n1.0\nNaN\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02\n2.0\nNaN\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\n\n\nh\nNaN\nNaN\n0.634336\nNaN\nNaT\nNaN\n1.0\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\n\n\ng\nNaN\nNaN\nNaN\nNaN\nNaT\nNaN\nNaN\n\n\n\n\n\n\n\n\nDropping missing values by rows\n\nDrop the rows where at least one element is missing:\n\ndf_without_colH.dropna()\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\n\n\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\n\n\n\n\n\n\n\nDrop rows that have all missing data:\n\ndf_without_colH.dropna(how=\"all\")\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01\n1.0\nNaN\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02\n2.0\nNaN\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\n\n\nh\nNaN\nNaN\n0.634336\nNaN\nNaT\nNaN\n1.0\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\n\n\n\n\n\n\n\nDrop rows that have any missing data:\n\ndf_without_colH.dropna(how=\"any\")\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\n\n\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\n\n\n\n\n\n\n\nKeep only the rows with at least 2 non-NA values:\n\ndf_without_colH.dropna(thresh=2)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01\n1.0\nNaN\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02\n2.0\nNaN\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\n\n\nh\nNaN\nNaN\n0.634336\nNaN\nNaT\nNaN\n1.0\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\n\n\n\n\n\n\n\n\n\n\nDropping missing values by columns\n\nConsider the following DataFrame for the remaining examples,\n\ndf1.loc['g','C'] = 0.877525\ndf1\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01\n1.0\nNaN\nNaN\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02\n2.0\nNaN\nNaN\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\nNaN\n\n\nh\nNaN\nNaN\n0.634336\nNaN\nNaT\nNaN\n1.0\nNaN\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\nNaN\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\nNaN\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\nNaN\n\n\ng\nNaN\nNaN\n0.877525\nNaN\nNaT\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nDrop the columns where at least one element is missing:\n\ndf1.dropna(axis='columns') # same as axis=1\n\n\n\n\n\n\n\n\nC\n\n\n\n\na\n-1.342388\n\n\nb\n-1.496915\n\n\nc\n-1.278078\n\n\nh\n0.634336\n\n\nd\n0.590552\n\n\ne\n-0.238185\n\n\nf\n-0.987946\n\n\ng\n0.877525\n\n\n\n\n\n\n\nDrop columns that have all missing data:\n\ndf1.dropna(how=\"all\", axis=1)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01\n1.0\nNaN\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02\n2.0\nNaN\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\n\n\nh\nNaN\nNaN\n0.634336\nNaN\nNaT\nNaN\n1.0\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\n\n\ng\nNaN\nNaN\n0.877525\nNaN\nNaT\nNaN\nNaN\n\n\n\n\n\n\n\nDrop columns that have any missing data (shown as NaN):\n\ndf1.dropna(how=\"any\", axis=1)\n\n\n\n\n\n\n\n\nC\n\n\n\n\na\n-1.342388\n\n\nb\n-1.496915\n\n\nc\n-1.278078\n\n\nh\n0.634336\n\n\nd\n0.590552\n\n\ne\n-0.238185\n\n\nf\n-0.987946\n\n\ng\n0.877525\n\n\n\n\n\n\n\nKeep only the columns with at least 6 non-NA values:\n\ndf1.dropna(thresh=6, axis=1)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01\n1.0\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02\n2.0\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n\n\nh\nNaN\nNaN\n0.634336\nNaN\nNaT\nNaN\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n\n\ng\nNaN\nNaN\n0.877525\nNaN\nNaT\nNaN\n\n\n\n\n\n\n\nDefine in which columns to look for missing values:\n\ndf1.dropna(subset=[\"B\", \"G\"])\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\nNaN\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\nNaN\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\nNaN\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\nNaN\n\n\n\n\n\n\n\n\n\n\n\nFilling missing values\nYou can fill missing values with a specific value or a calculated value using the fillna() method.\nConsider the following DataFrame,\n\ndf1\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01\n1.0\nNaN\nNaN\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02\n2.0\nNaN\nNaN\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\nNaN\n\n\nh\nNaN\nNaN\n0.634336\nNaN\nNaT\nNaN\n1.0\nNaN\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\nNaN\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\nNaN\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\nNaN\n\n\ng\nNaN\nNaN\n0.877525\nNaN\nNaT\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\nReplace missing values with a scalar value\n\nFill missing values with 0:\n\ndf1.fillna(0)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01 00:00:00\n1.0\n0.0\n0.0\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02 00:00:00\n2.0\n0.0\n0.0\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03 00:00:00\n3.0\n1.0\n0.0\n\n\nh\n0.000000\n0.000000\n0.634336\n0.000000\n0\n0.0\n1.0\n0.0\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04 00:00:00\n4.0\n1.0\n0.0\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05 00:00:00\n5.0\n1.0\n0.0\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06 00:00:00\n6.0\n1.0\n0.0\n\n\ng\n0.000000\n0.000000\n0.877525\n0.000000\n0\n0.0\n0.0\n0.0\n\n\n\n\n\n\n\nFill missing values with a scalar, but limit the number of column fills to 2:\n\ndf1.fillna(12, axis='columns', limit=2)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01 00:00:00\n1.0\n12\n12\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02 00:00:00\n2.0\n12\n12\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03 00:00:00\n3.0\n1.0\n12\n\n\nh\n12\n12\n0.634336\nNaN\nNaT\nNaN\n1.0\nNaN\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04 00:00:00\n4.0\n1.0\n12\n\n\ne\n-0.045015\n-0.37272\n-0.238185\n0.894139\n2013-01-05 00:00:00\n5.0\n1.0\n12\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06 00:00:00\n6.0\n1.0\n12\n\n\ng\n12\n12\n0.877525\nNaN\nNaT\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n\n\nFill gaps forward or backward\n\nPropogate missing values forward:\n\ndf1.ffill() # ffill ≡ pad ≡ fillna(method='ffill')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01\n1.0\nNaN\nNaN\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02\n2.0\nNaN\nNaN\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\nNaN\n\n\nh\n-0.861442\n0.520604\n0.634336\n1.047847\n2013-01-03\n3.0\n1.0\nNaN\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\nNaN\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\nNaN\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\nNaN\n\n\ng\n0.040418\n-0.313288\n0.877525\n-2.225818\n2013-01-06\n6.0\n1.0\nNaN\n\n\n\n\n\n\n\nPropogate missing values backward along rows:\n\ndf1.bfill() # bfill ≡ backfill ≡ fillna(method='bfill')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01\n1.0\n1.0\nNaN\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02\n2.0\n1.0\nNaN\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\nNaN\n\n\nh\n0.568559\n0.852508\n0.634336\n-0.193826\n2013-01-04\n4.0\n1.0\nNaN\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\nNaN\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\nNaN\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\nNaN\n\n\ng\nNaN\nNaN\n0.877525\nNaN\nNaT\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n\n\nFill with a Pandas object\n\nFill the missing values of a column with the mean of the column:\n\ndf1.fillna(df1.mean())\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01 00:00:00\n1.0\n1.0\nNaN\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02 00:00:00\n2.0\n1.0\nNaN\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03 00:00:00\n3.0\n1.0\nNaN\n\n\nh\n-0.078429\n-0.272250\n0.634336\n-0.338049\n2013-01-03 12:00:00\n3.5\n1.0\nNaN\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04 00:00:00\n4.0\n1.0\nNaN\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05 00:00:00\n5.0\n1.0\nNaN\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06 00:00:00\n6.0\n1.0\nNaN\n\n\ng\n-0.078429\n-0.272250\n0.877525\n-0.338049\n2013-01-03 12:00:00\n3.5\n1.0\nNaN\n\n\n\n\n\n\n\nFill only a subset of the columns using the corresponding median\n\ndf1.fillna(df1.median()[\"F\":\"G\"])\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01\n1.0\n1.0\nNaN\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02\n2.0\n1.0\nNaN\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03\n3.0\n1.0\nNaN\n\n\nh\nNaN\nNaN\n0.634336\nNaN\nNaT\n3.5\n1.0\nNaN\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04\n4.0\n1.0\nNaN\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05\n5.0\n1.0\nNaN\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06\n6.0\n1.0\nNaN\n\n\ng\nNaN\nNaN\n0.877525\nNaN\nNaT\n3.5\n1.0\nNaN\n\n\n\n\n\n\n\n\n\n\nInterpolation\nThe interpolate method is used to fill in missing values with estimated values based on the surrounding data points. It’s particularly useful for time series data or datasets where values are expected to follow a pattern.\nThe interpolate method employs various interpolation techniques to estimate missing values, including linear interpolation, polynomial interpolation, and more. The specific interpolation method used depends on the kind of data and the desired behavior.\n\nLinear Interpolation: Linear interpolation is the default method used by interpolate. It estimates missing values by drawing a straight line between two adjacent known data points and filling in the missing value with a value along that line. This method is suitable for data that appears to change linearly over time or between data points.\nPolynomial Interpolation: Polynomial interpolation uses higher-degree polynomial functions to estimate missing values. This method can capture more complex relationships between data points but may be susceptible to overfitting if not used carefully.\nTime-Based Interpolation: When working with time series data, you can use the method parameter to specify time-based interpolation methods such as ‘time’, ‘index’, or ‘values’. These methods consider the time or index values to estimate missing values.\n\nHere’s an example using linear interpolation:\n\ndf1.interpolate()\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\n\n\n\n\na\n0.357358\n-0.195442\n-1.342388\n-0.253798\n2013-01-01 00:00:00\n1.0\nNaN\nNaN\n\n\nb\n-0.530454\n-2.125161\n-1.496915\n-1.296838\n2013-01-02 00:00:00\n2.0\nNaN\nNaN\n\n\nc\n-0.861442\n0.520604\n-1.278078\n1.047847\n2013-01-03 00:00:00\n3.0\n1.0\nNaN\n\n\nh\n-0.146441\n0.686556\n0.634336\n0.427011\n2013-01-03 12:00:00\n3.5\n1.0\nNaN\n\n\nd\n0.568559\n0.852508\n0.590552\n-0.193826\n2013-01-04 00:00:00\n4.0\n1.0\nNaN\n\n\ne\n-0.045015\n-0.372720\n-0.238185\n0.894139\n2013-01-05 00:00:00\n5.0\n1.0\nNaN\n\n\nf\n0.040418\n-0.313288\n-0.987946\n-2.225818\n2013-01-06 00:00:00\n6.0\n1.0\nNaN\n\n\ng\n0.040418\n-0.313288\n0.877525\n-2.225818\n2013-01-06 00:00:00\n6.0\n1.0\nNaN"
  },
  {
    "objectID": "vignettes/3_Data_manipulation.html#grouping-data",
    "href": "vignettes/3_Data_manipulation.html#grouping-data",
    "title": "Data Manipulation with pandas",
    "section": "Grouping data",
    "text": "Grouping data\nThe groupby function is a powerful feature within pandas that allows you to group and aggregate data in a DataFrame based on one or more columns. This can be especially useful when you want to perform summary statistics, calculations, or transformations on subsets of your data based on certain criteria. It involves one or more of the following steps:\n\nSplitting: The first step in a groupby operation is to split the DataFrame into groups based on the values in one or more columns. You specify the column(s) by which you want to group your data. This column is often referred to as the “key” or “grouping column”. Each unique value in the grouping column(s) forms a group, and the rows in the DataFrame are distributed among these groups.\nApplying a Function: After splitting the data into groups, you can apply various aggregation or transformation functions to each group. These functions are typically applied to one or more columns in each group. Common aggregation functions include sum, mean, count, min, max, and more. You can also apply custom functions or perform complex operations on the grouped data.\n\nAggregation: compute a summary statistic (or statistics) for each group. Examples: compute group sums or means, compute group size.\nTransformation: perform some group-specific computations and return a like-indexed object. Examples: standardize data (zscore) within a group, filling NAs within groups with a value derived from each group.\nFiltration: discard some groups, according to a group-wise computation that evaluates to True or False. Examples: discard data that belong to groups with only a few members, filter out data based on the group sum or mean.\n\nCombining Results: Once the specified function(s) are applied to each group, the results are combined into a new DataFrame or data structure. This final result will often have a hierarchical structure, with the grouping columns as index levels.\n\nConsider the following metabric dataset for the examples listed below.\n\n\n# Load the Metabric dataset from the URL into a DataFrame\nmetabric = pd.read_csv(\"https://zenodo.org/record/6450144/files/metabric_clinical_and_expression_data.csv\")\nmetabric\n\n\n\n\n\n\n\n\nPatient_ID\nCohort\nAge_at_diagnosis\nSurvival_time\nSurvival_status\nVital_status\nChemotherapy\nRadiotherapy\nTumour_size\nTumour_stage\n...\nIntegrative_cluster\nMutation_count\nESR1\nERBB2\nPGR\nTP53\nPIK3CA\nGATA3\nFOXA1\nMLPH\n\n\n\n\n0\nMB-0000\n1\n75.65\n140.500000\nLIVING\nLiving\nNO\nYES\n22.0\n2.0\n...\n4ER+\nNaN\n8.929817\n9.333972\n5.680501\n6.338739\n5.704157\n6.932146\n7.953794\n9.729728\n\n\n1\nMB-0002\n1\n43.19\n84.633333\nLIVING\nLiving\nNO\nYES\n10.0\n1.0\n...\n4ER+\n2.0\n10.047059\n9.729606\n7.505424\n6.192507\n5.757727\n11.251197\n11.843989\n12.536570\n\n\n2\nMB-0005\n1\n48.87\n163.700000\nDECEASED\nDied of Disease\nYES\nNO\n15.0\n2.0\n...\n3\n2.0\n10.041281\n9.725825\n7.376123\n6.404516\n6.751566\n9.289758\n11.698169\n10.306115\n\n\n3\nMB-0006\n1\n47.68\n164.933333\nLIVING\nLiving\nYES\nYES\n25.0\n2.0\n...\n9\n1.0\n10.404685\n10.334979\n6.815637\n6.869241\n7.219187\n8.667723\n11.863379\n10.472181\n\n\n4\nMB-0008\n1\n76.97\n41.366667\nDECEASED\nDied of Disease\nYES\nYES\n40.0\n2.0\n...\n9\n2.0\n11.276581\n9.956267\n7.331223\n6.337951\n5.817818\n9.719781\n11.625006\n12.161961\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1899\nMB-7295\n4\n43.10\n196.866667\nLIVING\nLiving\nNO\nYES\n25.0\nNaN\n...\n3\n4.0\n9.591235\n9.935179\n7.984515\n6.753291\n6.279207\n9.207323\n11.281194\n11.337601\n\n\n1900\nMB-7296\n4\n42.88\n44.733333\nDECEASED\nDied of Disease\nNO\nYES\n20.0\nNaN\n...\n5\n6.0\n9.733986\n13.753037\n5.616082\n6.271912\n5.999093\n9.530390\n11.532033\n11.626140\n\n\n1901\nMB-7297\n4\n62.90\n175.966667\nDECEASED\nDied of Disease\nNO\nYES\n25.0\nNaN\n...\n1\n4.0\n11.053198\n10.228570\n7.478069\n6.212256\n6.192399\n9.540589\n11.482761\n11.180360\n\n\n1902\nMB-7298\n4\n61.16\n86.233333\nDECEASED\nDied of Other Causes\nNO\nNO\n25.0\nNaN\n...\n1\n15.0\n11.055114\n9.892589\n8.282737\n6.466712\n6.287254\n10.365901\n11.371176\n12.827069\n\n\n1903\nMB-7299\n4\n60.02\n201.900000\nDECEASED\nDied of Other Causes\nNO\nYES\n20.0\nNaN\n...\n10\n3.0\n10.696475\n10.227787\n5.533486\n6.180511\n6.208784\n9.749368\n10.867527\n9.847856\n\n\n\n\n1904 rows × 32 columns\n\n\n\n\n\nAggregation\nThis is primarily used for aggregating data (within groups when you use groupby). It allows you to apply one or more aggregation functions to each group and obtain a summarized result for each group.\n\nCalculate the total number of patients, categorized by cancer type.\n\nmetabric.groupby(\"Cancer_type\")[\"Patient_ID\"].count()\n\n\n\n\n\n\n\n\n\n\nPatient_ID\n\n\nCancer_type\n\n\n\n\n\nBreast\n17\n\n\nBreast Invasive Ductal Carcinoma\n1500\n\n\nBreast Invasive Lobular Carcinoma\n142\n\n\nBreast Invasive Mixed Mucinous Carcinoma\n22\n\n\nBreast Mixed Ductal and Lobular Carcinoma\n207\n\n\nMetaplastic Breast Cancer\n1\n\n\n\n\n\n\n\ncount() computes the number of non-NA values in the groups whereas size() computes the number of values in each group. To demonstrate the difference between these two methods, group the metabric dataset by 3-gene-classifier and find the number of values in each group based on Tumour_size column.\n\nmetabric.groupby(\"3-gene_classifier\")[\"Tumour_size\"].count()\n\n\n\n\n\n\n\n\n\n\nTumour_size\n\n\n3-gene_classifier\n\n\n\n\n\nER+/HER2- High Prolif\n596\n\n\nER+/HER2- Low Prolif\n615\n\n\nER-/HER2-\n287\n\n\nHER2+\n186\n\n\n\n\n\n\n\n\nmetabric.groupby(\"3-gene_classifier\")[\"Tumour_size\"].size()\n\n\n\n\n\n\n\n\n\n\nTumour_size\n\n\n3-gene_classifier\n\n\n\n\n\nER+/HER2- High Prolif\n603\n\n\nER+/HER2- Low Prolif\n619\n\n\nER-/HER2-\n290\n\n\nHER2+\n188\n\n\n\n\n\n\n\nDetermine the median age at diagnosis for each type of vital status.\n\nmetabric.groupby(\"Vital_status\")[\"Age_at_diagnosis\"].median()\n\n\n\n\n\n\n\n\n\n\nAge_at_diagnosis\n\n\nVital_status\n\n\n\n\n\nDied of Disease\n61.135\n\n\nDied of Other Causes\n70.505\n\n\nLiving\n56.740\n\n\n\n\n\n\n\nCalculate the total, mean, and standard deviation of Tumour_size for each combination of cancer type and ER status.\n\ngrouped = metabric.groupby([\"Cancer_type\", \"ER_status\"])\ngrouped[\"Tumour_size\"].agg(['sum','mean','std'])\n\n\n\n\n\n\n\n\n\nsum\nmean\nstd\n\n\nCancer_type\nER_status\n\n\n\n\n\n\n\nBreast\nNegative\n173.00\n43.250000\n17.951323\n\n\nPositive\n289.00\n22.230769\n13.417363\n\n\nBreast Invasive Ductal Carcinoma\nNegative\n11241.77\n28.388308\n19.209870\n\n\nPositive\n27468.87\n25.154643\n12.961027\n\n\nBreast Invasive Lobular Carcinoma\nNegative\n588.80\n29.440000\n19.155277\n\n\nPositive\n3579.00\n30.075630\n19.792221\n\n\nBreast Invasive Mixed Mucinous Carcinoma\nNegative\n40.00\n40.000000\nNaN\n\n\nPositive\n518.00\n25.900000\n15.403007\n\n\nBreast Mixed Ductal and Lobular Carcinoma\nNegative\n326.00\n25.076923\n13.174860\n\n\nPositive\n4832.00\n25.298429\n12.900426\n\n\nMetaplastic Breast Cancer\nNegative\n16.00\n16.000000\nNaN\n\n\n\n\n\n\n\n\n\n\nTransformation\nThis is used for element-wise transformations. It applies a given function to each element in a DataFrame or Series and returns a new Series with the same index as the original DataFrame. This function is commonly used when you want to broadcast a computed value back to the original DataFrame, maintaining the original shape of the data.\n\nCompute the difference between adjacent values of expression of ESR1 within each group of cancer types.\n\nmetabric.groupby(\"Cancer_type\")[\"ESR1\"].diff()\n\n\n\n\n\n\n\n\n\n\nESR1\n\n\n\n\n0\nNaN\n\n\n1\n1.117242\n\n\n2\n-0.005778\n\n\n3\nNaN\n\n\n4\n0.871896\n\n\n...\n...\n\n\n1899\n-1.833044\n\n\n1900\n-1.556991\n\n\n1901\n1.319212\n\n\n1902\n0.001916\n\n\n1903\n-0.358639\n\n\n\n\n1904 rows × 1 columns\n\n\n\nCompute the cumulative sum of mutation count within each integrative cluster group.\n\nmetabric.groupby(\"Chemotherapy\")[\"Mutation_count\"].transform(\"cumsum\")\n\n\n\n\n\n\n\n\n\n\nMutation_count\n\n\n\n\n0\nNaN\n\n\n1\n2.0\n\n\n2\n2.0\n\n\n3\n3.0\n\n\n4\n5.0\n\n\n...\n...\n\n\n1899\n8583.0\n\n\n1900\n8589.0\n\n\n1901\n8593.0\n\n\n1902\n8608.0\n\n\n1903\n8611.0\n\n\n\n\n1904 rows × 1 columns\n\n\n\n\nConvert the survival time which is given in months to years.\n\n\nmetabric[\"Survival_time\"].transform(lambda x: x / 12)\n\n\n\n0       11.708333\n1        7.052778\n2       13.641667\n3       13.744444\n4        3.447222\n          ...    \n1899    16.405556\n1900     3.727778\n1901    14.663889\n1902     7.186111\n1903    16.825000\nName: Survival_time, Length: 1904, dtype: float64\n\n\nA lambda function in Python is a small, anonymous, and inline function. It is also known as a lambda expression or lambda notation. Lambda functions are a way to create small, one-time-use functions without needing to define them using the def keyword. Lambda functions are typically used for short, simple operations where defining a full function using def would be overly verbose.\nlambda arguments: expression\nHere’s a simple example to illustrate the use of lambda functions:\n\n# Regular function to calculate the square of a number\ndef square(x):\n    return x ** 2\n\n# Equivalent lambda function to calculate the square of a number\nsquare_lambda = lambda x: x ** 2\n\n\n\n\nFiltration\nThis is the process of selecting rows from a DataFrame based on grouping. It may either filter out entire groups, part of groups, or both.\n\nSelect the 3rd row of each group categorized based on cancer type.\n\nmetabric.groupby(\"Cancer_type\").nth(3)\n\n\n\n\n\n\n\n\nPatient_ID\nCohort\nAge_at_diagnosis\nSurvival_time\nSurvival_status\nVital_status\nChemotherapy\nRadiotherapy\nTumour_size\nTumour_stage\n...\nIntegrative_cluster\nMutation_count\nESR1\nERBB2\nPGR\nTP53\nPIK3CA\nGATA3\nFOXA1\nMLPH\n\n\n\n\n5\nMB-0010\n1\n78.77\n7.800000\nDECEASED\nDied of Disease\nNO\nYES\n31.0\n4.0\n...\n7\n4.0\n11.239750\n9.739996\n5.954311\n5.419711\n6.123056\n9.787085\n12.142178\n11.433164\n\n\n15\nMB-0050\n1\n44.64\n75.333333\nLIVING\nLiving\nYES\nYES\n33.0\n2.0\n...\n8\nNaN\n9.492446\n10.399286\n6.665170\n6.843690\n5.617014\n9.396238\n11.188134\n12.243680\n\n\n32\nMB-0102\n1\n51.38\n140.766667\nDECEASED\nDied of Disease\nYES\nYES\n40.0\n2.0\n...\n3\n4.0\n9.913163\n9.980732\n7.651020\n6.431794\n5.970082\n9.402294\n11.052930\n11.474559\n\n\n230\nMB-0365\n1\n76.84\n87.233333\nDECEASED\nDied of Disease\nNO\nYES\n15.0\n1.0\n...\n4ER+\n6.0\n8.365138\n12.345780\n5.370492\n6.046610\n6.092679\n8.708236\n10.604942\n10.728391\n\n\n429\nMB-0620\n1\n62.97\n112.800000\nLIVING\nLiving\nYES\nYES\n14.0\n2.0\n...\n4ER+\nNaN\n8.449960\n9.666006\n5.468108\n6.080813\n6.233319\n8.377827\n8.580251\n9.925870\n\n\n\n\n5 rows × 32 columns\n\n\n\nPrint the top rows of each group categorized based on cancer type and three gene classifier.\n\nmetabric.groupby([\"Cancer_type\", \"3-gene_classifier\"]).head()\n\n\n\n\n\n\n\n\nPatient_ID\nCohort\nAge_at_diagnosis\nSurvival_time\nSurvival_status\nVital_status\nChemotherapy\nRadiotherapy\nTumour_size\nTumour_stage\n...\nIntegrative_cluster\nMutation_count\nESR1\nERBB2\nPGR\nTP53\nPIK3CA\nGATA3\nFOXA1\nMLPH\n\n\n\n\n0\nMB-0000\n1\n75.65\n140.500000\nLIVING\nLiving\nNO\nYES\n22.0\n2.0\n...\n4ER+\nNaN\n8.929817\n9.333972\n5.680501\n6.338739\n5.704157\n6.932146\n7.953794\n9.729728\n\n\n1\nMB-0002\n1\n43.19\n84.633333\nLIVING\nLiving\nNO\nYES\n10.0\n1.0\n...\n4ER+\n2.0\n10.047059\n9.729606\n7.505424\n6.192507\n5.757727\n11.251197\n11.843989\n12.536570\n\n\n4\nMB-0008\n1\n76.97\n41.366667\nDECEASED\nDied of Disease\nYES\nYES\n40.0\n2.0\n...\n9\n2.0\n11.276581\n9.956267\n7.331223\n6.337951\n5.817818\n9.719781\n11.625006\n12.161961\n\n\n5\nMB-0010\n1\n78.77\n7.800000\nDECEASED\nDied of Disease\nNO\nYES\n31.0\n4.0\n...\n7\n4.0\n11.239750\n9.739996\n5.954311\n5.419711\n6.123056\n9.787085\n12.142178\n11.433164\n\n\n8\nMB-0028\n1\n86.41\n36.566667\nDECEASED\nDied of Other Causes\nNO\nYES\n16.0\n2.0\n...\n9\n4.0\n12.521038\n10.678267\n5.325554\n6.220372\n6.250678\n10.260059\n12.148375\n10.936002\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1524\nMB-6047\n5\n72.94\n37.866667\nDECEASED\nDied of Disease\nNO\nNO\n15.0\nNaN\n...\n9\n14.0\n9.457621\n10.750387\n6.588294\n6.442729\n6.114882\n9.633760\n10.743632\n10.220908\n\n\n1607\nMB-6212\n5\n61.81\n224.233333\nLIVING\nLiving\nNO\nYES\n15.0\n1.0\n...\n7\n4.0\n11.720822\n10.060722\n6.324464\n6.606875\n5.476758\n10.147003\n11.494327\n12.624759\n\n\n1651\nMB-6314\n5\n68.57\n134.833333\nLIVING\nLiving\nNO\nNO\n14.0\nNaN\n...\n1\n5.0\n10.128997\n13.637355\n5.249247\n6.975344\n5.938845\n10.767529\n12.502447\n11.903197\n\n\n1696\nMB-7030\n4\n74.21\n31.333333\nDECEASED\nDied of Other Causes\nNO\nYES\n50.0\nNaN\n...\n4ER+\n5.0\n6.192748\n10.030603\n4.969329\n7.290813\n5.523130\n6.343169\n6.251026\n6.423873\n\n\n1856\nMB-7235\n4\n62.45\n170.800000\nLIVING\nLiving\nNO\nNO\n20.0\nNaN\n...\n8\n12.0\n11.854216\n11.241157\n5.898537\n6.665210\n5.863743\n10.676374\n11.860498\n11.966185\n\n\n\n\n84 rows × 32 columns\n\n\n\n\n\n\napply function\nSome operations on the grouped data might not fit into the aggregation, transformation, or filtration categories. For these, you can use the apply function.\n\nSelect all patients with age between 50 and 70 for each group categorized based on cancer type.\n\n\nmetabric.groupby('ER_status')[\"Age_at_diagnosis\"].apply(lambda x: x[(x &gt;= 50) & (x &lt;= 70)])\n\nER_status      \nNegative   20      52.14\n           24      50.42\n           30      68.68\n           52      52.11\n           54      63.53\n                   ...  \nPositive   1897    56.90\n           1898    59.20\n           1901    62.90\n           1902    61.16\n           1903    60.02\nName: Age_at_diagnosis, Length: 983, dtype: float64\n\n\n\n\n# Filter the DataFrame directly based on 'Age_at_diagnosis' and then group by 'ER_status'\nfiltered_df = metabric[(metabric['Age_at_diagnosis'] &gt;= 50) & (metabric['Age_at_diagnosis'] &lt;= 70)].groupby('ER_status')\n\n# Display each group in the filtered DataFrame\nfor cancer_type, group in filtered_df:\n    print(f\"Cancer Type: {cancer_type}\")\n    print(group)\n    print()  # For better readability\n\nCancer Type: Negative\n     Patient_ID  Cohort  Age_at_diagnosis  Survival_time Survival_status  \\\n20      MB-0062       1             52.14     153.966667          LIVING   \n24      MB-0079       1             50.42      28.500000        DECEASED   \n30      MB-0100       1             68.68       8.066667        DECEASED   \n52      MB-0127       1             52.11     132.066667          LIVING   \n54      MB-0129       1             63.53      38.566667        DECEASED   \n...         ...     ...               ...            ...             ...   \n1865    MB-7251       4             54.66      21.566667        DECEASED   \n1869    MB-7256       4             50.92      34.700000        DECEASED   \n1879    MB-7270       4             50.84     175.166667          LIVING   \n1887    MB-7281       4             51.22      49.533333        DECEASED   \n1895    MB-7291       4             53.87       6.833333        DECEASED   \n\n              Vital_status Chemotherapy Radiotherapy  Tumour_size  \\\n20                  Living          YES          YES        17.00   \n24         Died of Disease          YES          YES        40.00   \n30         Died of Disease          YES          YES        39.00   \n52                  Living          YES          YES        13.00   \n54    Died of Other Causes          YES          YES        24.00   \n...                    ...          ...          ...          ...   \n1865       Died of Disease           NO           NO        15.47   \n1869       Died of Disease          YES          YES        40.00   \n1879                Living          YES           NO        16.00   \n1887       Died of Disease          YES          YES        16.00   \n1895       Died of Disease           NO           NO        50.00   \n\n      Tumour_stage  ...  Integrative_cluster  Mutation_count      ESR1  \\\n20             1.0  ...                   10             3.0  5.965770   \n24             2.0  ...                   10             4.0  6.312633   \n30             2.0  ...                   10             1.0  6.204958   \n52             2.0  ...                    3             5.0  7.383420   \n54             2.0  ...                    5             NaN  6.217353   \n...            ...  ...                  ...             ...       ...   \n1865           NaN  ...                    5             1.0  6.552171   \n1869           NaN  ...                    5             4.0  6.425775   \n1879           NaN  ...                   10             8.0  5.996827   \n1887           NaN  ...                    5             3.0  6.074817   \n1895           NaN  ...                    1             4.0  6.096158   \n\n          ERBB2       PGR      TP53    PIK3CA     GATA3      FOXA1       MLPH  \n20     7.789817  5.164429  5.444836  7.332574  5.987214   6.461705   6.266163  \n24     9.068778  5.305683  6.673993  7.068624  5.667747  10.690917   9.056929  \n30     8.881671  5.172111  7.072938  6.189728  5.687771   6.311955   7.963707  \n52    11.011174  5.368214  5.877772  5.997610  8.749941  10.912581  11.732541  \n54    13.495315  5.582046  5.678390  6.556857  7.141058  10.474060  10.331051  \n...         ...       ...       ...       ...       ...        ...        ...  \n1865  14.224677  5.078956  6.921696  5.385871  9.574542  11.608117  11.280612  \n1869  14.464282  5.356381  6.107157  6.480691  8.570477  11.123834  12.386091  \n1879   9.515256  5.261880  6.981713  5.724471  7.574704  10.685767   9.210209  \n1887  12.545156  5.218277  6.423540  5.856297  7.084129  11.029630  10.737725  \n1895  12.600238  5.260572  6.351516  5.829438  8.116684  10.298983  10.747426  \n\n[221 rows x 32 columns]\n\nCancer Type: Positive\n     Patient_ID  Cohort  Age_at_diagnosis  Survival_time Survival_status  \\\n6       MB-0014       1             56.45     164.333333          LIVING   \n14      MB-0048       1             51.46     103.833333          LIVING   \n17      MB-0054       1             66.91     160.300000          LIVING   \n18      MB-0056       1             62.62      62.866667          LIVING   \n21      MB-0064       1             69.13     108.933333          LIVING   \n...         ...     ...               ...            ...             ...   \n1897    MB-7293       4             56.90     199.233333          LIVING   \n1898    MB-7294       4             59.20      82.733333        DECEASED   \n1901    MB-7297       4             62.90     175.966667        DECEASED   \n1902    MB-7298       4             61.16      86.233333        DECEASED   \n1903    MB-7299       4             60.02     201.900000        DECEASED   \n\n              Vital_status Chemotherapy Radiotherapy  Tumour_size  \\\n6                   Living          YES          YES         10.0   \n14                  Living          YES          YES         25.0   \n17                  Living           NO          YES         36.0   \n18                  Living           NO           NO         29.0   \n21                  Living           NO           NO         18.0   \n...                    ...          ...          ...          ...   \n1897                Living           NO           NO         45.0   \n1898       Died of Disease           NO           NO         15.0   \n1901       Died of Disease           NO          YES         25.0   \n1902  Died of Other Causes           NO           NO         25.0   \n1903  Died of Other Causes           NO          YES         20.0   \n\n      Tumour_stage  ...  Integrative_cluster  Mutation_count       ESR1  \\\n6              2.0  ...                    3             4.0  10.793832   \n14             2.0  ...                 4ER+             NaN   8.101955   \n17             2.0  ...                   10             3.0  10.194473   \n18             1.0  ...                    1             4.0  11.560030   \n21             1.0  ...                    3             NaN  11.288632   \n...            ...  ...                  ...             ...        ...   \n1897           NaN  ...                    3             5.0  10.879891   \n1898           NaN  ...                    1             2.0  11.290976   \n1901           NaN  ...                    1             4.0  11.053198   \n1902           NaN  ...                    1            15.0  11.055114   \n1903           NaN  ...                   10             3.0  10.696475   \n\n          ERBB2       PGR      TP53    PIK3CA      GATA3      FOXA1       MLPH  \n6      9.276507  7.720952  5.992706  7.481835   8.365527  11.482627  10.755199  \n14    12.847992  6.114007  6.397985  7.779824   7.294771  10.963978   9.063062  \n17     9.451855  6.769441  5.350892  7.564274   7.465016  10.822652   8.665371  \n18     8.674760  6.336389  5.845364  7.234934   8.838840  10.905011   9.829488  \n21     8.367936  8.161056  6.433638  6.412103   8.528343  11.847914  10.443699  \n...         ...       ...       ...       ...        ...        ...        ...  \n1897  10.219154  6.431113  5.791022  6.000993   9.551231  11.302246  11.301274  \n1898  10.846545  7.312247  5.660943  6.190000   9.424235  11.075688  11.567166  \n1901  10.228570  7.478069  6.212256  6.192399   9.540589  11.482761  11.180360  \n1902   9.892589  8.282737  6.466712  6.287254  10.365901  11.371176  12.827069  \n1903  10.227787  5.533486  6.180511  6.208784   9.749368  10.867527   9.847856  \n\n[762 rows x 32 columns]\n\n\n\n\n\n\nassign function\nThis function is used to create new columns or modify existing columns in a DataFrame in a concise and flexible way. It returns a new DataFrame with the added or updated columns while keeping the original DataFrame unchanged, unless explicitly reassigned.\nCreate a new column named Tumor_size_cm in the metabric DataFrame to represent tumor size in centimeters.\n\nmetabric.assign(Tumour_size_cm = metabric.Tumour_size / 10)\n\n\n\n\n\n\n\n\nPatient_ID\nCohort\nAge_at_diagnosis\nSurvival_time\nSurvival_status\nVital_status\nChemotherapy\nRadiotherapy\nTumour_size\nTumour_stage\n...\nMutation_count\nESR1\nERBB2\nPGR\nTP53\nPIK3CA\nGATA3\nFOXA1\nMLPH\nTumour_size_cm\n\n\n\n\n0\nMB-0000\n1\n75.65\n140.500000\nLIVING\nLiving\nNO\nYES\n22.0\n2.0\n...\nNaN\n8.929817\n9.333972\n5.680501\n6.338739\n5.704157\n6.932146\n7.953794\n9.729728\n2.2\n\n\n1\nMB-0002\n1\n43.19\n84.633333\nLIVING\nLiving\nNO\nYES\n10.0\n1.0\n...\n2.0\n10.047059\n9.729606\n7.505424\n6.192507\n5.757727\n11.251197\n11.843989\n12.536570\n1.0\n\n\n2\nMB-0005\n1\n48.87\n163.700000\nDECEASED\nDied of Disease\nYES\nNO\n15.0\n2.0\n...\n2.0\n10.041281\n9.725825\n7.376123\n6.404516\n6.751566\n9.289758\n11.698169\n10.306115\n1.5\n\n\n3\nMB-0006\n1\n47.68\n164.933333\nLIVING\nLiving\nYES\nYES\n25.0\n2.0\n...\n1.0\n10.404685\n10.334979\n6.815637\n6.869241\n7.219187\n8.667723\n11.863379\n10.472181\n2.5\n\n\n4\nMB-0008\n1\n76.97\n41.366667\nDECEASED\nDied of Disease\nYES\nYES\n40.0\n2.0\n...\n2.0\n11.276581\n9.956267\n7.331223\n6.337951\n5.817818\n9.719781\n11.625006\n12.161961\n4.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1899\nMB-7295\n4\n43.10\n196.866667\nLIVING\nLiving\nNO\nYES\n25.0\nNaN\n...\n4.0\n9.591235\n9.935179\n7.984515\n6.753291\n6.279207\n9.207323\n11.281194\n11.337601\n2.5\n\n\n1900\nMB-7296\n4\n42.88\n44.733333\nDECEASED\nDied of Disease\nNO\nYES\n20.0\nNaN\n...\n6.0\n9.733986\n13.753037\n5.616082\n6.271912\n5.999093\n9.530390\n11.532033\n11.626140\n2.0\n\n\n1901\nMB-7297\n4\n62.90\n175.966667\nDECEASED\nDied of Disease\nNO\nYES\n25.0\nNaN\n...\n4.0\n11.053198\n10.228570\n7.478069\n6.212256\n6.192399\n9.540589\n11.482761\n11.180360\n2.5\n\n\n1902\nMB-7298\n4\n61.16\n86.233333\nDECEASED\nDied of Other Causes\nNO\nNO\n25.0\nNaN\n...\n15.0\n11.055114\n9.892589\n8.282737\n6.466712\n6.287254\n10.365901\n11.371176\n12.827069\n2.5\n\n\n1903\nMB-7299\n4\n60.02\n201.900000\nDECEASED\nDied of Other Causes\nNO\nYES\n20.0\nNaN\n...\n3.0\n10.696475\n10.227787\n5.533486\n6.180511\n6.208784\n9.749368\n10.867527\n9.847856\n2.0\n\n\n\n\n1904 rows × 33 columns"
  },
  {
    "objectID": "vignettes/3_Data_manipulation.html#tidy-data",
    "href": "vignettes/3_Data_manipulation.html#tidy-data",
    "title": "Data Manipulation with pandas",
    "section": "Tidy Data",
    "text": "Tidy Data\nTidy data is a structured and organized format for presenting data that follows a simple convention: variables are placed in columns, observations are placed in rows and values are placed in cells. This standardized arrangement makes it easy to work with and analyze data efficiently. The principles of tidy data, are designed to promote consistency and ease of use in data analysis.\n\n\n\n\n\nData is often entered in a wide format, where each row typically represents a site, subject, or patient, and there are multiple observation variables containing the same type of data.\nFor instance, consider the AirPassengers dataset. It contains information on monthly airline passenger numbers from 1949 to 1960. In this dataset, each row corresponds to a single year, and the columns represent each month from January to December.\n\nWide format is intuitive for data entry. But it is less so for data analysis. Consider calculating the monthly mean; where would you place it? Would it be another row?\nData needs to be reshaped to conform to the tidy data structure. It involves using two primary verbs (or pairs of opposites):\n\nGather columns into rows (melt()).\nSpread rows into columns (pivot()).\n\n\nConverting data from wide to long format\nFirst read the counts file called GSE60450_normalized_data.csv that is in a folder called data (i.e. the path to the file should be data/GSE60450_normalized_data.csv).\n\ncounts = pd.read_csv(\"data/GSE60450_normalized_data.csv\")\ncounts.head()\n\n\nOutput\n\n\n\n\n\n\n\n\n\nX\ngene_symbol\nGSM1480291\nGSM1480292\nGSM1480293\nGSM1480294\nGSM1480295\nGSM1480296\nGSM1480297\nGSM1480298\nGSM1480299\nGSM1480300\nGSM1480301\nGSM1480302\n\n\n\n\n0\nENSMUSG00000031805\nJak3\n82.22869\n81.18604\n36.13808\n36.62751\n12.35039\n11.85235\n10.59006\n14.88337\n7.57182\n7.05763\n3.16982\n4.25451\n\n\n1\nENSMUSG00000033909\nUsp36\n88.22360\n94.59098\n76.11531\n63.73863\n27.10872\n24.87050\n95.67017\n100.73912\n78.07470\n59.35009\n36.36491\n40.37057\n\n\n2\nENSMUSG00000065524\nMir135a-2\n0.00000\n0.00000\n0.00000\n0.00000\n0.00000\n0.00000\n0.00000\n0.00000\n0.00000\n0.00000\n0.00000\n0.00000\n\n\n3\nENSMUSG00000030374\nStrn4\n94.26324\n85.05204\n59.54855\n54.30684\n24.42892\n24.90936\n125.00263\n102.99289\n110.64124\n97.98130\n77.96883\n105.70093\n\n\n4\nENSMUSG00000098547\nMir6921\n0.08948\n0.08404\n0.00000\n0.08459\n0.03884\n0.07772\n0.00000\n0.08505\n0.07726\n0.08255\n0.04403\n0.04727\n\n\n\n\n\n\n\n\nTo transform this table from a wide format to a long format, we use the melt() function. It’s important to note that this function does not create tidy data as it duplicates rows. However, the output in ‘long format’ from melt() is often necessary for visualization and for left join, which will be introduced later.\nThis operation will convert multiple columns with counts for each sample into a single column containing all the expression values, as illustrated in the image below.\n\n\n\n\n\nThe melt() function takes four arguments:\n\nid_vars = : Column(s) to use as identifier variables.\nvalue_vars = : Columns to be unpivot or converted into labels,values in long form. If not specified, uses all columns that are not set as id_vars =.\nvar_name = : a name(s) for the new column(s) containing the labels from the specified columns.\nvalue_name =: a name(s) for the new column(s) containing the values corresponding to the specified columns.\n\n\ncounts.melt(id_vars=['X', 'gene_symbol'], var_name='Sample', value_name='Count')\n\n\nOutput\n\n\n\n\n\n\n\n\n\nX\ngene_symbol\nSample\nCount\n\n\n\n\n0\nENSMUSG00000031805\nJak3\nGSM1480291\n82.22869\n\n\n1\nENSMUSG00000033909\nUsp36\nGSM1480291\n88.22360\n\n\n2\nENSMUSG00000065524\nMir135a-2\nGSM1480291\n0.00000\n\n\n3\nENSMUSG00000030374\nStrn4\nGSM1480291\n94.26324\n\n\n4\nENSMUSG00000098547\nMir6921\nGSM1480291\n0.08948\n\n\n...\n...\n...\n...\n...\n\n\n235\nENSMUSG00000066189\nCacng3\nGSM1480302\n0.00000\n\n\n236\nENSMUSG00000005611\nMrvi1\nGSM1480302\n185.16572\n\n\n237\nENSMUSG00000064299\n4921528I07Rik\nGSM1480302\n0.00000\n\n\n238\nENSMUSG00000028174\nRpe65\nGSM1480302\n0.00000\n\n\n239\nENSMUSG00000024902\nMrpl11\nGSM1480302\n10.06901\n\n\n\n\n240 rows × 4 columns\n\n\n\n\n\ncounts.melt(id_vars='X', value_vars=counts.columns[counts.columns.str.startswith('GSM')], var_name='Sample', value_name='Count')\n\n\nOutput\n\n\n\n\n\n\n\n\n\nX\nSample\nCount\n\n\n\n\n0\nENSMUSG00000031805\nGSM1480291\n82.22869\n\n\n1\nENSMUSG00000033909\nGSM1480291\n88.22360\n\n\n2\nENSMUSG00000065524\nGSM1480291\n0.00000\n\n\n3\nENSMUSG00000030374\nGSM1480291\n94.26324\n\n\n4\nENSMUSG00000098547\nGSM1480291\n0.08948\n\n\n...\n...\n...\n...\n\n\n235\nENSMUSG00000066189\nGSM1480302\n0.00000\n\n\n236\nENSMUSG00000005611\nGSM1480302\n185.16572\n\n\n237\nENSMUSG00000064299\nGSM1480302\n0.00000\n\n\n238\nENSMUSG00000028174\nGSM1480302\n0.00000\n\n\n239\nENSMUSG00000024902\nGSM1480302\n10.06901\n\n\n\n\n240 rows × 3 columns\n\n\n\n\nThe counts.columns[counts.columns.str.startswith('GSM')] command returns a vector of columns whose names starts with ‘GSM’. melt() will then transform those columns into two new columns, denoted as “Sample” and “Count.” The parameter var_name = 'Sample' indicates the new column containing the specified columns (defined by cols) should be named “Sample,” while value_name = 'Count' specifies that the new column containing the values should be named “Count”.\n\n\nConverting data from long to wide format\nFirst, read the annotation file called GSE60450_annotation.csv (the path to the file should be data/GSE60450_annotation.csv).\n\nannot = pd.read_csv(\"data/GSE60450_annotation.csv\")\nannot.head()\n\n\nOutput\n\n\n\n\n\n\n\n\n\nENSEMBL\nType\nAnnotation\n\n\n\n\n0\nENSMUSG00000031805\nSYMBOL\nJak3\n\n\n1\nENSMUSG00000031805\nGENENAME\nJanus kinase 3\n\n\n2\nENSMUSG00000033909\nSYMBOL\nUsp36\n\n\n3\nENSMUSG00000033909\nGENENAME\nubiquitin specific peptidase 36\n\n\n4\nENSMUSG00000065524\nSYMBOL\nMir135a-2\n\n\n\n\n\n\n\n\nTo transform this table so that it conforms to the tidy principles, we use the pivot() function.\nThis operation will convert multiple rows with type and annotation into columns containing the Symbol and Gene_name, as illustrated in the image below.\n\n\n\n\n\nThe pivot() function takes three arguments:\n\ncolumns = : column containing the labels that will be transformed into the new column names.\nindex = : column to make new frames’ index. If not given, uses existing index.\nvalues = : column(s) containing the values that will fill the new columns.\n\nIn our scenario, to reshape the annot data frame, we will use the column names Type and Annotation:\n\nannot.pivot(index='ENSEMBL', columns='Type', values='Annotation')\n\n\nOutput\n\n\n\n\n\n\n\n\nType\nGENENAME\nSYMBOL\n\n\nENSEMBL\n\n\n\n\n\n\nENSMUSG00000005611\ninositol 1,4,5-triphosphate receptor associated 1\nIrag1\n\n\nENSMUSG00000024902\nmitochondrial ribosomal protein L11\nMrpl11\n\n\nENSMUSG00000026283\ninhibitor of growth family, member 5\nIng5\n\n\nENSMUSG00000028174\nretinal pigment epithelium 65\nRpe65\n\n\nENSMUSG00000030374\nstriatin, calmodulin binding protein 4\nStrn4\n\n\nENSMUSG00000031805\nJanus kinase 3\nJak3\n\n\nENSMUSG00000033475\ntranslocase of outer mitochondrial membrane 6\nTomm6\n\n\nENSMUSG00000033909\nubiquitin specific peptidase 36\nUsp36\n\n\nENSMUSG00000035629\nRUN domain and cysteine-rich domain containing...\nRubcn\n\n\nENSMUSG00000037331\nLa ribonucleoprotein 1, translational regulator\nLarp1\n\n\nENSMUSG00000038246\nfamily with sequence similarity 50, member B\nFam50b\n\n\nENSMUSG00000039715\ndynein 2 intermediate chain 2\nDync2i2\n\n\nENSMUSG00000053080\nzinc finger translocation associated\nZfta\n\n\nENSMUSG00000055491\nperoxisome proliferative activated receptor, g...\nPprc1\n\n\nENSMUSG00000064299\nRIKEN cDNA 4921528I07 gene\n4921528I07Rik\n\n\nENSMUSG00000065524\nmicroRNA 135a-2\nMir135a-2\n\n\nENSMUSG00000066189\ncalcium channel, voltage-dependent, gamma subu...\nCacng3\n\n\nENSMUSG00000074489\nbone gamma-carboxyglutamate protein 3\nBglap3\n\n\nENSMUSG00000094053\nsecretoglobin, family 2B, member 7\nScgb2b7\n\n\nENSMUSG00000098547\nmicroRNA 6921\nMir6921\n\n\n\n\n\n\n\n\nThe above operation changes the ‘shape’ of the dataframe from a longer format (more rows) to a wider format (more columns). While the original table consists of 40 rows, using pivot() results in only 20 rows. This reduction is due to the de-duplication of rows during the creation of new columns.\nIt’s important to note that since we only have two distinct labels in the Type column, we are essentially replacing the existing two columns with just two new columns. Consequently, the shape of the output doesn’t technically become wider than the input data frame. However, when there are more than two unique labels in the columns= column, the output will indeed become wider compared to the input.\n\n\nSeparate Columns\nFirst, read the metadata file called GSE60450_metadata.csv (the path to the file should be data/GSE60450_metadata.csv).\n\nmetadata = pd.read_csv(\"data/GSE60450_metadata.csv\")\nmetadata.head()\n\n\nOutput\n\n\n\n\n\n\n\n\n\ngene_id\ncharacteristics\n\n\n\n\n0\nGSM1480291\nmammary gland;luminal cells;virgin\n\n\n1\nGSM1480292\nmammary gland;luminal cells;virgin\n\n\n2\nGSM1480293\nmammary gland;luminal cells;18.5 day pregnancy\n\n\n3\nGSM1480294\nmammary gland;luminal cells;18.5 day pregnancy\n\n\n4\nGSM1480295\nmammary gland;luminal cells;2 day lactation\n\n\n\n\n\n\n\n\nTo transform this table so that it conforms to the tidy principles, we use the str.split() function. This operation will separate characteristic column into 3 separate columns containing the tissue_type, immunophenotype and development_stage, as illustrated in the image below.\n\n\n\n\n\nTo separate characteristic column in the metadata data frame into three separate columns based on the delimeter ; (semi colon), we can use the str.split() function:\n\n# split characteristic column into 3 strings based on delimeter ; and update the metadata dataframe\nmetadata[[\"tissue_type\", \"immunophenotype\", \"development_stage\"]] = metadata.characteristics.str.split(';', expand=True)\n# remove characteristics column\nmetadata = metadata.drop(columns='characteristics')\nmetadata\n\n\nOutput\n\n\n\n\n\n\n\n\n\ngene_id\ntissue_type\nimmunophenotype\ndevelopment_stage\n\n\n\n\n0\nGSM1480291\nmammary gland\nluminal cells\nvirgin\n\n\n1\nGSM1480292\nmammary gland\nluminal cells\nvirgin\n\n\n2\nGSM1480293\nmammary gland\nluminal cells\n18.5 day pregnancy\n\n\n3\nGSM1480294\nmammary gland\nluminal cells\n18.5 day pregnancy\n\n\n4\nGSM1480295\nmammary gland\nluminal cells\n2 day lactation\n\n\n5\nGSM1480296\nmammary gland\nluminal cells\n2 day lactation\n\n\n6\nGSM1480297\nmammary gland\nbasal cells\nvirgin\n\n\n7\nGSM1480298\nmammary gland\nbasal cells\nvirgin\n\n\n8\nGSM1480299\nmammary gland\nbasal cells\n18.5 day pregnancy\n\n\n9\nGSM1480300\nmammary gland\nbasal cells\n18.5 day pregnancy\n\n\n10\nGSM1480301\nmammary gland\nbasal cells\n2 day lactation\n\n\n11\nGSM1480302\nmammary gland\nbasal cells\n2 day lactation\n\n\n\n\n\n\n\n\n\n\nUniting Columns\nThis is the complement of separate. Therefore, let’s revert what we did in the previous section to combine multiple columns to a single column as illustrated in the image below.\n\n\n\n\n\nTo combine tissue type, immunophenotype, and development stage columns into characteristic column in the metadata dataframe:\n\nmetadata['characteristics'] = metadata.tissue_type.str.cat(metadata[['immunophenotype','development_stage']], sep = ';')\n# remove tissue type, immunophenotype, and development stage columns\nmetadata = metadata.drop(columns=['tissue_type','immunophenotype','development_stage'])\nmetadata\n\n\nOutput\n\n\n\n\n\n\n\n\n\ngene_id\ntissue_type\nimmunophenotype\ndevelopment_stage\ncharacteristics\n\n\n\n\n0\nGSM1480291\nmammary gland\nluminal cells\nvirgin\nmammary gland;luminal cells;virgin\n\n\n1\nGSM1480292\nmammary gland\nluminal cells\nvirgin\nmammary gland;luminal cells;virgin\n\n\n2\nGSM1480293\nmammary gland\nluminal cells\n18.5 day pregnancy\nmammary gland;luminal cells;18.5 day pregnancy\n\n\n3\nGSM1480294\nmammary gland\nluminal cells\n18.5 day pregnancy\nmammary gland;luminal cells;18.5 day pregnancy\n\n\n4\nGSM1480295\nmammary gland\nluminal cells\n2 day lactation\nmammary gland;luminal cells;2 day lactation\n\n\n5\nGSM1480296\nmammary gland\nluminal cells\n2 day lactation\nmammary gland;luminal cells;2 day lactation\n\n\n6\nGSM1480297\nmammary gland\nbasal cells\nvirgin\nmammary gland;basal cells;virgin\n\n\n7\nGSM1480298\nmammary gland\nbasal cells\nvirgin\nmammary gland;basal cells;virgin\n\n\n8\nGSM1480299\nmammary gland\nbasal cells\n18.5 day pregnancy\nmammary gland;basal cells;18.5 day pregnancy\n\n\n9\nGSM1480300\nmammary gland\nbasal cells\n18.5 day pregnancy\nmammary gland;basal cells;18.5 day pregnancy\n\n\n10\nGSM1480301\nmammary gland\nbasal cells\n2 day lactation\nmammary gland;basal cells;2 day lactation\n\n\n11\nGSM1480302\nmammary gland\nbasal cells\n2 day lactation\nmammary gland;basal cells;2 day lactation\n\n\n\n\n\n\n\n\nA quick and easy method to unite columns using the + operator:\n\nmetadata.characteristics = metadata.tissue_type + ';' + metadata.immunophenotype + ';' + metadata.development_stage\n# remove tissue type, immunophenotype, and development stage columns\nmetadata = metadata.drop(columns=['tissue_type','immunophenotype','development_stage'])\nmetadata\n\nSince we have already updated the metadata DataFrame to combine columns in the previous example, this code will not work. The tissue type, immunophenotype, and development stage columns are no longer available in the DataFrame as we combined them to create the characteristics column."
  },
  {
    "objectID": "vignettes/3_Data_manipulation.html#joining-data",
    "href": "vignettes/3_Data_manipulation.html#joining-data",
    "title": "Data Manipulation with pandas",
    "section": "Joining Data",
    "text": "Joining Data\nPandas provides two primary methods for combining DataFrames: concat and merge. These methods allow you to combine DataFrames along rows and columns, and they support various types of joins, including inner, left, right, and outer joins. Here’s an explanation of both methods and the types of joins they support:\n\nconcat\nThe concat method is used for concatenating (stacking) DataFrames along a particular axis, which can be either rows or columns. It’s particularly useful when you want to combine DataFrames with the same structure along a common axis. It does not require a common key to merge DataFrames, as it is primarily for stacking them.\nConsider the following three DataFrames,\n\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2'],\n                    'B': ['B0', 'B1', 'B2']})\n                    \ndf2 = pd.DataFrame({'A': ['A3', 'A4', 'A5'],\n                    'B': ['B3', 'B4', 'B5']})\n\ndf3 = pd.DataFrame({'C': ['C0', 'C1', 'C2'],\n                    'D': ['D0', 'D1', 'D2']})\n\n\nConcatenate along rows (vertically)\n\n\n\n\ndf1\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\nA0\nB0\n\n\n1\nA1\nB1\n\n\n2\nA2\nB2\n\n\n\n\n\n\n\n\n\n\n\ndf2\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\nA3\nB3\n\n\n1\nA4\nB4\n\n\n2\nA5\nB5\n\n\n\n\n\n\n\n\n\n\npd.concat([df1, df2], axis=0)\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\nA0\nB0\n\n\n1\nA1\nB1\n\n\n2\nA2\nB2\n\n\n0\nA3\nB3\n\n\n1\nA4\nB4\n\n\n2\nA5\nB5\n\n\n\n\n\n\n\n\nConcatenating along columns (horizontally)\n\n\n\n\ndf1\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\nA0\nB0\n\n\n1\nA1\nB1\n\n\n2\nA2\nB2\n\n\n\n\n\n\n\n\n\n\n\ndf3\n\n\n\n\n\n\n\n\nC\nD\n\n\n\n\n0\nC0\nD0\n\n\n1\nC1\nD1\n\n\n2\nC2\nD2\n\n\n\n\n\n\n\n\n\n\npd.concat([df1, df3], axis=1)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n0\nA0\nB0\nC0\nD0\n\n\n1\nA1\nB1\nC1\nD1\n\n\n2\nA2\nB2\nC2\nD2\n\n\n\n\n\n\n\n\n\nmerge\nThe merge method is used for merging DataFrames based on common columns or indexes, similar to SQL joins. It’s especially useful when you have different DataFrames with related data and want to combine them based on a shared key.\nConsider the following two DataFrames,\n\nleft = pd.DataFrame({\n         \"key1\": [\"K0\", \"K0\", \"K1\", \"K2\"],\n         \"key2\": [\"K0\", \"K1\", \"K0\", \"K1\"],\n         \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n         \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n     })\nright = pd.DataFrame({\n         \"key1\": [\"K0\", \"K1\", \"K1\", \"K2\"],\n         \"key2\": [\"K0\", \"K0\", \"K0\", \"K0\"],\n         \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n         \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n     })\n\n\nInner join\nAn inner join returns only the rows with matching values in the specified columns (the common key). It combines data from two or more tables or DataFrames based on the intersection of keys, excluding rows that do not have corresponding matches in both tables.\n\n\n\n\n\n\n\n\nleft\n\n\n\n\n\n\n\n\nkey1\nkey2\nA\nB\n\n\n\n\n0\nK0\nK0\nA0\nB0\n\n\n1\nK0\nK1\nA1\nB1\n\n\n2\nK1\nK0\nA2\nB2\n\n\n3\nK2\nK1\nA3\nB3\n\n\n\n\n\n\n\n\n\n\n\nright\n\n\n\n\n\n\n\n\nkey1\nkey2\nC\nD\n\n\n\n\n0\nK0\nK0\nC0\nD0\n\n\n1\nK1\nK0\nC1\nD1\n\n\n2\nK1\nK0\nC2\nD2\n\n\n3\nK2\nK0\nC3\nD3\n\n\n\n\n\n\n\n\n\n\npd.merge(left, right, how=\"inner\", on=[\"key1\", \"key2\"])\n\n\n\n\n\n\n\n\nkey1\nkey2\nA\nB\nC\nD\n\n\n\n\n0\nK0\nK0\nA0\nB0\nC0\nD0\n\n\n1\nK1\nK0\nA2\nB2\nC1\nD1\n\n\n2\nK1\nK0\nA2\nB2\nC2\nD2\n\n\n\n\n\n\n\n\n\nOuter join\nAn outer join returns all rows from both tables, including rows with matching keys and rows with non-matching keys. When there’s no match for a particular row in one of the tables, the missing values are filled with NULL (or NaN in pandas), indicating no corresponding data.\n\n\n\n\n\n\n\n\nleft\n\n\n\n\n\n\n\n\nkey1\nkey2\nA\nB\n\n\n\n\n0\nK0\nK0\nA0\nB0\n\n\n1\nK0\nK1\nA1\nB1\n\n\n2\nK1\nK0\nA2\nB2\n\n\n3\nK2\nK1\nA3\nB3\n\n\n\n\n\n\n\n\n\n\n\nright\n\n\n\n\n\n\n\n\nkey1\nkey2\nC\nD\n\n\n\n\n0\nK0\nK0\nC0\nD0\n\n\n1\nK1\nK0\nC1\nD1\n\n\n2\nK1\nK0\nC2\nD2\n\n\n3\nK2\nK0\nC3\nD3\n\n\n\n\n\n\n\n\n\n\npd.merge(left, right, how=\"outer\", on=[\"key1\", \"key2\"])\n\n\n\n\n\n\n\n\nkey1\nkey2\nA\nB\nC\nD\n\n\n\n\n0\nK0\nK0\nA0\nB0\nC0\nD0\n\n\n1\nK0\nK1\nA1\nB1\nNaN\nNaN\n\n\n2\nK1\nK0\nA2\nB2\nC1\nD1\n\n\n3\nK1\nK0\nA2\nB2\nC2\nD2\n\n\n4\nK2\nK0\nNaN\nNaN\nC3\nD3\n\n\n5\nK2\nK1\nA3\nB3\nNaN\nNaN\n\n\n\n\n\n\n\n\n\nLeft join\nA left join returns all rows from the left table (the first table specified) and matching rows from the right table (the second table specified). Non-matching rows in the right table have NULL (or NaN) values in the result.\n\n\n\n\n\n\n\n\nleft\n\n\n\n\n\n\n\n\nkey1\nkey2\nA\nB\n\n\n\n\n0\nK0\nK0\nA0\nB0\n\n\n1\nK0\nK1\nA1\nB1\n\n\n2\nK1\nK0\nA2\nB2\n\n\n3\nK2\nK1\nA3\nB3\n\n\n\n\n\n\n\n\n\n\n\nright\n\n\n\n\n\n\n\n\nkey1\nkey2\nC\nD\n\n\n\n\n0\nK0\nK0\nC0\nD0\n\n\n1\nK1\nK0\nC1\nD1\n\n\n2\nK1\nK0\nC2\nD2\n\n\n3\nK2\nK0\nC3\nD3\n\n\n\n\n\n\n\n\n\n\npd.merge(left, right, how=\"left\", on=[\"key1\", \"key2\"])\n\n\n\n\n\n\n\n\nkey1\nkey2\nA\nB\nC\nD\n\n\n\n\n0\nK0\nK0\nA0\nB0\nC0\nD0\n\n\n1\nK0\nK1\nA1\nB1\nNaN\nNaN\n\n\n2\nK1\nK0\nA2\nB2\nC1\nD1\n\n\n3\nK1\nK0\nA2\nB2\nC2\nD2\n\n\n4\nK2\nK1\nA3\nB3\nNaN\nNaN\n\n\n\n\n\n\n\n\n\nRight join\nA right join is similar to a left join but returns all rows from the right table and matching rows from the left table. Non-matching rows in the left table have NULL (or NaN) values in the result.\n\n\n\n\n\n\n\n\nleft\n\n\n\n\n\n\n\n\nkey1\nkey2\nA\nB\n\n\n\n\n0\nK0\nK0\nA0\nB0\n\n\n1\nK0\nK1\nA1\nB1\n\n\n2\nK1\nK0\nA2\nB2\n\n\n3\nK2\nK1\nA3\nB3\n\n\n\n\n\n\n\n\n\n\n\nright\n\n\n\n\n\n\n\n\nkey1\nkey2\nC\nD\n\n\n\n\n0\nK0\nK0\nC0\nD0\n\n\n1\nK1\nK0\nC1\nD1\n\n\n2\nK1\nK0\nC2\nD2\n\n\n3\nK2\nK0\nC3\nD3\n\n\n\n\n\n\n\n\n\n\npd.merge(left, right, how=\"right\", on=[\"key1\", \"key2\"])\n\n\n\n\n\n\n\n\nkey1\nkey2\nA\nB\nC\nD\n\n\n\n\n0\nK0\nK0\nA0\nB0\nC0\nD0\n\n\n1\nK1\nK0\nA2\nB2\nC1\nD1\n\n\n2\nK1\nK0\nA2\nB2\nC2\nD2\n\n\n3\nK2\nK0\nNaN\nNaN\nC3\nD3\n\n\n\n\n\n\n\n\n\nCross join\nA cross join is used to create all possible combinations of rows from multiple tables or DataFrames. It can be useful in specific situations, such as when you want to generate all possible pairs or combinations of data.\n\n\n\n\n\n\n\n\nleft\n\n\n\n\n\n\n\n\nkey1\nkey2\nA\nB\n\n\n\n\n0\nK0\nK0\nA0\nB0\n\n\n1\nK0\nK1\nA1\nB1\n\n\n2\nK1\nK0\nA2\nB2\n\n\n3\nK2\nK1\nA3\nB3\n\n\n\n\n\n\n\n\n\n\n\nright\n\n\n\n\n\n\n\n\nkey1\nkey2\nC\nD\n\n\n\n\n0\nK0\nK0\nC0\nD0\n\n\n1\nK1\nK0\nC1\nD1\n\n\n2\nK1\nK0\nC2\nD2\n\n\n3\nK2\nK0\nC3\nD3\n\n\n\n\n\n\n\n\n\n\npd.merge(left, right, how=\"cross\")\n\n\n\n\n\n\n\n\nkey1_x\nkey2_x\nA\nB\nkey1_y\nkey2_y\nC\nD\n\n\n\n\n0\nK0\nK0\nA0\nB0\nK0\nK0\nC0\nD0\n\n\n1\nK0\nK0\nA0\nB0\nK1\nK0\nC1\nD1\n\n\n2\nK0\nK0\nA0\nB0\nK1\nK0\nC2\nD2\n\n\n3\nK0\nK0\nA0\nB0\nK2\nK0\nC3\nD3\n\n\n4\nK0\nK1\nA1\nB1\nK0\nK0\nC0\nD0\n\n\n5\nK0\nK1\nA1\nB1\nK1\nK0\nC1\nD1\n\n\n6\nK0\nK1\nA1\nB1\nK1\nK0\nC2\nD2\n\n\n7\nK0\nK1\nA1\nB1\nK2\nK0\nC3\nD3\n\n\n8\nK1\nK0\nA2\nB2\nK0\nK0\nC0\nD0\n\n\n9\nK1\nK0\nA2\nB2\nK1\nK0\nC1\nD1\n\n\n10\nK1\nK0\nA2\nB2\nK1\nK0\nC2\nD2\n\n\n11\nK1\nK0\nA2\nB2\nK2\nK0\nC3\nD3\n\n\n12\nK2\nK1\nA3\nB3\nK0\nK0\nC0\nD0\n\n\n13\nK2\nK1\nA3\nB3\nK1\nK0\nC1\nD1\n\n\n14\nK2\nK1\nA3\nB3\nK1\nK0\nC2\nD2\n\n\n15\nK2\nK1\nA3\nB3\nK2\nK0\nC3\nD3"
  },
  {
    "objectID": "vignettes/3_Data_manipulation.html#string-manipulation-in-pandas",
    "href": "vignettes/3_Data_manipulation.html#string-manipulation-in-pandas",
    "title": "Data Manipulation with pandas",
    "section": "String Manipulation in Pandas",
    "text": "String Manipulation in Pandas\nString manipulation is an essential part of data pre-processing and analysis in Pandas, especially when dealing with textual data. The str accessor in Pandas provides a wide range of string functions that allow you to clean, transform, and extract valuable information from text data within a DataFrame.\nHere, we explore some of the most commonly used string manipulation functions available in Pandas for DataFrames.\n\nstr.replace() Replaces occurrences of a pattern (string or regex) with another string.\n\ncms.columns.str.replace(' ','_')  # Replace \"_\" with spaces\n\nIndex(['ID', 'Facility_Name', 'County', 'Hospital_Type', 'Star_Rating',\n       'No_of_Surveys', 'Response_Rate', 'Overall_Rating'],\n      dtype='object')\n\n\nstr.contains()\nChecks if each string contains a specified substring (can use regular expressions).\n\nmask = cms[\"Facility Name\"].str.contains('GENERAL')\ncms[mask]\n\n\n\n\n\n\n\n\nID\nFacility Name\nCounty\nHospital Type\nStar Rating\nNo of Surveys\nResponse Rate\nOverall Rating\n\n\n\n\n6\n151317\nGREENE COUNTY GENERAL HOSPITAL\nGREENE\nCritical Access Hospital\n3\n114\n22\n3\n\n\n8\n490057\nSENTARA GENERAL HOSPITAL\nVIRGINIA BEACH\nAcute Care Hospital\n4\n619\n32\n3\n\n\n13\n501339\nWHIDBEY GENERAL HOSPITAL\nISLAND\nCritical Access Hospital\n3\n389\n29\n3\n\n\n\n\n\n\n\n\ncol_mask = cms.columns.str.contains('Rating')\ncms.columns[col_mask]\n\nIndex(['Star Rating', 'Overall Rating'], dtype='object')\n\n\nChecks if each string contains a specified regular expression pattern.\n\nmask_col = cms.columns.str.contains('[A-Z][a-z]*\\s[A-Z][a-z]{3}$')\ncms.columns[mask_col]\n\n&lt;&gt;:1: SyntaxWarning:\n\ninvalid escape sequence '\\s'\n\n&lt;&gt;:1: SyntaxWarning:\n\ninvalid escape sequence '\\s'\n\n/var/folders/8g/qvx6xyzs72q3wv286d96s_y91yzgmv/T/ipykernel_34881/2589341955.py:1: SyntaxWarning:\n\ninvalid escape sequence '\\s'\n\n\n\nIndex(['Facility Name', 'Hospital Type', 'Response Rate'], dtype='object')\n\n\nHere, the regular expression [A-Z][a-z]*\\s[A-Z][a-z]{3}$ can be broken down into smaller chunks for better understanding:\n\n[A-Z] matches an uppercase character from ‘A’ to ‘Z’.\n[a-z]* matches a set of lowercase characters from ‘a’ to ‘z’.\nmatches a space.\n[A-Z] matches an uppercase character from ‘A’ to ‘Z’.\n[a-z]{3} matches any three lowercase characters from ‘a’ to ‘z’.\n$ matches the end of the string\n\nPutting this together, the expression selects column names that contains two words of characters separated by a space with the first character in each word in upper case and the second word have four characters. Thus, it should match column names: Facility Name, Hospital Type, and Response Rate.\nIf you’re unfamiliar with regular expressions, you can skip this section for now. However, interested readers can find many online resources to learn about regular expressions. One of my favorite online tools for building and testing regular expressions is https://regexr.com. You can use this tool to test the correctness of a regular expression.\nstr.startswith() and str.endswith() Checks if each string starts or ends with a specified substring.\n\nmask_county = cms.County.str.startswith('S')\ncms.County[mask_county]\n\n0     SAN DIEGO\n3     SEBASTIAN\n4        SHELBY\n12       SUMNER\nName: County, dtype: object\n\n\n\nmask_col = cms.columns.str.endswith('e')\ncms.columns[mask_col]\n\nIndex(['Facility Name', 'Hospital Type', 'Response Rate'], dtype='object')\n\n\nstr.len() Returns the length of each string in the Series.\n\ncms['County'].str.len()\n\n0      9\n1      4\n2      4\n3      9\n4      6\n5      6\n6      6\n7      9\n8     14\n9      7\n10    11\n11    10\n12     6\n13     6\n14    11\nName: County, dtype: int64\n\n\nstr.split() Splits each string in the Series into a list of substrings based on a specified delimiter.\n\ncms['Hospital Type'].str.split().str[0]  # Split the Hospital Type column and take the first part\n\n0        Acute\n1        Acute\n2        Acute\n3        Acute\n4        Acute\n5        Acute\n6     Critical\n7     Critical\n8        Acute\n9        Acute\n10       Acute\n11       Acute\n12       Acute\n13    Critical\n14       Acute\nName: Hospital Type, dtype: object\n\n\nstr.join() Concatenates a list of strings into a single string with a specified separator.\n\ncms[['Facility Name', 'County']].apply(','.join, axis=1)  # Join first and last names\n\n0            SCRIPPS GREEN HOSPITAL,SAN DIEGO\n1                    ST BERNARD HOSPITAL,COOK\n2                    SOUTH LAKE HOSPITAL,LAKE\n3         MERCY HOSPITAL FORT SMITH,SEBASTIAN\n4            BAPTIST MEMORIAL HOSPITAL,SHELBY\n5     ST JOSEPH REGIONAL HEALTH CENTER,BRAZOS\n6       GREENE COUNTY GENERAL HOSPITAL,GREENE\n7       SOUTHWEST MEMORIAL HOSPITAL,MONTEZUMA\n8     SENTARA GENERAL HOSPITAL,VIRGINIA BEACH\n9           PIEDMONT FAYETTE HOSPITAL,FAYETTE\n10     MISSION COMMUNITY HOSPITAL,LOS ANGELES\n11                DOCTORS HOSPITAL,MIAMI-DADE\n12      SUMNER REGIONAL MEDICAL CENTER,SUMNER\n13            WHIDBEY GENERAL HOSPITAL,ISLAND\n14      NORTHRIDGE MEDICAL CENTER,LOS ANGELES\ndtype: object\n\n\nstr.find() Returns the lowest index of the substring; returns -1 if not found.\n\ncms['Facility Name'].str.find('MEMORIAL')\n\n0     -1\n1     -1\n2     -1\n3     -1\n4      8\n5     -1\n6     -1\n7     10\n8     -1\n9     -1\n10    -1\n11    -1\n12    -1\n13    -1\n14    -1\nName: Facility Name, dtype: int64\n\n\nstr.zfill() Pads each string in the Series with zeros on the left to achieve a specified width.\n\ncms['ID'].astype(str).str.zfill(6)  # Ensure all zip codes have 5 digits\n\n0     050424\n1     140103\n2     100051\n3     040062\n4     440048\n5     450011\n6     151317\n7     061327\n8     490057\n9     110215\n10    050704\n11    100296\n12    440003\n13    501339\n14    050116\nName: ID, dtype: object\n\n\nstr.cat() Concatenates strings in the Series/Index with an optional separator.\n\ncms['Facility Name'].str.cat(cms['County'], sep='-')\n\n0            SCRIPPS GREEN HOSPITAL-SAN DIEGO\n1                    ST BERNARD HOSPITAL-COOK\n2                    SOUTH LAKE HOSPITAL-LAKE\n3         MERCY HOSPITAL FORT SMITH-SEBASTIAN\n4            BAPTIST MEMORIAL HOSPITAL-SHELBY\n5     ST JOSEPH REGIONAL HEALTH CENTER-BRAZOS\n6       GREENE COUNTY GENERAL HOSPITAL-GREENE\n7       SOUTHWEST MEMORIAL HOSPITAL-MONTEZUMA\n8     SENTARA GENERAL HOSPITAL-VIRGINIA BEACH\n9           PIEDMONT FAYETTE HOSPITAL-FAYETTE\n10     MISSION COMMUNITY HOSPITAL-LOS ANGELES\n11                DOCTORS HOSPITAL-MIAMI-DADE\n12      SUMNER REGIONAL MEDICAL CENTER-SUMNER\n13            WHIDBEY GENERAL HOSPITAL-ISLAND\n14      NORTHRIDGE MEDICAL CENTER-LOS ANGELES\nName: Facility Name, dtype: object\n\n\nstr.lower() and str.upper()\nConverts all characters in a string to lowercase or uppercase, respectively.\n\ncms[\"Facility Name\"].str.lower() # Convert to lowercase\n\n0               scripps green hospital\n1                  st bernard hospital\n2                  south lake hospital\n3            mercy hospital fort smith\n4            baptist memorial hospital\n5     st joseph regional health center\n6       greene county general hospital\n7          southwest memorial hospital\n8             sentara general hospital\n9            piedmont fayette hospital\n10          mission community hospital\n11                    doctors hospital\n12      sumner regional medical center\n13            whidbey general hospital\n14           northridge medical center\nName: Facility Name, dtype: object\n\n\n\ncms[\"Hospital Type\"].str.upper() # Convert to uppercase\n\n0          ACUTE CARE HOSPITAL\n1          ACUTE CARE HOSPITAL\n2          ACUTE CARE HOSPITAL\n3          ACUTE CARE HOSPITAL\n4          ACUTE CARE HOSPITAL\n5          ACUTE CARE HOSPITAL\n6     CRITICAL ACCESS HOSPITAL\n7     CRITICAL ACCESS HOSPITAL\n8          ACUTE CARE HOSPITAL\n9          ACUTE CARE HOSPITAL\n10         ACUTE CARE HOSPITAL\n11         ACUTE CARE HOSPITAL\n12         ACUTE CARE HOSPITAL\n13    CRITICAL ACCESS HOSPITAL\n14         ACUTE CARE HOSPITAL\nName: Hospital Type, dtype: object\n\n\nstr.capitalize() and str.title()\n\nstr.capitalize() converts the first character of each string to uppercase and the rest to lowercase.\nstr.title() converts the first character of each word to uppercase and the rest to lowercase.\n\n\ncms['Facility Name'].str.capitalize()\n\n0               Scripps green hospital\n1                  St bernard hospital\n2                  South lake hospital\n3            Mercy hospital fort smith\n4            Baptist memorial hospital\n5     St joseph regional health center\n6       Greene county general hospital\n7          Southwest memorial hospital\n8             Sentara general hospital\n9            Piedmont fayette hospital\n10          Mission community hospital\n11                    Doctors hospital\n12      Sumner regional medical center\n13            Whidbey general hospital\n14           Northridge medical center\nName: Facility Name, dtype: object\n\n\n\ncms['Facility Name'].str.title()\n\n0               Scripps Green Hospital\n1                  St Bernard Hospital\n2                  South Lake Hospital\n3            Mercy Hospital Fort Smith\n4            Baptist Memorial Hospital\n5     St Joseph Regional Health Center\n6       Greene County General Hospital\n7          Southwest Memorial Hospital\n8             Sentara General Hospital\n9            Piedmont Fayette Hospital\n10          Mission Community Hospital\n11                    Doctors Hospital\n12      Sumner Regional Medical Center\n13            Whidbey General Hospital\n14           Northridge Medical Center\nName: Facility Name, dtype: object\n\n\n\nThis concludes the data manipulation section. By the end of this section, you should now be able to confidently read and write datasets into and from DataFrames, pre-process and clean data, handle missing values, group, join, and transform data, and perform basic statistical analysis to gain insights into the underlying data.\nIn the next section, we will dive into data visualization, where you’ll learn how to create insightful and compelling charts and plots using the plotnine package to better communicate your findings."
  },
  {
    "objectID": "vignettes/1_Introduction.html",
    "href": "vignettes/1_Introduction.html",
    "title": "Basics of Python Programming Language",
    "section": "",
    "text": "Python is a dynamic, interpreted general purpose programming language initially created by Guido van Rossum in 1991.\nSupports several popular programming paradigms:\n\nprocedural\nobject-oriented\nfunctional\n\nPython is widely used in bioinformatics and scientific computing, as well as many other fields and in industry.\nSpecifically designed to make programs readable and easy to develop.\nVersatile and easy-to-use language.\nPython is available on all popular operating systems"
  },
  {
    "objectID": "vignettes/1_Introduction.html#what-is-python",
    "href": "vignettes/1_Introduction.html#what-is-python",
    "title": "Basics of Python Programming Language",
    "section": "",
    "text": "Python is a dynamic, interpreted general purpose programming language initially created by Guido van Rossum in 1991.\nSupports several popular programming paradigms:\n\nprocedural\nobject-oriented\nfunctional\n\nPython is widely used in bioinformatics and scientific computing, as well as many other fields and in industry.\nSpecifically designed to make programs readable and easy to develop.\nVersatile and easy-to-use language.\nPython is available on all popular operating systems"
  },
  {
    "objectID": "vignettes/1_Introduction.html#why-learn-python",
    "href": "vignettes/1_Introduction.html#why-learn-python",
    "title": "Basics of Python Programming Language",
    "section": "Why learn Python?",
    "text": "Why learn Python?\n\nR and Python are the two most popular programming languages used by data analysts and data scientists. Both are free and open source.\nPython is a general-purpose programming language, while R is a statistical programming language.\nGoogle Trend Search Index for R (blue) versus Python (red) over the last 10 years:"
  },
  {
    "objectID": "vignettes/1_Introduction.html#python-programming-language",
    "href": "vignettes/1_Introduction.html#python-programming-language",
    "title": "Basics of Python Programming Language",
    "section": "Python Programming Language",
    "text": "Python Programming Language\n\nStandard library provides built-in support for several common tasks:\n\nnumerical & mathematical functions\ninteracting with files and the operating system etc.\n\nHas a rich library:\n\nPandas - Data Manipulation and Analysis\n\nBioPython - For Bioinformatics\nNumPy - Multi-dimensional arrays/matrices along with high-level mathematical functions\nMatplotlib - For Plots\nTensorFlow - Machine Learning and AI"
  },
  {
    "objectID": "vignettes/1_Introduction.html#how-to-use-python",
    "href": "vignettes/1_Introduction.html#how-to-use-python",
    "title": "Basics of Python Programming Language",
    "section": "How to use Python?",
    "text": "How to use Python?\n\nInteractive Mode\n\nFirst invoke the Python interpreter and then work with it interactively.\nGive the interpreter Python commands, one at a time.\nTo start the Python interpreter in interactive mode, type the command python on the command-line (shell prompt), as shown below. \n\n\n\nScripting Mode\n\nScripting mode is also called the normal mode (programming mode)\nNon-interactive\nProvide the Python interpreter a text file containing a Python program (script) as input, on the command-line, as follows: \n\n\n\nJupyter Notebook\n\nA web application that allows creating and sharing documents that contain live code, equations, visualizations and explanatory text.\nProvides a rich architecture for interactive data science and scientific computing with:\n\nOver 40 programming languages such as Python, R, Julia and Scala.\nA browser-based notebook with support for code, rich text, math expressions, plots and other rich media.\nSupport for interactive data visualization.\nEasy to use tools for parallel computing.\n\n\n\n\n\n\n\n\nTip\n\n\n\nIn this course, we will use Jupyter Notebook (or JupyterLab—the more powerful and extensible evolution of Jupyter Notebook—for all Python coding exercises). Feel free to choose either Jupyter Notebook or JupyterLab based on your preference, as both are widely supported and have similar functionality for the purposes of this course.\n\n\n\n\nAny IDE of your choice\n\n\n\nGoogle search top 10 results: Integrated development environment Software / python"
  },
  {
    "objectID": "vignettes/1_Introduction.html#a-look-around-jupyter-notebook",
    "href": "vignettes/1_Introduction.html#a-look-around-jupyter-notebook",
    "title": "Basics of Python Programming Language",
    "section": "A look around Jupyter Notebook",
    "text": "A look around Jupyter Notebook\n\nOpen Jupyter Notebook and create a new notebook as shown below.\n\n\n\n\n\n\n\n\n\nJuptyer has two modes: edit mode (blue cell border) and command mode (grey) cell border).\n\nTo enter edit mode, press Enter or click into a cell. In edit mode, most of the keyboard is dedicated to typing into the cell’s editor. Thus, in edit mode there are relatively few shortcuts.\n\nTo enter command mode, press Esc. In command mode, the entire keyboard is available for shortcuts, so there are many more.\n\n\nTo enter different types of content—such as Markdown, raw text, or Python code, you need to select the appropriate cell type. You can do this by using the drop-down menu in the toolbar at the top of the Jupyter Notebook interface.\n\nCode cells allow you to write and execute Python code.\nMarkdown cells are used to format text with headings, lists, links, and other rich text features.\nRaw cells allow you to input unformatted text that will not be executed or rendered.\n\n\n\n\nShortcuts to execute cells in both modes:\n\nShift + Enter run the current cell \nCtrl + Enter (Mac: Cmd + Enter) run selected cells\nAlt + Enter (Mac: Option + Enter) run the current cell, insert below\nCtrl + S (Mac: Cmd + S) save and checkpoint \n\nSome useful shortcuts, in command mode:\n\nUp select cell above\nDown select cell below\nShift + Up extend selected cells above\nShift + Down extend selected cells below\nA insert cell above \nB insert cell below \nD + D (press the key twice) delete selected cells \n\nThe Help-&gt;Keyboard Shortcuts dialog lists the available shortcuts (or type h in Command mode).\n\n\nTo get started, open Jupyter Notebook and navigate to the IntroPython folder, which was shared with you. Once inside, open the notebook titled IntroPython-Day1.ipynb. This notebook contains the materials and exercises for Day 1 of the course."
  },
  {
    "objectID": "vignettes/1_Introduction.html#comments",
    "href": "vignettes/1_Introduction.html#comments",
    "title": "Basics of Python Programming Language",
    "section": "Comments",
    "text": "Comments\nWhen writing code it is very handy to make notes to yourself about what the code is doing. In Python, any text that appears after the hash symbol ‘#’ is called a ‘comment’. Python interpreter can’t see this text, and won’t try to run it as commands. Comments are useful for reminding your future self what you were aiming to do with a particular line of code, and what was or wasn’t working.\n\n# This is a comment"
  },
  {
    "objectID": "vignettes/1_Introduction.html#help",
    "href": "vignettes/1_Introduction.html#help",
    "title": "Basics of Python Programming Language",
    "section": "Help",
    "text": "Help\nThe Python help() function invokes the interactive built-in help system. If the argument is a string, then the string is treated as the name of a module, function, class, keyword, or documentation topic, and a help page is printed on the console. If the argument is any other kind of object, a help page on the object is displayed.\nIt’s recommended to try it in your interpreter when you need help to write Python program and use Python modules.\nThe following displays the help on the builtin print function.\n\nhelp('print')\n\nHelp on built-in function print in module builtins:\n\nprint(*args, sep=' ', end='\\n', file=None, flush=False)\n    Prints the values to a stream, or to sys.stdout by default.\n\n    sep\n      string inserted between values, default a space.\n    end\n      string appended after the last value, default a newline.\n    file\n      a file-like object (stream); defaults to the current sys.stdout.\n    flush\n      whether to forcibly flush the stream.\n\n\n\nThe following displays the help page on the math module (or library).\n\n\nhelp('math')\n\nHelp on module math:\n\nNAME\n    math\n\nMODULE REFERENCE\n    https://docs.python.org/3.12/library/math.html\n\n    The following documentation is automatically generated from the Python\n    source files.  It may be incomplete, incorrect or include features that\n    are considered implementation detail and may vary between Python\n    implementations.  When in doubt, consult the module reference at the\n    location listed above.\n\nDESCRIPTION\n    This module provides access to the mathematical functions\n    defined by the C standard.\n\nFUNCTIONS\n    acos(x, /)\n        Return the arc cosine (measured in radians) of x.\n\n        The result is between 0 and pi.\n\n    acosh(x, /)\n        Return the inverse hyperbolic cosine of x.\n\n    asin(x, /)\n        Return the arc sine (measured in radians) of x.\n\n        The result is between -pi/2 and pi/2.\n\n    asinh(x, /)\n        Return the inverse hyperbolic sine of x.\n\n    atan(x, /)\n        Return the arc tangent (measured in radians) of x.\n\n        The result is between -pi/2 and pi/2.\n\n    atan2(y, x, /)\n        Return the arc tangent (measured in radians) of y/x.\n\n        Unlike atan(y/x), the signs of both x and y are considered.\n\n    atanh(x, /)\n        Return the inverse hyperbolic tangent of x.\n\n    cbrt(x, /)\n        Return the cube root of x.\n\n    ceil(x, /)\n        Return the ceiling of x as an Integral.\n\n        This is the smallest integer &gt;= x.\n\n    comb(n, k, /)\n        Number of ways to choose k items from n items without repetition and without order.\n\n        Evaluates to n! / (k! * (n - k)!) when k &lt;= n and evaluates\n        to zero when k &gt; n.\n\n        Also called the binomial coefficient because it is equivalent\n        to the coefficient of k-th term in polynomial expansion of the\n        expression (1 + x)**n.\n\n        Raises TypeError if either of the arguments are not integers.\n        Raises ValueError if either of the arguments are negative.\n\n    copysign(x, y, /)\n        Return a float with the magnitude (absolute value) of x but the sign of y.\n\n        On platforms that support signed zeros, copysign(1.0, -0.0)\n        returns -1.0.\n\n    cos(x, /)\n        Return the cosine of x (measured in radians).\n\n    cosh(x, /)\n        Return the hyperbolic cosine of x.\n\n    degrees(x, /)\n        Convert angle x from radians to degrees.\n\n    dist(p, q, /)\n        Return the Euclidean distance between two points p and q.\n\n        The points should be specified as sequences (or iterables) of\n        coordinates.  Both inputs must have the same dimension.\n\n        Roughly equivalent to:\n            sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))\n\n    erf(x, /)\n        Error function at x.\n\n    erfc(x, /)\n        Complementary error function at x.\n\n    exp(x, /)\n        Return e raised to the power of x.\n\n    exp2(x, /)\n        Return 2 raised to the power of x.\n\n    expm1(x, /)\n        Return exp(x)-1.\n\n        This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.\n\n    fabs(x, /)\n        Return the absolute value of the float x.\n\n    factorial(n, /)\n        Find n!.\n\n        Raise a ValueError if x is negative or non-integral.\n\n    floor(x, /)\n        Return the floor of x as an Integral.\n\n        This is the largest integer &lt;= x.\n\n    fmod(x, y, /)\n        Return fmod(x, y), according to platform C.\n\n        x % y may differ.\n\n    frexp(x, /)\n        Return the mantissa and exponent of x, as pair (m, e).\n\n        m is a float and e is an int, such that x = m * 2.**e.\n        If x is 0, m and e are both 0.  Else 0.5 &lt;= abs(m) &lt; 1.0.\n\n    fsum(seq, /)\n        Return an accurate floating point sum of values in the iterable seq.\n\n        Assumes IEEE-754 floating point arithmetic.\n\n    gamma(x, /)\n        Gamma function at x.\n\n    gcd(*integers)\n        Greatest Common Divisor.\n\n    hypot(...)\n        hypot(*coordinates) -&gt; value\n\n        Multidimensional Euclidean distance from the origin to a point.\n\n        Roughly equivalent to:\n            sqrt(sum(x**2 for x in coordinates))\n\n        For a two dimensional point (x, y), gives the hypotenuse\n        using the Pythagorean theorem:  sqrt(x*x + y*y).\n\n        For example, the hypotenuse of a 3/4/5 right triangle is:\n\n            &gt;&gt;&gt; hypot(3.0, 4.0)\n            5.0\n\n    isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)\n        Determine whether two floating point numbers are close in value.\n\n          rel_tol\n            maximum difference for being considered \"close\", relative to the\n            magnitude of the input values\n          abs_tol\n            maximum difference for being considered \"close\", regardless of the\n            magnitude of the input values\n\n        Return True if a is close in value to b, and False otherwise.\n\n        For the values to be considered close, the difference between them\n        must be smaller than at least one of the tolerances.\n\n        -inf, inf and NaN behave similarly to the IEEE 754 Standard.  That\n        is, NaN is not close to anything, even itself.  inf and -inf are\n        only close to themselves.\n\n    isfinite(x, /)\n        Return True if x is neither an infinity nor a NaN, and False otherwise.\n\n    isinf(x, /)\n        Return True if x is a positive or negative infinity, and False otherwise.\n\n    isnan(x, /)\n        Return True if x is a NaN (not a number), and False otherwise.\n\n    isqrt(n, /)\n        Return the integer part of the square root of the input.\n\n    lcm(*integers)\n        Least Common Multiple.\n\n    ldexp(x, i, /)\n        Return x * (2**i).\n\n        This is essentially the inverse of frexp().\n\n    lgamma(x, /)\n        Natural logarithm of absolute value of Gamma function at x.\n\n    log(...)\n        log(x, [base=math.e])\n        Return the logarithm of x to the given base.\n\n        If the base is not specified, returns the natural logarithm (base e) of x.\n\n    log10(x, /)\n        Return the base 10 logarithm of x.\n\n    log1p(x, /)\n        Return the natural logarithm of 1+x (base e).\n\n        The result is computed in a way which is accurate for x near zero.\n\n    log2(x, /)\n        Return the base 2 logarithm of x.\n\n    modf(x, /)\n        Return the fractional and integer parts of x.\n\n        Both results carry the sign of x and are floats.\n\n    nextafter(x, y, /, *, steps=None)\n        Return the floating-point value the given number of steps after x towards y.\n\n        If steps is not specified or is None, it defaults to 1.\n\n        Raises a TypeError, if x or y is not a double, or if steps is not an integer.\n        Raises ValueError if steps is negative.\n\n    perm(n, k=None, /)\n        Number of ways to choose k items from n items without repetition and with order.\n\n        Evaluates to n! / (n - k)! when k &lt;= n and evaluates\n        to zero when k &gt; n.\n\n        If k is not specified or is None, then k defaults to n\n        and the function returns n!.\n\n        Raises TypeError if either of the arguments are not integers.\n        Raises ValueError if either of the arguments are negative.\n\n    pow(x, y, /)\n        Return x**y (x to the power of y).\n\n    prod(iterable, /, *, start=1)\n        Calculate the product of all the elements in the input iterable.\n\n        The default start value for the product is 1.\n\n        When the iterable is empty, return the start value.  This function is\n        intended specifically for use with numeric values and may reject\n        non-numeric types.\n\n    radians(x, /)\n        Convert angle x from degrees to radians.\n\n    remainder(x, y, /)\n        Difference between x and the closest integer multiple of y.\n\n        Return x - n*y where n*y is the closest integer multiple of y.\n        In the case where x is exactly halfway between two multiples of\n        y, the nearest even value of n is used. The result is always exact.\n\n    sin(x, /)\n        Return the sine of x (measured in radians).\n\n    sinh(x, /)\n        Return the hyperbolic sine of x.\n\n    sqrt(x, /)\n        Return the square root of x.\n\n    sumprod(p, q, /)\n        Return the sum of products of values from two iterables p and q.\n\n        Roughly equivalent to:\n\n            sum(itertools.starmap(operator.mul, zip(p, q, strict=True)))\n\n        For float and mixed int/float inputs, the intermediate products\n        and sums are computed with extended precision.\n\n    tan(x, /)\n        Return the tangent of x (measured in radians).\n\n    tanh(x, /)\n        Return the hyperbolic tangent of x.\n\n    trunc(x, /)\n        Truncates the Real x to the nearest Integral toward 0.\n\n        Uses the __trunc__ magic method.\n\n    ulp(x, /)\n        Return the value of the least significant bit of the float x.\n\nDATA\n    e = 2.718281828459045\n    inf = inf\n    nan = nan\n    pi = 3.141592653589793\n    tau = 6.283185307179586\n\nFILE\n    /opt/anaconda3/lib/python3.12/lib-dynload/math.cpython-312-darwin.so\n\n\n\n\n\nThe help function can also be used on built-in or user-defined classes.\n\n\nhelp('int')\n\nHelp on class int in module builtins:\n\nclass int(object)\n |  int([x]) -&gt; integer\n |  int(x, base=10) -&gt; integer\n |\n |  Convert a number or string to an integer, or return 0 if no arguments\n |  are given.  If x is a number, return x.__int__().  For floating point\n |  numbers, this truncates towards zero.\n |\n |  If x is not a number or if base is given, then x must be a string,\n |  bytes, or bytearray instance representing an integer literal in the\n |  given base.  The literal can be preceded by '+' or '-' and be surrounded\n |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n |  Base 0 means to interpret the base from the string as an integer literal.\n |  &gt;&gt;&gt; int('0b100', base=0)\n |  4\n |\n |  Built-in subclasses:\n |      bool\n |\n |  Methods defined here:\n |\n |  __abs__(self, /)\n |      abs(self)\n |\n |  __add__(self, value, /)\n |      Return self+value.\n |\n |  __and__(self, value, /)\n |      Return self&value.\n |\n |  __bool__(self, /)\n |      True if self else False\n |\n |  __ceil__(...)\n |      Ceiling of an Integral returns itself.\n |\n |  __divmod__(self, value, /)\n |      Return divmod(self, value).\n |\n |  __eq__(self, value, /)\n |      Return self==value.\n |\n |  __float__(self, /)\n |      float(self)\n |\n |  __floor__(...)\n |      Flooring an Integral returns itself.\n |\n |  __floordiv__(self, value, /)\n |      Return self//value.\n |\n |  __format__(self, format_spec, /)\n |      Convert to a string according to format_spec.\n |\n |  __ge__(self, value, /)\n |      Return self&gt;=value.\n |\n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |\n |  __getnewargs__(self, /)\n |\n |  __gt__(self, value, /)\n |      Return self&gt;value.\n |\n |  __hash__(self, /)\n |      Return hash(self).\n |\n |  __index__(self, /)\n |      Return self converted to an integer, if self is suitable for use as an index into a list.\n |\n |  __int__(self, /)\n |      int(self)\n |\n |  __invert__(self, /)\n |      ~self\n |\n |  __le__(self, value, /)\n |      Return self&lt;=value.\n |\n |  __lshift__(self, value, /)\n |      Return self&lt;&lt;value.\n |\n |  __lt__(self, value, /)\n |      Return self&lt;value.\n |\n |  __mod__(self, value, /)\n |      Return self%value.\n |\n |  __mul__(self, value, /)\n |      Return self*value.\n |\n |  __ne__(self, value, /)\n |      Return self!=value.\n |\n |  __neg__(self, /)\n |      -self\n |\n |  __or__(self, value, /)\n |      Return self|value.\n |\n |  __pos__(self, /)\n |      +self\n |\n |  __pow__(self, value, mod=None, /)\n |      Return pow(self, value, mod).\n |\n |  __radd__(self, value, /)\n |      Return value+self.\n |\n |  __rand__(self, value, /)\n |      Return value&self.\n |\n |  __rdivmod__(self, value, /)\n |      Return divmod(value, self).\n |\n |  __repr__(self, /)\n |      Return repr(self).\n |\n |  __rfloordiv__(self, value, /)\n |      Return value//self.\n |\n |  __rlshift__(self, value, /)\n |      Return value&lt;&lt;self.\n |\n |  __rmod__(self, value, /)\n |      Return value%self.\n |\n |  __rmul__(self, value, /)\n |      Return value*self.\n |\n |  __ror__(self, value, /)\n |      Return value|self.\n |\n |  __round__(...)\n |      Rounding an Integral returns itself.\n |\n |      Rounding with an ndigits argument also returns an integer.\n |\n |  __rpow__(self, value, mod=None, /)\n |      Return pow(value, self, mod).\n |\n |  __rrshift__(self, value, /)\n |      Return value&gt;&gt;self.\n |\n |  __rshift__(self, value, /)\n |      Return self&gt;&gt;value.\n |\n |  __rsub__(self, value, /)\n |      Return value-self.\n |\n |  __rtruediv__(self, value, /)\n |      Return value/self.\n |\n |  __rxor__(self, value, /)\n |      Return value^self.\n |\n |  __sizeof__(self, /)\n |      Returns size in memory, in bytes.\n |\n |  __sub__(self, value, /)\n |      Return self-value.\n |\n |  __truediv__(self, value, /)\n |      Return self/value.\n |\n |  __trunc__(...)\n |      Truncating an Integral returns itself.\n |\n |  __xor__(self, value, /)\n |      Return self^value.\n |\n |  as_integer_ratio(self, /)\n |      Return a pair of integers, whose ratio is equal to the original int.\n |\n |      The ratio is in lowest terms and has a positive denominator.\n |\n |      &gt;&gt;&gt; (10).as_integer_ratio()\n |      (10, 1)\n |      &gt;&gt;&gt; (-10).as_integer_ratio()\n |      (-10, 1)\n |      &gt;&gt;&gt; (0).as_integer_ratio()\n |      (0, 1)\n |\n |  bit_count(self, /)\n |      Number of ones in the binary representation of the absolute value of self.\n |\n |      Also known as the population count.\n |\n |      &gt;&gt;&gt; bin(13)\n |      '0b1101'\n |      &gt;&gt;&gt; (13).bit_count()\n |      3\n |\n |  bit_length(self, /)\n |      Number of bits necessary to represent self in binary.\n |\n |      &gt;&gt;&gt; bin(37)\n |      '0b100101'\n |      &gt;&gt;&gt; (37).bit_length()\n |      6\n |\n |  conjugate(...)\n |      Returns self, the complex conjugate of any int.\n |\n |  is_integer(self, /)\n |      Returns True. Exists for duck type compatibility with float.is_integer.\n |\n |  to_bytes(self, /, length=1, byteorder='big', *, signed=False)\n |      Return an array of bytes representing an integer.\n |\n |      length\n |        Length of bytes object to use.  An OverflowError is raised if the\n |        integer is not representable with the given number of bytes.  Default\n |        is length 1.\n |      byteorder\n |        The byte order used to represent the integer.  If byteorder is 'big',\n |        the most significant byte is at the beginning of the byte array.  If\n |        byteorder is 'little', the most significant byte is at the end of the\n |        byte array.  To request the native byte order of the host system, use\n |        `sys.byteorder' as the byte order value.  Default is to use 'big'.\n |      signed\n |        Determines whether two's complement is used to represent the integer.\n |        If signed is False and a negative integer is given, an OverflowError\n |        is raised.\n |\n |  ----------------------------------------------------------------------\n |  Class methods defined here:\n |\n |  from_bytes(bytes, byteorder='big', *, signed=False)\n |      Return the integer represented by the given array of bytes.\n |\n |      bytes\n |        Holds the array of bytes to convert.  The argument must either\n |        support the buffer protocol or be an iterable object producing bytes.\n |        Bytes and bytearray are examples of built-in objects that support the\n |        buffer protocol.\n |      byteorder\n |        The byte order used to represent the integer.  If byteorder is 'big',\n |        the most significant byte is at the beginning of the byte array.  If\n |        byteorder is 'little', the most significant byte is at the end of the\n |        byte array.  To request the native byte order of the host system, use\n |        `sys.byteorder' as the byte order value.  Default is to use 'big'.\n |      signed\n |        Indicates whether two's complement is used to represent the integer.\n |\n |  ----------------------------------------------------------------------\n |  Static methods defined here:\n |\n |  __new__(*args, **kwargs)\n |      Create and return a new object.  See help(type) for accurate signature.\n |\n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |\n |  denominator\n |      the denominator of a rational number in lowest terms\n |\n |  imag\n |      the imaginary part of a complex number\n |\n |  numerator\n |      the numerator of a rational number in lowest terms\n |\n |  real\n |      the real part of a complex number"
  },
  {
    "objectID": "vignettes/1_Introduction.html#printing-values",
    "href": "vignettes/1_Introduction.html#printing-values",
    "title": "Basics of Python Programming Language",
    "section": "Printing values",
    "text": "Printing values\nThe print command allows printing messages and also to execute some expressions. Below shows some example usages of the print statement.\nTo print a message or text enclose it within quotation marks.\n\nprint(\"Hello World!\")\n\nHello World!\n\n\nYou can print multiple expressions by separating them with commas. Python will insert a space between each element and a newline at the end of the message.\nYou can change this behaviour using the following two arguments.\n\nsep - takes a character that separates multiple print statements\nend - takes a character to print add the end of the statement.\n\n\nprint(1, 2, 3)\nprint(1, 2, 3, sep='|')\nprint(1, 2, 3, sep=',', end='*')\n\n1 2 3\n1|2|3\n1,2,3*\n\n\nSome additional example usages of print command:\n\nPython provides multiple ways to format numbers using f-strings as follows.\n{data:[align][width][delimiter].[precision]}\n\nAlign: &lt; (left) &gt; (right) ^ (center)\nWidth: number of characters\nDelimiter: 1000s separator (normally , or _)\nPrecision: how many digits displayed for decimal numbers or maximum field width for strings\n\nf is fixed decimal places\ng is significant figures\n\n\nExamples:\n\n# Occupy 10 spaces, align left, show 5 decimal places\nprint(f'This is one way: {22/7:&lt;10.5f}.')\n# Occupy 20 spaces, align center, no decimal places\nprint(f'This is another way: {22/7:^20.0f}.')\n\nThis is one way: 3.14286   .\nThis is another way:          3          .\n\n\nUsing string format method:\n\nprint('First name is {} and the last name is \"{}!\"'.format('john', 'doe'))\n\nFirst name is john and the last name is \"doe!\""
  },
  {
    "objectID": "vignettes/1_Introduction.html#variables-and-assignment",
    "href": "vignettes/1_Introduction.html#variables-and-assignment",
    "title": "Basics of Python Programming Language",
    "section": "Variables and Assignment",
    "text": "Variables and Assignment\nIn the previous examples we directly used numbers and strings. However, we might want to assign values to variables for later usage or to deal with more complex expressions. We can associate a name to a value/expression and access the value/expression through the associated name.\n\nx = 2\nprint(x)\n\n2\n\n\n\ny = 5 * 3\nprint(y)\n\n15\n\n\nWe cannot use arbitrary strings as variables. The Python variable naming rules are:\n\nMust begin with a letter (a - z, A - Z) or underscore (_).\nOther characters can be letters, numbers or _ only.\nNames are case sensitive.\nReserved words cannot be used as a variable name."
  },
  {
    "objectID": "vignettes/1_Introduction.html#basic-data-types",
    "href": "vignettes/1_Introduction.html#basic-data-types",
    "title": "Basics of Python Programming Language",
    "section": "Basic Data Types",
    "text": "Basic Data Types\nThere are three basic numeric types in Python:\n\nPlain integers with unlimited precision (int)\nFloating point numbers or numbers with a decimal point (float)\nComplex numbers (complex)\n\nIn addition, Booleans (bool) are a subtype of integers. They represent truth or false as used in logical operations.\n\nx = 23\ny = -9\nz = complex(3, 5)\nprint(x, y, z)\n\n23 -9 (3+5j)\n\n\n\np = 5.67\nq = -22/7\nr = 2e-3\nprint(p, q, r, sep='\\n')\n\n5.67\n-3.142857142857143\n0.002\n\n\nYou can check the type of values using the built-in function type() as follows.\ntype(0)\ntype(22/7)\ntype(complex(1, 2))\ntype(True)\ntype(False)\n\n\n&lt;class 'int'&gt;\n&lt;class 'float'&gt;\n&lt;class 'complex'&gt;\n&lt;class 'bool'&gt;\n&lt;class 'bool'&gt;\n\n\nPython converts numbers internally in an expression containing mixed types to a common type for evaluation. But sometimes, we need to coerce a number explicitly from one type to another to satisfy the requirements of an operator or function parameter.\n\nx = \"5\"\nprint(int(x))        # convert x to a plain integer\nprint(float(x))      # convert x to a floating-point number\n\nx = 3\ny = 7\n# convert x to a complex number with real part x and imaginary part zero\nprint(complex(x))    \n# convert x and y to a complex number with real part x and imaginary part y\nprint(complex(x, y)) \n\n5\n5.0\n(3+0j)\n(3+7j)"
  },
  {
    "objectID": "vignettes/1_Introduction.html#sequences",
    "href": "vignettes/1_Introduction.html#sequences",
    "title": "Basics of Python Programming Language",
    "section": "Sequences",
    "text": "Sequences\nThe most basic data structure in Python is the sequence. Sequences are compound data types, and used to group together other values. Each element of a sequence is assigned a number - its position or index. The first index is zero, the second index is one, and so forth.\nThere are certain things you can do with all sequence types. These operations include indexing, slicing, adding, multiplying, and checking for membership. In addition, Python has many built-in functions to be used with sequence types: e.g., for finding the length of a sequence and for finding its largest and smallest elements.\nPython has seven built-in types of sequences (strings, bytes, lists, tuples, bytearrays, buffers, and range objects); the most common one is lists, which we will discuss now.\n\nLists\nThe list is the most versatile data-type available in Python which can be written as a list of comma-separated values (items) between square brackets. Items in a list need not all have the same type. Creating a list is as simple as listing different comma-separated values between square brackets.\n\nlist1 = ['ATG', 'TCA', 23, 12]\nlist2 = [1, 2, 3, 4, 5 ]\nlist3 = [\"a\", \"b\", \"c\", \"d\", 'pqr', 12.345]\n\n\nAccesing values in Lists\nTo access values in lists, use square brackets for slicing along with the index or indices to obtain value available at that index.\n\nlist1 = ['ATG', 'TCA', 23, 12]    # create a list \nprint(\"list1[0] -\", list1[0])     # print the first element in the list\n\nlist2 = [1, 2, 3, 4, 5 ]          # create a list \nprint(\"list2[1:5] -\", list2[1:5]) # print elements from 2 to 6\n\nlist1[0] - ATG\nlist2[1:5] - [2, 3, 4, 5]\n\n\nA few other examples of indexing and slicing:\n\nlist1 = ['Adenine', 'Cytosine', 'Guanine', 'Thymine']\nprint(list1[2])\nprint(list1[-3])\nprint(list1[2:])\nprint(list1[:-2])\n\nGuanine\nCytosine\n['Guanine', 'Thymine']\n['Adenine', 'Cytosine']\n\n\n\n\nUpdating Lists\nYou can update single or multiple elements of lists by giving the slice on the left-hand side of the assignment operator. This will access single or multiple elements as mentioned above. Then, provide the new values that you need to change on the right-hand side of the assignment operator. Make sure the number of accessed elements are the same as the number of assigning (new) elements.\n\nlist1 = ['ATG', 'TCA', 23, 12]              # create a list\nprint(\"Value at index 3 : \", list1[3])      # print the 4th element\n\nlist1[3] = 'GGC'                            # update the 4th element\nprint(\"New value at index 3 : \", list1[3])  # print the 4th element\n\nValue at index 3 :  12\nNew value at index 3 :  GGC\n\n\nAdditionally, you can add elements to the end of a list (even an empty list) with the append() function.\n\nlist1.append('CCG')                         # insert element at the end of the list\nprint(list1)                                # print the list\n\n['ATG', 'TCA', 23, 'GGC', 'CCG']\n\n\n\n\nDeleting List elements\nTo remove a list element, you can use either the del statement if you know exactly which element(s) you are deleting.\n\nprint(\"List of 5 elements =\", list1)          # print list1 \ndel list1[2]                                  # delete element based on its index (3rd element)\nprint(\"After deleting 2nd element =\", list1)  # print list1 \n\nList of 5 elements = ['ATG', 'TCA', 23, 'GGC', 'CCG']\nAfter deleting 2nd element = ['ATG', 'TCA', 'GGC', 'CCG']\n\n\nThe remove() method of a list object can also be used to delete the element based on the value.\n\nlist1.remove('TCA')                           # delete element based on its value ('TCA')\nprint(\"After removing TCA element =\",list1)   # print list1 \n\nAfter removing TCA element = ['ATG', 'GGC', 'CCG']\n\n\nAlternatively, you can use del statement after using the index() function to find the index of the element based on its value:\n\nindx = list1.index('GGC')                     # get index of element 'GGC'\ndel list1[indx]                               # delete element based on its index \nprint(\"After deleting GGC element =\", list1)  # print list1 \n\nAfter deleting GGC element = ['ATG', 'CCG']\n\n\n\n\nOther List operations\nLists respond to the + and * operators (much like strings, discussed next), where ‘+’ means concatenation and ‘*’ means repetition, and the result is a new list. In fact, lists respond to all general sequence operations.\n\nlist1 = [1, 2, 3]\nprint(\"Length of the list =\", len(list1))     # length\n\nLength of the list = 3\n\n\n\nlist2 = [4, 5, 6]\nprint(\"Concatenated list =\", list1 + list2)   # concatenation\n\nConcatenated list = [1, 2, 3, 4, 5, 6]\n\n\n\nprint(\"Repeating list elements =\", list1 * 3) # repetition \n\nRepeating list elements = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n\n\nprint(\"Is 3 a member of list1?\", 3 in list1)  # membership\n\nIs 3 a member of list1? True\n\n\n\nfor x in list1:                               # iteration (discussed in detail later)\n  print(x, end=' ')\n\n1 2 3 \n\n\n\n\n\nStrings\nStrings are amongst the most popular types in Python. We can create them simply by enclosing characters in quotes. Python treats single quotes (’‘) the same as double quotes (““). That is, ‘aaa’ and”aaa” are the same. A string can also be triple quoted, either with three single quotes, as’‘’aaa’’’, or three double quotes, as “““aaa”““.\n\nstr1 = 'This is a string'\nstr2 = \"This is also a string\"\nstr3 = \"\"\"This is a string that extends \nover multiple lines\"\"\"\nprint(str1, str2, str3, sep='\\n')\n\nThis is a string\nThis is also a string\nThis is a string that extends \nover multiple lines\n\n\nStrings can be concatenated (glued together) with the + operator, and repeated with * (similar to lists). This is another way to create new strings.\n\nwords = 'This' + 'is' + 'concatenation' # concatenation\nprint(\"Concatenation =\", words)\nprint(\"Repetition =\", 'ACG' * 3)        # repetition\nprint(\"Length =\", len(words))           # length\nprint(\"Membership =\", \"is\" in words)    # membership\n\nConcatenation = Thisisconcatenation\nRepetition = ACGACGACG\nLength = 19\nMembership = True\n\n\n\nfor x in words:      # iteration (discussed in detail later)\n  print(x, end='|')\n\nT|h|i|s|i|s|c|o|n|c|a|t|e|n|a|t|i|o|n|\n\n\nPython does not support a character type; these are treated as strings of length one, thus also considered a substring. Individual elements can be accessed with an index. Substrings can be specified with the slice notation: two indices separated by a colon.\nStrings can be accessed and manipulated using similar operations we introduced above for lists.\n\nprint(words)\nprint(words[4])\nprint(words[0:6])\nprint(words[6:])\nprint(words[-15:])\n\nThisisconcatenation\ni\nThisis\nconcatenation\nisconcatenation\n\n\n\ntext = \"ATGTCATTTGT\"\ntext[0:2] = \"CCC\"\n\nTypeError: 'str' object does not support item assignment\n\n\nTo change a value in a string, replace() function can be used.\n\nlong_text = \"\"\"Betty bought some butter. \nBut the butter was bitter. \nSo, betty baught more butter to make bitter butter better\"\"\"\nprint(\"Replaced text = \", long_text.replace(\"butter\", \"egg\"))\n\nReplaced text =  Betty bought some egg. \nBut the egg was bitter. \nSo, betty baught more egg to make bitter egg better\n\n\nThe in operator lets you check if a substring is contained within a larger string, but it does not tell you where the substring is located. This is often useful to know and python provides the .find() method which returns the index of the first occurrence of the search string, and the .rfind() method to start searching from the end of the string. If the search string is not found in the string both these methods return -1.\n\ndna = \"ATGTCACCGTTTGGC\"\nprint(\"TCA is at position:\", dna.find(\"TCA\"))\nprint(\"The last Cytosine is at position:\", dna.rfind('C'))\nprint(\"Number of Adenines:\", dna.count(\"A\"))\n\nTCA is at position: 3\nThe last Cytosine is at position: 14\nNumber of Adenines: 2\n\n\nWhen we read text from files (which we will see in the next workshop), often there is unwanted whitespace at the start or end of the string. We can remove leading whitespace with the .lstrip() method, trailing whitespace with .rstrip(), and whitespace from both ends with .strip().\nAll of these methods return a copy of the changed string, so if you want to replace the original you can assign the result of the method call to the original variable.\n\nstring = \"           This is a string with leading and trailing spaces             \"\nprint('|', string, '|')\nprint('|', string.lstrip(), '|')\nprint('|', string.rstrip(), '|')\nprint('|', string.strip(), '|')\n\n|            This is a string with leading and trailing spaces              |\n| This is a string with leading and trailing spaces              |\n|            This is a string with leading and trailing spaces |\n| This is a string with leading and trailing spaces |\n\n\nYou can split a string into a list of substrings using the .split() method, supplying the delimiter as an argument to the method. If you don’t supply any delimiter the method will split the string on whitespace by default (which is very often what you want!)\n\nseq = \"ATG TCA CCG GGC\"\ncodons = seq.split(\" \")\nprint(codons)\n\n['ATG', 'TCA', 'CCG', 'GGC']\n\n\nTo split a string into its component characters you can simply cast the string to a list:\n\nbases = list(seq)\nprint(bases)\n\n['A', 'T', 'G', ' ', 'T', 'C', 'A', ' ', 'C', 'C', 'G', ' ', 'G', 'G', 'C']\n\n\n.split() is the counterpart to the .join() method that lets you join the elements of a list into a string only if all the elements are of type String.\n\nprint(codons)\nprint(\"|\".join(codons))\n\n['ATG', 'TCA', 'CCG', 'GGC']\nATG|TCA|CCG|GGC\n\n\nWe also saw earlier that the + operator lets you concatenate strings together into a larger string. Note that this operator only works on variables of the same type. If you want to concatenate a string with an integer (or some other type), first you have to cast the integer to a string with the str() function.\n\ns = \"chr\"\nchrom_number = 2\nprint(s + str(chrom_number))\n\nchr2\n\n\n\n\nDictionary\nSometimes we want to access data by some useful name rather than an index. For example, as a result of some experiment we may have a set of genes and corresponding expression values. We could put the expression values in a list, but then we’d have to remember which index in the list correspond to which gene and this would quickly get complicated. For these situations a dictionary is a very useful data structure.\nDictionaries contain a mapping of keys to values (like a word and its corresponding definition in a dictionary). The keys of a dictionary are unique (i.e. they cannot repeat). Dictionaries do not store data in any particular order.\n\ndna = {\"A\": \"Adenine\", \"C\": \"Cytosine\", \"G\": \"Guanine\", \"T\": \"Thymine\"}\nprint(dna)\n\n{'A': 'Adenine', 'C': 'Cytosine', 'G': 'Guanine', 'T': 'Thymine'}\n\n\nYou can access values in a dictionary using the key inside square brackets.\n\nprint(\"A represents\", dna[\"A\"])\nprint(\"G represents\", dna[\"G\"])\n\nA represents Adenine\nG represents Guanine\n\n\nAn error is triggered if a key is absent from the dictionary.\n\nprint(\"N represents\", dna[\"N\"])\n\nKeyError: 'N'\n\n\nYou can access values safely with the get method, which gives back None if the key is absent and you can also supply a default values.\n\nprint(\"N represents\", dna.get(\"N\"))\nprint(\"N represents (with a default value)\", dna.get(\"N\", \"unknown\"))\n\nN represents None\nN represents (with a default value) unknown\n\n\nExamples of some operators used with dictionaries.\n\ndna = {\"A\": \"Adenine\", \"C\": \"Cytosine\", \"G\": \"Guanine\", \"T\": \"Thymine\"}\n\n# check if a key is in/not in a dictionary\nprint(\"G\" in dna)\nprint(\"Y\" not in dna)\n\nTrue\nTrue\n\n\n\n# length of a dictionary\nprint(len(dna))\n\n4\n\n\n\nprint(dna)\n# assign new values to a dictionary\ndna['Y'] = 'Pyrimidine'\nprint(dna)\n\n{'A': 'Adenine', 'C': 'Cytosine', 'G': 'Guanine', 'T': 'Thymine'}\n{'A': 'Adenine', 'C': 'Cytosine', 'G': 'Guanine', 'T': 'Thymine', 'Y': 'Pyrimidine'}\n\n\n\n# change value of an existing key\ndna['Y'] = 'Cytosine or Thymine'\nprint(dna)\n\n{'A': 'Adenine', 'C': 'Cytosine', 'G': 'Guanine', 'T': 'Thymine', 'Y': 'Cytosine or Thymine'}\n\n\n\n# list all the keys\nprint(list(dna.keys()))\n# list all values\nprint(list(dna.values()))\n# list all key value pairs\nprint(list(dna.items()))\n\n['A', 'C', 'G', 'T', 'Y']\n['Adenine', 'Cytosine', 'Guanine', 'Thymine', 'Cytosine or Thymine']\n[('A', 'Adenine'), ('C', 'Cytosine'), ('G', 'Guanine'), ('T', 'Thymine'), ('Y', 'Cytosine or Thymine')]"
  },
  {
    "objectID": "vignettes/1_Introduction.html#operators-and-expressions",
    "href": "vignettes/1_Introduction.html#operators-and-expressions",
    "title": "Basics of Python Programming Language",
    "section": "Operators and Expressions",
    "text": "Operators and Expressions\nPython language supports the following types of operators.\n\nArithmetic operators\nComparison (i.e., relational) operators\nAssignment operators\nBitwise operators\nLogical operators\nMembership operators\nIdentity operators\n\nLet’s look at some of these types one by one.\n\nPython Arithmetic Operators\n\n\n\nOperator\nDescription\n\n\n\n\n+\nAddition - Adds values on either side of the operator\n\n\n-\nSubtraction - Subtracts right hand operand from left hand operand\n\n\n*\nMultiplication - Multiplies values on either side of the operator\n\n\n/\nDivision - Divides left hand operand by right hand operand\n\n\n%\nModulus - Divides left hand operand by right hand operand and returns remainder\n\n\n**\nExponent - Performs exponential (power) calculation on operators\n\n\n//\nFloor (or integer) division - Division such that the fractional part of the result is removed, and only the integer part remains.\n\n\n\n\n\nPython Comparison Operators\n\n\n\nOperator\nDescription\n\n\n\n\n==\nChecks if the value of two operands are equal; if yes then condition becomes true.\n\n\n!=\nChecks if the value of two operands are not equal; if values are not equal then condition becomes true.\n\n\n&lt;&gt;\nChecks if the value of two operands are not equal. This is similar to the != operator.\n\n\n&gt;\nChecks if the value of left operand is greater than the value of right operand.\n\n\n&lt;\nChecks if the value of left operand is less than the value of right operand.\n\n\n&gt;=\nChecks if the value of left operand is greater than or equal to the value of right operand.\n\n\n&lt;=\nChecks if the value of left operand is less than or equal to the value of right operand.\n\n\n\n\n\nPython Assignment Operators\n\n\n\nOperator\nDescription\n\n\n\n\n=\nSimple assignment operator, assigns values from right side operands to left side operand\n\n\n+=\nAdd AND assignment operator, it adds right operand to the left operand and assign the result to left operand (Ex: i += 1 is same as i = i + 1)\n\n\n\nSimilar descriptions follow for the remaining arithmetic operators (i.e., -=, *=, /=, %=, **=, //=)\n\n\nPython Logical Operators\n\n\n\nOperator\nDescription\n\n\n\n\nand\nLogical AND operator - If both the operands are true then condition becomes true.\n\n\nor\nLogical OR Operator - If any of the two operands is true (non zero) then condition becomes true.\n\n\nnot\nLogical NOT Operator - Reverses the logical state of its operand. If an expression is true then Logical NOT of that is false.\n\n\n\n\n\nPython Membership Operators\nPython has membership operators, which test for membership in a sequence, such as strings, lists, or tuples. There are two membership operators.\n\n\n\nOperator\nDescription\n\n\n\n\nin\nEvaluates to true if it finds a variable in the specified sequence and false otherwise.\n\n\nnot in\nEvaluates to true if it does not finds a variable in the specified sequence and false otherwise.\n\n\n\n\n\nPython Identity Operators\n\n\n\nOperator\nDescription\n\n\n\n\nis\nEvaluates to true if the variables on either side of the operator point to the same object and false otherwise.\n\n\nis not\nEvaluates to false if the variables on either side of the operator point to the same object and true otherwise.\n\n\n\n\n\nOperator Precedence in Python\nThe following table lists all operators we discussed in this Chapter, from highest precedence to lowest.\n\n\n\nOperator\nDescription\n\n\n\n\n**\nExponentiation\n\n\n~, +, -\nComplement, unary plus and minus (method names for the last two are +@ and -@)\n\n\n*, /, %, //\nMultiply, divide, modulo and floor division\n\n\n+, -\nAddition and subtraction\n\n\n&gt;&gt;, &lt;&lt;\nRight and left bitwise shift\n\n\n&\nBitwise 'AND'\n\n\n^, |\nBitwise exclusive `OR' and regular `OR'\n\n\n&lt;=, &lt;,&gt;, &gt;=\nComparison operators\n\n\n&lt;&gt;, ==, !=\nEquality operators\n\n\n= , %=, /=, //=, -=, +=, *=, **=\nAssignment operators\n\n\nis, is not\nIdentity operators\n\n\nin, not in\nMembership operators\n\n\nnot, or, and\nLogical operators"
  },
  {
    "objectID": "vignettes/1_Introduction.html#control-structures-in-python",
    "href": "vignettes/1_Introduction.html#control-structures-in-python",
    "title": "Basics of Python Programming Language",
    "section": "Control Structures in Python",
    "text": "Control Structures in Python\nIn a program, control flow (or flow of control) refers to the order in which individual statements of the program are executed. Similarly, control flow in an algorithm is the order in which individual steps of the algorithm are executed.\nSo far, we have considered sequential control flow, i.e., statements getting executed from top to bottom, in the order they appear in the program. The sequential flow of control is the default behavior. However, we often need to alter this flow when we write programs, because the problems we can solve with sequential control flow alone are limited to simple (or, as one might say, trivial) problems. In other words, there are many problems that cannot be solved with the sequential control flow alone.\nMany problems that we encounter are complex enough that they require programs with enhanced control flows. For this, most programming languages provide at least three control structures for altering the default sequential flow. These control structures are known as selection, loop, and subprogram. Together with the default sequential flow, we have four control structures for specifying the control flow as shown below.\n\n\n\n\n\n\nSelection Control Structure\n\nif structure\nThe if structure in Python is similar to that of other languages. It contains an expression followed by a set of statements to be executed if the expression is evaluated as true.\nif expression:\n  statement_1\n  statement_2\n  ...\n  statement_n\nNote that, in Python, all statements indented by the same number of character spaces after a programming construct are considered to be part of a single block of code. Python uses indentation as its method of grouping statements.\n\n\nif ... else structure\nTo implement the selection control structure shown in subfigure (b) above with both blocks A and B specified, the else keyword can be combined with the if keyword. The else keyword is followed by the code that gets executed if the if-body does not get executed (i.e., conditional expression is not evaluated to true).\nThe else part is optional and there could be at most one else part following an if part. Further, an else part cannot exist alone; it must be paired with an if part.\nif expression:\n  statement(s)\nelse:\n  statement(s)\n\n\nMulti-way Selection with the elif Keyword\nThe elif keyword (meaning “else-if”) allows us to implement multi-way selection, going beyond the two-way selection in the if-else structure. This means, we can select one block of code for execution from among many (&gt; 2). For this, we need to specify multiple conditional expressions for truth value and execute a block of code as soon as the corresponding expression evaluates to true.\nAn elif part is optional and there can be an arbitrary number of elif parts following an if part.\nif expression_1:\n  statement(s)\nelif expression_2:\n  statement(s)  \nelif expression_3:\n  statement(s)  \n...\nelse:\n  statement(s)\nThe if...elif structure is a substitute for the “switch-case” structure in some other languages such as C.\n\n\n\nLoop Control Structure\nPython provides two loop structures: the for loop and the while loop. We can also have nested loops.\n\nThe for loop\nThe for loop construct is used to repeat a statement or block of statements specified number of times. The for loop can also iterate over the items of any sequence (a list or a string), in the order that they appear in the sequence.\nfor iterating_var in sequence:\n   statements(s)\nThe block of statements executed repeatedly is called the loop body. The loop body is indented.\nIf the sequence contains an expression list, it is evaluated first. Then, the first item in the sequence is assigned to the iterating variable iterating_var and the loop body is executed. This concludes one iteration of the loop. Next the second iteration of the loop body is executed after the second item is assigned to the iterating variable iterating_var. Similarly, the loop body is executed repeatedly, with a unique item in the list assigned to iterating_var in each iteration, until the entire sequence is exhausted.\nThe range() function: If we do need to iterate over a sequence of numbers, the built-in function range() comes in handy. It generates lists containing arithmetic progressions. Implementation of range() is as either range(stop) or range(start, stop[, step]). Here are four examples.\n\nfor i in range(10):\n    print(i, end=' ')\n\n0 1 2 3 4 5 6 7 8 9 \n\n\n\nfor i in range(5, 10):\n    print(i, end=' ')\n\n5 6 7 8 9 \n\n\n\nfor i in range(0, 10, 3):\n    print(i, end=' ')\n\n0 3 6 9 \n\n\n\nfor i in range(-10, -100, -30):\n    print(i, end=' ')\n\n-10 -40 -70 \n\n\nTo iterate over the indices of a list or sequence using a for loop, you can combine range() and len() functions as follows:\n\nlist_a = ['John', 'had', 'a', 'little', 'puppy']\n# using range and len functions\nfor i in range(len(list_a)):\n  print(i, list_a[i])\n\n0 John\n1 had\n2 a\n3 little\n4 puppy\n\n\nOr using enumerate() function:\n\n# using enumerate function\nfor elem in enumerate(list_a):\n  print(elem)\n\n(0, 'John')\n(1, 'had')\n(2, 'a')\n(3, 'little')\n(4, 'puppy')\n\n\n\n\nThe while loop\nA while loop in Python repeatedly executes the loop body as long as a given condition is true. The condition is specified by an expression.\nwhile expression:\n  statement(s)\nThe block of statements executed repeatedly is the loop body, which is indented, as in the for loop.\nThe condition to execute the loop body is considered true if the expression is true or it is any non-zero value. The loop iterates while the condition is true. When the condition becomes false, program control passes to the line immediately following the loop body.\nNote that the while loop might not ever run. When the condition is tested and the result is false, the loop body will be skipped and the first statement after the while loop will be executed.\n\n\nThe break keyword\nThe break keyword is used inside a loop and is used for terminating the current iteration of the loop body immediately; i.e., to break out of the smallest enclosing for or while loop. The control will be transferred to the first statement following the loop body. If you are inside the inner loop of a nested loop, then the break statement inside that inner loop transfers the control to the immediate outer loop. The break statement can be used to terminate an infinite loop or to force a loop to end before its normal termination.\n\nn = 10;\nfor var in range(0, n):\n    print(var)\n    if (var == 5):\n        print(\"Countdown Aborted\")\n        break;\n\n0\n1\n2\n3\n4\n5\nCountdown Aborted\n\n\n\n\nThe continue keyword\nThe continue keyword inside a loop causes the program to skip the rest of the loop body in the current iteration, causing it to continue with the next iteration of the loop.\n\nfor i in range(-2,3):\n  if i == 0 :\n      continue\n  print(\"5 divided by \", i, \" is: \", (5.0/i))\n\n5 divided by  -2  is:  -2.5\n5 divided by  -1  is:  -5.0\n5 divided by  1  is:  5.0\n5 divided by  2  is:  2.5"
  },
  {
    "objectID": "vignettes/1_Introduction.html#functions",
    "href": "vignettes/1_Introduction.html#functions",
    "title": "Basics of Python Programming Language",
    "section": "Functions",
    "text": "Functions\nA function is a block of organized, reusable code that is used to perform a single task. Functions are the subprogram control structure in Python. Functions provide better modularity for our programs and a high degree of code reuse.\nAs you already know, Python gives you many built-in functions like print(), etc. But you can also create your own functions which are called user-defined functions.\ndef function_name( parameters ): \n  function_suite\nreturn [expression]\nBy default, parameters have a positional behavior; thus when invoking (calling) the function you need to list them in the same order that they were defined. Defining a function only gives it a name, specifies the parameters that are to be included in the function and structures the blocks of code. Once the function is defined, you can execute it by calling it from your (main) program, another function or directly from the Python prompt.\nIn the following example, we define and call the readDataset() function.\n\n# Function definition to read the cms_hospital_patient_satisfaction_2016_sampled.csv file\n# This function does not require any parameters \ndef readDataset():\n  with open('data/patient_satisfaction/cms_hospital_patient_satisfaction.csv') as f:\n    cms = f.read().splitlines()\n  return cms\n\n# Now you can call readDataset function\ncms = readDataset()\nprint(cms)\n\n['ID,Facility Name,County,Hospital Type,Star Rating,No of Surveys,Response Rate,Overall Rating', '050424,SCRIPPS GREEN HOSPITAL,SAN DIEGO,Acute Care Hospital,4,3110,41,5', '140103,ST BERNARD HOSPITAL,COOK,Acute Care Hospital,1,264,6,2', '100051,SOUTH LAKE HOSPITAL,LAKE,Acute Care Hospital,2,1382,20,2', '040062,MERCY HOSPITAL FORT SMITH,SEBASTIAN,Acute Care Hospital,3,2506,35,3', '440048,BAPTIST MEMORIAL HOSPITAL,SHELBY,Acute Care Hospital,2,1799,18,2', '450011,ST JOSEPH REGIONAL HEALTH CENTER,BRAZOS,Acute Care Hospital,3,1379,24,3', '151317,GREENE COUNTY GENERAL HOSPITAL,GREENE,Critical Access Hospital,3,114,22,3', '061327,SOUTHWEST MEMORIAL HOSPITAL,MONTEZUMA,Critical Access Hospital,4,247,34,3', '490057,SENTARA GENERAL HOSPITAL,VIRGINIA BEACH,Acute Care Hospital,4,619,32,3', '110215,PIEDMONT FAYETTE HOSPITAL,FAYETTE,Acute Care Hospital,2,1714,21,2', '050704,MISSION COMMUNITY HOSPITAL,LOS ANGELES,Acute Care Hospital,3,241,14,3', '100296,DOCTORS HOSPITAL,MIAMI-DADE,Acute Care Hospital,4,393,24,3', '440003,SUMNER REGIONAL MEDICAL CENTER,SUMNER,Acute Care Hospital,4,680,35,2', '501339,WHIDBEY GENERAL HOSPITAL,ISLAND,Critical Access Hospital,3,389,29,3', '050116,NORTHRIDGE MEDICAL CENTER,LOS ANGELES,Acute Care Hospital,3,1110,20,2']\n\n\nIn the following example, we define two functions printHead() and printTail() to print the top 5 and bottom 5 rows of a list. Note that in this example, the return is optional (the program will work even without the return).\n\n# function definition to print the top 5 elements in a list\ndef printHead(inp_list):\n  for i in range(5):\n    print(inp_list[i])\n\n# function definition to print the bottom 5 elements in a list\ndef printTail(inp_list):\n  for i in range(len(inp_list)-5, len(inp_list)):\n    print(inp_list[i])\n\n\n# function call to printHead with melanoma dataset as an input parameter to the function\nprintHead(cms)\n\nID,Facility Name,County,Hospital Type,Star Rating,No of Surveys,Response Rate,Overall Rating\n050424,SCRIPPS GREEN HOSPITAL,SAN DIEGO,Acute Care Hospital,4,3110,41,5\n140103,ST BERNARD HOSPITAL,COOK,Acute Care Hospital,1,264,6,2\n100051,SOUTH LAKE HOSPITAL,LAKE,Acute Care Hospital,2,1382,20,2\n040062,MERCY HOSPITAL FORT SMITH,SEBASTIAN,Acute Care Hospital,3,2506,35,3\n\n\n\n# function call to printTail with melanoma dataset as an input parameter to the function\nprintTail(cms)\n\n050704,MISSION COMMUNITY HOSPITAL,LOS ANGELES,Acute Care Hospital,3,241,14,3\n100296,DOCTORS HOSPITAL,MIAMI-DADE,Acute Care Hospital,4,393,24,3\n440003,SUMNER REGIONAL MEDICAL CENTER,SUMNER,Acute Care Hospital,4,680,35,2\n501339,WHIDBEY GENERAL HOSPITAL,ISLAND,Critical Access Hospital,3,389,29,3\n050116,NORTHRIDGE MEDICAL CENTER,LOS ANGELES,Acute Care Hospital,3,1110,20,2"
  },
  {
    "objectID": "vignettes/2_Intro_pandas.html",
    "href": "vignettes/2_Intro_pandas.html",
    "title": "Getting started with pandas",
    "section": "",
    "text": "Pandas is a powerful and widely used library in Python for data manipulation and analysis. It provides versatile data structures, such as DataFrames and Series, along with a variety of functions and methods for efficiently handling and processing structured data. In this session, we explore some functionalities of Pandas library that is useful for biological data analysis.\nCustomarily, we import the library as follows:\nimport pandas as pd\nTo open the help documentation for the pandas package, you can use the following code:\nThis will display the help documentation for the Pandas library, providing an overview of its functions, modules, and usage."
  },
  {
    "objectID": "vignettes/2_Intro_pandas.html#basic-data-structures-in-pandas",
    "href": "vignettes/2_Intro_pandas.html#basic-data-structures-in-pandas",
    "title": "Getting started with pandas",
    "section": "Basic data structures in pandas",
    "text": "Basic data structures in pandas\nPandas provides two types of classes for handling data: Series and DataFrame.\n\nSeries\nSeries is a one-dimensional labeled array capable of holding any data type (integers, strings, floating point numbers, Python objects, etc.). The axis labels are collectively referred to as the index. The basic method to create a Series is to call:\ns = pd.Series(data, index=index)\nHere, data can be a Python dict, an ndarray (a multidimensional container of items of the same type and size) or a scalar value. The passed index is a list of axis labels.\nTo open the help page for Series, you can use the following code:\n\nimport pandas as pd\nhelp(pd.Series)  \n# or help(pandas.Series)\n\n\n\n\nHelp on class Series in module pandas.core.series:\n\nclass Series(pandas.core.base.IndexOpsMixin, pandas.core.generic.NDFrame)\n |  Series(data=None, index=None, dtype: 'Dtype | None' = None, name=None, copy: 'bool | None' = None, fastpath: 'bool | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'None'\n |\n |  One-dimensional ndarray with axis labels (including time series).\n |\n |  Labels need not be unique but must be a hashable type. The object\n |  supports both integer- and label-based indexing and provides a host of\n |  methods for performing operations involving the index. Statistical\n |  methods from ndarray have been overridden to automatically exclude\n |  missing data (currently represented as NaN).\n |\n |  Operations between Series (+, -, /, \\*, \\*\\*) align values based on their\n |  associated index values-- they need not be the same length. The result\n |  index will be the sorted union of the two indexes.\n |\n |  Parameters\n |  ----------\n |  data : array-like, Iterable, dict, or scalar value\n |      Contains data stored in Series. If data is a dict, argument order is\n |      maintained.\n |  index : array-like or Index (1d)\n |      Values must be hashable and have the same length as `data`.\n |      Non-unique index values are allowed. Will default to\n |      RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n |      and index is None, then the keys in the data are used as the index. If the\n |      index is not None, the resulting Series is reindexed with the index values.\n |  dtype : str, numpy.dtype, or ExtensionDtype, optional\n |      Data type for the output Series. If not specified, this will be\n |      inferred from `data`.\n |      See the :ref:`user guide &lt;basics.dtypes&gt;` for more usages.\n |  name : Hashable, default None\n |      The name to give to the Series.\n |  copy : bool, default False\n |      Copy input data. Only affects Series or 1d ndarray input. See examples.\n |\n |  Notes\n |  -----\n |  Please reference the :ref:`User Guide &lt;basics.series&gt;` for more information.\n |\n |  Examples\n |  --------\n |  Constructing Series from a dictionary with an Index specified\n |\n |  &gt;&gt;&gt; d = {'a': 1, 'b': 2, 'c': 3}\n |  &gt;&gt;&gt; ser = pd.Series(data=d, index=['a', 'b', 'c'])\n |  &gt;&gt;&gt; ser\n |  a   1\n |  b   2\n |  c   3\n |  dtype: int64\n |\n |  The keys of the dictionary match with the Index values, hence the Index\n |  values have no effect.\n |\n |  &gt;&gt;&gt; d = {'a': 1, 'b': 2, 'c': 3}\n |  &gt;&gt;&gt; ser = pd.Series(data=d, index=['x', 'y', 'z'])\n |  &gt;&gt;&gt; ser\n |  x   NaN\n |  y   NaN\n |  z   NaN\n |  dtype: float64\n |\n |  Note that the Index is first build with the keys from the dictionary.\n |  After this the Series is reindexed with the given Index values, hence we\n |  get all NaN as a result.\n |\n |  Constructing Series from a list with `copy=False`.\n |\n |  &gt;&gt;&gt; r = [1, 2]\n |  &gt;&gt;&gt; ser = pd.Series(r, copy=False)\n |  &gt;&gt;&gt; ser.iloc[0] = 999\n |  &gt;&gt;&gt; r\n |  [1, 2]\n |  &gt;&gt;&gt; ser\n |  0    999\n |  1      2\n |  dtype: int64\n |\n |  Due to input data type the Series has a `copy` of\n |  the original data even though `copy=False`, so\n |  the data is unchanged.\n |\n |  Constructing Series from a 1d ndarray with `copy=False`.\n |\n |  &gt;&gt;&gt; r = np.array([1, 2])\n |  &gt;&gt;&gt; ser = pd.Series(r, copy=False)\n |  &gt;&gt;&gt; ser.iloc[0] = 999\n |  &gt;&gt;&gt; r\n |  array([999,   2])\n |  &gt;&gt;&gt; ser\n |  0    999\n |  1      2\n |  dtype: int64\n |\n |  Due to input data type the Series has a `view` on\n |  the original data, so\n |  the data is changed as well.\n |\n |  Method resolution order:\n |      Series\n |      pandas.core.base.IndexOpsMixin\n |      pandas.core.arraylike.OpsMixin\n |      pandas.core.generic.NDFrame\n |      pandas.core.base.PandasObject\n |      pandas.core.accessor.DirNamesMixin\n |      pandas.core.indexing.IndexingMixin\n |      builtins.object\n |\n |  Methods defined here:\n |\n |  __array__(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool | None' = None) -&gt; 'np.ndarray'\n |      Return the values as a NumPy array.\n |\n |      Users should not call this directly. Rather, it is invoked by\n |      :func:`numpy.array` and :func:`numpy.asarray`.\n |\n |      Parameters\n |      ----------\n |      dtype : str or numpy.dtype, optional\n |          The dtype to use for the resulting NumPy array. By default,\n |          the dtype is inferred from the data.\n |\n |      copy : bool or None, optional\n |          Unused.\n |\n |      Returns\n |      -------\n |      numpy.ndarray\n |          The values in the series converted to a :class:`numpy.ndarray`\n |          with the specified `dtype`.\n |\n |      See Also\n |      --------\n |      array : Create a new array from data.\n |      Series.array : Zero-copy view to the array backing the Series.\n |      Series.to_numpy : Series method for similar behavior.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; ser = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; np.asarray(ser)\n |      array([1, 2, 3])\n |\n |      For timezone-aware data, the timezones may be retained with\n |      ``dtype='object'``\n |\n |      &gt;&gt;&gt; tzser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n |      &gt;&gt;&gt; np.asarray(tzser, dtype=\"object\")\n |      array([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),\n |             Timestamp('2000-01-02 00:00:00+0100', tz='CET')],\n |            dtype=object)\n |\n |      Or the values may be localized to UTC and the tzinfo discarded with\n |      ``dtype='datetime64[ns]'``\n |\n |      &gt;&gt;&gt; np.asarray(tzser, dtype=\"datetime64[ns]\")  # doctest: +ELLIPSIS\n |      array(['1999-12-31T23:00:00.000000000', ...],\n |            dtype='datetime64[ns]')\n |\n |  __column_consortium_standard__(self, *, api_version: 'str | None' = None) -&gt; 'Any'\n |      Provide entry point to the Consortium DataFrame Standard API.\n |\n |      This is developed and maintained outside of pandas.\n |      Please report any issues to https://github.com/data-apis/dataframe-api-compat.\n |\n |  __float__(self) from pandas.core.series._coerce_method.&lt;locals&gt;\n |\n |  __getitem__(self, key)\n |\n |  __init__(self, data=None, index=None, dtype: 'Dtype | None' = None, name=None, copy: 'bool | None' = None, fastpath: 'bool | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'None'\n |      Initialize self.  See help(type(self)) for accurate signature.\n |\n |  __int__(self) from pandas.core.series._coerce_method.&lt;locals&gt;\n |\n |  __len__(self) -&gt; 'int'\n |      Return the length of the Series.\n |\n |  __matmul__(self, other)\n |      Matrix multiplication using binary `@` operator.\n |\n |  __repr__(self) -&gt; 'str'\n |      Return a string representation for a particular Series.\n |\n |  __rmatmul__(self, other)\n |      Matrix multiplication using binary `@` operator.\n |\n |  __setitem__(self, key, value) -&gt; 'None'\n |\n |  add(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Addition of series and other, element-wise (binary operator `add`).\n |\n |      Equivalent to ``series + other``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.radd : Reverse of the Addition operator, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.add(b, fill_value=0)\n |      a    2.0\n |      b    1.0\n |      c    1.0\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |\n |  agg = aggregate(self, func=None, axis: 'Axis' = 0, *args, **kwargs)\n |\n |  aggregate(self, func=None, axis: 'Axis' = 0, *args, **kwargs)\n |      Aggregate using one or more operations over the specified axis.\n |\n |      Parameters\n |      ----------\n |      func : function, str, list or dict\n |          Function to use for aggregating the data. If a function, must either\n |          work when passed a Series or when passed to Series.apply.\n |\n |          Accepted combinations are:\n |\n |          - function\n |          - string function name\n |          - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n |          - dict of axis labels -&gt; functions, function names or list of such.\n |      axis : {0 or 'index'}\n |              Unused. Parameter needed for compatibility with DataFrame.\n |      *args\n |          Positional arguments to pass to `func`.\n |      **kwargs\n |          Keyword arguments to pass to `func`.\n |\n |      Returns\n |      -------\n |      scalar, Series or DataFrame\n |\n |          The return can be:\n |\n |          * scalar : when Series.agg is called with single function\n |          * Series : when DataFrame.agg is called with a single function\n |          * DataFrame : when DataFrame.agg is called with several functions\n |\n |      See Also\n |      --------\n |      Series.apply : Invoke function on a Series.\n |      Series.transform : Transform function producing a Series with like indexes.\n |\n |      Notes\n |      -----\n |      The aggregation operations are always performed over an axis, either the\n |      index (default) or the column axis. This behavior is different from\n |      `numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n |      `var`), where the default is to compute the aggregation of the flattened\n |      array, e.g., ``numpy.mean(arr_2d)`` as opposed to\n |      ``numpy.mean(arr_2d, axis=0)``.\n |\n |      `agg` is an alias for `aggregate`. Use the alias.\n |\n |      Functions that mutate the passed object can produce unexpected\n |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\n |      for more details.\n |\n |      A passed user-defined-function will be passed a Series for evaluation.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4])\n |      &gt;&gt;&gt; s\n |      0    1\n |      1    2\n |      2    3\n |      3    4\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s.agg('min')\n |      1\n |\n |      &gt;&gt;&gt; s.agg(['min', 'max'])\n |      min   1\n |      max   4\n |      dtype: int64\n |\n |  all(self, axis: 'Axis' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -&gt; 'bool'\n |      Return whether all elements are True, potentially over an axis.\n |\n |      Returns True unless there at least one element within a series or\n |      along a Dataframe axis that is False or equivalent (e.g. zero or\n |      empty).\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns', None}, default 0\n |          Indicate which axis or axes should be reduced. For `Series` this parameter\n |          is unused and defaults to 0.\n |\n |          * 0 / 'index' : reduce the index, return a Series whose index is the\n |            original column labels.\n |          * 1 / 'columns' : reduce the columns, return a Series whose index is the\n |            original index.\n |          * None : reduce all axes, return a scalar.\n |\n |      bool_only : bool, default False\n |          Include only boolean columns. Not implemented for Series.\n |      skipna : bool, default True\n |          Exclude NA/null values. If the entire row/column is NA and skipna is\n |          True, then the result will be True, as for an empty row/column.\n |          If skipna is False, then NA are treated as True, because these are not\n |          equal to zero.\n |      **kwargs : any, default None\n |          Additional keywords have no effect but might be accepted for\n |          compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      scalar or Series\n |          If level is specified, then, Series is returned; otherwise, scalar\n |          is returned.\n |\n |      See Also\n |      --------\n |      Series.all : Return True if all elements are True.\n |      DataFrame.any : Return True if one (or more) elements are True.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      &gt;&gt;&gt; pd.Series([True, True]).all()\n |      True\n |      &gt;&gt;&gt; pd.Series([True, False]).all()\n |      False\n |      &gt;&gt;&gt; pd.Series([], dtype=\"float64\").all()\n |      True\n |      &gt;&gt;&gt; pd.Series([np.nan]).all()\n |      True\n |      &gt;&gt;&gt; pd.Series([np.nan]).all(skipna=False)\n |      True\n |\n |      **DataFrames**\n |\n |      Create a dataframe from a dictionary.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'col1': [True, True], 'col2': [True, False]})\n |      &gt;&gt;&gt; df\n |         col1   col2\n |      0  True   True\n |      1  True  False\n |\n |      Default behaviour checks if values in each column all return True.\n |\n |      &gt;&gt;&gt; df.all()\n |      col1     True\n |      col2    False\n |      dtype: bool\n |\n |      Specify ``axis='columns'`` to check if values in each row all return True.\n |\n |      &gt;&gt;&gt; df.all(axis='columns')\n |      0     True\n |      1    False\n |      dtype: bool\n |\n |      Or ``axis=None`` for whether every value is True.\n |\n |      &gt;&gt;&gt; df.all(axis=None)\n |      False\n |\n |  any(self, *, axis: 'Axis' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -&gt; 'bool'\n |      Return whether any element is True, potentially over an axis.\n |\n |      Returns False unless there is at least one element within a series or\n |      along a Dataframe axis that is True or equivalent (e.g. non-zero or\n |      non-empty).\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns', None}, default 0\n |          Indicate which axis or axes should be reduced. For `Series` this parameter\n |          is unused and defaults to 0.\n |\n |          * 0 / 'index' : reduce the index, return a Series whose index is the\n |            original column labels.\n |          * 1 / 'columns' : reduce the columns, return a Series whose index is the\n |            original index.\n |          * None : reduce all axes, return a scalar.\n |\n |      bool_only : bool, default False\n |          Include only boolean columns. Not implemented for Series.\n |      skipna : bool, default True\n |          Exclude NA/null values. If the entire row/column is NA and skipna is\n |          True, then the result will be False, as for an empty row/column.\n |          If skipna is False, then NA are treated as True, because these are not\n |          equal to zero.\n |      **kwargs : any, default None\n |          Additional keywords have no effect but might be accepted for\n |          compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      scalar or Series\n |          If level is specified, then, Series is returned; otherwise, scalar\n |          is returned.\n |\n |      See Also\n |      --------\n |      numpy.any : Numpy version of this method.\n |      Series.any : Return whether any element is True.\n |      Series.all : Return whether all elements are True.\n |      DataFrame.any : Return whether any element is True over requested axis.\n |      DataFrame.all : Return whether all elements are True over requested axis.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      For Series input, the output is a scalar indicating whether any element\n |      is True.\n |\n |      &gt;&gt;&gt; pd.Series([False, False]).any()\n |      False\n |      &gt;&gt;&gt; pd.Series([True, False]).any()\n |      True\n |      &gt;&gt;&gt; pd.Series([], dtype=\"float64\").any()\n |      False\n |      &gt;&gt;&gt; pd.Series([np.nan]).any()\n |      False\n |      &gt;&gt;&gt; pd.Series([np.nan]).any(skipna=False)\n |      True\n |\n |      **DataFrame**\n |\n |      Whether each column contains at least one True element (the default).\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [1, 2], \"B\": [0, 2], \"C\": [0, 0]})\n |      &gt;&gt;&gt; df\n |         A  B  C\n |      0  1  0  0\n |      1  2  2  0\n |\n |      &gt;&gt;&gt; df.any()\n |      A     True\n |      B     True\n |      C    False\n |      dtype: bool\n |\n |      Aggregating over the columns.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 2]})\n |      &gt;&gt;&gt; df\n |             A  B\n |      0   True  1\n |      1  False  2\n |\n |      &gt;&gt;&gt; df.any(axis='columns')\n |      0    True\n |      1    True\n |      dtype: bool\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 0]})\n |      &gt;&gt;&gt; df\n |             A  B\n |      0   True  1\n |      1  False  0\n |\n |      &gt;&gt;&gt; df.any(axis='columns')\n |      0    True\n |      1    False\n |      dtype: bool\n |\n |      Aggregating over the entire DataFrame with ``axis=None``.\n |\n |      &gt;&gt;&gt; df.any(axis=None)\n |      True\n |\n |      `any` for an empty DataFrame is an empty Series.\n |\n |      &gt;&gt;&gt; pd.DataFrame([]).any()\n |      Series([], dtype: bool)\n |\n |  apply(self, func: 'AggFuncType', convert_dtype: 'bool | lib.NoDefault' = &lt;no_default&gt;, args: 'tuple[Any, ...]' = (), *, by_row: \"Literal[False, 'compat']\" = 'compat', **kwargs) -&gt; 'DataFrame | Series'\n |      Invoke function on values of Series.\n |\n |      Can be ufunc (a NumPy function that applies to the entire Series)\n |      or a Python function that only works on single values.\n |\n |      Parameters\n |      ----------\n |      func : function\n |          Python function or NumPy ufunc to apply.\n |      convert_dtype : bool, default True\n |          Try to find better dtype for elementwise function results. If\n |          False, leave as dtype=object. Note that the dtype is always\n |          preserved for some extension array dtypes, such as Categorical.\n |\n |          .. deprecated:: 2.1.0\n |              ``convert_dtype`` has been deprecated. Do ``ser.astype(object).apply()``\n |              instead if you want ``convert_dtype=False``.\n |      args : tuple\n |          Positional arguments passed to func after the series value.\n |      by_row : False or \"compat\", default \"compat\"\n |          If ``\"compat\"`` and func is a callable, func will be passed each element of\n |          the Series, like ``Series.map``. If func is a list or dict of\n |          callables, will first try to translate each func into pandas methods. If\n |          that doesn't work, will try call to apply again with ``by_row=\"compat\"``\n |          and if that fails, will call apply again with ``by_row=False``\n |          (backward compatible).\n |          If False, the func will be passed the whole Series at once.\n |\n |          ``by_row`` has no effect when ``func`` is a string.\n |\n |          .. versionadded:: 2.1.0\n |      **kwargs\n |          Additional keyword arguments passed to func.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          If func returns a Series object the result will be a DataFrame.\n |\n |      See Also\n |      --------\n |      Series.map: For element-wise operations.\n |      Series.agg: Only perform aggregating type operations.\n |      Series.transform: Only perform transforming type operations.\n |\n |      Notes\n |      -----\n |      Functions that mutate the passed object can produce unexpected\n |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\n |      for more details.\n |\n |      Examples\n |      --------\n |      Create a series with typical summer temperatures for each city.\n |\n |      &gt;&gt;&gt; s = pd.Series([20, 21, 12],\n |      ...               index=['London', 'New York', 'Helsinki'])\n |      &gt;&gt;&gt; s\n |      London      20\n |      New York    21\n |      Helsinki    12\n |      dtype: int64\n |\n |      Square the values by defining a function and passing it as an\n |      argument to ``apply()``.\n |\n |      &gt;&gt;&gt; def square(x):\n |      ...     return x ** 2\n |      &gt;&gt;&gt; s.apply(square)\n |      London      400\n |      New York    441\n |      Helsinki    144\n |      dtype: int64\n |\n |      Square the values by passing an anonymous function as an\n |      argument to ``apply()``.\n |\n |      &gt;&gt;&gt; s.apply(lambda x: x ** 2)\n |      London      400\n |      New York    441\n |      Helsinki    144\n |      dtype: int64\n |\n |      Define a custom function that needs additional positional\n |      arguments and pass these additional arguments using the\n |      ``args`` keyword.\n |\n |      &gt;&gt;&gt; def subtract_custom_value(x, custom_value):\n |      ...     return x - custom_value\n |\n |      &gt;&gt;&gt; s.apply(subtract_custom_value, args=(5,))\n |      London      15\n |      New York    16\n |      Helsinki     7\n |      dtype: int64\n |\n |      Define a custom function that takes keyword arguments\n |      and pass these arguments to ``apply``.\n |\n |      &gt;&gt;&gt; def add_custom_values(x, **kwargs):\n |      ...     for month in kwargs:\n |      ...         x += kwargs[month]\n |      ...     return x\n |\n |      &gt;&gt;&gt; s.apply(add_custom_values, june=30, july=20, august=25)\n |      London      95\n |      New York    96\n |      Helsinki    87\n |      dtype: int64\n |\n |      Use a function from the Numpy library.\n |\n |      &gt;&gt;&gt; s.apply(np.log)\n |      London      2.995732\n |      New York    3.044522\n |      Helsinki    2.484907\n |      dtype: float64\n |\n |  argsort(self, axis: 'Axis' = 0, kind: 'SortKind' = 'quicksort', order: 'None' = None, stable: 'None' = None) -&gt; 'Series'\n |      Return the integer indices that would sort the Series values.\n |\n |      Override ndarray.argsort. Argsorts the value, omitting NA/null values,\n |      and places the result in the same locations as the non-NA values.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |      kind : {'mergesort', 'quicksort', 'heapsort', 'stable'}, default 'quicksort'\n |          Choice of sorting algorithm. See :func:`numpy.sort` for more\n |          information. 'mergesort' and 'stable' are the only stable algorithms.\n |      order : None\n |          Has no effect but is accepted for compatibility with numpy.\n |      stable : None\n |          Has no effect but is accepted for compatibility with numpy.\n |\n |      Returns\n |      -------\n |      Series[np.intp]\n |          Positions of values within the sort order with -1 indicating\n |          nan values.\n |\n |      See Also\n |      --------\n |      numpy.ndarray.argsort : Returns the indices that would sort this array.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([3, 2, 1])\n |      &gt;&gt;&gt; s.argsort()\n |      0    2\n |      1    1\n |      2    0\n |      dtype: int64\n |\n |  autocorr(self, lag: 'int' = 1) -&gt; 'float'\n |      Compute the lag-N autocorrelation.\n |\n |      This method computes the Pearson correlation between\n |      the Series and its shifted self.\n |\n |      Parameters\n |      ----------\n |      lag : int, default 1\n |          Number of lags to apply before performing autocorrelation.\n |\n |      Returns\n |      -------\n |      float\n |          The Pearson correlation between self and self.shift(lag).\n |\n |      See Also\n |      --------\n |      Series.corr : Compute the correlation between two Series.\n |      Series.shift : Shift index by desired number of periods.\n |      DataFrame.corr : Compute pairwise correlation of columns.\n |      DataFrame.corrwith : Compute pairwise correlation between rows or\n |          columns of two DataFrame objects.\n |\n |      Notes\n |      -----\n |      If the Pearson correlation is not well defined return 'NaN'.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([0.25, 0.5, 0.2, -0.05])\n |      &gt;&gt;&gt; s.autocorr()  # doctest: +ELLIPSIS\n |      0.10355...\n |      &gt;&gt;&gt; s.autocorr(lag=2)  # doctest: +ELLIPSIS\n |      -0.99999...\n |\n |      If the Pearson correlation is not well defined, then 'NaN' is returned.\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 0, 0, 0])\n |      &gt;&gt;&gt; s.autocorr()\n |      nan\n |\n |  between(self, left, right, inclusive: \"Literal['both', 'neither', 'left', 'right']\" = 'both') -&gt; 'Series'\n |      Return boolean Series equivalent to left &lt;= series &lt;= right.\n |\n |      This function returns a boolean vector containing `True` wherever the\n |      corresponding Series element is between the boundary values `left` and\n |      `right`. NA values are treated as `False`.\n |\n |      Parameters\n |      ----------\n |      left : scalar or list-like\n |          Left boundary.\n |      right : scalar or list-like\n |          Right boundary.\n |      inclusive : {\"both\", \"neither\", \"left\", \"right\"}\n |          Include boundaries. Whether to set each bound as closed or open.\n |\n |          .. versionchanged:: 1.3.0\n |\n |      Returns\n |      -------\n |      Series\n |          Series representing whether each element is between left and\n |          right (inclusive).\n |\n |      See Also\n |      --------\n |      Series.gt : Greater than of series and other.\n |      Series.lt : Less than of series and other.\n |\n |      Notes\n |      -----\n |      This function is equivalent to ``(left &lt;= ser) & (ser &lt;= right)``\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([2, 0, 4, 8, np.nan])\n |\n |      Boundary values are included by default:\n |\n |      &gt;&gt;&gt; s.between(1, 4)\n |      0     True\n |      1    False\n |      2     True\n |      3    False\n |      4    False\n |      dtype: bool\n |\n |      With `inclusive` set to ``\"neither\"`` boundary values are excluded:\n |\n |      &gt;&gt;&gt; s.between(1, 4, inclusive=\"neither\")\n |      0     True\n |      1    False\n |      2    False\n |      3    False\n |      4    False\n |      dtype: bool\n |\n |      `left` and `right` can be any scalar value:\n |\n |      &gt;&gt;&gt; s = pd.Series(['Alice', 'Bob', 'Carol', 'Eve'])\n |      &gt;&gt;&gt; s.between('Anna', 'Daniel')\n |      0    False\n |      1     True\n |      2     True\n |      3    False\n |      dtype: bool\n |\n |  case_when(self, caselist: 'list[tuple[ArrayLike | Callable[[Series], Series | np.ndarray | Sequence[bool]], ArrayLike | Scalar | Callable[[Series], Series | np.ndarray]],]') -&gt; 'Series'\n |      Replace values where the conditions are True.\n |\n |      Parameters\n |      ----------\n |      caselist : A list of tuples of conditions and expected replacements\n |          Takes the form:  ``(condition0, replacement0)``,\n |          ``(condition1, replacement1)``, ... .\n |          ``condition`` should be a 1-D boolean array-like object\n |          or a callable. If ``condition`` is a callable,\n |          it is computed on the Series\n |          and should return a boolean Series or array.\n |          The callable must not change the input Series\n |          (though pandas doesn`t check it). ``replacement`` should be a\n |          1-D array-like object, a scalar or a callable.\n |          If ``replacement`` is a callable, it is computed on the Series\n |          and should return a scalar or Series. The callable\n |          must not change the input Series\n |          (though pandas doesn`t check it).\n |\n |          .. versionadded:: 2.2.0\n |\n |      Returns\n |      -------\n |      Series\n |\n |      See Also\n |      --------\n |      Series.mask : Replace values where the condition is True.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; c = pd.Series([6, 7, 8, 9], name='c')\n |      &gt;&gt;&gt; a = pd.Series([0, 0, 1, 2])\n |      &gt;&gt;&gt; b = pd.Series([0, 3, 4, 5])\n |\n |      &gt;&gt;&gt; c.case_when(caselist=[(a.gt(0), a),  # condition, replacement\n |      ...                       (b.gt(0), b)])\n |      0    6\n |      1    3\n |      2    1\n |      3    2\n |      Name: c, dtype: int64\n |\n |  combine(self, other: 'Series | Hashable', func: 'Callable[[Hashable, Hashable], Hashable]', fill_value: 'Hashable | None' = None) -&gt; 'Series'\n |      Combine the Series with a Series or scalar according to `func`.\n |\n |      Combine the Series and `other` using `func` to perform elementwise\n |      selection for combined Series.\n |      `fill_value` is assumed when value is missing at some index\n |      from one of the two objects being combined.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar\n |          The value(s) to be combined with the `Series`.\n |      func : function\n |          Function that takes two scalars as inputs and returns an element.\n |      fill_value : scalar, optional\n |          The value to assume when an index is missing from\n |          one Series or the other. The default specifies to use the\n |          appropriate NaN value for the underlying dtype of the Series.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of combining the Series with the other object.\n |\n |      See Also\n |      --------\n |      Series.combine_first : Combine Series values, choosing the calling\n |          Series' values first.\n |\n |      Examples\n |      --------\n |      Consider 2 Datasets ``s1`` and ``s2`` containing\n |      highest clocked speeds of different birds.\n |\n |      &gt;&gt;&gt; s1 = pd.Series({'falcon': 330.0, 'eagle': 160.0})\n |      &gt;&gt;&gt; s1\n |      falcon    330.0\n |      eagle     160.0\n |      dtype: float64\n |      &gt;&gt;&gt; s2 = pd.Series({'falcon': 345.0, 'eagle': 200.0, 'duck': 30.0})\n |      &gt;&gt;&gt; s2\n |      falcon    345.0\n |      eagle     200.0\n |      duck       30.0\n |      dtype: float64\n |\n |      Now, to combine the two datasets and view the highest speeds\n |      of the birds across the two datasets\n |\n |      &gt;&gt;&gt; s1.combine(s2, max)\n |      duck        NaN\n |      eagle     200.0\n |      falcon    345.0\n |      dtype: float64\n |\n |      In the previous example, the resulting value for duck is missing,\n |      because the maximum of a NaN and a float is a NaN.\n |      So, in the example, we set ``fill_value=0``,\n |      so the maximum value returned will be the value from some dataset.\n |\n |      &gt;&gt;&gt; s1.combine(s2, max, fill_value=0)\n |      duck       30.0\n |      eagle     200.0\n |      falcon    345.0\n |      dtype: float64\n |\n |  combine_first(self, other) -&gt; 'Series'\n |      Update null elements with value in the same location in 'other'.\n |\n |      Combine two Series objects by filling null values in one Series with\n |      non-null values from the other Series. Result index will be the union\n |      of the two indexes.\n |\n |      Parameters\n |      ----------\n |      other : Series\n |          The value(s) to be used for filling null values.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of combining the provided Series with the other object.\n |\n |      See Also\n |      --------\n |      Series.combine : Perform element-wise operation on two Series\n |          using a given function.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s1 = pd.Series([1, np.nan])\n |      &gt;&gt;&gt; s2 = pd.Series([3, 4, 5])\n |      &gt;&gt;&gt; s1.combine_first(s2)\n |      0    1.0\n |      1    4.0\n |      2    5.0\n |      dtype: float64\n |\n |      Null values still persist if the location of that null value\n |      does not exist in `other`\n |\n |      &gt;&gt;&gt; s1 = pd.Series({'falcon': np.nan, 'eagle': 160.0})\n |      &gt;&gt;&gt; s2 = pd.Series({'eagle': 200.0, 'duck': 30.0})\n |      &gt;&gt;&gt; s1.combine_first(s2)\n |      duck       30.0\n |      eagle     160.0\n |      falcon      NaN\n |      dtype: float64\n |\n |  compare(self, other: 'Series', align_axis: 'Axis' = 1, keep_shape: 'bool' = False, keep_equal: 'bool' = False, result_names: 'Suffixes' = ('self', 'other')) -&gt; 'DataFrame | Series'\n |      Compare to another Series and show the differences.\n |\n |      Parameters\n |      ----------\n |      other : Series\n |          Object to compare with.\n |\n |      align_axis : {0 or 'index', 1 or 'columns'}, default 1\n |          Determine which axis to align the comparison on.\n |\n |          * 0, or 'index' : Resulting differences are stacked vertically\n |              with rows drawn alternately from self and other.\n |          * 1, or 'columns' : Resulting differences are aligned horizontally\n |              with columns drawn alternately from self and other.\n |\n |      keep_shape : bool, default False\n |          If true, all rows and columns are kept.\n |          Otherwise, only the ones with different values are kept.\n |\n |      keep_equal : bool, default False\n |          If true, the result keeps values that are equal.\n |          Otherwise, equal values are shown as NaNs.\n |\n |      result_names : tuple, default ('self', 'other')\n |          Set the dataframes names in the comparison.\n |\n |          .. versionadded:: 1.5.0\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          If axis is 0 or 'index' the result will be a Series.\n |          The resulting index will be a MultiIndex with 'self' and 'other'\n |          stacked alternately at the inner level.\n |\n |          If axis is 1 or 'columns' the result will be a DataFrame.\n |          It will have two columns namely 'self' and 'other'.\n |\n |      See Also\n |      --------\n |      DataFrame.compare : Compare with another DataFrame and show differences.\n |\n |      Notes\n |      -----\n |      Matching NaNs will not appear as a difference.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s1 = pd.Series([\"a\", \"b\", \"c\", \"d\", \"e\"])\n |      &gt;&gt;&gt; s2 = pd.Series([\"a\", \"a\", \"c\", \"b\", \"e\"])\n |\n |      Align the differences on columns\n |\n |      &gt;&gt;&gt; s1.compare(s2)\n |        self other\n |      1    b     a\n |      3    d     b\n |\n |      Stack the differences on indices\n |\n |      &gt;&gt;&gt; s1.compare(s2, align_axis=0)\n |      1  self     b\n |         other    a\n |      3  self     d\n |         other    b\n |      dtype: object\n |\n |      Keep all original rows\n |\n |      &gt;&gt;&gt; s1.compare(s2, keep_shape=True)\n |        self other\n |      0  NaN   NaN\n |      1    b     a\n |      2  NaN   NaN\n |      3    d     b\n |      4  NaN   NaN\n |\n |      Keep all original rows and also all original values\n |\n |      &gt;&gt;&gt; s1.compare(s2, keep_shape=True, keep_equal=True)\n |        self other\n |      0    a     a\n |      1    b     a\n |      2    c     c\n |      3    d     b\n |      4    e     e\n |\n |  corr(self, other: 'Series', method: 'CorrelationMethod' = 'pearson', min_periods: 'int | None' = None) -&gt; 'float'\n |      Compute correlation with `other` Series, excluding missing values.\n |\n |      The two `Series` objects are not required to be the same length and will be\n |      aligned internally before the correlation function is applied.\n |\n |      Parameters\n |      ----------\n |      other : Series\n |          Series with which to compute the correlation.\n |      method : {'pearson', 'kendall', 'spearman'} or callable\n |          Method used to compute correlation:\n |\n |          - pearson : Standard correlation coefficient\n |          - kendall : Kendall Tau correlation coefficient\n |          - spearman : Spearman rank correlation\n |          - callable: Callable with input two 1d ndarrays and returning a float.\n |\n |          .. warning::\n |              Note that the returned matrix from corr will have 1 along the\n |              diagonals and will be symmetric regardless of the callable's\n |              behavior.\n |      min_periods : int, optional\n |          Minimum number of observations needed to have a valid result.\n |\n |      Returns\n |      -------\n |      float\n |          Correlation with other.\n |\n |      See Also\n |      --------\n |      DataFrame.corr : Compute pairwise correlation between columns.\n |      DataFrame.corrwith : Compute pairwise correlation with another\n |          DataFrame or Series.\n |\n |      Notes\n |      -----\n |      Pearson, Kendall and Spearman correlation are currently computed using pairwise complete observations.\n |\n |      * `Pearson correlation coefficient &lt;https://en.wikipedia.org/wiki/Pearson_correlation_coefficient&gt;`_\n |      * `Kendall rank correlation coefficient &lt;https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient&gt;`_\n |      * `Spearman's rank correlation coefficient &lt;https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient&gt;`_\n |\n |      Automatic data alignment: as with all pandas operations, automatic data alignment is performed for this method.\n |      ``corr()`` automatically considers values with matching indices.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; def histogram_intersection(a, b):\n |      ...     v = np.minimum(a, b).sum().round(decimals=1)\n |      ...     return v\n |      &gt;&gt;&gt; s1 = pd.Series([.2, .0, .6, .2])\n |      &gt;&gt;&gt; s2 = pd.Series([.3, .6, .0, .1])\n |      &gt;&gt;&gt; s1.corr(s2, method=histogram_intersection)\n |      0.3\n |\n |      Pandas auto-aligns the values with matching indices\n |\n |      &gt;&gt;&gt; s1 = pd.Series([1, 2, 3], index=[0, 1, 2])\n |      &gt;&gt;&gt; s2 = pd.Series([1, 2, 3], index=[2, 1, 0])\n |      &gt;&gt;&gt; s1.corr(s2)\n |      -1.0\n |\n |  count(self) -&gt; 'int'\n |      Return number of non-NA/null observations in the Series.\n |\n |      Returns\n |      -------\n |      int\n |          Number of non-null values in the Series.\n |\n |      See Also\n |      --------\n |      DataFrame.count : Count non-NA cells for each column or row.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([0.0, 1.0, np.nan])\n |      &gt;&gt;&gt; s.count()\n |      2\n |\n |  cov(self, other: 'Series', min_periods: 'int | None' = None, ddof: 'int | None' = 1) -&gt; 'float'\n |      Compute covariance with Series, excluding missing values.\n |\n |      The two `Series` objects are not required to be the same length and\n |      will be aligned internally before the covariance is calculated.\n |\n |      Parameters\n |      ----------\n |      other : Series\n |          Series with which to compute the covariance.\n |      min_periods : int, optional\n |          Minimum number of observations needed to have a valid result.\n |      ddof : int, default 1\n |          Delta degrees of freedom.  The divisor used in calculations\n |          is ``N - ddof``, where ``N`` represents the number of elements.\n |\n |      Returns\n |      -------\n |      float\n |          Covariance between Series and other normalized by N-1\n |          (unbiased estimator).\n |\n |      See Also\n |      --------\n |      DataFrame.cov : Compute pairwise covariance of columns.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s1 = pd.Series([0.90010907, 0.13484424, 0.62036035])\n |      &gt;&gt;&gt; s2 = pd.Series([0.12528585, 0.26962463, 0.51111198])\n |      &gt;&gt;&gt; s1.cov(s2)\n |      -0.01685762652715874\n |\n |  cummax(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)\n |      Return cumulative maximum over a DataFrame or Series axis.\n |\n |      Returns a DataFrame or Series of the same size containing the cumulative\n |      maximum.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The index or the name of the axis. 0 is equivalent to None or 'index'.\n |          For `Series` this parameter is unused and defaults to 0.\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      *args, **kwargs\n |          Additional keywords have no effect but might be accepted for\n |          compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      scalar or Series\n |          Return cumulative maximum of scalar or Series.\n |\n |      See Also\n |      --------\n |      core.window.expanding.Expanding.max : Similar functionality\n |          but ignores ``NaN`` values.\n |      Series.max : Return the maximum over\n |          Series axis.\n |      Series.cummax : Return cumulative maximum over Series axis.\n |      Series.cummin : Return cumulative minimum over Series axis.\n |      Series.cumsum : Return cumulative sum over Series axis.\n |      Series.cumprod : Return cumulative product over Series axis.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      &gt;&gt;&gt; s = pd.Series([2, np.nan, 5, -1, 0])\n |      &gt;&gt;&gt; s\n |      0    2.0\n |      1    NaN\n |      2    5.0\n |      3   -1.0\n |      4    0.0\n |      dtype: float64\n |\n |      By default, NA values are ignored.\n |\n |      &gt;&gt;&gt; s.cummax()\n |      0    2.0\n |      1    NaN\n |      2    5.0\n |      3    5.0\n |      4    5.0\n |      dtype: float64\n |\n |      To include NA values in the operation, use ``skipna=False``\n |\n |      &gt;&gt;&gt; s.cummax(skipna=False)\n |      0    2.0\n |      1    NaN\n |      2    NaN\n |      3    NaN\n |      4    NaN\n |      dtype: float64\n |\n |      **DataFrame**\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[2.0, 1.0],\n |      ...                    [3.0, np.nan],\n |      ...                    [1.0, 0.0]],\n |      ...                   columns=list('AB'))\n |      &gt;&gt;&gt; df\n |           A    B\n |      0  2.0  1.0\n |      1  3.0  NaN\n |      2  1.0  0.0\n |\n |      By default, iterates over rows and finds the maximum\n |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n |\n |      &gt;&gt;&gt; df.cummax()\n |           A    B\n |      0  2.0  1.0\n |      1  3.0  NaN\n |      2  3.0  1.0\n |\n |      To iterate over columns and find the maximum in each row,\n |      use ``axis=1``\n |\n |      &gt;&gt;&gt; df.cummax(axis=1)\n |           A    B\n |      0  2.0  2.0\n |      1  3.0  NaN\n |      2  1.0  1.0\n |\n |  cummin(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)\n |      Return cumulative minimum over a DataFrame or Series axis.\n |\n |      Returns a DataFrame or Series of the same size containing the cumulative\n |      minimum.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The index or the name of the axis. 0 is equivalent to None or 'index'.\n |          For `Series` this parameter is unused and defaults to 0.\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      *args, **kwargs\n |          Additional keywords have no effect but might be accepted for\n |          compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      scalar or Series\n |          Return cumulative minimum of scalar or Series.\n |\n |      See Also\n |      --------\n |      core.window.expanding.Expanding.min : Similar functionality\n |          but ignores ``NaN`` values.\n |      Series.min : Return the minimum over\n |          Series axis.\n |      Series.cummax : Return cumulative maximum over Series axis.\n |      Series.cummin : Return cumulative minimum over Series axis.\n |      Series.cumsum : Return cumulative sum over Series axis.\n |      Series.cumprod : Return cumulative product over Series axis.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      &gt;&gt;&gt; s = pd.Series([2, np.nan, 5, -1, 0])\n |      &gt;&gt;&gt; s\n |      0    2.0\n |      1    NaN\n |      2    5.0\n |      3   -1.0\n |      4    0.0\n |      dtype: float64\n |\n |      By default, NA values are ignored.\n |\n |      &gt;&gt;&gt; s.cummin()\n |      0    2.0\n |      1    NaN\n |      2    2.0\n |      3   -1.0\n |      4   -1.0\n |      dtype: float64\n |\n |      To include NA values in the operation, use ``skipna=False``\n |\n |      &gt;&gt;&gt; s.cummin(skipna=False)\n |      0    2.0\n |      1    NaN\n |      2    NaN\n |      3    NaN\n |      4    NaN\n |      dtype: float64\n |\n |      **DataFrame**\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[2.0, 1.0],\n |      ...                    [3.0, np.nan],\n |      ...                    [1.0, 0.0]],\n |      ...                   columns=list('AB'))\n |      &gt;&gt;&gt; df\n |           A    B\n |      0  2.0  1.0\n |      1  3.0  NaN\n |      2  1.0  0.0\n |\n |      By default, iterates over rows and finds the minimum\n |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n |\n |      &gt;&gt;&gt; df.cummin()\n |           A    B\n |      0  2.0  1.0\n |      1  2.0  NaN\n |      2  1.0  0.0\n |\n |      To iterate over columns and find the minimum in each row,\n |      use ``axis=1``\n |\n |      &gt;&gt;&gt; df.cummin(axis=1)\n |           A    B\n |      0  2.0  1.0\n |      1  3.0  NaN\n |      2  1.0  0.0\n |\n |  cumprod(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)\n |      Return cumulative product over a DataFrame or Series axis.\n |\n |      Returns a DataFrame or Series of the same size containing the cumulative\n |      product.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The index or the name of the axis. 0 is equivalent to None or 'index'.\n |          For `Series` this parameter is unused and defaults to 0.\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      *args, **kwargs\n |          Additional keywords have no effect but might be accepted for\n |          compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      scalar or Series\n |          Return cumulative product of scalar or Series.\n |\n |      See Also\n |      --------\n |      core.window.expanding.Expanding.prod : Similar functionality\n |          but ignores ``NaN`` values.\n |      Series.prod : Return the product over\n |          Series axis.\n |      Series.cummax : Return cumulative maximum over Series axis.\n |      Series.cummin : Return cumulative minimum over Series axis.\n |      Series.cumsum : Return cumulative sum over Series axis.\n |      Series.cumprod : Return cumulative product over Series axis.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      &gt;&gt;&gt; s = pd.Series([2, np.nan, 5, -1, 0])\n |      &gt;&gt;&gt; s\n |      0    2.0\n |      1    NaN\n |      2    5.0\n |      3   -1.0\n |      4    0.0\n |      dtype: float64\n |\n |      By default, NA values are ignored.\n |\n |      &gt;&gt;&gt; s.cumprod()\n |      0     2.0\n |      1     NaN\n |      2    10.0\n |      3   -10.0\n |      4    -0.0\n |      dtype: float64\n |\n |      To include NA values in the operation, use ``skipna=False``\n |\n |      &gt;&gt;&gt; s.cumprod(skipna=False)\n |      0    2.0\n |      1    NaN\n |      2    NaN\n |      3    NaN\n |      4    NaN\n |      dtype: float64\n |\n |      **DataFrame**\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[2.0, 1.0],\n |      ...                    [3.0, np.nan],\n |      ...                    [1.0, 0.0]],\n |      ...                   columns=list('AB'))\n |      &gt;&gt;&gt; df\n |           A    B\n |      0  2.0  1.0\n |      1  3.0  NaN\n |      2  1.0  0.0\n |\n |      By default, iterates over rows and finds the product\n |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n |\n |      &gt;&gt;&gt; df.cumprod()\n |           A    B\n |      0  2.0  1.0\n |      1  6.0  NaN\n |      2  6.0  0.0\n |\n |      To iterate over columns and find the product in each row,\n |      use ``axis=1``\n |\n |      &gt;&gt;&gt; df.cumprod(axis=1)\n |           A    B\n |      0  2.0  2.0\n |      1  3.0  NaN\n |      2  1.0  0.0\n |\n |  cumsum(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)\n |      Return cumulative sum over a DataFrame or Series axis.\n |\n |      Returns a DataFrame or Series of the same size containing the cumulative\n |      sum.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The index or the name of the axis. 0 is equivalent to None or 'index'.\n |          For `Series` this parameter is unused and defaults to 0.\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      *args, **kwargs\n |          Additional keywords have no effect but might be accepted for\n |          compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      scalar or Series\n |          Return cumulative sum of scalar or Series.\n |\n |      See Also\n |      --------\n |      core.window.expanding.Expanding.sum : Similar functionality\n |          but ignores ``NaN`` values.\n |      Series.sum : Return the sum over\n |          Series axis.\n |      Series.cummax : Return cumulative maximum over Series axis.\n |      Series.cummin : Return cumulative minimum over Series axis.\n |      Series.cumsum : Return cumulative sum over Series axis.\n |      Series.cumprod : Return cumulative product over Series axis.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      &gt;&gt;&gt; s = pd.Series([2, np.nan, 5, -1, 0])\n |      &gt;&gt;&gt; s\n |      0    2.0\n |      1    NaN\n |      2    5.0\n |      3   -1.0\n |      4    0.0\n |      dtype: float64\n |\n |      By default, NA values are ignored.\n |\n |      &gt;&gt;&gt; s.cumsum()\n |      0    2.0\n |      1    NaN\n |      2    7.0\n |      3    6.0\n |      4    6.0\n |      dtype: float64\n |\n |      To include NA values in the operation, use ``skipna=False``\n |\n |      &gt;&gt;&gt; s.cumsum(skipna=False)\n |      0    2.0\n |      1    NaN\n |      2    NaN\n |      3    NaN\n |      4    NaN\n |      dtype: float64\n |\n |      **DataFrame**\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[2.0, 1.0],\n |      ...                    [3.0, np.nan],\n |      ...                    [1.0, 0.0]],\n |      ...                   columns=list('AB'))\n |      &gt;&gt;&gt; df\n |           A    B\n |      0  2.0  1.0\n |      1  3.0  NaN\n |      2  1.0  0.0\n |\n |      By default, iterates over rows and finds the sum\n |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n |\n |      &gt;&gt;&gt; df.cumsum()\n |           A    B\n |      0  2.0  1.0\n |      1  5.0  NaN\n |      2  6.0  1.0\n |\n |      To iterate over columns and find the sum in each row,\n |      use ``axis=1``\n |\n |      &gt;&gt;&gt; df.cumsum(axis=1)\n |           A    B\n |      0  2.0  3.0\n |      1  3.0  NaN\n |      2  1.0  1.0\n |\n |  diff(self, periods: 'int' = 1) -&gt; 'Series'\n |      First discrete difference of element.\n |\n |      Calculates the difference of a Series element compared with another\n |      element in the Series (default is element in previous row).\n |\n |      Parameters\n |      ----------\n |      periods : int, default 1\n |          Periods to shift for calculating difference, accepts negative\n |          values.\n |\n |      Returns\n |      -------\n |      Series\n |          First differences of the Series.\n |\n |      See Also\n |      --------\n |      Series.pct_change: Percent change over given number of periods.\n |      Series.shift: Shift index by desired number of periods with an\n |          optional time freq.\n |      DataFrame.diff: First discrete difference of object.\n |\n |      Notes\n |      -----\n |      For boolean dtypes, this uses :meth:`operator.xor` rather than\n |      :meth:`operator.sub`.\n |      The result is calculated according to current dtype in Series,\n |      however dtype of the result is always float64.\n |\n |      Examples\n |      --------\n |\n |      Difference with previous row\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 1, 2, 3, 5, 8])\n |      &gt;&gt;&gt; s.diff()\n |      0    NaN\n |      1    0.0\n |      2    1.0\n |      3    1.0\n |      4    2.0\n |      5    3.0\n |      dtype: float64\n |\n |      Difference with 3rd previous row\n |\n |      &gt;&gt;&gt; s.diff(periods=3)\n |      0    NaN\n |      1    NaN\n |      2    NaN\n |      3    2.0\n |      4    4.0\n |      5    6.0\n |      dtype: float64\n |\n |      Difference with following row\n |\n |      &gt;&gt;&gt; s.diff(periods=-1)\n |      0    0.0\n |      1   -1.0\n |      2   -1.0\n |      3   -2.0\n |      4   -3.0\n |      5    NaN\n |      dtype: float64\n |\n |      Overflow in input dtype\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 0], dtype=np.uint8)\n |      &gt;&gt;&gt; s.diff()\n |      0      NaN\n |      1    255.0\n |      dtype: float64\n |\n |  div = truediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |\n |  divide = truediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |\n |  divmod(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Integer division and modulo of series and other, element-wise (binary operator `divmod`).\n |\n |      Equivalent to ``divmod(series, other)``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      2-Tuple of Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.rdivmod : Reverse of the Integer division and modulo operator, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.divmod(b, fill_value=0)\n |      (a    1.0\n |       b    inf\n |       c    inf\n |       d    0.0\n |       e    NaN\n |       dtype: float64,\n |       a    0.0\n |       b    NaN\n |       c    NaN\n |       d    0.0\n |       e    NaN\n |       dtype: float64)\n |\n |  dot(self, other: 'AnyArrayLike') -&gt; 'Series | np.ndarray'\n |      Compute the dot product between the Series and the columns of other.\n |\n |      This method computes the dot product between the Series and another\n |      one, or the Series and each columns of a DataFrame, or the Series and\n |      each columns of an array.\n |\n |      It can also be called using `self @ other`.\n |\n |      Parameters\n |      ----------\n |      other : Series, DataFrame or array-like\n |          The other object to compute the dot product with its columns.\n |\n |      Returns\n |      -------\n |      scalar, Series or numpy.ndarray\n |          Return the dot product of the Series and other if other is a\n |          Series, the Series of the dot product of Series and each rows of\n |          other if other is a DataFrame or a numpy.ndarray between the Series\n |          and each columns of the numpy array.\n |\n |      See Also\n |      --------\n |      DataFrame.dot: Compute the matrix product with the DataFrame.\n |      Series.mul: Multiplication of series and other, element-wise.\n |\n |      Notes\n |      -----\n |      The Series and other has to share the same index if other is a Series\n |      or a DataFrame.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([0, 1, 2, 3])\n |      &gt;&gt;&gt; other = pd.Series([-1, 2, -3, 4])\n |      &gt;&gt;&gt; s.dot(other)\n |      8\n |      &gt;&gt;&gt; s @ other\n |      8\n |      &gt;&gt;&gt; df = pd.DataFrame([[0, 1], [-2, 3], [4, -5], [6, 7]])\n |      &gt;&gt;&gt; s.dot(df)\n |      0    24\n |      1    14\n |      dtype: int64\n |      &gt;&gt;&gt; arr = np.array([[0, 1], [-2, 3], [4, -5], [6, 7]])\n |      &gt;&gt;&gt; s.dot(arr)\n |      array([24, 14])\n |\n |  drop(self, labels: 'IndexLabel | None' = None, *, axis: 'Axis' = 0, index: 'IndexLabel | None' = None, columns: 'IndexLabel | None' = None, level: 'Level | None' = None, inplace: 'bool' = False, errors: 'IgnoreRaise' = 'raise') -&gt; 'Series | None'\n |      Return Series with specified index labels removed.\n |\n |      Remove elements of a Series based on specifying the index labels.\n |      When using a multi-index, labels on different levels can be removed\n |      by specifying the level.\n |\n |      Parameters\n |      ----------\n |      labels : single label or list-like\n |          Index labels to drop.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |      index : single label or list-like\n |          Redundant for application on Series, but 'index' can be used instead\n |          of 'labels'.\n |      columns : single label or list-like\n |          No change is made to the Series; use 'index' or 'labels' instead.\n |      level : int or level name, optional\n |          For MultiIndex, level for which the labels will be removed.\n |      inplace : bool, default False\n |          If True, do operation inplace and return None.\n |      errors : {'ignore', 'raise'}, default 'raise'\n |          If 'ignore', suppress error and only existing labels are dropped.\n |\n |      Returns\n |      -------\n |      Series or None\n |          Series with specified index labels removed or None if ``inplace=True``.\n |\n |      Raises\n |      ------\n |      KeyError\n |          If none of the labels are found in the index.\n |\n |      See Also\n |      --------\n |      Series.reindex : Return only specified index labels of Series.\n |      Series.dropna : Return series without null values.\n |      Series.drop_duplicates : Return Series with duplicate values removed.\n |      DataFrame.drop : Drop specified labels from rows or columns.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(data=np.arange(3), index=['A', 'B', 'C'])\n |      &gt;&gt;&gt; s\n |      A  0\n |      B  1\n |      C  2\n |      dtype: int64\n |\n |      Drop labels B en C\n |\n |      &gt;&gt;&gt; s.drop(labels=['B', 'C'])\n |      A  0\n |      dtype: int64\n |\n |      Drop 2nd level label in MultiIndex Series\n |\n |      &gt;&gt;&gt; midx = pd.MultiIndex(levels=[['llama', 'cow', 'falcon'],\n |      ...                              ['speed', 'weight', 'length']],\n |      ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n |      ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n |      &gt;&gt;&gt; s = pd.Series([45, 200, 1.2, 30, 250, 1.5, 320, 1, 0.3],\n |      ...               index=midx)\n |      &gt;&gt;&gt; s\n |      llama   speed      45.0\n |              weight    200.0\n |              length      1.2\n |      cow     speed      30.0\n |              weight    250.0\n |              length      1.5\n |      falcon  speed     320.0\n |              weight      1.0\n |              length      0.3\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s.drop(labels='weight', level=1)\n |      llama   speed      45.0\n |              length      1.2\n |      cow     speed      30.0\n |              length      1.5\n |      falcon  speed     320.0\n |              length      0.3\n |      dtype: float64\n |\n |  drop_duplicates(self, *, keep: 'DropKeep' = 'first', inplace: 'bool' = False, ignore_index: 'bool' = False) -&gt; 'Series | None'\n |      Return Series with duplicate values removed.\n |\n |      Parameters\n |      ----------\n |      keep : {'first', 'last', ``False``}, default 'first'\n |          Method to handle dropping duplicates:\n |\n |          - 'first' : Drop duplicates except for the first occurrence.\n |          - 'last' : Drop duplicates except for the last occurrence.\n |          - ``False`` : Drop all duplicates.\n |\n |      inplace : bool, default ``False``\n |          If ``True``, performs operation inplace and returns None.\n |\n |      ignore_index : bool, default ``False``\n |          If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.\n |\n |          .. versionadded:: 2.0.0\n |\n |      Returns\n |      -------\n |      Series or None\n |          Series with duplicates dropped or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      Index.drop_duplicates : Equivalent method on Index.\n |      DataFrame.drop_duplicates : Equivalent method on DataFrame.\n |      Series.duplicated : Related method on Series, indicating duplicate\n |          Series values.\n |      Series.unique : Return unique values as an array.\n |\n |      Examples\n |      --------\n |      Generate a Series with duplicated entries.\n |\n |      &gt;&gt;&gt; s = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama', 'hippo'],\n |      ...               name='animal')\n |      &gt;&gt;&gt; s\n |      0     llama\n |      1       cow\n |      2     llama\n |      3    beetle\n |      4     llama\n |      5     hippo\n |      Name: animal, dtype: object\n |\n |      With the 'keep' parameter, the selection behaviour of duplicated values\n |      can be changed. The value 'first' keeps the first occurrence for each\n |      set of duplicated entries. The default value of keep is 'first'.\n |\n |      &gt;&gt;&gt; s.drop_duplicates()\n |      0     llama\n |      1       cow\n |      3    beetle\n |      5     hippo\n |      Name: animal, dtype: object\n |\n |      The value 'last' for parameter 'keep' keeps the last occurrence for\n |      each set of duplicated entries.\n |\n |      &gt;&gt;&gt; s.drop_duplicates(keep='last')\n |      1       cow\n |      3    beetle\n |      4     llama\n |      5     hippo\n |      Name: animal, dtype: object\n |\n |      The value ``False`` for parameter 'keep' discards all sets of\n |      duplicated entries.\n |\n |      &gt;&gt;&gt; s.drop_duplicates(keep=False)\n |      1       cow\n |      3    beetle\n |      5     hippo\n |      Name: animal, dtype: object\n |\n |  dropna(self, *, axis: 'Axis' = 0, inplace: 'bool' = False, how: 'AnyAll | None' = None, ignore_index: 'bool' = False) -&gt; 'Series | None'\n |      Return a new Series with missing values removed.\n |\n |      See the :ref:`User Guide &lt;missing_data&gt;` for more on which values are\n |      considered missing, and how to work with missing data.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |      inplace : bool, default False\n |          If True, do operation inplace and return None.\n |      how : str, optional\n |          Not in use. Kept for compatibility.\n |      ignore_index : bool, default ``False``\n |          If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.\n |\n |          .. versionadded:: 2.0.0\n |\n |      Returns\n |      -------\n |      Series or None\n |          Series with NA entries dropped from it or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      Series.isna: Indicate missing values.\n |      Series.notna : Indicate existing (non-missing) values.\n |      Series.fillna : Replace missing values.\n |      DataFrame.dropna : Drop rows or columns which contain NA values.\n |      Index.dropna : Drop missing indices.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; ser = pd.Series([1., 2., np.nan])\n |      &gt;&gt;&gt; ser\n |      0    1.0\n |      1    2.0\n |      2    NaN\n |      dtype: float64\n |\n |      Drop NA values from a Series.\n |\n |      &gt;&gt;&gt; ser.dropna()\n |      0    1.0\n |      1    2.0\n |      dtype: float64\n |\n |      Empty strings are not considered NA values. ``None`` is considered an\n |      NA value.\n |\n |      &gt;&gt;&gt; ser = pd.Series([np.nan, 2, pd.NaT, '', None, 'I stay'])\n |      &gt;&gt;&gt; ser\n |      0       NaN\n |      1         2\n |      2       NaT\n |      3\n |      4      None\n |      5    I stay\n |      dtype: object\n |      &gt;&gt;&gt; ser.dropna()\n |      1         2\n |      3\n |      5    I stay\n |      dtype: object\n |\n |  duplicated(self, keep: 'DropKeep' = 'first') -&gt; 'Series'\n |      Indicate duplicate Series values.\n |\n |      Duplicated values are indicated as ``True`` values in the resulting\n |      Series. Either all duplicates, all except the first or all except the\n |      last occurrence of duplicates can be indicated.\n |\n |      Parameters\n |      ----------\n |      keep : {'first', 'last', False}, default 'first'\n |          Method to handle dropping duplicates:\n |\n |          - 'first' : Mark duplicates as ``True`` except for the first\n |            occurrence.\n |          - 'last' : Mark duplicates as ``True`` except for the last\n |            occurrence.\n |          - ``False`` : Mark all duplicates as ``True``.\n |\n |      Returns\n |      -------\n |      Series[bool]\n |          Series indicating whether each value has occurred in the\n |          preceding values.\n |\n |      See Also\n |      --------\n |      Index.duplicated : Equivalent method on pandas.Index.\n |      DataFrame.duplicated : Equivalent method on pandas.DataFrame.\n |      Series.drop_duplicates : Remove duplicate values from Series.\n |\n |      Examples\n |      --------\n |      By default, for each set of duplicated values, the first occurrence is\n |      set on False and all others on True:\n |\n |      &gt;&gt;&gt; animals = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama'])\n |      &gt;&gt;&gt; animals.duplicated()\n |      0    False\n |      1    False\n |      2     True\n |      3    False\n |      4     True\n |      dtype: bool\n |\n |      which is equivalent to\n |\n |      &gt;&gt;&gt; animals.duplicated(keep='first')\n |      0    False\n |      1    False\n |      2     True\n |      3    False\n |      4     True\n |      dtype: bool\n |\n |      By using 'last', the last occurrence of each set of duplicated values\n |      is set on False and all others on True:\n |\n |      &gt;&gt;&gt; animals.duplicated(keep='last')\n |      0     True\n |      1    False\n |      2     True\n |      3    False\n |      4    False\n |      dtype: bool\n |\n |      By setting keep on ``False``, all duplicates are True:\n |\n |      &gt;&gt;&gt; animals.duplicated(keep=False)\n |      0     True\n |      1    False\n |      2     True\n |      3    False\n |      4     True\n |      dtype: bool\n |\n |  eq(self, other, level: 'Level | None' = None, fill_value: 'float | None' = None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Equal to of series and other, element-wise (binary operator `eq`).\n |\n |      Equivalent to ``series == other``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.eq(b, fill_value=0)\n |      a     True\n |      b    False\n |      c    False\n |      d    False\n |      e    False\n |      dtype: bool\n |\n |  explode(self, ignore_index: 'bool' = False) -&gt; 'Series'\n |      Transform each element of a list-like to a row.\n |\n |      Parameters\n |      ----------\n |      ignore_index : bool, default False\n |          If True, the resulting index will be labeled 0, 1, …, n - 1.\n |\n |      Returns\n |      -------\n |      Series\n |          Exploded lists to rows; index will be duplicated for these rows.\n |\n |      See Also\n |      --------\n |      Series.str.split : Split string values on specified separator.\n |      Series.unstack : Unstack, a.k.a. pivot, Series with MultiIndex\n |          to produce DataFrame.\n |      DataFrame.melt : Unpivot a DataFrame from wide format to long format.\n |      DataFrame.explode : Explode a DataFrame from list-like\n |          columns to long format.\n |\n |      Notes\n |      -----\n |      This routine will explode list-likes including lists, tuples, sets,\n |      Series, and np.ndarray. The result dtype of the subset rows will\n |      be object. Scalars will be returned unchanged, and empty list-likes will\n |      result in a np.nan for that row. In addition, the ordering of elements in\n |      the output will be non-deterministic when exploding sets.\n |\n |      Reference :ref:`the user guide &lt;reshaping.explode&gt;` for more examples.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([[1, 2, 3], 'foo', [], [3, 4]])\n |      &gt;&gt;&gt; s\n |      0    [1, 2, 3]\n |      1          foo\n |      2           []\n |      3       [3, 4]\n |      dtype: object\n |\n |      &gt;&gt;&gt; s.explode()\n |      0      1\n |      0      2\n |      0      3\n |      1    foo\n |      2    NaN\n |      3      3\n |      3      4\n |      dtype: object\n |\n |  floordiv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Integer division of series and other, element-wise (binary operator `floordiv`).\n |\n |      Equivalent to ``series // other``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.rfloordiv : Reverse of the Integer division operator, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.floordiv(b, fill_value=0)\n |      a    1.0\n |      b    inf\n |      c    inf\n |      d    0.0\n |      e    NaN\n |      dtype: float64\n |\n |  ge(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Greater than or equal to of series and other, element-wise (binary operator `ge`).\n |\n |      Equivalent to ``series &gt;= other``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      e    1.0\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])\n |      &gt;&gt;&gt; b\n |      a    0.0\n |      b    1.0\n |      c    2.0\n |      d    NaN\n |      f    1.0\n |      dtype: float64\n |      &gt;&gt;&gt; a.ge(b, fill_value=0)\n |      a     True\n |      b     True\n |      c    False\n |      d    False\n |      e     True\n |      f    False\n |      dtype: bool\n |\n |  groupby(self, by=None, axis: 'Axis' = 0, level: 'IndexLabel | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, observed: 'bool | lib.NoDefault' = &lt;no_default&gt;, dropna: 'bool' = True) -&gt; 'SeriesGroupBy'\n |      Group Series using a mapper or by a Series of columns.\n |\n |      A groupby operation involves some combination of splitting the\n |      object, applying a function, and combining the results. This can be\n |      used to group large amounts of data and compute operations on these\n |      groups.\n |\n |      Parameters\n |      ----------\n |      by : mapping, function, label, pd.Grouper or list of such\n |          Used to determine the groups for the groupby.\n |          If ``by`` is a function, it's called on each value of the object's\n |          index. If a dict or Series is passed, the Series or dict VALUES\n |          will be used to determine the groups (the Series' values are first\n |          aligned; see ``.align()`` method). If a list or ndarray of length\n |          equal to the selected axis is passed (see the `groupby user guide\n |          &lt;https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#splitting-an-object-into-groups&gt;`_),\n |          the values are used as-is to determine the groups. A label or list\n |          of labels may be passed to group by the columns in ``self``.\n |          Notice that a tuple is interpreted as a (single) key.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Split along rows (0) or columns (1). For `Series` this parameter\n |          is unused and defaults to 0.\n |\n |          .. deprecated:: 2.1.0\n |\n |              Will be removed and behave like axis=0 in a future version.\n |              For ``axis=1``, do ``frame.T.groupby(...)`` instead.\n |\n |      level : int, level name, or sequence of such, default None\n |          If the axis is a MultiIndex (hierarchical), group by a particular\n |          level or levels. Do not specify both ``by`` and ``level``.\n |      as_index : bool, default True\n |          Return object with group labels as the\n |          index. Only relevant for DataFrame input. as_index=False is\n |          effectively \"SQL-style\" grouped output. This argument has no effect\n |          on filtrations (see the `filtrations in the user guide\n |          &lt;https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration&gt;`_),\n |          such as ``head()``, ``tail()``, ``nth()`` and in transformations\n |          (see the `transformations in the user guide\n |          &lt;https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation&gt;`_).\n |      sort : bool, default True\n |          Sort group keys. Get better performance by turning this off.\n |          Note this does not influence the order of observations within each\n |          group. Groupby preserves the order of rows within each group. If False,\n |          the groups will appear in the same order as they did in the original DataFrame.\n |          This argument has no effect on filtrations (see the `filtrations in the user guide\n |          &lt;https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration&gt;`_),\n |          such as ``head()``, ``tail()``, ``nth()`` and in transformations\n |          (see the `transformations in the user guide\n |          &lt;https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation&gt;`_).\n |\n |          .. versionchanged:: 2.0.0\n |\n |              Specifying ``sort=False`` with an ordered categorical grouper will no\n |              longer sort the values.\n |\n |      group_keys : bool, default True\n |          When calling apply and the ``by`` argument produces a like-indexed\n |          (i.e. :ref:`a transform &lt;groupby.transform&gt;`) result, add group keys to\n |          index to identify pieces. By default group keys are not included\n |          when the result's index (and column) labels match the inputs, and\n |          are included otherwise.\n |\n |          .. versionchanged:: 1.5.0\n |\n |             Warns that ``group_keys`` will no longer be ignored when the\n |             result from ``apply`` is a like-indexed Series or DataFrame.\n |             Specify ``group_keys`` explicitly to include the group keys or\n |             not.\n |\n |          .. versionchanged:: 2.0.0\n |\n |             ``group_keys`` now defaults to ``True``.\n |\n |      observed : bool, default False\n |          This only applies if any of the groupers are Categoricals.\n |          If True: only show observed values for categorical groupers.\n |          If False: show all values for categorical groupers.\n |\n |          .. deprecated:: 2.1.0\n |\n |              The default value will change to True in a future version of pandas.\n |\n |      dropna : bool, default True\n |          If True, and if group keys contain NA values, NA values together\n |          with row/column will be dropped.\n |          If False, NA values will also be treated as the key in groups.\n |\n |      Returns\n |      -------\n |      pandas.api.typing.SeriesGroupBy\n |          Returns a groupby object that contains information about the groups.\n |\n |      See Also\n |      --------\n |      resample : Convenience method for frequency conversion and resampling\n |          of time series.\n |\n |      Notes\n |      -----\n |      See the `user guide\n |      &lt;https://pandas.pydata.org/pandas-docs/stable/groupby.html&gt;`__ for more\n |      detailed usage and examples, including splitting an object into groups,\n |      iterating through groups, selecting a group, aggregation, and more.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; ser = pd.Series([390., 350., 30., 20.],\n |      ...                 index=['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n |      ...                 name=\"Max Speed\")\n |      &gt;&gt;&gt; ser\n |      Falcon    390.0\n |      Falcon    350.0\n |      Parrot     30.0\n |      Parrot     20.0\n |      Name: Max Speed, dtype: float64\n |      &gt;&gt;&gt; ser.groupby([\"a\", \"b\", \"a\", \"b\"]).mean()\n |      a    210.0\n |      b    185.0\n |      Name: Max Speed, dtype: float64\n |      &gt;&gt;&gt; ser.groupby(level=0).mean()\n |      Falcon    370.0\n |      Parrot     25.0\n |      Name: Max Speed, dtype: float64\n |      &gt;&gt;&gt; ser.groupby(ser &gt; 100).mean()\n |      Max Speed\n |      False     25.0\n |      True     370.0\n |      Name: Max Speed, dtype: float64\n |\n |      **Grouping by Indexes**\n |\n |      We can groupby different levels of a hierarchical index\n |      using the `level` parameter:\n |\n |      &gt;&gt;&gt; arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n |      ...           ['Captive', 'Wild', 'Captive', 'Wild']]\n |      &gt;&gt;&gt; index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\n |      &gt;&gt;&gt; ser = pd.Series([390., 350., 30., 20.], index=index, name=\"Max Speed\")\n |      &gt;&gt;&gt; ser\n |      Animal  Type\n |      Falcon  Captive    390.0\n |              Wild       350.0\n |      Parrot  Captive     30.0\n |              Wild        20.0\n |      Name: Max Speed, dtype: float64\n |      &gt;&gt;&gt; ser.groupby(level=0).mean()\n |      Animal\n |      Falcon    370.0\n |      Parrot     25.0\n |      Name: Max Speed, dtype: float64\n |      &gt;&gt;&gt; ser.groupby(level=\"Type\").mean()\n |      Type\n |      Captive    210.0\n |      Wild       185.0\n |      Name: Max Speed, dtype: float64\n |\n |      We can also choose to include `NA` in group keys or not by defining\n |      `dropna` parameter, the default setting is `True`.\n |\n |      &gt;&gt;&gt; ser = pd.Series([1, 2, 3, 3], index=[\"a\", 'a', 'b', np.nan])\n |      &gt;&gt;&gt; ser.groupby(level=0).sum()\n |      a    3\n |      b    3\n |      dtype: int64\n |\n |      &gt;&gt;&gt; ser.groupby(level=0, dropna=False).sum()\n |      a    3\n |      b    3\n |      NaN  3\n |      dtype: int64\n |\n |      &gt;&gt;&gt; arrays = ['Falcon', 'Falcon', 'Parrot', 'Parrot']\n |      &gt;&gt;&gt; ser = pd.Series([390., 350., 30., 20.], index=arrays, name=\"Max Speed\")\n |      &gt;&gt;&gt; ser.groupby([\"a\", \"b\", \"a\", np.nan]).mean()\n |      a    210.0\n |      b    350.0\n |      Name: Max Speed, dtype: float64\n |\n |      &gt;&gt;&gt; ser.groupby([\"a\", \"b\", \"a\", np.nan], dropna=False).mean()\n |      a    210.0\n |      b    350.0\n |      NaN   20.0\n |      Name: Max Speed, dtype: float64\n |\n |  gt(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Greater than of series and other, element-wise (binary operator `gt`).\n |\n |      Equivalent to ``series &gt; other``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      e    1.0\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])\n |      &gt;&gt;&gt; b\n |      a    0.0\n |      b    1.0\n |      c    2.0\n |      d    NaN\n |      f    1.0\n |      dtype: float64\n |      &gt;&gt;&gt; a.gt(b, fill_value=0)\n |      a     True\n |      b    False\n |      c    False\n |      d    False\n |      e     True\n |      f    False\n |      dtype: bool\n |\n |  hist = hist_series(self: 'Series', by=None, ax=None, grid: 'bool' = True, xlabelsize: 'int | None' = None, xrot: 'float | None' = None, ylabelsize: 'int | None' = None, yrot: 'float | None' = None, figsize: 'tuple[int, int] | None' = None, bins: 'int | Sequence[int]' = 10, backend: 'str | None' = None, legend: 'bool' = False, **kwargs) from pandas.plotting._core\n |      Draw histogram of the input series using matplotlib.\n |\n |      Parameters\n |      ----------\n |      by : object, optional\n |          If passed, then used to form histograms for separate groups.\n |      ax : matplotlib axis object\n |          If not passed, uses gca().\n |      grid : bool, default True\n |          Whether to show axis grid lines.\n |      xlabelsize : int, default None\n |          If specified changes the x-axis label size.\n |      xrot : float, default None\n |          Rotation of x axis labels.\n |      ylabelsize : int, default None\n |          If specified changes the y-axis label size.\n |      yrot : float, default None\n |          Rotation of y axis labels.\n |      figsize : tuple, default None\n |          Figure size in inches by default.\n |      bins : int or sequence, default 10\n |          Number of histogram bins to be used. If an integer is given, bins + 1\n |          bin edges are calculated and returned. If bins is a sequence, gives\n |          bin edges, including left edge of first bin and right edge of last\n |          bin. In this case, bins is returned unmodified.\n |      backend : str, default None\n |          Backend to use instead of the backend specified in the option\n |          ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to\n |          specify the ``plotting.backend`` for the whole session, set\n |          ``pd.options.plotting.backend``.\n |      legend : bool, default False\n |          Whether to show the legend.\n |\n |      **kwargs\n |          To be passed to the actual plotting function.\n |\n |      Returns\n |      -------\n |      matplotlib.AxesSubplot\n |          A histogram plot.\n |\n |      See Also\n |      --------\n |      matplotlib.axes.Axes.hist : Plot a histogram using matplotlib.\n |\n |      Examples\n |      --------\n |      For Series:\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; lst = ['a', 'a', 'a', 'b', 'b', 'b']\n |          &gt;&gt;&gt; ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)\n |          &gt;&gt;&gt; hist = ser.hist()\n |\n |      For Groupby:\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; lst = ['a', 'a', 'a', 'b', 'b', 'b']\n |          &gt;&gt;&gt; ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)\n |          &gt;&gt;&gt; hist = ser.groupby(level=0).hist()\n |\n |  idxmax(self, axis: 'Axis' = 0, skipna: 'bool' = True, *args, **kwargs) -&gt; 'Hashable'\n |      Return the row label of the maximum value.\n |\n |      If multiple values equal the maximum, the first row label with that\n |      value is returned.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |      skipna : bool, default True\n |          Exclude NA/null values. If the entire Series is NA, the result\n |          will be NA.\n |      *args, **kwargs\n |          Additional arguments and keywords have no effect but might be\n |          accepted for compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      Index\n |          Label of the maximum value.\n |\n |      Raises\n |      ------\n |      ValueError\n |          If the Series is empty.\n |\n |      See Also\n |      --------\n |      numpy.argmax : Return indices of the maximum values\n |          along the given axis.\n |      DataFrame.idxmax : Return index of first occurrence of maximum\n |          over requested axis.\n |      Series.idxmin : Return index *label* of the first occurrence\n |          of minimum of values.\n |\n |      Notes\n |      -----\n |      This method is the Series version of ``ndarray.argmax``. This method\n |      returns the label of the maximum, while ``ndarray.argmax`` returns\n |      the position. To get the position, use ``series.values.argmax()``.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(data=[1, None, 4, 3, 4],\n |      ...               index=['A', 'B', 'C', 'D', 'E'])\n |      &gt;&gt;&gt; s\n |      A    1.0\n |      B    NaN\n |      C    4.0\n |      D    3.0\n |      E    4.0\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s.idxmax()\n |      'C'\n |\n |      If `skipna` is False and there is an NA value in the data,\n |      the function returns ``nan``.\n |\n |      &gt;&gt;&gt; s.idxmax(skipna=False)\n |      nan\n |\n |  idxmin(self, axis: 'Axis' = 0, skipna: 'bool' = True, *args, **kwargs) -&gt; 'Hashable'\n |      Return the row label of the minimum value.\n |\n |      If multiple values equal the minimum, the first row label with that\n |      value is returned.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |      skipna : bool, default True\n |          Exclude NA/null values. If the entire Series is NA, the result\n |          will be NA.\n |      *args, **kwargs\n |          Additional arguments and keywords have no effect but might be\n |          accepted for compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      Index\n |          Label of the minimum value.\n |\n |      Raises\n |      ------\n |      ValueError\n |          If the Series is empty.\n |\n |      See Also\n |      --------\n |      numpy.argmin : Return indices of the minimum values\n |          along the given axis.\n |      DataFrame.idxmin : Return index of first occurrence of minimum\n |          over requested axis.\n |      Series.idxmax : Return index *label* of the first occurrence\n |          of maximum of values.\n |\n |      Notes\n |      -----\n |      This method is the Series version of ``ndarray.argmin``. This method\n |      returns the label of the minimum, while ``ndarray.argmin`` returns\n |      the position. To get the position, use ``series.values.argmin()``.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(data=[1, None, 4, 1],\n |      ...               index=['A', 'B', 'C', 'D'])\n |      &gt;&gt;&gt; s\n |      A    1.0\n |      B    NaN\n |      C    4.0\n |      D    1.0\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s.idxmin()\n |      'A'\n |\n |      If `skipna` is False and there is an NA value in the data,\n |      the function returns ``nan``.\n |\n |      &gt;&gt;&gt; s.idxmin(skipna=False)\n |      nan\n |\n |  info(self, verbose: 'bool | None' = None, buf: 'IO[str] | None' = None, max_cols: 'int | None' = None, memory_usage: 'bool | str | None' = None, show_counts: 'bool' = True) -&gt; 'None'\n |      Print a concise summary of a Series.\n |\n |      This method prints information about a Series including\n |      the index dtype, non-null values and memory usage.\n |\n |      .. versionadded:: 1.4.0\n |\n |      Parameters\n |      ----------\n |      verbose : bool, optional\n |          Whether to print the full summary. By default, the setting in\n |          ``pandas.options.display.max_info_columns`` is followed.\n |      buf : writable buffer, defaults to sys.stdout\n |          Where to send the output. By default, the output is printed to\n |          sys.stdout. Pass a writable buffer if you need to further process\n |          the output.\n |\n |      memory_usage : bool, str, optional\n |          Specifies whether total memory usage of the Series\n |          elements (including the index) should be displayed. By default,\n |          this follows the ``pandas.options.display.memory_usage`` setting.\n |\n |          True always show memory usage. False never shows memory usage.\n |          A value of 'deep' is equivalent to \"True with deep introspection\".\n |          Memory usage is shown in human-readable units (base-2\n |          representation). Without deep introspection a memory estimation is\n |          made based in column dtype and number of rows assuming values\n |          consume the same memory amount for corresponding dtypes. With deep\n |          memory introspection, a real memory usage calculation is performed\n |          at the cost of computational resources. See the\n |          :ref:`Frequently Asked Questions &lt;df-memory-usage&gt;` for more\n |          details.\n |      show_counts : bool, optional\n |          Whether to show the non-null counts. By default, this is shown\n |          only if the DataFrame is smaller than\n |          ``pandas.options.display.max_info_rows`` and\n |          ``pandas.options.display.max_info_columns``. A value of True always\n |          shows the counts, and False never shows the counts.\n |\n |      Returns\n |      -------\n |      None\n |          This method prints a summary of a Series and returns None.\n |\n |      See Also\n |      --------\n |      Series.describe: Generate descriptive statistics of Series.\n |      Series.memory_usage: Memory usage of Series.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; int_values = [1, 2, 3, 4, 5]\n |      &gt;&gt;&gt; text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n |      &gt;&gt;&gt; s = pd.Series(text_values, index=int_values)\n |      &gt;&gt;&gt; s.info()\n |      &lt;class 'pandas.core.series.Series'&gt;\n |      Index: 5 entries, 1 to 5\n |      Series name: None\n |      Non-Null Count  Dtype\n |      --------------  -----\n |      5 non-null      object\n |      dtypes: object(1)\n |      memory usage: 80.0+ bytes\n |\n |      Prints a summary excluding information about its values:\n |\n |      &gt;&gt;&gt; s.info(verbose=False)\n |      &lt;class 'pandas.core.series.Series'&gt;\n |      Index: 5 entries, 1 to 5\n |      dtypes: object(1)\n |      memory usage: 80.0+ bytes\n |\n |      Pipe output of Series.info to buffer instead of sys.stdout, get\n |      buffer content and writes to a text file:\n |\n |      &gt;&gt;&gt; import io\n |      &gt;&gt;&gt; buffer = io.StringIO()\n |      &gt;&gt;&gt; s.info(buf=buffer)\n |      &gt;&gt;&gt; s = buffer.getvalue()\n |      &gt;&gt;&gt; with open(\"df_info.txt\", \"w\",\n |      ...           encoding=\"utf-8\") as f:  # doctest: +SKIP\n |      ...     f.write(s)\n |      260\n |\n |      The `memory_usage` parameter allows deep introspection mode, specially\n |      useful for big Series and fine-tune memory optimization:\n |\n |      &gt;&gt;&gt; random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)\n |      &gt;&gt;&gt; s = pd.Series(np.random.choice(['a', 'b', 'c'], 10 ** 6))\n |      &gt;&gt;&gt; s.info()\n |      &lt;class 'pandas.core.series.Series'&gt;\n |      RangeIndex: 1000000 entries, 0 to 999999\n |      Series name: None\n |      Non-Null Count    Dtype\n |      --------------    -----\n |      1000000 non-null  object\n |      dtypes: object(1)\n |      memory usage: 7.6+ MB\n |\n |      &gt;&gt;&gt; s.info(memory_usage='deep')\n |      &lt;class 'pandas.core.series.Series'&gt;\n |      RangeIndex: 1000000 entries, 0 to 999999\n |      Series name: None\n |      Non-Null Count    Dtype\n |      --------------    -----\n |      1000000 non-null  object\n |      dtypes: object(1)\n |      memory usage: 55.3 MB\n |\n |  isin(self, values) -&gt; 'Series'\n |      Whether elements in Series are contained in `values`.\n |\n |      Return a boolean Series showing whether each element in the Series\n |      matches an element in the passed sequence of `values` exactly.\n |\n |      Parameters\n |      ----------\n |      values : set or list-like\n |          The sequence of values to test. Passing in a single string will\n |          raise a ``TypeError``. Instead, turn a single string into a\n |          list of one element.\n |\n |      Returns\n |      -------\n |      Series\n |          Series of booleans indicating if each element is in values.\n |\n |      Raises\n |      ------\n |      TypeError\n |        * If `values` is a string\n |\n |      See Also\n |      --------\n |      DataFrame.isin : Equivalent method on DataFrame.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama',\n |      ...                'hippo'], name='animal')\n |      &gt;&gt;&gt; s.isin(['cow', 'llama'])\n |      0     True\n |      1     True\n |      2     True\n |      3    False\n |      4     True\n |      5    False\n |      Name: animal, dtype: bool\n |\n |      To invert the boolean values, use the ``~`` operator:\n |\n |      &gt;&gt;&gt; ~s.isin(['cow', 'llama'])\n |      0    False\n |      1    False\n |      2    False\n |      3     True\n |      4    False\n |      5     True\n |      Name: animal, dtype: bool\n |\n |      Passing a single string as ``s.isin('llama')`` will raise an error. Use\n |      a list of one element instead:\n |\n |      &gt;&gt;&gt; s.isin(['llama'])\n |      0     True\n |      1    False\n |      2     True\n |      3    False\n |      4     True\n |      5    False\n |      Name: animal, dtype: bool\n |\n |      Strings and integers are distinct and are therefore not comparable:\n |\n |      &gt;&gt;&gt; pd.Series([1]).isin(['1'])\n |      0    False\n |      dtype: bool\n |      &gt;&gt;&gt; pd.Series([1.1]).isin(['1.1'])\n |      0    False\n |      dtype: bool\n |\n |  isna(self) -&gt; 'Series'\n |      Detect missing values.\n |\n |      Return a boolean same-sized object indicating if the values are NA.\n |      NA values, such as None or :attr:`numpy.NaN`, gets mapped to True\n |      values.\n |      Everything else gets mapped to False values. Characters such as empty\n |      strings ``''`` or :attr:`numpy.inf` are not considered NA values\n |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n |\n |      Returns\n |      -------\n |      Series\n |          Mask of bool values for each element in Series that\n |          indicates whether an element is an NA value.\n |\n |      See Also\n |      --------\n |      Series.isnull : Alias of isna.\n |      Series.notna : Boolean inverse of isna.\n |      Series.dropna : Omit axes labels with missing values.\n |      isna : Top-level isna.\n |\n |      Examples\n |      --------\n |      Show which entries in a DataFrame are NA.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame(dict(age=[5, 6, np.nan],\n |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n |      ...                              pd.Timestamp('1940-04-25')],\n |      ...                        name=['Alfred', 'Batman', ''],\n |      ...                        toy=[None, 'Batmobile', 'Joker']))\n |      &gt;&gt;&gt; df\n |         age       born    name        toy\n |      0  5.0        NaT  Alfred       None\n |      1  6.0 1939-05-27  Batman  Batmobile\n |      2  NaN 1940-04-25              Joker\n |\n |      &gt;&gt;&gt; df.isna()\n |           age   born   name    toy\n |      0  False   True  False   True\n |      1  False  False  False  False\n |      2   True  False  False  False\n |\n |      Show which entries in a Series are NA.\n |\n |      &gt;&gt;&gt; ser = pd.Series([5, 6, np.nan])\n |      &gt;&gt;&gt; ser\n |      0    5.0\n |      1    6.0\n |      2    NaN\n |      dtype: float64\n |\n |      &gt;&gt;&gt; ser.isna()\n |      0    False\n |      1    False\n |      2     True\n |      dtype: bool\n |\n |  isnull(self) -&gt; 'Series'\n |      Series.isnull is an alias for Series.isna.\n |\n |      Detect missing values.\n |\n |      Return a boolean same-sized object indicating if the values are NA.\n |      NA values, such as None or :attr:`numpy.NaN`, gets mapped to True\n |      values.\n |      Everything else gets mapped to False values. Characters such as empty\n |      strings ``''`` or :attr:`numpy.inf` are not considered NA values\n |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n |\n |      Returns\n |      -------\n |      Series\n |          Mask of bool values for each element in Series that\n |          indicates whether an element is an NA value.\n |\n |      See Also\n |      --------\n |      Series.isnull : Alias of isna.\n |      Series.notna : Boolean inverse of isna.\n |      Series.dropna : Omit axes labels with missing values.\n |      isna : Top-level isna.\n |\n |      Examples\n |      --------\n |      Show which entries in a DataFrame are NA.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame(dict(age=[5, 6, np.nan],\n |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n |      ...                              pd.Timestamp('1940-04-25')],\n |      ...                        name=['Alfred', 'Batman', ''],\n |      ...                        toy=[None, 'Batmobile', 'Joker']))\n |      &gt;&gt;&gt; df\n |         age       born    name        toy\n |      0  5.0        NaT  Alfred       None\n |      1  6.0 1939-05-27  Batman  Batmobile\n |      2  NaN 1940-04-25              Joker\n |\n |      &gt;&gt;&gt; df.isna()\n |           age   born   name    toy\n |      0  False   True  False   True\n |      1  False  False  False  False\n |      2   True  False  False  False\n |\n |      Show which entries in a Series are NA.\n |\n |      &gt;&gt;&gt; ser = pd.Series([5, 6, np.nan])\n |      &gt;&gt;&gt; ser\n |      0    5.0\n |      1    6.0\n |      2    NaN\n |      dtype: float64\n |\n |      &gt;&gt;&gt; ser.isna()\n |      0    False\n |      1    False\n |      2     True\n |      dtype: bool\n |\n |  items(self) -&gt; 'Iterable[tuple[Hashable, Any]]'\n |      Lazily iterate over (index, value) tuples.\n |\n |      This method returns an iterable tuple (index, value). This is\n |      convenient if you want to create a lazy iterator.\n |\n |      Returns\n |      -------\n |      iterable\n |          Iterable of tuples containing the (index, value) pairs from a\n |          Series.\n |\n |      See Also\n |      --------\n |      DataFrame.items : Iterate over (column name, Series) pairs.\n |      DataFrame.iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(['A', 'B', 'C'])\n |      &gt;&gt;&gt; for index, value in s.items():\n |      ...     print(f\"Index : {index}, Value : {value}\")\n |      Index : 0, Value : A\n |      Index : 1, Value : B\n |      Index : 2, Value : C\n |\n |  keys(self) -&gt; 'Index'\n |      Return alias for index.\n |\n |      Returns\n |      -------\n |      Index\n |          Index of the Series.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3], index=[0, 1, 2])\n |      &gt;&gt;&gt; s.keys()\n |      Index([0, 1, 2], dtype='int64')\n |\n |  kurt(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)\n |      Return unbiased kurtosis over requested axis.\n |\n |      Kurtosis obtained using Fisher's definition of\n |      kurtosis (kurtosis of normal == 0.0). Normalized by N-1.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          For DataFrames, specifying ``axis=None`` will apply the aggregation\n |          across both axes.\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      scalar or scalar\n |\n |                  Examples\n |                  --------\n |                  &gt;&gt;&gt; s = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])\n |                  &gt;&gt;&gt; s\n |                  cat    1\n |                  dog    2\n |                  dog    2\n |                  mouse  3\n |                  dtype: int64\n |                  &gt;&gt;&gt; s.kurt()\n |                  1.5\n |\n |                  With a DataFrame\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2, 2, 3], 'b': [3, 4, 4, 4]},\n |                  ...                   index=['cat', 'dog', 'dog', 'mouse'])\n |                  &gt;&gt;&gt; df\n |                         a   b\n |                    cat  1   3\n |                    dog  2   4\n |                    dog  2   4\n |                  mouse  3   4\n |                  &gt;&gt;&gt; df.kurt()\n |                  a   1.5\n |                  b   4.0\n |                  dtype: float64\n |\n |                  With axis=None\n |\n |                  &gt;&gt;&gt; df.kurt(axis=None).round(6)\n |                  -0.988693\n |\n |                  Using axis=1\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [3, 4], 'd': [1, 2]},\n |                  ...                   index=['cat', 'dog'])\n |                  &gt;&gt;&gt; df.kurt(axis=1)\n |                  cat   -6.0\n |                  dog   -6.0\n |                  dtype: float64\n |\n |  kurtosis = kurt(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)\n |\n |  le(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Less than or equal to of series and other, element-wise (binary operator `le`).\n |\n |      Equivalent to ``series &lt;= other``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      e    1.0\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])\n |      &gt;&gt;&gt; b\n |      a    0.0\n |      b    1.0\n |      c    2.0\n |      d    NaN\n |      f    1.0\n |      dtype: float64\n |      &gt;&gt;&gt; a.le(b, fill_value=0)\n |      a    False\n |      b     True\n |      c     True\n |      d    False\n |      e    False\n |      f     True\n |      dtype: bool\n |\n |  lt(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Less than of series and other, element-wise (binary operator `lt`).\n |\n |      Equivalent to ``series &lt; other``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      e    1.0\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])\n |      &gt;&gt;&gt; b\n |      a    0.0\n |      b    1.0\n |      c    2.0\n |      d    NaN\n |      f    1.0\n |      dtype: float64\n |      &gt;&gt;&gt; a.lt(b, fill_value=0)\n |      a    False\n |      b    False\n |      c     True\n |      d    False\n |      e    False\n |      f     True\n |      dtype: bool\n |\n |  map(self, arg: 'Callable | Mapping | Series', na_action: \"Literal['ignore'] | None\" = None) -&gt; 'Series'\n |      Map values of Series according to an input mapping or function.\n |\n |      Used for substituting each value in a Series with another value,\n |      that may be derived from a function, a ``dict`` or\n |      a :class:`Series`.\n |\n |      Parameters\n |      ----------\n |      arg : function, collections.abc.Mapping subclass or Series\n |          Mapping correspondence.\n |      na_action : {None, 'ignore'}, default None\n |          If 'ignore', propagate NaN values, without passing them to the\n |          mapping correspondence.\n |\n |      Returns\n |      -------\n |      Series\n |          Same index as caller.\n |\n |      See Also\n |      --------\n |      Series.apply : For applying more complex functions on a Series.\n |      Series.replace: Replace values given in `to_replace` with `value`.\n |      DataFrame.apply : Apply a function row-/column-wise.\n |      DataFrame.map : Apply a function elementwise on a whole DataFrame.\n |\n |      Notes\n |      -----\n |      When ``arg`` is a dictionary, values in Series that are not in the\n |      dictionary (as keys) are converted to ``NaN``. However, if the\n |      dictionary is a ``dict`` subclass that defines ``__missing__`` (i.e.\n |      provides a method for default values), then this default is used\n |      rather than ``NaN``.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(['cat', 'dog', np.nan, 'rabbit'])\n |      &gt;&gt;&gt; s\n |      0      cat\n |      1      dog\n |      2      NaN\n |      3   rabbit\n |      dtype: object\n |\n |      ``map`` accepts a ``dict`` or a ``Series``. Values that are not found\n |      in the ``dict`` are converted to ``NaN``, unless the dict has a default\n |      value (e.g. ``defaultdict``):\n |\n |      &gt;&gt;&gt; s.map({'cat': 'kitten', 'dog': 'puppy'})\n |      0   kitten\n |      1    puppy\n |      2      NaN\n |      3      NaN\n |      dtype: object\n |\n |      It also accepts a function:\n |\n |      &gt;&gt;&gt; s.map('I am a {}'.format)\n |      0       I am a cat\n |      1       I am a dog\n |      2       I am a nan\n |      3    I am a rabbit\n |      dtype: object\n |\n |      To avoid applying the function to missing values (and keep them as\n |      ``NaN``) ``na_action='ignore'`` can be used:\n |\n |      &gt;&gt;&gt; s.map('I am a {}'.format, na_action='ignore')\n |      0     I am a cat\n |      1     I am a dog\n |      2            NaN\n |      3  I am a rabbit\n |      dtype: object\n |\n |  max(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)\n |      Return the maximum of the values over the requested axis.\n |\n |      If you want the *index* of the maximum, use ``idxmax``. This is the equivalent of the ``numpy.ndarray`` method ``argmax``.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          For DataFrames, specifying ``axis=None`` will apply the aggregation\n |          across both axes.\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      scalar or scalar\n |\n |      See Also\n |      --------\n |      Series.sum : Return the sum.\n |      Series.min : Return the minimum.\n |      Series.max : Return the maximum.\n |      Series.idxmin : Return the index of the minimum.\n |      Series.idxmax : Return the index of the maximum.\n |      DataFrame.sum : Return the sum over the requested axis.\n |      DataFrame.min : Return the minimum over the requested axis.\n |      DataFrame.max : Return the maximum over the requested axis.\n |      DataFrame.idxmin : Return the index of the minimum over the requested axis.\n |      DataFrame.idxmax : Return the index of the maximum over the requested axis.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; idx = pd.MultiIndex.from_arrays([\n |      ...     ['warm', 'warm', 'cold', 'cold'],\n |      ...     ['dog', 'falcon', 'fish', 'spider']],\n |      ...     names=['blooded', 'animal'])\n |      &gt;&gt;&gt; s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n |      &gt;&gt;&gt; s\n |      blooded  animal\n |      warm     dog       4\n |               falcon    2\n |      cold     fish      0\n |               spider    8\n |      Name: legs, dtype: int64\n |\n |      &gt;&gt;&gt; s.max()\n |      8\n |\n |  mean(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)\n |      Return the mean of the values over the requested axis.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          For DataFrames, specifying ``axis=None`` will apply the aggregation\n |          across both axes.\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      scalar or scalar\n |\n |                  Examples\n |                  --------\n |                  &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |                  &gt;&gt;&gt; s.mean()\n |                  2.0\n |\n |                  With a DataFrame\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n |                  &gt;&gt;&gt; df\n |                         a   b\n |                  tiger  1   2\n |                  zebra  2   3\n |                  &gt;&gt;&gt; df.mean()\n |                  a   1.5\n |                  b   2.5\n |                  dtype: float64\n |\n |                  Using axis=1\n |\n |                  &gt;&gt;&gt; df.mean(axis=1)\n |                  tiger   1.5\n |                  zebra   2.5\n |                  dtype: float64\n |\n |                  In this case, `numeric_only` should be set to `True` to avoid\n |                  getting an error.\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n |                  ...                   index=['tiger', 'zebra'])\n |                  &gt;&gt;&gt; df.mean(numeric_only=True)\n |                  a   1.5\n |                  dtype: float64\n |\n |  median(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)\n |      Return the median of the values over the requested axis.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          For DataFrames, specifying ``axis=None`` will apply the aggregation\n |          across both axes.\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      scalar or scalar\n |\n |                  Examples\n |                  --------\n |                  &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |                  &gt;&gt;&gt; s.median()\n |                  2.0\n |\n |                  With a DataFrame\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n |                  &gt;&gt;&gt; df\n |                         a   b\n |                  tiger  1   2\n |                  zebra  2   3\n |                  &gt;&gt;&gt; df.median()\n |                  a   1.5\n |                  b   2.5\n |                  dtype: float64\n |\n |                  Using axis=1\n |\n |                  &gt;&gt;&gt; df.median(axis=1)\n |                  tiger   1.5\n |                  zebra   2.5\n |                  dtype: float64\n |\n |                  In this case, `numeric_only` should be set to `True`\n |                  to avoid getting an error.\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n |                  ...                   index=['tiger', 'zebra'])\n |                  &gt;&gt;&gt; df.median(numeric_only=True)\n |                  a   1.5\n |                  dtype: float64\n |\n |  memory_usage(self, index: 'bool' = True, deep: 'bool' = False) -&gt; 'int'\n |      Return the memory usage of the Series.\n |\n |      The memory usage can optionally include the contribution of\n |      the index and of elements of `object` dtype.\n |\n |      Parameters\n |      ----------\n |      index : bool, default True\n |          Specifies whether to include the memory usage of the Series index.\n |      deep : bool, default False\n |          If True, introspect the data deeply by interrogating\n |          `object` dtypes for system-level memory consumption, and include\n |          it in the returned value.\n |\n |      Returns\n |      -------\n |      int\n |          Bytes of memory consumed.\n |\n |      See Also\n |      --------\n |      numpy.ndarray.nbytes : Total bytes consumed by the elements of the\n |          array.\n |      DataFrame.memory_usage : Bytes consumed by a DataFrame.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(range(3))\n |      &gt;&gt;&gt; s.memory_usage()\n |      152\n |\n |      Not including the index gives the size of the rest of the data, which\n |      is necessarily smaller:\n |\n |      &gt;&gt;&gt; s.memory_usage(index=False)\n |      24\n |\n |      The memory footprint of `object` values is ignored by default:\n |\n |      &gt;&gt;&gt; s = pd.Series([\"a\", \"b\"])\n |      &gt;&gt;&gt; s.values\n |      array(['a', 'b'], dtype=object)\n |      &gt;&gt;&gt; s.memory_usage()\n |      144\n |      &gt;&gt;&gt; s.memory_usage(deep=True)\n |      244\n |\n |  min(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)\n |      Return the minimum of the values over the requested axis.\n |\n |      If you want the *index* of the minimum, use ``idxmin``. This is the equivalent of the ``numpy.ndarray`` method ``argmin``.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          For DataFrames, specifying ``axis=None`` will apply the aggregation\n |          across both axes.\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      scalar or scalar\n |\n |      See Also\n |      --------\n |      Series.sum : Return the sum.\n |      Series.min : Return the minimum.\n |      Series.max : Return the maximum.\n |      Series.idxmin : Return the index of the minimum.\n |      Series.idxmax : Return the index of the maximum.\n |      DataFrame.sum : Return the sum over the requested axis.\n |      DataFrame.min : Return the minimum over the requested axis.\n |      DataFrame.max : Return the maximum over the requested axis.\n |      DataFrame.idxmin : Return the index of the minimum over the requested axis.\n |      DataFrame.idxmax : Return the index of the maximum over the requested axis.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; idx = pd.MultiIndex.from_arrays([\n |      ...     ['warm', 'warm', 'cold', 'cold'],\n |      ...     ['dog', 'falcon', 'fish', 'spider']],\n |      ...     names=['blooded', 'animal'])\n |      &gt;&gt;&gt; s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n |      &gt;&gt;&gt; s\n |      blooded  animal\n |      warm     dog       4\n |               falcon    2\n |      cold     fish      0\n |               spider    8\n |      Name: legs, dtype: int64\n |\n |      &gt;&gt;&gt; s.min()\n |      0\n |\n |  mod(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Modulo of series and other, element-wise (binary operator `mod`).\n |\n |      Equivalent to ``series % other``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.rmod : Reverse of the Modulo operator, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.mod(b, fill_value=0)\n |      a    0.0\n |      b    NaN\n |      c    NaN\n |      d    0.0\n |      e    NaN\n |      dtype: float64\n |\n |  mode(self, dropna: 'bool' = True) -&gt; 'Series'\n |      Return the mode(s) of the Series.\n |\n |      The mode is the value that appears most often. There can be multiple modes.\n |\n |      Always returns Series even if only one value is returned.\n |\n |      Parameters\n |      ----------\n |      dropna : bool, default True\n |          Don't consider counts of NaN/NaT.\n |\n |      Returns\n |      -------\n |      Series\n |          Modes of the Series in sorted order.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([2, 4, 2, 2, 4, None])\n |      &gt;&gt;&gt; s.mode()\n |      0    2.0\n |      dtype: float64\n |\n |      More than one mode:\n |\n |      &gt;&gt;&gt; s = pd.Series([2, 4, 8, 2, 4, None])\n |      &gt;&gt;&gt; s.mode()\n |      0    2.0\n |      1    4.0\n |      dtype: float64\n |\n |      With and without considering null value:\n |\n |      &gt;&gt;&gt; s = pd.Series([2, 4, None, None, 4, None])\n |      &gt;&gt;&gt; s.mode(dropna=False)\n |      0   NaN\n |      dtype: float64\n |      &gt;&gt;&gt; s = pd.Series([2, 4, None, None, 4, None])\n |      &gt;&gt;&gt; s.mode()\n |      0    4.0\n |      dtype: float64\n |\n |  mul(self, other, level: 'Level | None' = None, fill_value: 'float | None' = None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Multiplication of series and other, element-wise (binary operator `mul`).\n |\n |      Equivalent to ``series * other``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.rmul : Reverse of the Multiplication operator, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.multiply(b, fill_value=0)\n |      a    1.0\n |      b    0.0\n |      c    0.0\n |      d    0.0\n |      e    NaN\n |      dtype: float64\n |\n |  multiply = mul(self, other, level: 'Level | None' = None, fill_value: 'float | None' = None, axis: 'Axis' = 0) -&gt; 'Series'\n |\n |  ne(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Not equal to of series and other, element-wise (binary operator `ne`).\n |\n |      Equivalent to ``series != other``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.ne(b, fill_value=0)\n |      a    False\n |      b     True\n |      c     True\n |      d     True\n |      e     True\n |      dtype: bool\n |\n |  nlargest(self, n: 'int' = 5, keep: \"Literal['first', 'last', 'all']\" = 'first') -&gt; 'Series'\n |      Return the largest `n` elements.\n |\n |      Parameters\n |      ----------\n |      n : int, default 5\n |          Return this many descending sorted values.\n |      keep : {'first', 'last', 'all'}, default 'first'\n |          When there are duplicate values that cannot all fit in a\n |          Series of `n` elements:\n |\n |          - ``first`` : return the first `n` occurrences in order\n |            of appearance.\n |          - ``last`` : return the last `n` occurrences in reverse\n |            order of appearance.\n |          - ``all`` : keep all occurrences. This can result in a Series of\n |            size larger than `n`.\n |\n |      Returns\n |      -------\n |      Series\n |          The `n` largest values in the Series, sorted in decreasing order.\n |\n |      See Also\n |      --------\n |      Series.nsmallest: Get the `n` smallest elements.\n |      Series.sort_values: Sort Series by values.\n |      Series.head: Return the first `n` rows.\n |\n |      Notes\n |      -----\n |      Faster than ``.sort_values(ascending=False).head(n)`` for small `n`\n |      relative to the size of the ``Series`` object.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n |      ...                         \"Malta\": 434000, \"Maldives\": 434000,\n |      ...                         \"Brunei\": 434000, \"Iceland\": 337000,\n |      ...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n |      ...                         \"Anguilla\": 11300, \"Montserrat\": 5200}\n |      &gt;&gt;&gt; s = pd.Series(countries_population)\n |      &gt;&gt;&gt; s\n |      Italy       59000000\n |      France      65000000\n |      Malta         434000\n |      Maldives      434000\n |      Brunei        434000\n |      Iceland       337000\n |      Nauru          11300\n |      Tuvalu         11300\n |      Anguilla       11300\n |      Montserrat      5200\n |      dtype: int64\n |\n |      The `n` largest elements where ``n=5`` by default.\n |\n |      &gt;&gt;&gt; s.nlargest()\n |      France      65000000\n |      Italy       59000000\n |      Malta         434000\n |      Maldives      434000\n |      Brunei        434000\n |      dtype: int64\n |\n |      The `n` largest elements where ``n=3``. Default `keep` value is 'first'\n |      so Malta will be kept.\n |\n |      &gt;&gt;&gt; s.nlargest(3)\n |      France    65000000\n |      Italy     59000000\n |      Malta       434000\n |      dtype: int64\n |\n |      The `n` largest elements where ``n=3`` and keeping the last duplicates.\n |      Brunei will be kept since it is the last with value 434000 based on\n |      the index order.\n |\n |      &gt;&gt;&gt; s.nlargest(3, keep='last')\n |      France      65000000\n |      Italy       59000000\n |      Brunei        434000\n |      dtype: int64\n |\n |      The `n` largest elements where ``n=3`` with all duplicates kept. Note\n |      that the returned Series has five elements due to the three duplicates.\n |\n |      &gt;&gt;&gt; s.nlargest(3, keep='all')\n |      France      65000000\n |      Italy       59000000\n |      Malta         434000\n |      Maldives      434000\n |      Brunei        434000\n |      dtype: int64\n |\n |  notna(self) -&gt; 'Series'\n |      Detect existing (non-missing) values.\n |\n |      Return a boolean same-sized object indicating if the values are not NA.\n |      Non-missing values get mapped to True. Characters such as empty\n |      strings ``''`` or :attr:`numpy.inf` are not considered NA values\n |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n |      NA values, such as None or :attr:`numpy.NaN`, get mapped to False\n |      values.\n |\n |      Returns\n |      -------\n |      Series\n |          Mask of bool values for each element in Series that\n |          indicates whether an element is not an NA value.\n |\n |      See Also\n |      --------\n |      Series.notnull : Alias of notna.\n |      Series.isna : Boolean inverse of notna.\n |      Series.dropna : Omit axes labels with missing values.\n |      notna : Top-level notna.\n |\n |      Examples\n |      --------\n |      Show which entries in a DataFrame are not NA.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame(dict(age=[5, 6, np.nan],\n |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n |      ...                              pd.Timestamp('1940-04-25')],\n |      ...                        name=['Alfred', 'Batman', ''],\n |      ...                        toy=[None, 'Batmobile', 'Joker']))\n |      &gt;&gt;&gt; df\n |         age       born    name        toy\n |      0  5.0        NaT  Alfred       None\n |      1  6.0 1939-05-27  Batman  Batmobile\n |      2  NaN 1940-04-25              Joker\n |\n |      &gt;&gt;&gt; df.notna()\n |           age   born  name    toy\n |      0   True  False  True  False\n |      1   True   True  True   True\n |      2  False   True  True   True\n |\n |      Show which entries in a Series are not NA.\n |\n |      &gt;&gt;&gt; ser = pd.Series([5, 6, np.nan])\n |      &gt;&gt;&gt; ser\n |      0    5.0\n |      1    6.0\n |      2    NaN\n |      dtype: float64\n |\n |      &gt;&gt;&gt; ser.notna()\n |      0     True\n |      1     True\n |      2    False\n |      dtype: bool\n |\n |  notnull(self) -&gt; 'Series'\n |      Series.notnull is an alias for Series.notna.\n |\n |      Detect existing (non-missing) values.\n |\n |      Return a boolean same-sized object indicating if the values are not NA.\n |      Non-missing values get mapped to True. Characters such as empty\n |      strings ``''`` or :attr:`numpy.inf` are not considered NA values\n |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n |      NA values, such as None or :attr:`numpy.NaN`, get mapped to False\n |      values.\n |\n |      Returns\n |      -------\n |      Series\n |          Mask of bool values for each element in Series that\n |          indicates whether an element is not an NA value.\n |\n |      See Also\n |      --------\n |      Series.notnull : Alias of notna.\n |      Series.isna : Boolean inverse of notna.\n |      Series.dropna : Omit axes labels with missing values.\n |      notna : Top-level notna.\n |\n |      Examples\n |      --------\n |      Show which entries in a DataFrame are not NA.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame(dict(age=[5, 6, np.nan],\n |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n |      ...                              pd.Timestamp('1940-04-25')],\n |      ...                        name=['Alfred', 'Batman', ''],\n |      ...                        toy=[None, 'Batmobile', 'Joker']))\n |      &gt;&gt;&gt; df\n |         age       born    name        toy\n |      0  5.0        NaT  Alfred       None\n |      1  6.0 1939-05-27  Batman  Batmobile\n |      2  NaN 1940-04-25              Joker\n |\n |      &gt;&gt;&gt; df.notna()\n |           age   born  name    toy\n |      0   True  False  True  False\n |      1   True   True  True   True\n |      2  False   True  True   True\n |\n |      Show which entries in a Series are not NA.\n |\n |      &gt;&gt;&gt; ser = pd.Series([5, 6, np.nan])\n |      &gt;&gt;&gt; ser\n |      0    5.0\n |      1    6.0\n |      2    NaN\n |      dtype: float64\n |\n |      &gt;&gt;&gt; ser.notna()\n |      0     True\n |      1     True\n |      2    False\n |      dtype: bool\n |\n |  nsmallest(self, n: 'int' = 5, keep: \"Literal['first', 'last', 'all']\" = 'first') -&gt; 'Series'\n |      Return the smallest `n` elements.\n |\n |      Parameters\n |      ----------\n |      n : int, default 5\n |          Return this many ascending sorted values.\n |      keep : {'first', 'last', 'all'}, default 'first'\n |          When there are duplicate values that cannot all fit in a\n |          Series of `n` elements:\n |\n |          - ``first`` : return the first `n` occurrences in order\n |            of appearance.\n |          - ``last`` : return the last `n` occurrences in reverse\n |            order of appearance.\n |          - ``all`` : keep all occurrences. This can result in a Series of\n |            size larger than `n`.\n |\n |      Returns\n |      -------\n |      Series\n |          The `n` smallest values in the Series, sorted in increasing order.\n |\n |      See Also\n |      --------\n |      Series.nlargest: Get the `n` largest elements.\n |      Series.sort_values: Sort Series by values.\n |      Series.head: Return the first `n` rows.\n |\n |      Notes\n |      -----\n |      Faster than ``.sort_values().head(n)`` for small `n` relative to\n |      the size of the ``Series`` object.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n |      ...                         \"Brunei\": 434000, \"Malta\": 434000,\n |      ...                         \"Maldives\": 434000, \"Iceland\": 337000,\n |      ...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n |      ...                         \"Anguilla\": 11300, \"Montserrat\": 5200}\n |      &gt;&gt;&gt; s = pd.Series(countries_population)\n |      &gt;&gt;&gt; s\n |      Italy       59000000\n |      France      65000000\n |      Brunei        434000\n |      Malta         434000\n |      Maldives      434000\n |      Iceland       337000\n |      Nauru          11300\n |      Tuvalu         11300\n |      Anguilla       11300\n |      Montserrat      5200\n |      dtype: int64\n |\n |      The `n` smallest elements where ``n=5`` by default.\n |\n |      &gt;&gt;&gt; s.nsmallest()\n |      Montserrat    5200\n |      Nauru        11300\n |      Tuvalu       11300\n |      Anguilla     11300\n |      Iceland     337000\n |      dtype: int64\n |\n |      The `n` smallest elements where ``n=3``. Default `keep` value is\n |      'first' so Nauru and Tuvalu will be kept.\n |\n |      &gt;&gt;&gt; s.nsmallest(3)\n |      Montserrat   5200\n |      Nauru       11300\n |      Tuvalu      11300\n |      dtype: int64\n |\n |      The `n` smallest elements where ``n=3`` and keeping the last\n |      duplicates. Anguilla and Tuvalu will be kept since they are the last\n |      with value 11300 based on the index order.\n |\n |      &gt;&gt;&gt; s.nsmallest(3, keep='last')\n |      Montserrat   5200\n |      Anguilla    11300\n |      Tuvalu      11300\n |      dtype: int64\n |\n |      The `n` smallest elements where ``n=3`` with all duplicates kept. Note\n |      that the returned Series has four elements due to the three duplicates.\n |\n |      &gt;&gt;&gt; s.nsmallest(3, keep='all')\n |      Montserrat   5200\n |      Nauru       11300\n |      Tuvalu      11300\n |      Anguilla    11300\n |      dtype: int64\n |\n |  pop(self, item: 'Hashable') -&gt; 'Any'\n |      Return item and drops from series. Raise KeyError if not found.\n |\n |      Parameters\n |      ----------\n |      item : label\n |          Index of the element that needs to be removed.\n |\n |      Returns\n |      -------\n |      Value that is popped from series.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; ser = pd.Series([1, 2, 3])\n |\n |      &gt;&gt;&gt; ser.pop(0)\n |      1\n |\n |      &gt;&gt;&gt; ser\n |      1    2\n |      2    3\n |      dtype: int64\n |\n |  pow(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Exponential power of series and other, element-wise (binary operator `pow`).\n |\n |      Equivalent to ``series ** other``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.rpow : Reverse of the Exponential power operator, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.pow(b, fill_value=0)\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    0.0\n |      e    NaN\n |      dtype: float64\n |\n |  prod(self, axis: 'Axis | None' = None, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)\n |      Return the product of the values over the requested axis.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          .. warning::\n |\n |              The behavior of DataFrame.prod with ``axis=None`` is deprecated,\n |              in a future version this will reduce over both axes and return a scalar\n |              To retain the old behavior, pass axis=0 (or do not pass axis).\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      min_count : int, default 0\n |          The required number of valid values to perform the operation. If fewer than\n |          ``min_count`` non-NA values are present the result will be NA.\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      scalar or scalar\n |\n |      See Also\n |      --------\n |      Series.sum : Return the sum.\n |      Series.min : Return the minimum.\n |      Series.max : Return the maximum.\n |      Series.idxmin : Return the index of the minimum.\n |      Series.idxmax : Return the index of the maximum.\n |      DataFrame.sum : Return the sum over the requested axis.\n |      DataFrame.min : Return the minimum over the requested axis.\n |      DataFrame.max : Return the maximum over the requested axis.\n |      DataFrame.idxmin : Return the index of the minimum over the requested axis.\n |      DataFrame.idxmax : Return the index of the maximum over the requested axis.\n |\n |      Examples\n |      --------\n |      By default, the product of an empty or all-NA Series is ``1``\n |\n |      &gt;&gt;&gt; pd.Series([], dtype=\"float64\").prod()\n |      1.0\n |\n |      This can be controlled with the ``min_count`` parameter\n |\n |      &gt;&gt;&gt; pd.Series([], dtype=\"float64\").prod(min_count=1)\n |      nan\n |\n |      Thanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\n |      empty series identically.\n |\n |      &gt;&gt;&gt; pd.Series([np.nan]).prod()\n |      1.0\n |\n |      &gt;&gt;&gt; pd.Series([np.nan]).prod(min_count=1)\n |      nan\n |\n |  product = prod(self, axis: 'Axis | None' = None, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)\n |\n |  quantile(self, q: 'float | Sequence[float] | AnyArrayLike' = 0.5, interpolation: 'QuantileInterpolation' = 'linear') -&gt; 'float | Series'\n |      Return value at the given quantile.\n |\n |      Parameters\n |      ----------\n |      q : float or array-like, default 0.5 (50% quantile)\n |          The quantile(s) to compute, which can lie in range: 0 &lt;= q &lt;= 1.\n |      interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n |          This optional parameter specifies the interpolation method to use,\n |          when the desired quantile lies between two data points `i` and `j`:\n |\n |              * linear: `i + (j - i) * (x-i)/(j-i)`, where `(x-i)/(j-i)` is\n |                the fractional part of the index surrounded by `i &gt; j`.\n |              * lower: `i`.\n |              * higher: `j`.\n |              * nearest: `i` or `j` whichever is nearest.\n |              * midpoint: (`i` + `j`) / 2.\n |\n |      Returns\n |      -------\n |      float or Series\n |          If ``q`` is an array, a Series will be returned where the\n |          index is ``q`` and the values are the quantiles, otherwise\n |          a float will be returned.\n |\n |      See Also\n |      --------\n |      core.window.Rolling.quantile : Calculate the rolling quantile.\n |      numpy.percentile : Returns the q-th percentile(s) of the array elements.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4])\n |      &gt;&gt;&gt; s.quantile(.5)\n |      2.5\n |      &gt;&gt;&gt; s.quantile([.25, .5, .75])\n |      0.25    1.75\n |      0.50    2.50\n |      0.75    3.25\n |      dtype: float64\n |\n |  radd(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Addition of series and other, element-wise (binary operator `radd`).\n |\n |      Equivalent to ``other + series``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.add : Element-wise Addition, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.add(b, fill_value=0)\n |      a    2.0\n |      b    1.0\n |      c    1.0\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |\n |  ravel(self, order: 'str' = 'C') -&gt; 'ArrayLike'\n |      Return the flattened underlying data as an ndarray or ExtensionArray.\n |\n |      .. deprecated:: 2.2.0\n |          Series.ravel is deprecated. The underlying array is already 1D, so\n |          ravel is not necessary.  Use :meth:`to_numpy` for conversion to a numpy\n |          array instead.\n |\n |      Returns\n |      -------\n |      numpy.ndarray or ExtensionArray\n |          Flattened data of the Series.\n |\n |      See Also\n |      --------\n |      numpy.ndarray.ravel : Return a flattened array.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s.ravel()  # doctest: +SKIP\n |      array([1, 2, 3])\n |\n |  rdiv = rtruediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |\n |  rdivmod(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Integer division and modulo of series and other, element-wise (binary operator `rdivmod`).\n |\n |      Equivalent to ``other divmod series``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      2-Tuple of Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.divmod : Element-wise Integer division and modulo, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.divmod(b, fill_value=0)\n |      (a    1.0\n |       b    inf\n |       c    inf\n |       d    0.0\n |       e    NaN\n |       dtype: float64,\n |       a    0.0\n |       b    NaN\n |       c    NaN\n |       d    0.0\n |       e    NaN\n |       dtype: float64)\n |\n |  reindex(self, index=None, *, axis: 'Axis | None' = None, method: 'ReindexMethod | None' = None, copy: 'bool | None' = None, level: 'Level | None' = None, fill_value: 'Scalar | None' = None, limit: 'int | None' = None, tolerance=None) -&gt; 'Series'\n |      Conform Series to new index with optional filling logic.\n |\n |      Places NA/NaN in locations having no value in the previous index. A new object\n |      is produced unless the new index is equivalent to the current one and\n |      ``copy=False``.\n |\n |      Parameters\n |      ----------\n |\n |      index : array-like, optional\n |          New labels for the index. Preferably an Index object to avoid\n |          duplicating data.\n |      axis : int or str, optional\n |          Unused.\n |      method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n |          Method to use for filling holes in reindexed DataFrame.\n |          Please note: this is only applicable to DataFrames/Series with a\n |          monotonically increasing/decreasing index.\n |\n |          * None (default): don't fill gaps\n |          * pad / ffill: Propagate last valid observation forward to next\n |            valid.\n |          * backfill / bfill: Use next valid observation to fill gap.\n |          * nearest: Use nearest valid observations to fill gap.\n |\n |      copy : bool, default True\n |          Return a new object, even if the passed indexes are the same.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : scalar, default np.nan\n |          Value to use for missing values. Defaults to NaN, but can be any\n |          \"compatible\" value.\n |      limit : int, default None\n |          Maximum number of consecutive elements to forward or backward fill.\n |      tolerance : optional\n |          Maximum distance between original and new labels for inexact\n |          matches. The values of the index at the matching locations most\n |          satisfy the equation ``abs(index[indexer] - target) &lt;= tolerance``.\n |\n |          Tolerance may be a scalar value, which applies the same tolerance\n |          to all values, or list-like, which applies variable tolerance per\n |          element. List-like includes list, tuple, array, Series, and must be\n |          the same size as the index and its dtype must exactly match the\n |          index's type.\n |\n |      Returns\n |      -------\n |      Series with changed index.\n |\n |      See Also\n |      --------\n |      DataFrame.set_index : Set row labels.\n |      DataFrame.reset_index : Remove row labels or move them to new columns.\n |      DataFrame.reindex_like : Change to same indices as other DataFrame.\n |\n |      Examples\n |      --------\n |      ``DataFrame.reindex`` supports two calling conventions\n |\n |      * ``(index=index_labels, columns=column_labels, ...)``\n |      * ``(labels, axis={'index', 'columns'}, ...)``\n |\n |      We *highly* recommend using keyword arguments to clarify your\n |      intent.\n |\n |      Create a dataframe with some fictional data.\n |\n |      &gt;&gt;&gt; index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n |      &gt;&gt;&gt; df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],\n |      ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n |      ...                   index=index)\n |      &gt;&gt;&gt; df\n |                 http_status  response_time\n |      Firefox            200           0.04\n |      Chrome             200           0.02\n |      Safari             404           0.07\n |      IE10               404           0.08\n |      Konqueror          301           1.00\n |\n |      Create a new index and reindex the dataframe. By default\n |      values in the new index that do not have corresponding\n |      records in the dataframe are assigned ``NaN``.\n |\n |      &gt;&gt;&gt; new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n |      ...              'Chrome']\n |      &gt;&gt;&gt; df.reindex(new_index)\n |                     http_status  response_time\n |      Safari               404.0           0.07\n |      Iceweasel              NaN            NaN\n |      Comodo Dragon          NaN            NaN\n |      IE10                 404.0           0.08\n |      Chrome               200.0           0.02\n |\n |      We can fill in the missing values by passing a value to\n |      the keyword ``fill_value``. Because the index is not monotonically\n |      increasing or decreasing, we cannot use arguments to the keyword\n |      ``method`` to fill the ``NaN`` values.\n |\n |      &gt;&gt;&gt; df.reindex(new_index, fill_value=0)\n |                     http_status  response_time\n |      Safari                 404           0.07\n |      Iceweasel                0           0.00\n |      Comodo Dragon            0           0.00\n |      IE10                   404           0.08\n |      Chrome                 200           0.02\n |\n |      &gt;&gt;&gt; df.reindex(new_index, fill_value='missing')\n |                    http_status response_time\n |      Safari                404          0.07\n |      Iceweasel         missing       missing\n |      Comodo Dragon     missing       missing\n |      IE10                  404          0.08\n |      Chrome                200          0.02\n |\n |      We can also reindex the columns.\n |\n |      &gt;&gt;&gt; df.reindex(columns=['http_status', 'user_agent'])\n |                 http_status  user_agent\n |      Firefox            200         NaN\n |      Chrome             200         NaN\n |      Safari             404         NaN\n |      IE10               404         NaN\n |      Konqueror          301         NaN\n |\n |      Or we can use \"axis-style\" keyword arguments\n |\n |      &gt;&gt;&gt; df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n |                 http_status  user_agent\n |      Firefox            200         NaN\n |      Chrome             200         NaN\n |      Safari             404         NaN\n |      IE10               404         NaN\n |      Konqueror          301         NaN\n |\n |      To further illustrate the filling functionality in\n |      ``reindex``, we will create a dataframe with a\n |      monotonically increasing index (for example, a sequence\n |      of dates).\n |\n |      &gt;&gt;&gt; date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n |      &gt;&gt;&gt; df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n |      ...                    index=date_index)\n |      &gt;&gt;&gt; df2\n |                  prices\n |      2010-01-01   100.0\n |      2010-01-02   101.0\n |      2010-01-03     NaN\n |      2010-01-04   100.0\n |      2010-01-05    89.0\n |      2010-01-06    88.0\n |\n |      Suppose we decide to expand the dataframe to cover a wider\n |      date range.\n |\n |      &gt;&gt;&gt; date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n |      &gt;&gt;&gt; df2.reindex(date_index2)\n |                  prices\n |      2009-12-29     NaN\n |      2009-12-30     NaN\n |      2009-12-31     NaN\n |      2010-01-01   100.0\n |      2010-01-02   101.0\n |      2010-01-03     NaN\n |      2010-01-04   100.0\n |      2010-01-05    89.0\n |      2010-01-06    88.0\n |      2010-01-07     NaN\n |\n |      The index entries that did not have a value in the original data frame\n |      (for example, '2009-12-29') are by default filled with ``NaN``.\n |      If desired, we can fill in the missing values using one of several\n |      options.\n |\n |      For example, to back-propagate the last valid value to fill the ``NaN``\n |      values, pass ``bfill`` as an argument to the ``method`` keyword.\n |\n |      &gt;&gt;&gt; df2.reindex(date_index2, method='bfill')\n |                  prices\n |      2009-12-29   100.0\n |      2009-12-30   100.0\n |      2009-12-31   100.0\n |      2010-01-01   100.0\n |      2010-01-02   101.0\n |      2010-01-03     NaN\n |      2010-01-04   100.0\n |      2010-01-05    89.0\n |      2010-01-06    88.0\n |      2010-01-07     NaN\n |\n |      Please note that the ``NaN`` value present in the original dataframe\n |      (at index value 2010-01-03) will not be filled by any of the\n |      value propagation schemes. This is because filling while reindexing\n |      does not look at dataframe values, but only compares the original and\n |      desired indexes. If you do want to fill in the ``NaN`` values present\n |      in the original dataframe, use the ``fillna()`` method.\n |\n |      See the :ref:`user guide &lt;basics.reindexing&gt;` for more.\n |\n |  rename(self, index: 'Renamer | Hashable | None' = None, *, axis: 'Axis | None' = None, copy: 'bool | None' = None, inplace: 'bool' = False, level: 'Level | None' = None, errors: 'IgnoreRaise' = 'ignore') -&gt; 'Series | None'\n |      Alter Series index labels or name.\n |\n |      Function / dict values must be unique (1-to-1). Labels not contained in\n |      a dict / Series will be left as-is. Extra labels listed don't throw an\n |      error.\n |\n |      Alternatively, change ``Series.name`` with a scalar value.\n |\n |      See the :ref:`user guide &lt;basics.rename&gt;` for more.\n |\n |      Parameters\n |      ----------\n |      index : scalar, hashable sequence, dict-like or function optional\n |          Functions or dict-like are transformations to apply to\n |          the index.\n |          Scalar or hashable sequence-like will alter the ``Series.name``\n |          attribute.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |      copy : bool, default True\n |          Also copy underlying data.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      inplace : bool, default False\n |          Whether to return a new Series. If True the value of copy is ignored.\n |      level : int or level name, default None\n |          In case of MultiIndex, only rename labels in the specified level.\n |      errors : {'ignore', 'raise'}, default 'ignore'\n |          If 'raise', raise `KeyError` when a `dict-like mapper` or\n |          `index` contains labels that are not present in the index being transformed.\n |          If 'ignore', existing keys will be renamed and extra keys will be ignored.\n |\n |      Returns\n |      -------\n |      Series or None\n |          Series with index labels or name altered or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      DataFrame.rename : Corresponding DataFrame method.\n |      Series.rename_axis : Set the name of the axis.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s\n |      0    1\n |      1    2\n |      2    3\n |      dtype: int64\n |      &gt;&gt;&gt; s.rename(\"my_name\")  # scalar, changes Series.name\n |      0    1\n |      1    2\n |      2    3\n |      Name: my_name, dtype: int64\n |      &gt;&gt;&gt; s.rename(lambda x: x ** 2)  # function, changes labels\n |      0    1\n |      1    2\n |      4    3\n |      dtype: int64\n |      &gt;&gt;&gt; s.rename({1: 3, 2: 5})  # mapping, changes labels\n |      0    1\n |      3    2\n |      5    3\n |      dtype: int64\n |\n |  rename_axis(self, mapper: 'IndexLabel | lib.NoDefault' = &lt;no_default&gt;, *, index=&lt;no_default&gt;, axis: 'Axis' = 0, copy: 'bool' = True, inplace: 'bool' = False) -&gt; 'Self | None'\n |      Set the name of the axis for the index or columns.\n |\n |      Parameters\n |      ----------\n |      mapper : scalar, list-like, optional\n |          Value to set the axis name attribute.\n |      index, columns : scalar, list-like, dict-like or function, optional\n |          A scalar, list-like, dict-like or functions transformations to\n |          apply to that axis' values.\n |          Note that the ``columns`` parameter is not allowed if the\n |          object is a Series. This parameter only apply for DataFrame\n |          type objects.\n |\n |          Use either ``mapper`` and ``axis`` to\n |          specify the axis to target with ``mapper``, or ``index``\n |          and/or ``columns``.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis to rename. For `Series` this parameter is unused and defaults to 0.\n |      copy : bool, default None\n |          Also copy underlying data.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      inplace : bool, default False\n |          Modifies the object directly, instead of creating a new Series\n |          or DataFrame.\n |\n |      Returns\n |      -------\n |      Series, DataFrame, or None\n |          The same type as the caller or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      Series.rename : Alter Series index labels or name.\n |      DataFrame.rename : Alter DataFrame index labels or name.\n |      Index.rename : Set new names on index.\n |\n |      Notes\n |      -----\n |      ``DataFrame.rename_axis`` supports two calling conventions\n |\n |      * ``(index=index_mapper, columns=columns_mapper, ...)``\n |      * ``(mapper, axis={'index', 'columns'}, ...)``\n |\n |      The first calling convention will only modify the names of\n |      the index and/or the names of the Index object that is the columns.\n |      In this case, the parameter ``copy`` is ignored.\n |\n |      The second calling convention will modify the names of the\n |      corresponding index if mapper is a list or a scalar.\n |      However, if mapper is dict-like or a function, it will use the\n |      deprecated behavior of modifying the axis *labels*.\n |\n |      We *highly* recommend using keyword arguments to clarify your\n |      intent.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      &gt;&gt;&gt; s = pd.Series([\"dog\", \"cat\", \"monkey\"])\n |      &gt;&gt;&gt; s\n |      0       dog\n |      1       cat\n |      2    monkey\n |      dtype: object\n |      &gt;&gt;&gt; s.rename_axis(\"animal\")\n |      animal\n |      0    dog\n |      1    cat\n |      2    monkey\n |      dtype: object\n |\n |      **DataFrame**\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"num_legs\": [4, 4, 2],\n |      ...                    \"num_arms\": [0, 0, 2]},\n |      ...                   [\"dog\", \"cat\", \"monkey\"])\n |      &gt;&gt;&gt; df\n |              num_legs  num_arms\n |      dog            4         0\n |      cat            4         0\n |      monkey         2         2\n |      &gt;&gt;&gt; df = df.rename_axis(\"animal\")\n |      &gt;&gt;&gt; df\n |              num_legs  num_arms\n |      animal\n |      dog            4         0\n |      cat            4         0\n |      monkey         2         2\n |      &gt;&gt;&gt; df = df.rename_axis(\"limbs\", axis=\"columns\")\n |      &gt;&gt;&gt; df\n |      limbs   num_legs  num_arms\n |      animal\n |      dog            4         0\n |      cat            4         0\n |      monkey         2         2\n |\n |      **MultiIndex**\n |\n |      &gt;&gt;&gt; df.index = pd.MultiIndex.from_product([['mammal'],\n |      ...                                        ['dog', 'cat', 'monkey']],\n |      ...                                       names=['type', 'name'])\n |      &gt;&gt;&gt; df\n |      limbs          num_legs  num_arms\n |      type   name\n |      mammal dog            4         0\n |             cat            4         0\n |             monkey         2         2\n |\n |      &gt;&gt;&gt; df.rename_axis(index={'type': 'class'})\n |      limbs          num_legs  num_arms\n |      class  name\n |      mammal dog            4         0\n |             cat            4         0\n |             monkey         2         2\n |\n |      &gt;&gt;&gt; df.rename_axis(columns=str.upper)\n |      LIMBS          num_legs  num_arms\n |      type   name\n |      mammal dog            4         0\n |             cat            4         0\n |             monkey         2         2\n |\n |  reorder_levels(self, order: 'Sequence[Level]') -&gt; 'Series'\n |      Rearrange index levels using input order.\n |\n |      May not drop or duplicate levels.\n |\n |      Parameters\n |      ----------\n |      order : list of int representing new level order\n |          Reference level by number or key.\n |\n |      Returns\n |      -------\n |      type of caller (new object)\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; arrays = [np.array([\"dog\", \"dog\", \"cat\", \"cat\", \"bird\", \"bird\"]),\n |      ...           np.array([\"white\", \"black\", \"white\", \"black\", \"white\", \"black\"])]\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 3, 5, 2], index=arrays)\n |      &gt;&gt;&gt; s\n |      dog   white    1\n |            black    2\n |      cat   white    3\n |            black    3\n |      bird  white    5\n |            black    2\n |      dtype: int64\n |      &gt;&gt;&gt; s.reorder_levels([1, 0])\n |      white  dog     1\n |      black  dog     2\n |      white  cat     3\n |      black  cat     3\n |      white  bird    5\n |      black  bird    2\n |      dtype: int64\n |\n |  repeat(self, repeats: 'int | Sequence[int]', axis: 'None' = None) -&gt; 'Series'\n |      Repeat elements of a Series.\n |\n |      Returns a new Series where each element of the current Series\n |      is repeated consecutively a given number of times.\n |\n |      Parameters\n |      ----------\n |      repeats : int or array of ints\n |          The number of repetitions for each element. This should be a\n |          non-negative integer. Repeating 0 times will return an empty\n |          Series.\n |      axis : None\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          Newly created Series with repeated elements.\n |\n |      See Also\n |      --------\n |      Index.repeat : Equivalent function for Index.\n |      numpy.repeat : Similar method for :class:`numpy.ndarray`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(['a', 'b', 'c'])\n |      &gt;&gt;&gt; s\n |      0    a\n |      1    b\n |      2    c\n |      dtype: object\n |      &gt;&gt;&gt; s.repeat(2)\n |      0    a\n |      0    a\n |      1    b\n |      1    b\n |      2    c\n |      2    c\n |      dtype: object\n |      &gt;&gt;&gt; s.repeat([1, 2, 3])\n |      0    a\n |      1    b\n |      1    b\n |      2    c\n |      2    c\n |      2    c\n |      dtype: object\n |\n |  reset_index(self, level: 'IndexLabel | None' = None, *, drop: 'bool' = False, name: 'Level' = &lt;no_default&gt;, inplace: 'bool' = False, allow_duplicates: 'bool' = False) -&gt; 'DataFrame | Series | None'\n |      Generate a new DataFrame or Series with the index reset.\n |\n |      This is useful when the index needs to be treated as a column, or\n |      when the index is meaningless and needs to be reset to the default\n |      before another operation.\n |\n |      Parameters\n |      ----------\n |      level : int, str, tuple, or list, default optional\n |          For a Series with a MultiIndex, only remove the specified levels\n |          from the index. Removes all levels by default.\n |      drop : bool, default False\n |          Just reset the index, without inserting it as a column in\n |          the new DataFrame.\n |      name : object, optional\n |          The name to use for the column containing the original Series\n |          values. Uses ``self.name`` by default. This argument is ignored\n |          when `drop` is True.\n |      inplace : bool, default False\n |          Modify the Series in place (do not create a new object).\n |      allow_duplicates : bool, default False\n |          Allow duplicate column labels to be created.\n |\n |          .. versionadded:: 1.5.0\n |\n |      Returns\n |      -------\n |      Series or DataFrame or None\n |          When `drop` is False (the default), a DataFrame is returned.\n |          The newly created columns will come first in the DataFrame,\n |          followed by the original Series values.\n |          When `drop` is True, a `Series` is returned.\n |          In either case, if ``inplace=True``, no value is returned.\n |\n |      See Also\n |      --------\n |      DataFrame.reset_index: Analogous function for DataFrame.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4], name='foo',\n |      ...               index=pd.Index(['a', 'b', 'c', 'd'], name='idx'))\n |\n |      Generate a DataFrame with default index.\n |\n |      &gt;&gt;&gt; s.reset_index()\n |        idx  foo\n |      0   a    1\n |      1   b    2\n |      2   c    3\n |      3   d    4\n |\n |      To specify the name of the new column use `name`.\n |\n |      &gt;&gt;&gt; s.reset_index(name='values')\n |        idx  values\n |      0   a       1\n |      1   b       2\n |      2   c       3\n |      3   d       4\n |\n |      To generate a new Series with the default set `drop` to True.\n |\n |      &gt;&gt;&gt; s.reset_index(drop=True)\n |      0    1\n |      1    2\n |      2    3\n |      3    4\n |      Name: foo, dtype: int64\n |\n |      The `level` parameter is interesting for Series with a multi-level\n |      index.\n |\n |      &gt;&gt;&gt; arrays = [np.array(['bar', 'bar', 'baz', 'baz']),\n |      ...           np.array(['one', 'two', 'one', 'two'])]\n |      &gt;&gt;&gt; s2 = pd.Series(\n |      ...     range(4), name='foo',\n |      ...     index=pd.MultiIndex.from_arrays(arrays,\n |      ...                                     names=['a', 'b']))\n |\n |      To remove a specific level from the Index, use `level`.\n |\n |      &gt;&gt;&gt; s2.reset_index(level='a')\n |             a  foo\n |      b\n |      one  bar    0\n |      two  bar    1\n |      one  baz    2\n |      two  baz    3\n |\n |      If `level` is not set, all levels are removed from the Index.\n |\n |      &gt;&gt;&gt; s2.reset_index()\n |           a    b  foo\n |      0  bar  one    0\n |      1  bar  two    1\n |      2  baz  one    2\n |      3  baz  two    3\n |\n |  rfloordiv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Integer division of series and other, element-wise (binary operator `rfloordiv`).\n |\n |      Equivalent to ``other // series``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.floordiv : Element-wise Integer division, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.floordiv(b, fill_value=0)\n |      a    1.0\n |      b    inf\n |      c    inf\n |      d    0.0\n |      e    NaN\n |      dtype: float64\n |\n |  rmod(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Modulo of series and other, element-wise (binary operator `rmod`).\n |\n |      Equivalent to ``other % series``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.mod : Element-wise Modulo, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.mod(b, fill_value=0)\n |      a    0.0\n |      b    NaN\n |      c    NaN\n |      d    0.0\n |      e    NaN\n |      dtype: float64\n |\n |  rmul(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Multiplication of series and other, element-wise (binary operator `rmul`).\n |\n |      Equivalent to ``other * series``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.mul : Element-wise Multiplication, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.multiply(b, fill_value=0)\n |      a    1.0\n |      b    0.0\n |      c    0.0\n |      d    0.0\n |      e    NaN\n |      dtype: float64\n |\n |  round(self, decimals: 'int' = 0, *args, **kwargs) -&gt; 'Series'\n |      Round each value in a Series to the given number of decimals.\n |\n |      Parameters\n |      ----------\n |      decimals : int, default 0\n |          Number of decimal places to round to. If decimals is negative,\n |          it specifies the number of positions to the left of the decimal point.\n |      *args, **kwargs\n |          Additional arguments and keywords have no effect but might be\n |          accepted for compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      Series\n |          Rounded values of the Series.\n |\n |      See Also\n |      --------\n |      numpy.around : Round values of an np.array.\n |      DataFrame.round : Round values of a DataFrame.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([0.1, 1.3, 2.7])\n |      &gt;&gt;&gt; s.round()\n |      0    0.0\n |      1    1.0\n |      2    3.0\n |      dtype: float64\n |\n |  rpow(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Exponential power of series and other, element-wise (binary operator `rpow`).\n |\n |      Equivalent to ``other ** series``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.pow : Element-wise Exponential power, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.pow(b, fill_value=0)\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    0.0\n |      e    NaN\n |      dtype: float64\n |\n |  rsub(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Subtraction of series and other, element-wise (binary operator `rsub`).\n |\n |      Equivalent to ``other - series``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.sub : Element-wise Subtraction, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.subtract(b, fill_value=0)\n |      a    0.0\n |      b    1.0\n |      c    1.0\n |      d   -1.0\n |      e    NaN\n |      dtype: float64\n |\n |  rtruediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Floating division of series and other, element-wise (binary operator `rtruediv`).\n |\n |      Equivalent to ``other / series``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.truediv : Element-wise Floating division, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.divide(b, fill_value=0)\n |      a    1.0\n |      b    inf\n |      c    inf\n |      d    0.0\n |      e    NaN\n |      dtype: float64\n |\n |  searchsorted(self, value: 'NumpyValueArrayLike | ExtensionArray', side: \"Literal['left', 'right']\" = 'left', sorter: 'NumpySorter | None' = None) -&gt; 'npt.NDArray[np.intp] | np.intp'\n |      Find indices where elements should be inserted to maintain order.\n |\n |      Find the indices into a sorted Series `self` such that, if the\n |      corresponding elements in `value` were inserted before the indices,\n |      the order of `self` would be preserved.\n |\n |      .. note::\n |\n |          The Series *must* be monotonically sorted, otherwise\n |          wrong locations will likely be returned. Pandas does *not*\n |          check this for you.\n |\n |      Parameters\n |      ----------\n |      value : array-like or scalar\n |          Values to insert into `self`.\n |      side : {'left', 'right'}, optional\n |          If 'left', the index of the first suitable location found is given.\n |          If 'right', return the last such index.  If there is no suitable\n |          index, return either 0 or N (where N is the length of `self`).\n |      sorter : 1-D array-like, optional\n |          Optional array of integer indices that sort `self` into ascending\n |          order. They are typically the result of ``np.argsort``.\n |\n |      Returns\n |      -------\n |      int or array of int\n |          A scalar or array of insertion points with the\n |          same shape as `value`.\n |\n |      See Also\n |      --------\n |      sort_values : Sort by the values along either axis.\n |      numpy.searchsorted : Similar method from NumPy.\n |\n |      Notes\n |      -----\n |      Binary search is used to find the required insertion points.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; ser = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; ser\n |      0    1\n |      1    2\n |      2    3\n |      dtype: int64\n |\n |      &gt;&gt;&gt; ser.searchsorted(4)\n |      3\n |\n |      &gt;&gt;&gt; ser.searchsorted([0, 4])\n |      array([0, 3])\n |\n |      &gt;&gt;&gt; ser.searchsorted([1, 3], side='left')\n |      array([0, 2])\n |\n |      &gt;&gt;&gt; ser.searchsorted([1, 3], side='right')\n |      array([1, 3])\n |\n |      &gt;&gt;&gt; ser = pd.Series(pd.to_datetime(['3/11/2000', '3/12/2000', '3/13/2000']))\n |      &gt;&gt;&gt; ser\n |      0   2000-03-11\n |      1   2000-03-12\n |      2   2000-03-13\n |      dtype: datetime64[ns]\n |\n |      &gt;&gt;&gt; ser.searchsorted('3/14/2000')\n |      3\n |\n |      &gt;&gt;&gt; ser = pd.Categorical(\n |      ...     ['apple', 'bread', 'bread', 'cheese', 'milk'], ordered=True\n |      ... )\n |      &gt;&gt;&gt; ser\n |      ['apple', 'bread', 'bread', 'cheese', 'milk']\n |      Categories (4, object): ['apple' &lt; 'bread' &lt; 'cheese' &lt; 'milk']\n |\n |      &gt;&gt;&gt; ser.searchsorted('bread')\n |      1\n |\n |      &gt;&gt;&gt; ser.searchsorted(['bread'], side='right')\n |      array([3])\n |\n |      If the values are not monotonically sorted, wrong locations\n |      may be returned:\n |\n |      &gt;&gt;&gt; ser = pd.Series([2, 1, 3])\n |      &gt;&gt;&gt; ser\n |      0    2\n |      1    1\n |      2    3\n |      dtype: int64\n |\n |      &gt;&gt;&gt; ser.searchsorted(1)  # doctest: +SKIP\n |      0  # wrong result, correct would be 1\n |\n |  sem(self, axis: 'Axis | None' = None, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)\n |      Return unbiased standard error of the mean over requested axis.\n |\n |      Normalized by N-1 by default. This can be changed using the ddof argument\n |\n |      Parameters\n |      ----------\n |      axis : {index (0)}\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          .. warning::\n |\n |              The behavior of DataFrame.sem with ``axis=None`` is deprecated,\n |              in a future version this will reduce over both axes and return a scalar\n |              To retain the old behavior, pass axis=0 (or do not pass axis).\n |\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      ddof : int, default 1\n |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n |          where N represents the number of elements.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      Returns\n |      -------\n |      scalar or Series (if level specified)\n |\n |                  Examples\n |                  --------\n |                  &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |                  &gt;&gt;&gt; s.sem().round(6)\n |                  0.57735\n |\n |                  With a DataFrame\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n |                  &gt;&gt;&gt; df\n |                         a   b\n |                  tiger  1   2\n |                  zebra  2   3\n |                  &gt;&gt;&gt; df.sem()\n |                  a   0.5\n |                  b   0.5\n |                  dtype: float64\n |\n |                  Using axis=1\n |\n |                  &gt;&gt;&gt; df.sem(axis=1)\n |                  tiger   0.5\n |                  zebra   0.5\n |                  dtype: float64\n |\n |                  In this case, `numeric_only` should be set to `True`\n |                  to avoid getting an error.\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n |                  ...                   index=['tiger', 'zebra'])\n |                  &gt;&gt;&gt; df.sem(numeric_only=True)\n |                  a   0.5\n |                  dtype: float64\n |\n |  set_axis(self, labels, *, axis: 'Axis' = 0, copy: 'bool | None' = None) -&gt; 'Series'\n |      Assign desired index to given axis.\n |\n |      Indexes for row labels can be changed by assigning\n |      a list-like or Index.\n |\n |      Parameters\n |      ----------\n |      labels : list-like, Index\n |          The values for the new index.\n |\n |      axis : {0 or 'index'}, default 0\n |          The axis to update. The value 0 identifies the rows. For `Series`\n |          this parameter is unused and defaults to 0.\n |\n |      copy : bool, default True\n |          Whether to make a copy of the underlying data.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Returns\n |      -------\n |      Series\n |          An object of type Series.\n |\n |      See Also\n |      --------\n |      Series.rename_axis : Alter the name of the index.\n |\n |              Examples\n |              --------\n |              &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |              &gt;&gt;&gt; s\n |              0    1\n |              1    2\n |              2    3\n |              dtype: int64\n |\n |              &gt;&gt;&gt; s.set_axis(['a', 'b', 'c'], axis=0)\n |              a    1\n |              b    2\n |              c    3\n |              dtype: int64\n |\n |  skew(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)\n |      Return unbiased skew over requested axis.\n |\n |      Normalized by N-1.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          For DataFrames, specifying ``axis=None`` will apply the aggregation\n |          across both axes.\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      scalar or scalar\n |\n |                  Examples\n |                  --------\n |                  &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |                  &gt;&gt;&gt; s.skew()\n |                  0.0\n |\n |                  With a DataFrame\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2, 3], 'b': [2, 3, 4], 'c': [1, 3, 5]},\n |                  ...                   index=['tiger', 'zebra', 'cow'])\n |                  &gt;&gt;&gt; df\n |                          a   b   c\n |                  tiger   1   2   1\n |                  zebra   2   3   3\n |                  cow     3   4   5\n |                  &gt;&gt;&gt; df.skew()\n |                  a   0.0\n |                  b   0.0\n |                  c   0.0\n |                  dtype: float64\n |\n |                  Using axis=1\n |\n |                  &gt;&gt;&gt; df.skew(axis=1)\n |                  tiger   1.732051\n |                  zebra  -1.732051\n |                  cow     0.000000\n |                  dtype: float64\n |\n |                  In this case, `numeric_only` should be set to `True` to avoid\n |                  getting an error.\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2, 3], 'b': ['T', 'Z', 'X']},\n |                  ...                   index=['tiger', 'zebra', 'cow'])\n |                  &gt;&gt;&gt; df.skew(numeric_only=True)\n |                  a   0.0\n |                  dtype: float64\n |\n |  sort_index(self, *, axis: 'Axis' = 0, level: 'IndexLabel | None' = None, ascending: 'bool | Sequence[bool]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'NaPosition' = 'last', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc | None' = None) -&gt; 'Series | None'\n |      Sort Series by index labels.\n |\n |      Returns a new Series sorted by label if `inplace` argument is\n |      ``False``, otherwise updates the original series and returns None.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |      level : int, optional\n |          If not None, sort on values in specified index level(s).\n |      ascending : bool or list-like of bools, default True\n |          Sort ascending vs. descending. When the index is a MultiIndex the\n |          sort direction can be controlled for each level individually.\n |      inplace : bool, default False\n |          If True, perform operation in-place.\n |      kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'\n |          Choice of sorting algorithm. See also :func:`numpy.sort` for more\n |          information. 'mergesort' and 'stable' are the only stable algorithms. For\n |          DataFrames, this option is only applied when sorting on a single\n |          column or label.\n |      na_position : {'first', 'last'}, default 'last'\n |          If 'first' puts NaNs at the beginning, 'last' puts NaNs at the end.\n |          Not implemented for MultiIndex.\n |      sort_remaining : bool, default True\n |          If True and sorting by level and index is multilevel, sort by other\n |          levels too (in order) after sorting by specified level.\n |      ignore_index : bool, default False\n |          If True, the resulting axis will be labeled 0, 1, …, n - 1.\n |      key : callable, optional\n |          If not None, apply the key function to the index values\n |          before sorting. This is similar to the `key` argument in the\n |          builtin :meth:`sorted` function, with the notable difference that\n |          this `key` function should be *vectorized*. It should expect an\n |          ``Index`` and return an ``Index`` of the same shape.\n |\n |      Returns\n |      -------\n |      Series or None\n |          The original Series sorted by the labels or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      DataFrame.sort_index: Sort DataFrame by the index.\n |      DataFrame.sort_values: Sort DataFrame by the value.\n |      Series.sort_values : Sort Series by the value.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, 4])\n |      &gt;&gt;&gt; s.sort_index()\n |      1    c\n |      2    b\n |      3    a\n |      4    d\n |      dtype: object\n |\n |      Sort Descending\n |\n |      &gt;&gt;&gt; s.sort_index(ascending=False)\n |      4    d\n |      3    a\n |      2    b\n |      1    c\n |      dtype: object\n |\n |      By default NaNs are put at the end, but use `na_position` to place\n |      them at the beginning\n |\n |      &gt;&gt;&gt; s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, np.nan])\n |      &gt;&gt;&gt; s.sort_index(na_position='first')\n |      NaN     d\n |       1.0    c\n |       2.0    b\n |       3.0    a\n |      dtype: object\n |\n |      Specify index level to sort\n |\n |      &gt;&gt;&gt; arrays = [np.array(['qux', 'qux', 'foo', 'foo',\n |      ...                     'baz', 'baz', 'bar', 'bar']),\n |      ...           np.array(['two', 'one', 'two', 'one',\n |      ...                     'two', 'one', 'two', 'one'])]\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4, 5, 6, 7, 8], index=arrays)\n |      &gt;&gt;&gt; s.sort_index(level=1)\n |      bar  one    8\n |      baz  one    6\n |      foo  one    4\n |      qux  one    2\n |      bar  two    7\n |      baz  two    5\n |      foo  two    3\n |      qux  two    1\n |      dtype: int64\n |\n |      Does not sort by remaining levels when sorting by levels\n |\n |      &gt;&gt;&gt; s.sort_index(level=1, sort_remaining=False)\n |      qux  one    2\n |      foo  one    4\n |      baz  one    6\n |      bar  one    8\n |      qux  two    1\n |      foo  two    3\n |      baz  two    5\n |      bar  two    7\n |      dtype: int64\n |\n |      Apply a key function before sorting\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4], index=['A', 'b', 'C', 'd'])\n |      &gt;&gt;&gt; s.sort_index(key=lambda x : x.str.lower())\n |      A    1\n |      b    2\n |      C    3\n |      d    4\n |      dtype: int64\n |\n |  sort_values(self, *, axis: 'Axis' = 0, ascending: 'bool | Sequence[bool]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'NaPosition' = 'last', ignore_index: 'bool' = False, key: 'ValueKeyFunc | None' = None) -&gt; 'Series | None'\n |      Sort by the values.\n |\n |      Sort a Series in ascending or descending order by some\n |      criterion.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |      ascending : bool or list of bools, default True\n |          If True, sort values in ascending order, otherwise descending.\n |      inplace : bool, default False\n |          If True, perform operation in-place.\n |      kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'\n |          Choice of sorting algorithm. See also :func:`numpy.sort` for more\n |          information. 'mergesort' and 'stable' are the only stable  algorithms.\n |      na_position : {'first' or 'last'}, default 'last'\n |          Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at\n |          the end.\n |      ignore_index : bool, default False\n |          If True, the resulting axis will be labeled 0, 1, …, n - 1.\n |      key : callable, optional\n |          If not None, apply the key function to the series values\n |          before sorting. This is similar to the `key` argument in the\n |          builtin :meth:`sorted` function, with the notable difference that\n |          this `key` function should be *vectorized*. It should expect a\n |          ``Series`` and return an array-like.\n |\n |      Returns\n |      -------\n |      Series or None\n |          Series ordered by values or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      Series.sort_index : Sort by the Series indices.\n |      DataFrame.sort_values : Sort DataFrame by the values along either axis.\n |      DataFrame.sort_index : Sort DataFrame by indices.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([np.nan, 1, 3, 10, 5])\n |      &gt;&gt;&gt; s\n |      0     NaN\n |      1     1.0\n |      2     3.0\n |      3     10.0\n |      4     5.0\n |      dtype: float64\n |\n |      Sort values ascending order (default behaviour)\n |\n |      &gt;&gt;&gt; s.sort_values(ascending=True)\n |      1     1.0\n |      2     3.0\n |      4     5.0\n |      3    10.0\n |      0     NaN\n |      dtype: float64\n |\n |      Sort values descending order\n |\n |      &gt;&gt;&gt; s.sort_values(ascending=False)\n |      3    10.0\n |      4     5.0\n |      2     3.0\n |      1     1.0\n |      0     NaN\n |      dtype: float64\n |\n |      Sort values putting NAs first\n |\n |      &gt;&gt;&gt; s.sort_values(na_position='first')\n |      0     NaN\n |      1     1.0\n |      2     3.0\n |      4     5.0\n |      3    10.0\n |      dtype: float64\n |\n |      Sort a series of strings\n |\n |      &gt;&gt;&gt; s = pd.Series(['z', 'b', 'd', 'a', 'c'])\n |      &gt;&gt;&gt; s\n |      0    z\n |      1    b\n |      2    d\n |      3    a\n |      4    c\n |      dtype: object\n |\n |      &gt;&gt;&gt; s.sort_values()\n |      3    a\n |      1    b\n |      4    c\n |      2    d\n |      0    z\n |      dtype: object\n |\n |      Sort using a key function. Your `key` function will be\n |      given the ``Series`` of values and should return an array-like.\n |\n |      &gt;&gt;&gt; s = pd.Series(['a', 'B', 'c', 'D', 'e'])\n |      &gt;&gt;&gt; s.sort_values()\n |      1    B\n |      3    D\n |      0    a\n |      2    c\n |      4    e\n |      dtype: object\n |      &gt;&gt;&gt; s.sort_values(key=lambda x: x.str.lower())\n |      0    a\n |      1    B\n |      2    c\n |      3    D\n |      4    e\n |      dtype: object\n |\n |      NumPy ufuncs work well here. For example, we can\n |      sort by the ``sin`` of the value\n |\n |      &gt;&gt;&gt; s = pd.Series([-4, -2, 0, 2, 4])\n |      &gt;&gt;&gt; s.sort_values(key=np.sin)\n |      1   -2\n |      4    4\n |      2    0\n |      0   -4\n |      3    2\n |      dtype: int64\n |\n |      More complicated user-defined functions can be used,\n |      as long as they expect a Series and return an array-like\n |\n |      &gt;&gt;&gt; s.sort_values(key=lambda x: (np.tan(x.cumsum())))\n |      0   -4\n |      3    2\n |      4    4\n |      1   -2\n |      2    0\n |      dtype: int64\n |\n |  std(self, axis: 'Axis | None' = None, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)\n |      Return sample standard deviation over requested axis.\n |\n |      Normalized by N-1 by default. This can be changed using the ddof argument.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0)}\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          .. warning::\n |\n |              The behavior of DataFrame.std with ``axis=None`` is deprecated,\n |              in a future version this will reduce over both axes and return a scalar\n |              To retain the old behavior, pass axis=0 (or do not pass axis).\n |\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      ddof : int, default 1\n |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n |          where N represents the number of elements.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      Returns\n |      -------\n |      scalar or Series (if level specified)\n |\n |      Notes\n |      -----\n |      To have the same behaviour as `numpy.std`, use `ddof=0` (instead of the\n |      default `ddof=1`)\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'person_id': [0, 1, 2, 3],\n |      ...                    'age': [21, 25, 62, 43],\n |      ...                    'height': [1.61, 1.87, 1.49, 2.01]}\n |      ...                   ).set_index('person_id')\n |      &gt;&gt;&gt; df\n |                 age  height\n |      person_id\n |      0           21    1.61\n |      1           25    1.87\n |      2           62    1.49\n |      3           43    2.01\n |\n |      The standard deviation of the columns can be found as follows:\n |\n |      &gt;&gt;&gt; df.std()\n |      age       18.786076\n |      height     0.237417\n |      dtype: float64\n |\n |      Alternatively, `ddof=0` can be set to normalize by N instead of N-1:\n |\n |      &gt;&gt;&gt; df.std(ddof=0)\n |      age       16.269219\n |      height     0.205609\n |      dtype: float64\n |\n |  sub(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Subtraction of series and other, element-wise (binary operator `sub`).\n |\n |      Equivalent to ``series - other``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.rsub : Reverse of the Subtraction operator, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.subtract(b, fill_value=0)\n |      a    0.0\n |      b    1.0\n |      c    1.0\n |      d   -1.0\n |      e    NaN\n |      dtype: float64\n |\n |  subtract = sub(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |\n |  sum(self, axis: 'Axis | None' = None, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)\n |      Return the sum of the values over the requested axis.\n |\n |      This is equivalent to the method ``numpy.sum``.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          .. warning::\n |\n |              The behavior of DataFrame.sum with ``axis=None`` is deprecated,\n |              in a future version this will reduce over both axes and return a scalar\n |              To retain the old behavior, pass axis=0 (or do not pass axis).\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      min_count : int, default 0\n |          The required number of valid values to perform the operation. If fewer than\n |          ``min_count`` non-NA values are present the result will be NA.\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      scalar or scalar\n |\n |      See Also\n |      --------\n |      Series.sum : Return the sum.\n |      Series.min : Return the minimum.\n |      Series.max : Return the maximum.\n |      Series.idxmin : Return the index of the minimum.\n |      Series.idxmax : Return the index of the maximum.\n |      DataFrame.sum : Return the sum over the requested axis.\n |      DataFrame.min : Return the minimum over the requested axis.\n |      DataFrame.max : Return the maximum over the requested axis.\n |      DataFrame.idxmin : Return the index of the minimum over the requested axis.\n |      DataFrame.idxmax : Return the index of the maximum over the requested axis.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; idx = pd.MultiIndex.from_arrays([\n |      ...     ['warm', 'warm', 'cold', 'cold'],\n |      ...     ['dog', 'falcon', 'fish', 'spider']],\n |      ...     names=['blooded', 'animal'])\n |      &gt;&gt;&gt; s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n |      &gt;&gt;&gt; s\n |      blooded  animal\n |      warm     dog       4\n |               falcon    2\n |      cold     fish      0\n |               spider    8\n |      Name: legs, dtype: int64\n |\n |      &gt;&gt;&gt; s.sum()\n |      14\n |\n |      By default, the sum of an empty or all-NA Series is ``0``.\n |\n |      &gt;&gt;&gt; pd.Series([], dtype=\"float64\").sum()  # min_count=0 is the default\n |      0.0\n |\n |      This can be controlled with the ``min_count`` parameter. For example, if\n |      you'd like the sum of an empty series to be NaN, pass ``min_count=1``.\n |\n |      &gt;&gt;&gt; pd.Series([], dtype=\"float64\").sum(min_count=1)\n |      nan\n |\n |      Thanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\n |      empty series identically.\n |\n |      &gt;&gt;&gt; pd.Series([np.nan]).sum()\n |      0.0\n |\n |      &gt;&gt;&gt; pd.Series([np.nan]).sum(min_count=1)\n |      nan\n |\n |  swaplevel(self, i: 'Level' = -2, j: 'Level' = -1, copy: 'bool | None' = None) -&gt; 'Series'\n |      Swap levels i and j in a :class:`MultiIndex`.\n |\n |      Default is to swap the two innermost levels of the index.\n |\n |      Parameters\n |      ----------\n |      i, j : int or str\n |          Levels of the indices to be swapped. Can pass level name as string.\n |      copy : bool, default True\n |                  Whether to copy underlying data.\n |\n |                  .. note::\n |                      The `copy` keyword will change behavior in pandas 3.0.\n |                      `Copy-on-Write\n |                      &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |                      will be enabled by default, which means that all methods with a\n |                      `copy` keyword will use a lazy copy mechanism to defer the copy and\n |                      ignore the `copy` keyword. The `copy` keyword will be removed in a\n |                      future version of pandas.\n |\n |                      You can already get the future behavior and improvements through\n |                      enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Returns\n |      -------\n |      Series\n |          Series with levels swapped in MultiIndex.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(\n |      ...     [\"A\", \"B\", \"A\", \"C\"],\n |      ...     index=[\n |      ...         [\"Final exam\", \"Final exam\", \"Coursework\", \"Coursework\"],\n |      ...         [\"History\", \"Geography\", \"History\", \"Geography\"],\n |      ...         [\"January\", \"February\", \"March\", \"April\"],\n |      ...     ],\n |      ... )\n |      &gt;&gt;&gt; s\n |      Final exam  History     January      A\n |                  Geography   February     B\n |      Coursework  History     March        A\n |                  Geography   April        C\n |      dtype: object\n |\n |      In the following example, we will swap the levels of the indices.\n |      Here, we will swap the levels column-wise, but levels can be swapped row-wise\n |      in a similar manner. Note that column-wise is the default behaviour.\n |      By not supplying any arguments for i and j, we swap the last and second to\n |      last indices.\n |\n |      &gt;&gt;&gt; s.swaplevel()\n |      Final exam  January     History         A\n |                  February    Geography       B\n |      Coursework  March       History         A\n |                  April       Geography       C\n |      dtype: object\n |\n |      By supplying one argument, we can choose which index to swap the last\n |      index with. We can for example swap the first index with the last one as\n |      follows.\n |\n |      &gt;&gt;&gt; s.swaplevel(0)\n |      January     History     Final exam      A\n |      February    Geography   Final exam      B\n |      March       History     Coursework      A\n |      April       Geography   Coursework      C\n |      dtype: object\n |\n |      We can also define explicitly which indices we want to swap by supplying values\n |      for both i and j. Here, we for example swap the first and second indices.\n |\n |      &gt;&gt;&gt; s.swaplevel(0, 1)\n |      History     Final exam  January         A\n |      Geography   Final exam  February        B\n |      History     Coursework  March           A\n |      Geography   Coursework  April           C\n |      dtype: object\n |\n |  to_dict(self, *, into: 'type[MutableMappingT] | MutableMappingT' = &lt;class 'dict'&gt;) -&gt; 'MutableMappingT'\n |      Convert Series to {label -&gt; value} dict or dict-like object.\n |\n |      Parameters\n |      ----------\n |      into : class, default dict\n |          The collections.abc.MutableMapping subclass to use as the return\n |          object. Can be the actual class or an empty instance of the mapping\n |          type you want.  If you want a collections.defaultdict, you must\n |          pass it initialized.\n |\n |      Returns\n |      -------\n |      collections.abc.MutableMapping\n |          Key-value representation of Series.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4])\n |      &gt;&gt;&gt; s.to_dict()\n |      {0: 1, 1: 2, 2: 3, 3: 4}\n |      &gt;&gt;&gt; from collections import OrderedDict, defaultdict\n |      &gt;&gt;&gt; s.to_dict(into=OrderedDict)\n |      OrderedDict([(0, 1), (1, 2), (2, 3), (3, 4)])\n |      &gt;&gt;&gt; dd = defaultdict(list)\n |      &gt;&gt;&gt; s.to_dict(into=dd)\n |      defaultdict(&lt;class 'list'&gt;, {0: 1, 1: 2, 2: 3, 3: 4})\n |\n |  to_frame(self, name: 'Hashable' = &lt;no_default&gt;) -&gt; 'DataFrame'\n |      Convert Series to DataFrame.\n |\n |      Parameters\n |      ----------\n |      name : object, optional\n |          The passed name should substitute for the series name (if it has\n |          one).\n |\n |      Returns\n |      -------\n |      DataFrame\n |          DataFrame representation of Series.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([\"a\", \"b\", \"c\"],\n |      ...               name=\"vals\")\n |      &gt;&gt;&gt; s.to_frame()\n |        vals\n |      0    a\n |      1    b\n |      2    c\n |\n |  to_markdown(self, buf: 'IO[str] | None' = None, mode: 'str' = 'wt', index: 'bool' = True, storage_options: 'StorageOptions | None' = None, **kwargs) -&gt; 'str | None'\n |      Print Series in Markdown-friendly format.\n |\n |      Parameters\n |      ----------\n |      buf : str, Path or StringIO-like, optional, default None\n |          Buffer to write to. If None, the output is returned as a string.\n |      mode : str, optional\n |          Mode in which file is opened, \"wt\" by default.\n |      index : bool, optional, default True\n |          Add index (row) labels.\n |\n |      storage_options : dict, optional\n |          Extra options that make sense for a particular storage connection, e.g.\n |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n |          are forwarded to ``urllib.request.Request`` as header options. For other\n |          URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n |          details, and for more examples on storage options refer `here\n |          &lt;https://pandas.pydata.org/docs/user_guide/io.html?\n |          highlight=storage_options#reading-writing-remote-files&gt;`_.\n |\n |      **kwargs\n |          These parameters will be passed to `tabulate                 &lt;https://pypi.org/project/tabulate&gt;`_.\n |\n |      Returns\n |      -------\n |      str\n |          Series in Markdown-friendly format.\n |\n |      Notes\n |      -----\n |      Requires the `tabulate &lt;https://pypi.org/project/tabulate&gt;`_ package.\n |\n |      Examples\n |                  --------\n |                  &gt;&gt;&gt; s = pd.Series([\"elk\", \"pig\", \"dog\", \"quetzal\"], name=\"animal\")\n |                  &gt;&gt;&gt; print(s.to_markdown())\n |                  |    | animal   |\n |                  |---:|:---------|\n |                  |  0 | elk      |\n |                  |  1 | pig      |\n |                  |  2 | dog      |\n |                  |  3 | quetzal  |\n |\n |                  Output markdown with a tabulate option.\n |\n |                  &gt;&gt;&gt; print(s.to_markdown(tablefmt=\"grid\"))\n |                  +----+----------+\n |                  |    | animal   |\n |                  +====+==========+\n |                  |  0 | elk      |\n |                  +----+----------+\n |                  |  1 | pig      |\n |                  +----+----------+\n |                  |  2 | dog      |\n |                  +----+----------+\n |                  |  3 | quetzal  |\n |                  +----+----------+\n |\n |  to_period(self, freq: 'str | None' = None, copy: 'bool | None' = None) -&gt; 'Series'\n |      Convert Series from DatetimeIndex to PeriodIndex.\n |\n |      Parameters\n |      ----------\n |      freq : str, default None\n |          Frequency associated with the PeriodIndex.\n |      copy : bool, default True\n |          Whether or not to return a copy.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Returns\n |      -------\n |      Series\n |          Series with index converted to PeriodIndex.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; idx = pd.DatetimeIndex(['2023', '2024', '2025'])\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3], index=idx)\n |      &gt;&gt;&gt; s = s.to_period()\n |      &gt;&gt;&gt; s\n |      2023    1\n |      2024    2\n |      2025    3\n |      Freq: Y-DEC, dtype: int64\n |\n |      Viewing the index\n |\n |      &gt;&gt;&gt; s.index\n |      PeriodIndex(['2023', '2024', '2025'], dtype='period[Y-DEC]')\n |\n |  to_string(self, buf: 'FilePath | WriteBuffer[str] | None' = None, na_rep: 'str' = 'NaN', float_format: 'str | None' = None, header: 'bool' = True, index: 'bool' = True, length: 'bool' = False, dtype: 'bool' = False, name: 'bool' = False, max_rows: 'int | None' = None, min_rows: 'int | None' = None) -&gt; 'str | None'\n |      Render a string representation of the Series.\n |\n |      Parameters\n |      ----------\n |      buf : StringIO-like, optional\n |          Buffer to write to.\n |      na_rep : str, optional\n |          String representation of NaN to use, default 'NaN'.\n |      float_format : one-parameter function, optional\n |          Formatter function to apply to columns' elements if they are\n |          floats, default None.\n |      header : bool, default True\n |          Add the Series header (index name).\n |      index : bool, optional\n |          Add index (row) labels, default True.\n |      length : bool, default False\n |          Add the Series length.\n |      dtype : bool, default False\n |          Add the Series dtype.\n |      name : bool, default False\n |          Add the Series name if not None.\n |      max_rows : int, optional\n |          Maximum number of rows to show before truncating. If None, show\n |          all.\n |      min_rows : int, optional\n |          The number of rows to display in a truncated repr (when number\n |          of rows is above `max_rows`).\n |\n |      Returns\n |      -------\n |      str or None\n |          String representation of Series if ``buf=None``, otherwise None.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; ser = pd.Series([1, 2, 3]).to_string()\n |      &gt;&gt;&gt; ser\n |      '0    1\\n1    2\\n2    3'\n |\n |  to_timestamp(self, freq: 'Frequency | None' = None, how: \"Literal['s', 'e', 'start', 'end']\" = 'start', copy: 'bool | None' = None) -&gt; 'Series'\n |      Cast to DatetimeIndex of Timestamps, at *beginning* of period.\n |\n |      Parameters\n |      ----------\n |      freq : str, default frequency of PeriodIndex\n |          Desired frequency.\n |      how : {'s', 'e', 'start', 'end'}\n |          Convention for converting period to timestamp; start of period\n |          vs. end.\n |      copy : bool, default True\n |          Whether or not to return a copy.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Returns\n |      -------\n |      Series with DatetimeIndex\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; idx = pd.PeriodIndex(['2023', '2024', '2025'], freq='Y')\n |      &gt;&gt;&gt; s1 = pd.Series([1, 2, 3], index=idx)\n |      &gt;&gt;&gt; s1\n |      2023    1\n |      2024    2\n |      2025    3\n |      Freq: Y-DEC, dtype: int64\n |\n |      The resulting frequency of the Timestamps is `YearBegin`\n |\n |      &gt;&gt;&gt; s1 = s1.to_timestamp()\n |      &gt;&gt;&gt; s1\n |      2023-01-01    1\n |      2024-01-01    2\n |      2025-01-01    3\n |      Freq: YS-JAN, dtype: int64\n |\n |      Using `freq` which is the offset that the Timestamps will have\n |\n |      &gt;&gt;&gt; s2 = pd.Series([1, 2, 3], index=idx)\n |      &gt;&gt;&gt; s2 = s2.to_timestamp(freq='M')\n |      &gt;&gt;&gt; s2\n |      2023-01-31    1\n |      2024-01-31    2\n |      2025-01-31    3\n |      Freq: YE-JAN, dtype: int64\n |\n |  transform(self, func: 'AggFuncType', axis: 'Axis' = 0, *args, **kwargs) -&gt; 'DataFrame | Series'\n |      Call ``func`` on self producing a Series with the same axis shape as self.\n |\n |      Parameters\n |      ----------\n |      func : function, str, list-like or dict-like\n |          Function to use for transforming the data. If a function, must either\n |          work when passed a Series or when passed to Series.apply. If func\n |          is both list-like and dict-like, dict-like behavior takes precedence.\n |\n |          Accepted combinations are:\n |\n |          - function\n |          - string function name\n |          - list-like of functions and/or function names, e.g. ``[np.exp, 'sqrt']``\n |          - dict-like of axis labels -&gt; functions, function names or list-like of such.\n |      axis : {0 or 'index'}\n |              Unused. Parameter needed for compatibility with DataFrame.\n |      *args\n |          Positional arguments to pass to `func`.\n |      **kwargs\n |          Keyword arguments to pass to `func`.\n |\n |      Returns\n |      -------\n |      Series\n |          A Series that must have the same length as self.\n |\n |      Raises\n |      ------\n |      ValueError : If the returned Series has a different length than self.\n |\n |      See Also\n |      --------\n |      Series.agg : Only perform aggregating type operations.\n |      Series.apply : Invoke function on a Series.\n |\n |      Notes\n |      -----\n |      Functions that mutate the passed object can produce unexpected\n |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\n |      for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': range(3), 'B': range(1, 4)})\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  0  1\n |      1  1  2\n |      2  2  3\n |      &gt;&gt;&gt; df.transform(lambda x: x + 1)\n |         A  B\n |      0  1  2\n |      1  2  3\n |      2  3  4\n |\n |      Even though the resulting Series must have the same length as the\n |      input Series, it is possible to provide several input functions:\n |\n |      &gt;&gt;&gt; s = pd.Series(range(3))\n |      &gt;&gt;&gt; s\n |      0    0\n |      1    1\n |      2    2\n |      dtype: int64\n |      &gt;&gt;&gt; s.transform([np.sqrt, np.exp])\n |             sqrt        exp\n |      0  0.000000   1.000000\n |      1  1.000000   2.718282\n |      2  1.414214   7.389056\n |\n |      You can call transform on a GroupBy object:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     \"Date\": [\n |      ...         \"2015-05-08\", \"2015-05-07\", \"2015-05-06\", \"2015-05-05\",\n |      ...         \"2015-05-08\", \"2015-05-07\", \"2015-05-06\", \"2015-05-05\"],\n |      ...     \"Data\": [5, 8, 6, 1, 50, 100, 60, 120],\n |      ... })\n |      &gt;&gt;&gt; df\n |               Date  Data\n |      0  2015-05-08     5\n |      1  2015-05-07     8\n |      2  2015-05-06     6\n |      3  2015-05-05     1\n |      4  2015-05-08    50\n |      5  2015-05-07   100\n |      6  2015-05-06    60\n |      7  2015-05-05   120\n |      &gt;&gt;&gt; df.groupby('Date')['Data'].transform('sum')\n |      0     55\n |      1    108\n |      2     66\n |      3    121\n |      4     55\n |      5    108\n |      6     66\n |      7    121\n |      Name: Data, dtype: int64\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     \"c\": [1, 1, 1, 2, 2, 2, 2],\n |      ...     \"type\": [\"m\", \"n\", \"o\", \"m\", \"m\", \"n\", \"n\"]\n |      ... })\n |      &gt;&gt;&gt; df\n |         c type\n |      0  1    m\n |      1  1    n\n |      2  1    o\n |      3  2    m\n |      4  2    m\n |      5  2    n\n |      6  2    n\n |      &gt;&gt;&gt; df['size'] = df.groupby('c')['type'].transform(len)\n |      &gt;&gt;&gt; df\n |         c type size\n |      0  1    m    3\n |      1  1    n    3\n |      2  1    o    3\n |      3  2    m    4\n |      4  2    m    4\n |      5  2    n    4\n |      6  2    n    4\n |\n |  truediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -&gt; 'Series'\n |      Return Floating division of series and other, element-wise (binary operator `truediv`).\n |\n |      Equivalent to ``series / other``, but with support to substitute a fill_value for\n |      missing data in either one of the inputs.\n |\n |      Parameters\n |      ----------\n |      other : Series or scalar value\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : None or float value, default None (NaN)\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful Series alignment, with this value before computation.\n |          If data in both corresponding Series locations is missing\n |          the result of filling (at that location) will be missing.\n |      axis : {0 or 'index'}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |\n |      Returns\n |      -------\n |      Series\n |          The result of the operation.\n |\n |      See Also\n |      --------\n |      Series.rtruediv : Reverse of the Floating division operator, see\n |          `Python documentation\n |          &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;`_\n |          for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])\n |      &gt;&gt;&gt; a\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])\n |      &gt;&gt;&gt; b\n |      a    1.0\n |      b    NaN\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; a.divide(b, fill_value=0)\n |      a    1.0\n |      b    inf\n |      c    inf\n |      d    0.0\n |      e    NaN\n |      dtype: float64\n |\n |  unique(self) -&gt; 'ArrayLike'\n |      Return unique values of Series object.\n |\n |      Uniques are returned in order of appearance. Hash table-based unique,\n |      therefore does NOT sort.\n |\n |      Returns\n |      -------\n |      ndarray or ExtensionArray\n |          The unique values returned as a NumPy array. See Notes.\n |\n |      See Also\n |      --------\n |      Series.drop_duplicates : Return Series with duplicate values removed.\n |      unique : Top-level unique method for any 1-d array-like object.\n |      Index.unique : Return Index with unique values from an Index object.\n |\n |      Notes\n |      -----\n |      Returns the unique values as a NumPy array. In case of an\n |      extension-array backed Series, a new\n |      :class:`~api.extensions.ExtensionArray` of that type with just\n |      the unique values is returned. This includes\n |\n |          * Categorical\n |          * Period\n |          * Datetime with Timezone\n |          * Datetime without Timezone\n |          * Timedelta\n |          * Interval\n |          * Sparse\n |          * IntegerNA\n |\n |      See Examples section.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; pd.Series([2, 1, 3, 3], name='A').unique()\n |      array([2, 1, 3])\n |\n |      &gt;&gt;&gt; pd.Series([pd.Timestamp('2016-01-01') for _ in range(3)]).unique()\n |      &lt;DatetimeArray&gt;\n |      ['2016-01-01 00:00:00']\n |      Length: 1, dtype: datetime64[ns]\n |\n |      &gt;&gt;&gt; pd.Series([pd.Timestamp('2016-01-01', tz='US/Eastern')\n |      ...            for _ in range(3)]).unique()\n |      &lt;DatetimeArray&gt;\n |      ['2016-01-01 00:00:00-05:00']\n |      Length: 1, dtype: datetime64[ns, US/Eastern]\n |\n |      An Categorical will return categories in the order of\n |      appearance and with the same dtype.\n |\n |      &gt;&gt;&gt; pd.Series(pd.Categorical(list('baabc'))).unique()\n |      ['b', 'a', 'c']\n |      Categories (3, object): ['a', 'b', 'c']\n |      &gt;&gt;&gt; pd.Series(pd.Categorical(list('baabc'), categories=list('abc'),\n |      ...                          ordered=True)).unique()\n |      ['b', 'a', 'c']\n |      Categories (3, object): ['a' &lt; 'b' &lt; 'c']\n |\n |  unstack(self, level: 'IndexLabel' = -1, fill_value: 'Hashable | None' = None, sort: 'bool' = True) -&gt; 'DataFrame'\n |      Unstack, also known as pivot, Series with MultiIndex to produce DataFrame.\n |\n |      Parameters\n |      ----------\n |      level : int, str, or list of these, default last level\n |          Level(s) to unstack, can pass level name.\n |      fill_value : scalar value, default None\n |          Value to use when replacing NaN values.\n |      sort : bool, default True\n |          Sort the level(s) in the resulting MultiIndex columns.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Unstacked Series.\n |\n |      Notes\n |      -----\n |      Reference :ref:`the user guide &lt;reshaping.stacking&gt;` for more examples.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4],\n |      ...               index=pd.MultiIndex.from_product([['one', 'two'],\n |      ...                                                 ['a', 'b']]))\n |      &gt;&gt;&gt; s\n |      one  a    1\n |           b    2\n |      two  a    3\n |           b    4\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s.unstack(level=-1)\n |           a  b\n |      one  1  2\n |      two  3  4\n |\n |      &gt;&gt;&gt; s.unstack(level=0)\n |         one  two\n |      a    1    3\n |      b    2    4\n |\n |  update(self, other: 'Series | Sequence | Mapping') -&gt; 'None'\n |      Modify Series in place using values from passed Series.\n |\n |      Uses non-NA values from passed Series to make updates. Aligns\n |      on index.\n |\n |      Parameters\n |      ----------\n |      other : Series, or object coercible into Series\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s.update(pd.Series([4, 5, 6]))\n |      &gt;&gt;&gt; s\n |      0    4\n |      1    5\n |      2    6\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s = pd.Series(['a', 'b', 'c'])\n |      &gt;&gt;&gt; s.update(pd.Series(['d', 'e'], index=[0, 2]))\n |      &gt;&gt;&gt; s\n |      0    d\n |      1    b\n |      2    e\n |      dtype: object\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s.update(pd.Series([4, 5, 6, 7, 8]))\n |      &gt;&gt;&gt; s\n |      0    4\n |      1    5\n |      2    6\n |      dtype: int64\n |\n |      If ``other`` contains NaNs the corresponding values are not updated\n |      in the original Series.\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s.update(pd.Series([4, np.nan, 6]))\n |      &gt;&gt;&gt; s\n |      0    4\n |      1    2\n |      2    6\n |      dtype: int64\n |\n |      ``other`` can also be a non-Series object type\n |      that is coercible into a Series\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s.update([4, np.nan, 6])\n |      &gt;&gt;&gt; s\n |      0    4\n |      1    2\n |      2    6\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s.update({1: 9})\n |      &gt;&gt;&gt; s\n |      0    1\n |      1    9\n |      2    3\n |      dtype: int64\n |\n |  var(self, axis: 'Axis | None' = None, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)\n |      Return unbiased variance over requested axis.\n |\n |      Normalized by N-1 by default. This can be changed using the ddof argument.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0)}\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          .. warning::\n |\n |              The behavior of DataFrame.var with ``axis=None`` is deprecated,\n |              in a future version this will reduce over both axes and return a scalar\n |              To retain the old behavior, pass axis=0 (or do not pass axis).\n |\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      ddof : int, default 1\n |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n |          where N represents the number of elements.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      Returns\n |      -------\n |      scalar or Series (if level specified)\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'person_id': [0, 1, 2, 3],\n |      ...                    'age': [21, 25, 62, 43],\n |      ...                    'height': [1.61, 1.87, 1.49, 2.01]}\n |      ...                   ).set_index('person_id')\n |      &gt;&gt;&gt; df\n |                 age  height\n |      person_id\n |      0           21    1.61\n |      1           25    1.87\n |      2           62    1.49\n |      3           43    2.01\n |\n |      &gt;&gt;&gt; df.var()\n |      age       352.916667\n |      height      0.056367\n |      dtype: float64\n |\n |      Alternatively, ``ddof=0`` can be set to normalize by N instead of N-1:\n |\n |      &gt;&gt;&gt; df.var(ddof=0)\n |      age       264.687500\n |      height      0.042275\n |      dtype: float64\n |\n |  view(self, dtype: 'Dtype | None' = None) -&gt; 'Series'\n |      Create a new view of the Series.\n |\n |      .. deprecated:: 2.2.0\n |          ``Series.view`` is deprecated and will be removed in a future version.\n |          Use :meth:`Series.astype` as an alternative to change the dtype.\n |\n |      This function will return a new Series with a view of the same\n |      underlying values in memory, optionally reinterpreted with a new data\n |      type. The new data type must preserve the same size in bytes as to not\n |      cause index misalignment.\n |\n |      Parameters\n |      ----------\n |      dtype : data type\n |          Data type object or one of their string representations.\n |\n |      Returns\n |      -------\n |      Series\n |          A new Series object as a view of the same data in memory.\n |\n |      See Also\n |      --------\n |      numpy.ndarray.view : Equivalent numpy function to create a new view of\n |          the same data in memory.\n |\n |      Notes\n |      -----\n |      Series are instantiated with ``dtype=float64`` by default. While\n |      ``numpy.ndarray.view()`` will return a view with the same data type as\n |      the original array, ``Series.view()`` (without specified dtype)\n |      will try using ``float64`` and may fail if the original data type size\n |      in bytes is not the same.\n |\n |      Examples\n |      --------\n |      Use ``astype`` to change the dtype instead.\n |\n |  ----------------------------------------------------------------------\n |  Readonly properties defined here:\n |\n |  array\n |      The ExtensionArray of the data backing this Series or Index.\n |\n |      Returns\n |      -------\n |      ExtensionArray\n |          An ExtensionArray of the values stored within. For extension\n |          types, this is the actual array. For NumPy native types, this\n |          is a thin (no copy) wrapper around :class:`numpy.ndarray`.\n |\n |          ``.array`` differs from ``.values``, which may require converting\n |          the data to a different form.\n |\n |      See Also\n |      --------\n |      Index.to_numpy : Similar method that always returns a NumPy array.\n |      Series.to_numpy : Similar method that always returns a NumPy array.\n |\n |      Notes\n |      -----\n |      This table lays out the different array types for each extension\n |      dtype within pandas.\n |\n |      ================== =============================\n |      dtype              array type\n |      ================== =============================\n |      category           Categorical\n |      period             PeriodArray\n |      interval           IntervalArray\n |      IntegerNA          IntegerArray\n |      string             StringArray\n |      boolean            BooleanArray\n |      datetime64[ns, tz] DatetimeArray\n |      ================== =============================\n |\n |      For any 3rd-party extension types, the array type will be an\n |      ExtensionArray.\n |\n |      For all remaining dtypes ``.array`` will be a\n |      :class:`arrays.NumpyExtensionArray` wrapping the actual ndarray\n |      stored within. If you absolutely need a NumPy array (possibly with\n |      copying / coercing data), then use :meth:`Series.to_numpy` instead.\n |\n |      Examples\n |      --------\n |      For regular NumPy types like int, and float, a NumpyExtensionArray\n |      is returned.\n |\n |      &gt;&gt;&gt; pd.Series([1, 2, 3]).array\n |      &lt;NumpyExtensionArray&gt;\n |      [1, 2, 3]\n |      Length: 3, dtype: int64\n |\n |      For extension types, like Categorical, the actual ExtensionArray\n |      is returned\n |\n |      &gt;&gt;&gt; ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n |      &gt;&gt;&gt; ser.array\n |      ['a', 'b', 'a']\n |      Categories (2, object): ['a', 'b']\n |\n |  axes\n |      Return a list of the row axis labels.\n |\n |  dtype\n |      Return the dtype object of the underlying data.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s.dtype\n |      dtype('int64')\n |\n |  dtypes\n |      Return the dtype object of the underlying data.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s.dtypes\n |      dtype('int64')\n |\n |  hasnans\n |      Return True if there are any NaNs.\n |\n |      Enables various performance speedups.\n |\n |      Returns\n |      -------\n |      bool\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, None])\n |      &gt;&gt;&gt; s\n |      0    1.0\n |      1    2.0\n |      2    3.0\n |      3    NaN\n |      dtype: float64\n |      &gt;&gt;&gt; s.hasnans\n |      True\n |\n |  values\n |      Return Series as ndarray or ndarray-like depending on the dtype.\n |\n |      .. warning::\n |\n |         We recommend using :attr:`Series.array` or\n |         :meth:`Series.to_numpy`, depending on whether you need\n |         a reference to the underlying data or a NumPy array.\n |\n |      Returns\n |      -------\n |      numpy.ndarray or ndarray-like\n |\n |      See Also\n |      --------\n |      Series.array : Reference to the underlying data.\n |      Series.to_numpy : A NumPy array representing the underlying data.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; pd.Series([1, 2, 3]).values\n |      array([1, 2, 3])\n |\n |      &gt;&gt;&gt; pd.Series(list('aabc')).values\n |      array(['a', 'a', 'b', 'c'], dtype=object)\n |\n |      &gt;&gt;&gt; pd.Series(list('aabc')).astype('category').values\n |      ['a', 'a', 'b', 'c']\n |      Categories (3, object): ['a', 'b', 'c']\n |\n |      Timezone aware datetime data is converted to UTC:\n |\n |      &gt;&gt;&gt; pd.Series(pd.date_range('20130101', periods=3,\n |      ...                         tz='US/Eastern')).values\n |      array(['2013-01-01T05:00:00.000000000',\n |             '2013-01-02T05:00:00.000000000',\n |             '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')\n |\n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |\n |  index\n |      The index (axis labels) of the Series.\n |\n |      The index of a Series is used to label and identify each element of the\n |      underlying data. The index can be thought of as an immutable ordered set\n |      (technically a multi-set, as it may contain duplicate labels), and is\n |      used to index and align data in pandas.\n |\n |      Returns\n |      -------\n |      Index\n |          The index labels of the Series.\n |\n |      See Also\n |      --------\n |      Series.reindex : Conform Series to new index.\n |      Index : The base pandas index type.\n |\n |      Notes\n |      -----\n |      For more information on pandas indexing, see the `indexing user guide\n |      &lt;https://pandas.pydata.org/docs/user_guide/indexing.html&gt;`__.\n |\n |      Examples\n |      --------\n |      To create a Series with a custom index and view the index labels:\n |\n |      &gt;&gt;&gt; cities = ['Kolkata', 'Chicago', 'Toronto', 'Lisbon']\n |      &gt;&gt;&gt; populations = [14.85, 2.71, 2.93, 0.51]\n |      &gt;&gt;&gt; city_series = pd.Series(populations, index=cities)\n |      &gt;&gt;&gt; city_series.index\n |      Index(['Kolkata', 'Chicago', 'Toronto', 'Lisbon'], dtype='object')\n |\n |      To change the index labels of an existing Series:\n |\n |      &gt;&gt;&gt; city_series.index = ['KOL', 'CHI', 'TOR', 'LIS']\n |      &gt;&gt;&gt; city_series.index\n |      Index(['KOL', 'CHI', 'TOR', 'LIS'], dtype='object')\n |\n |  name\n |      Return the name of the Series.\n |\n |      The name of a Series becomes its index or column name if it is used\n |      to form a DataFrame. It is also used whenever displaying the Series\n |      using the interpreter.\n |\n |      Returns\n |      -------\n |      label (hashable object)\n |          The name of the Series, also the column name if part of a DataFrame.\n |\n |      See Also\n |      --------\n |      Series.rename : Sets the Series name when given a scalar input.\n |      Index.name : Corresponding Index property.\n |\n |      Examples\n |      --------\n |      The Series name can be set initially when calling the constructor.\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3], dtype=np.int64, name='Numbers')\n |      &gt;&gt;&gt; s\n |      0    1\n |      1    2\n |      2    3\n |      Name: Numbers, dtype: int64\n |      &gt;&gt;&gt; s.name = \"Integers\"\n |      &gt;&gt;&gt; s\n |      0    1\n |      1    2\n |      2    3\n |      Name: Integers, dtype: int64\n |\n |      The name of a Series within a DataFrame is its column name.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[1, 2], [3, 4], [5, 6]],\n |      ...                   columns=[\"Odd Numbers\", \"Even Numbers\"])\n |      &gt;&gt;&gt; df\n |         Odd Numbers  Even Numbers\n |      0            1             2\n |      1            3             4\n |      2            5             6\n |      &gt;&gt;&gt; df[\"Even Numbers\"].name\n |      'Even Numbers'\n |\n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |\n |  __annotations__ = {'_AXIS_ORDERS': \"list[Literal['index', 'columns']]\"...\n |\n |  __pandas_priority__ = 3000\n |\n |  cat = &lt;class 'pandas.core.arrays.categorical.CategoricalAccessor'&gt;\n |      Accessor object for categorical properties of the Series values.\n |\n |      Parameters\n |      ----------\n |      data : Series or CategoricalIndex\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(list(\"abbccc\")).astype(\"category\")\n |      &gt;&gt;&gt; s\n |      0    a\n |      1    b\n |      2    b\n |      3    c\n |      4    c\n |      5    c\n |      dtype: category\n |      Categories (3, object): ['a', 'b', 'c']\n |\n |      &gt;&gt;&gt; s.cat.categories\n |      Index(['a', 'b', 'c'], dtype='object')\n |\n |      &gt;&gt;&gt; s.cat.rename_categories(list(\"cba\"))\n |      0    c\n |      1    b\n |      2    b\n |      3    a\n |      4    a\n |      5    a\n |      dtype: category\n |      Categories (3, object): ['c', 'b', 'a']\n |\n |      &gt;&gt;&gt; s.cat.reorder_categories(list(\"cba\"))\n |      0    a\n |      1    b\n |      2    b\n |      3    c\n |      4    c\n |      5    c\n |      dtype: category\n |      Categories (3, object): ['c', 'b', 'a']\n |\n |      &gt;&gt;&gt; s.cat.add_categories([\"d\", \"e\"])\n |      0    a\n |      1    b\n |      2    b\n |      3    c\n |      4    c\n |      5    c\n |      dtype: category\n |      Categories (5, object): ['a', 'b', 'c', 'd', 'e']\n |\n |      &gt;&gt;&gt; s.cat.remove_categories([\"a\", \"c\"])\n |      0    NaN\n |      1      b\n |      2      b\n |      3    NaN\n |      4    NaN\n |      5    NaN\n |      dtype: category\n |      Categories (1, object): ['b']\n |\n |      &gt;&gt;&gt; s1 = s.cat.add_categories([\"d\", \"e\"])\n |      &gt;&gt;&gt; s1.cat.remove_unused_categories()\n |      0    a\n |      1    b\n |      2    b\n |      3    c\n |      4    c\n |      5    c\n |      dtype: category\n |      Categories (3, object): ['a', 'b', 'c']\n |\n |      &gt;&gt;&gt; s.cat.set_categories(list(\"abcde\"))\n |      0    a\n |      1    b\n |      2    b\n |      3    c\n |      4    c\n |      5    c\n |      dtype: category\n |      Categories (5, object): ['a', 'b', 'c', 'd', 'e']\n |\n |      &gt;&gt;&gt; s.cat.as_ordered()\n |      0    a\n |      1    b\n |      2    b\n |      3    c\n |      4    c\n |      5    c\n |      dtype: category\n |      Categories (3, object): ['a' &lt; 'b' &lt; 'c']\n |\n |      &gt;&gt;&gt; s.cat.as_unordered()\n |      0    a\n |      1    b\n |      2    b\n |      3    c\n |      4    c\n |      5    c\n |      dtype: category\n |      Categories (3, object): ['a', 'b', 'c']\n |\n |\n |  dt = &lt;class 'pandas.core.indexes.accessors.CombinedDatetimelikePropert...\n |\n |  list = &lt;class 'pandas.core.arrays.arrow.accessors.ListAccessor'&gt;\n |      Accessor object for list data properties of the Series values.\n |\n |      Parameters\n |      ----------\n |      data : Series\n |          Series containing Arrow list data.\n |\n |\n |  plot = &lt;class 'pandas.plotting._core.PlotAccessor'&gt;\n |      Make plots of Series or DataFrame.\n |\n |      Uses the backend specified by the\n |      option ``plotting.backend``. By default, matplotlib is used.\n |\n |      Parameters\n |      ----------\n |      data : Series or DataFrame\n |          The object for which the method is called.\n |      x : label or position, default None\n |          Only used if data is a DataFrame.\n |      y : label, position or list of label, positions, default None\n |          Allows plotting of one column versus another. Only used if data is a\n |          DataFrame.\n |      kind : str\n |          The kind of plot to produce:\n |\n |          - 'line' : line plot (default)\n |          - 'bar' : vertical bar plot\n |          - 'barh' : horizontal bar plot\n |          - 'hist' : histogram\n |          - 'box' : boxplot\n |          - 'kde' : Kernel Density Estimation plot\n |          - 'density' : same as 'kde'\n |          - 'area' : area plot\n |          - 'pie' : pie plot\n |          - 'scatter' : scatter plot (DataFrame only)\n |          - 'hexbin' : hexbin plot (DataFrame only)\n |      ax : matplotlib axes object, default None\n |          An axes of the current figure.\n |      subplots : bool or sequence of iterables, default False\n |          Whether to group columns into subplots:\n |\n |          - ``False`` : No subplots will be used\n |          - ``True`` : Make separate subplots for each column.\n |          - sequence of iterables of column labels: Create a subplot for each\n |            group of columns. For example `[('a', 'c'), ('b', 'd')]` will\n |            create 2 subplots: one with columns 'a' and 'c', and one\n |            with columns 'b' and 'd'. Remaining columns that aren't specified\n |            will be plotted in additional subplots (one per column).\n |\n |            .. versionadded:: 1.5.0\n |\n |      sharex : bool, default True if ax is None else False\n |          In case ``subplots=True``, share x axis and set some x axis labels\n |          to invisible; defaults to True if ax is None otherwise False if\n |          an ax is passed in; Be aware, that passing in both an ax and\n |          ``sharex=True`` will alter all x axis labels for all axis in a figure.\n |      sharey : bool, default False\n |          In case ``subplots=True``, share y axis and set some y axis labels to invisible.\n |      layout : tuple, optional\n |          (rows, columns) for the layout of subplots.\n |      figsize : a tuple (width, height) in inches\n |          Size of a figure object.\n |      use_index : bool, default True\n |          Use index as ticks for x axis.\n |      title : str or list\n |          Title to use for the plot. If a string is passed, print the string\n |          at the top of the figure. If a list is passed and `subplots` is\n |          True, print each item in the list above the corresponding subplot.\n |      grid : bool, default None (matlab style default)\n |          Axis grid lines.\n |      legend : bool or {'reverse'}\n |          Place legend on axis subplots.\n |      style : list or dict\n |          The matplotlib line style per column.\n |      logx : bool or 'sym', default False\n |          Use log scaling or symlog scaling on x axis.\n |\n |      logy : bool or 'sym' default False\n |          Use log scaling or symlog scaling on y axis.\n |\n |      loglog : bool or 'sym', default False\n |          Use log scaling or symlog scaling on both x and y axes.\n |\n |      xticks : sequence\n |          Values to use for the xticks.\n |      yticks : sequence\n |          Values to use for the yticks.\n |      xlim : 2-tuple/list\n |          Set the x limits of the current axes.\n |      ylim : 2-tuple/list\n |          Set the y limits of the current axes.\n |      xlabel : label, optional\n |          Name to use for the xlabel on x-axis. Default uses index name as xlabel, or the\n |          x-column name for planar plots.\n |\n |          .. versionchanged:: 2.0.0\n |\n |              Now applicable to histograms.\n |\n |      ylabel : label, optional\n |          Name to use for the ylabel on y-axis. Default will show no ylabel, or the\n |          y-column name for planar plots.\n |\n |          .. versionchanged:: 2.0.0\n |\n |              Now applicable to histograms.\n |\n |      rot : float, default None\n |          Rotation for ticks (xticks for vertical, yticks for horizontal\n |          plots).\n |      fontsize : float, default None\n |          Font size for xticks and yticks.\n |      colormap : str or matplotlib colormap object, default None\n |          Colormap to select colors from. If string, load colormap with that\n |          name from matplotlib.\n |      colorbar : bool, optional\n |          If True, plot colorbar (only relevant for 'scatter' and 'hexbin'\n |          plots).\n |      position : float\n |          Specify relative alignments for bar plot layout.\n |          From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5\n |          (center).\n |      table : bool, Series or DataFrame, default False\n |          If True, draw a table using the data in the DataFrame and the data\n |          will be transposed to meet matplotlib's default layout.\n |          If a Series or DataFrame is passed, use passed data to draw a\n |          table.\n |      yerr : DataFrame, Series, array-like, dict and str\n |          See :ref:`Plotting with Error Bars &lt;visualization.errorbars&gt;` for\n |          detail.\n |      xerr : DataFrame, Series, array-like, dict and str\n |          Equivalent to yerr.\n |      stacked : bool, default False in line and bar plots, and True in area plot\n |          If True, create stacked plot.\n |      secondary_y : bool or sequence, default False\n |          Whether to plot on the secondary y-axis if a list/tuple, which\n |          columns to plot on secondary y-axis.\n |      mark_right : bool, default True\n |          When using a secondary_y axis, automatically mark the column\n |          labels with \"(right)\" in the legend.\n |      include_bool : bool, default is False\n |          If True, boolean values can be plotted.\n |      backend : str, default None\n |          Backend to use instead of the backend specified in the option\n |          ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to\n |          specify the ``plotting.backend`` for the whole session, set\n |          ``pd.options.plotting.backend``.\n |      **kwargs\n |          Options to pass to matplotlib plotting method.\n |\n |      Returns\n |      -------\n |      :class:`matplotlib.axes.Axes` or numpy.ndarray of them\n |          If the backend is not the default matplotlib one, the return value\n |          will be the object returned by the backend.\n |\n |      Notes\n |      -----\n |      - See matplotlib documentation online for more on this subject\n |      - If `kind` = 'bar' or 'barh', you can specify relative alignments\n |        for bar plot layout by `position` keyword.\n |        From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5\n |        (center)\n |\n |      Examples\n |      --------\n |      For Series:\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; ser = pd.Series([1, 2, 3, 3])\n |          &gt;&gt;&gt; plot = ser.plot(kind='hist', title=\"My plot\")\n |\n |      For DataFrame:\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; df = pd.DataFrame({'length': [1.5, 0.5, 1.2, 0.9, 3],\n |          ...                   'width': [0.7, 0.2, 0.15, 0.2, 1.1]},\n |          ...                   index=['pig', 'rabbit', 'duck', 'chicken', 'horse'])\n |          &gt;&gt;&gt; plot = df.plot(title=\"DataFrame Plot\")\n |\n |      For SeriesGroupBy:\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; lst = [-1, -2, -3, 1, 2, 3]\n |          &gt;&gt;&gt; ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)\n |          &gt;&gt;&gt; plot = ser.groupby(lambda x: x &gt; 0).plot(title=\"SeriesGroupBy Plot\")\n |\n |      For DataFrameGroupBy:\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; df = pd.DataFrame({\"col1\" : [1, 2, 3, 4],\n |          ...                   \"col2\" : [\"A\", \"B\", \"A\", \"B\"]})\n |          &gt;&gt;&gt; plot = df.groupby(\"col2\").plot(kind=\"bar\", title=\"DataFrameGroupBy Plot\")\n |\n |\n |  sparse = &lt;class 'pandas.core.arrays.sparse.accessor.SparseAccessor'&gt;\n |      Accessor for SparseSparse from other sparse matrix data types.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; ser = pd.Series([0, 0, 2, 2, 2], dtype=\"Sparse[int]\")\n |      &gt;&gt;&gt; ser.sparse.density\n |      0.6\n |      &gt;&gt;&gt; ser.sparse.sp_values\n |      array([2, 2, 2])\n |\n |\n |  str = &lt;class 'pandas.core.strings.accessor.StringMethods'&gt;\n |      Vectorized string functions for Series and Index.\n |\n |      NAs stay NA unless handled otherwise by a particular method.\n |      Patterned after Python's string methods, with some inspiration from\n |      R's stringr package.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([\"A_Str_Series\"])\n |      &gt;&gt;&gt; s\n |      0    A_Str_Series\n |      dtype: object\n |\n |      &gt;&gt;&gt; s.str.split(\"_\")\n |      0    [A, Str, Series]\n |      dtype: object\n |\n |      &gt;&gt;&gt; s.str.replace(\"_\", \"\")\n |      0    AStrSeries\n |      dtype: object\n |\n |\n |  struct = &lt;class 'pandas.core.arrays.arrow.accessors.StructAccessor'&gt;\n |      Accessor object for structured data properties of the Series values.\n |\n |      Parameters\n |      ----------\n |      data : Series\n |          Series containing Arrow struct data.\n |\n |\n |  ----------------------------------------------------------------------\n |  Methods inherited from pandas.core.base.IndexOpsMixin:\n |\n |  __iter__(self) -&gt; 'Iterator'\n |      Return an iterator of the values.\n |\n |      These are each a scalar type, which is a Python scalar\n |      (for str, int, float) or a pandas scalar\n |      (for Timestamp/Timedelta/Interval/Period)\n |\n |      Returns\n |      -------\n |      iterator\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; for x in s:\n |      ...     print(x)\n |      1\n |      2\n |      3\n |\n |  argmax(self, axis: 'AxisInt | None' = None, skipna: 'bool' = True, *args, **kwargs) -&gt; 'int'\n |      Return int position of the largest value in the Series.\n |\n |      If the maximum is achieved in multiple locations,\n |      the first row position is returned.\n |\n |      Parameters\n |      ----------\n |      axis : {None}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |      skipna : bool, default True\n |          Exclude NA/null values when showing the result.\n |      *args, **kwargs\n |          Additional arguments and keywords for compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      int\n |          Row position of the maximum value.\n |\n |      See Also\n |      --------\n |      Series.argmax : Return position of the maximum value.\n |      Series.argmin : Return position of the minimum value.\n |      numpy.ndarray.argmax : Equivalent method for numpy arrays.\n |      Series.idxmax : Return index label of the maximum values.\n |      Series.idxmin : Return index label of the minimum values.\n |\n |      Examples\n |      --------\n |      Consider dataset containing cereal calories\n |\n |      &gt;&gt;&gt; s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,\n |      ...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})\n |      &gt;&gt;&gt; s\n |      Corn Flakes              100.0\n |      Almond Delight           110.0\n |      Cinnamon Toast Crunch    120.0\n |      Cocoa Puff               110.0\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s.argmax()\n |      2\n |      &gt;&gt;&gt; s.argmin()\n |      0\n |\n |      The maximum cereal calories is the third element and\n |      the minimum cereal calories is the first element,\n |      since series is zero-indexed.\n |\n |  argmin(self, axis: 'AxisInt | None' = None, skipna: 'bool' = True, *args, **kwargs) -&gt; 'int'\n |      Return int position of the smallest value in the Series.\n |\n |      If the minimum is achieved in multiple locations,\n |      the first row position is returned.\n |\n |      Parameters\n |      ----------\n |      axis : {None}\n |          Unused. Parameter needed for compatibility with DataFrame.\n |      skipna : bool, default True\n |          Exclude NA/null values when showing the result.\n |      *args, **kwargs\n |          Additional arguments and keywords for compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      int\n |          Row position of the minimum value.\n |\n |      See Also\n |      --------\n |      Series.argmin : Return position of the minimum value.\n |      Series.argmax : Return position of the maximum value.\n |      numpy.ndarray.argmin : Equivalent method for numpy arrays.\n |      Series.idxmax : Return index label of the maximum values.\n |      Series.idxmin : Return index label of the minimum values.\n |\n |      Examples\n |      --------\n |      Consider dataset containing cereal calories\n |\n |      &gt;&gt;&gt; s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,\n |      ...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})\n |      &gt;&gt;&gt; s\n |      Corn Flakes              100.0\n |      Almond Delight           110.0\n |      Cinnamon Toast Crunch    120.0\n |      Cocoa Puff               110.0\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s.argmax()\n |      2\n |      &gt;&gt;&gt; s.argmin()\n |      0\n |\n |      The maximum cereal calories is the third element and\n |      the minimum cereal calories is the first element,\n |      since series is zero-indexed.\n |\n |  factorize(self, sort: 'bool' = False, use_na_sentinel: 'bool' = True) -&gt; 'tuple[npt.NDArray[np.intp], Index]'\n |      Encode the object as an enumerated type or categorical variable.\n |\n |      This method is useful for obtaining a numeric representation of an\n |      array when all that matters is identifying distinct values. `factorize`\n |      is available as both a top-level function :func:`pandas.factorize`,\n |      and as a method :meth:`Series.factorize` and :meth:`Index.factorize`.\n |\n |      Parameters\n |      ----------\n |      sort : bool, default False\n |          Sort `uniques` and shuffle `codes` to maintain the\n |          relationship.\n |\n |      use_na_sentinel : bool, default True\n |          If True, the sentinel -1 will be used for NaN values. If False,\n |          NaN values will be encoded as non-negative integers and will not drop the\n |          NaN from the uniques of the values.\n |\n |          .. versionadded:: 1.5.0\n |\n |      Returns\n |      -------\n |      codes : ndarray\n |          An integer ndarray that's an indexer into `uniques`.\n |          ``uniques.take(codes)`` will have the same values as `values`.\n |      uniques : ndarray, Index, or Categorical\n |          The unique valid values. When `values` is Categorical, `uniques`\n |          is a Categorical. When `values` is some other pandas object, an\n |          `Index` is returned. Otherwise, a 1-D ndarray is returned.\n |\n |          .. note::\n |\n |             Even if there's a missing value in `values`, `uniques` will\n |             *not* contain an entry for it.\n |\n |      See Also\n |      --------\n |      cut : Discretize continuous-valued array.\n |      unique : Find the unique value in an array.\n |\n |      Notes\n |      -----\n |      Reference :ref:`the user guide &lt;reshaping.factorize&gt;` for more examples.\n |\n |      Examples\n |      --------\n |      These examples all show factorize as a top-level method like\n |      ``pd.factorize(values)``. The results are identical for methods like\n |      :meth:`Series.factorize`.\n |\n |      &gt;&gt;&gt; codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"))\n |      &gt;&gt;&gt; codes\n |      array([0, 0, 1, 2, 0])\n |      &gt;&gt;&gt; uniques\n |      array(['b', 'a', 'c'], dtype=object)\n |\n |      With ``sort=True``, the `uniques` will be sorted, and `codes` will be\n |      shuffled so that the relationship is the maintained.\n |\n |      &gt;&gt;&gt; codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"),\n |      ...                               sort=True)\n |      &gt;&gt;&gt; codes\n |      array([1, 1, 0, 2, 1])\n |      &gt;&gt;&gt; uniques\n |      array(['a', 'b', 'c'], dtype=object)\n |\n |      When ``use_na_sentinel=True`` (the default), missing values are indicated in\n |      the `codes` with the sentinel value ``-1`` and missing values are not\n |      included in `uniques`.\n |\n |      &gt;&gt;&gt; codes, uniques = pd.factorize(np.array(['b', None, 'a', 'c', 'b'], dtype=\"O\"))\n |      &gt;&gt;&gt; codes\n |      array([ 0, -1,  1,  2,  0])\n |      &gt;&gt;&gt; uniques\n |      array(['b', 'a', 'c'], dtype=object)\n |\n |      Thus far, we've only factorized lists (which are internally coerced to\n |      NumPy arrays). When factorizing pandas objects, the type of `uniques`\n |      will differ. For Categoricals, a `Categorical` is returned.\n |\n |      &gt;&gt;&gt; cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])\n |      &gt;&gt;&gt; codes, uniques = pd.factorize(cat)\n |      &gt;&gt;&gt; codes\n |      array([0, 0, 1])\n |      &gt;&gt;&gt; uniques\n |      ['a', 'c']\n |      Categories (3, object): ['a', 'b', 'c']\n |\n |      Notice that ``'b'`` is in ``uniques.categories``, despite not being\n |      present in ``cat.values``.\n |\n |      For all other pandas objects, an Index of the appropriate type is\n |      returned.\n |\n |      &gt;&gt;&gt; cat = pd.Series(['a', 'a', 'c'])\n |      &gt;&gt;&gt; codes, uniques = pd.factorize(cat)\n |      &gt;&gt;&gt; codes\n |      array([0, 0, 1])\n |      &gt;&gt;&gt; uniques\n |      Index(['a', 'c'], dtype='object')\n |\n |      If NaN is in the values, and we want to include NaN in the uniques of the\n |      values, it can be achieved by setting ``use_na_sentinel=False``.\n |\n |      &gt;&gt;&gt; values = np.array([1, 2, 1, np.nan])\n |      &gt;&gt;&gt; codes, uniques = pd.factorize(values)  # default: use_na_sentinel=True\n |      &gt;&gt;&gt; codes\n |      array([ 0,  1,  0, -1])\n |      &gt;&gt;&gt; uniques\n |      array([1., 2.])\n |\n |      &gt;&gt;&gt; codes, uniques = pd.factorize(values, use_na_sentinel=False)\n |      &gt;&gt;&gt; codes\n |      array([0, 1, 0, 2])\n |      &gt;&gt;&gt; uniques\n |      array([ 1.,  2., nan])\n |\n |  item(self)\n |      Return the first element of the underlying data as a Python scalar.\n |\n |      Returns\n |      -------\n |      scalar\n |          The first element of Series or Index.\n |\n |      Raises\n |      ------\n |      ValueError\n |          If the data is not length = 1.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1])\n |      &gt;&gt;&gt; s.item()\n |      1\n |\n |      For an index:\n |\n |      &gt;&gt;&gt; s = pd.Series([1], index=['a'])\n |      &gt;&gt;&gt; s.index.item()\n |      'a'\n |\n |  nunique(self, dropna: 'bool' = True) -&gt; 'int'\n |      Return number of unique elements in the object.\n |\n |      Excludes NA values by default.\n |\n |      Parameters\n |      ----------\n |      dropna : bool, default True\n |          Don't include NaN in the count.\n |\n |      Returns\n |      -------\n |      int\n |\n |      See Also\n |      --------\n |      DataFrame.nunique: Method nunique for DataFrame.\n |      Series.count: Count non-NA/null observations in the Series.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 3, 5, 7, 7])\n |      &gt;&gt;&gt; s\n |      0    1\n |      1    3\n |      2    5\n |      3    7\n |      4    7\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s.nunique()\n |      4\n |\n |  to_list = tolist(self)\n |\n |  to_numpy(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool' = False, na_value: 'object' = &lt;no_default&gt;, **kwargs) -&gt; 'np.ndarray'\n |      A NumPy ndarray representing the values in this Series or Index.\n |\n |      Parameters\n |      ----------\n |      dtype : str or numpy.dtype, optional\n |          The dtype to pass to :meth:`numpy.asarray`.\n |      copy : bool, default False\n |          Whether to ensure that the returned value is not a view on\n |          another array. Note that ``copy=False`` does not *ensure* that\n |          ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n |          a copy is made, even if not strictly necessary.\n |      na_value : Any, optional\n |          The value to use for missing values. The default value depends\n |          on `dtype` and the type of the array.\n |      **kwargs\n |          Additional keywords passed through to the ``to_numpy`` method\n |          of the underlying array (for extension arrays).\n |\n |      Returns\n |      -------\n |      numpy.ndarray\n |\n |      See Also\n |      --------\n |      Series.array : Get the actual data stored within.\n |      Index.array : Get the actual data stored within.\n |      DataFrame.to_numpy : Similar method for DataFrame.\n |\n |      Notes\n |      -----\n |      The returned array will be the same up to equality (values equal\n |      in `self` will be equal in the returned array; likewise for values\n |      that are not equal). When `self` contains an ExtensionArray, the\n |      dtype may be different. For example, for a category-dtype Series,\n |      ``to_numpy()`` will return a NumPy array and the categorical dtype\n |      will be lost.\n |\n |      For NumPy dtypes, this will be a reference to the actual data stored\n |      in this Series or Index (assuming ``copy=False``). Modifying the result\n |      in place will modify the data stored in the Series or Index (not that\n |      we recommend doing that).\n |\n |      For extension types, ``to_numpy()`` *may* require copying data and\n |      coercing the result to a NumPy type (possibly object), which may be\n |      expensive. When you need a no-copy reference to the underlying data,\n |      :attr:`Series.array` should be used instead.\n |\n |      This table lays out the different dtypes and default return types of\n |      ``to_numpy()`` for various dtypes within pandas.\n |\n |      ================== ================================\n |      dtype              array type\n |      ================== ================================\n |      category[T]        ndarray[T] (same dtype as input)\n |      period             ndarray[object] (Periods)\n |      interval           ndarray[object] (Intervals)\n |      IntegerNA          ndarray[object]\n |      datetime64[ns]     datetime64[ns]\n |      datetime64[ns, tz] ndarray[object] (Timestamps)\n |      ================== ================================\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n |      &gt;&gt;&gt; ser.to_numpy()\n |      array(['a', 'b', 'a'], dtype=object)\n |\n |      Specify the `dtype` to control how datetime-aware data is represented.\n |      Use ``dtype=object`` to return an ndarray of pandas :class:`Timestamp`\n |      objects, each with the correct ``tz``.\n |\n |      &gt;&gt;&gt; ser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n |      &gt;&gt;&gt; ser.to_numpy(dtype=object)\n |      array([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),\n |             Timestamp('2000-01-02 00:00:00+0100', tz='CET')],\n |            dtype=object)\n |\n |      Or ``dtype='datetime64[ns]'`` to return an ndarray of native\n |      datetime64 values. The values are converted to UTC and the timezone\n |      info is dropped.\n |\n |      &gt;&gt;&gt; ser.to_numpy(dtype=\"datetime64[ns]\")\n |      ... # doctest: +ELLIPSIS\n |      array(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00...'],\n |            dtype='datetime64[ns]')\n |\n |  tolist(self)\n |      Return a list of the values.\n |\n |      These are each a scalar type, which is a Python scalar\n |      (for str, int, float) or a pandas scalar\n |      (for Timestamp/Timedelta/Interval/Period)\n |\n |      Returns\n |      -------\n |      list\n |\n |      See Also\n |      --------\n |      numpy.ndarray.tolist : Return the array as an a.ndim-levels deep\n |          nested list of Python scalars.\n |\n |      Examples\n |      --------\n |      For Series\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s.to_list()\n |      [1, 2, 3]\n |\n |      For Index:\n |\n |      &gt;&gt;&gt; idx = pd.Index([1, 2, 3])\n |      &gt;&gt;&gt; idx\n |      Index([1, 2, 3], dtype='int64')\n |\n |      &gt;&gt;&gt; idx.to_list()\n |      [1, 2, 3]\n |\n |  transpose(self, *args, **kwargs) -&gt; 'Self'\n |      Return the transpose, which is by definition self.\n |\n |      Returns\n |      -------\n |      %(klass)s\n |\n |  value_counts(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, dropna: 'bool' = True) -&gt; 'Series'\n |      Return a Series containing counts of unique values.\n |\n |      The resulting object will be in descending order so that the\n |      first element is the most frequently-occurring element.\n |      Excludes NA values by default.\n |\n |      Parameters\n |      ----------\n |      normalize : bool, default False\n |          If True then the object returned will contain the relative\n |          frequencies of the unique values.\n |      sort : bool, default True\n |          Sort by frequencies when True. Preserve the order of the data when False.\n |      ascending : bool, default False\n |          Sort in ascending order.\n |      bins : int, optional\n |          Rather than count values, group them into half-open bins,\n |          a convenience for ``pd.cut``, only works with numeric data.\n |      dropna : bool, default True\n |          Don't include counts of NaN.\n |\n |      Returns\n |      -------\n |      Series\n |\n |      See Also\n |      --------\n |      Series.count: Number of non-NA elements in a Series.\n |      DataFrame.count: Number of non-NA elements in a DataFrame.\n |      DataFrame.value_counts: Equivalent method on DataFrames.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; index = pd.Index([3, 1, 2, 3, 4, np.nan])\n |      &gt;&gt;&gt; index.value_counts()\n |      3.0    2\n |      1.0    1\n |      2.0    1\n |      4.0    1\n |      Name: count, dtype: int64\n |\n |      With `normalize` set to `True`, returns the relative frequency by\n |      dividing all values by the sum of values.\n |\n |      &gt;&gt;&gt; s = pd.Series([3, 1, 2, 3, 4, np.nan])\n |      &gt;&gt;&gt; s.value_counts(normalize=True)\n |      3.0    0.4\n |      1.0    0.2\n |      2.0    0.2\n |      4.0    0.2\n |      Name: proportion, dtype: float64\n |\n |      **bins**\n |\n |      Bins can be useful for going from a continuous variable to a\n |      categorical variable; instead of counting unique\n |      apparitions of values, divide the index in the specified\n |      number of half-open bins.\n |\n |      &gt;&gt;&gt; s.value_counts(bins=3)\n |      (0.996, 2.0]    2\n |      (2.0, 3.0]      2\n |      (3.0, 4.0]      1\n |      Name: count, dtype: int64\n |\n |      **dropna**\n |\n |      With `dropna` set to `False` we can also see NaN index values.\n |\n |      &gt;&gt;&gt; s.value_counts(dropna=False)\n |      3.0    2\n |      1.0    1\n |      2.0    1\n |      4.0    1\n |      NaN    1\n |      Name: count, dtype: int64\n |\n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from pandas.core.base.IndexOpsMixin:\n |\n |  T\n |      Return the transpose, which is by definition self.\n |\n |      Examples\n |      --------\n |      For Series:\n |\n |      &gt;&gt;&gt; s = pd.Series(['Ant', 'Bear', 'Cow'])\n |      &gt;&gt;&gt; s\n |      0     Ant\n |      1    Bear\n |      2     Cow\n |      dtype: object\n |      &gt;&gt;&gt; s.T\n |      0     Ant\n |      1    Bear\n |      2     Cow\n |      dtype: object\n |\n |      For Index:\n |\n |      &gt;&gt;&gt; idx = pd.Index([1, 2, 3])\n |      &gt;&gt;&gt; idx.T\n |      Index([1, 2, 3], dtype='int64')\n |\n |  empty\n |\n |  is_monotonic_decreasing\n |      Return boolean if values in the object are monotonically decreasing.\n |\n |      Returns\n |      -------\n |      bool\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([3, 2, 2, 1])\n |      &gt;&gt;&gt; s.is_monotonic_decreasing\n |      True\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s.is_monotonic_decreasing\n |      False\n |\n |  is_monotonic_increasing\n |      Return boolean if values in the object are monotonically increasing.\n |\n |      Returns\n |      -------\n |      bool\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 2])\n |      &gt;&gt;&gt; s.is_monotonic_increasing\n |      True\n |\n |      &gt;&gt;&gt; s = pd.Series([3, 2, 1])\n |      &gt;&gt;&gt; s.is_monotonic_increasing\n |      False\n |\n |  is_unique\n |      Return boolean if values in the object are unique.\n |\n |      Returns\n |      -------\n |      bool\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s.is_unique\n |      True\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 1])\n |      &gt;&gt;&gt; s.is_unique\n |      False\n |\n |  nbytes\n |      Return the number of bytes in the underlying data.\n |\n |      Examples\n |      --------\n |      For Series:\n |\n |      &gt;&gt;&gt; s = pd.Series(['Ant', 'Bear', 'Cow'])\n |      &gt;&gt;&gt; s\n |      0     Ant\n |      1    Bear\n |      2     Cow\n |      dtype: object\n |      &gt;&gt;&gt; s.nbytes\n |      24\n |\n |      For Index:\n |\n |      &gt;&gt;&gt; idx = pd.Index([1, 2, 3])\n |      &gt;&gt;&gt; idx\n |      Index([1, 2, 3], dtype='int64')\n |      &gt;&gt;&gt; idx.nbytes\n |      24\n |\n |  ndim\n |      Number of dimensions of the underlying data, by definition 1.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(['Ant', 'Bear', 'Cow'])\n |      &gt;&gt;&gt; s\n |      0     Ant\n |      1    Bear\n |      2     Cow\n |      dtype: object\n |      &gt;&gt;&gt; s.ndim\n |      1\n |\n |      For Index:\n |\n |      &gt;&gt;&gt; idx = pd.Index([1, 2, 3])\n |      &gt;&gt;&gt; idx\n |      Index([1, 2, 3], dtype='int64')\n |      &gt;&gt;&gt; idx.ndim\n |      1\n |\n |  shape\n |      Return a tuple of the shape of the underlying data.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s.shape\n |      (3,)\n |\n |  size\n |      Return the number of elements in the underlying data.\n |\n |      Examples\n |      --------\n |      For Series:\n |\n |      &gt;&gt;&gt; s = pd.Series(['Ant', 'Bear', 'Cow'])\n |      &gt;&gt;&gt; s\n |      0     Ant\n |      1    Bear\n |      2     Cow\n |      dtype: object\n |      &gt;&gt;&gt; s.size\n |      3\n |\n |      For Index:\n |\n |      &gt;&gt;&gt; idx = pd.Index([1, 2, 3])\n |      &gt;&gt;&gt; idx\n |      Index([1, 2, 3], dtype='int64')\n |      &gt;&gt;&gt; idx.size\n |      3\n |\n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from pandas.core.base.IndexOpsMixin:\n |\n |  __array_priority__ = 1000\n |\n |  ----------------------------------------------------------------------\n |  Methods inherited from pandas.core.arraylike.OpsMixin:\n |\n |  __add__(self, other)\n |      Get Addition of DataFrame and other, column-wise.\n |\n |      Equivalent to ``DataFrame.add(other)``.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Object to be added to the DataFrame.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          The result of adding ``other`` to DataFrame.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add a DataFrame and another object, with option for index-\n |          or column-oriented addition.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'height': [1.5, 2.6], 'weight': [500, 800]},\n |      ...                   index=['elk', 'moose'])\n |      &gt;&gt;&gt; df\n |             height  weight\n |      elk       1.5     500\n |      moose     2.6     800\n |\n |      Adding a scalar affects all rows and columns.\n |\n |      &gt;&gt;&gt; df[['height', 'weight']] + 1.5\n |             height  weight\n |      elk       3.0   501.5\n |      moose     4.1   801.5\n |\n |      Each element of a list is added to a column of the DataFrame, in order.\n |\n |      &gt;&gt;&gt; df[['height', 'weight']] + [0.5, 1.5]\n |             height  weight\n |      elk       2.0   501.5\n |      moose     3.1   801.5\n |\n |      Keys of a dictionary are aligned to the DataFrame, based on column names;\n |      each value in the dictionary is added to the corresponding column.\n |\n |      &gt;&gt;&gt; df[['height', 'weight']] + {'height': 0.5, 'weight': 1.5}\n |             height  weight\n |      elk       2.0   501.5\n |      moose     3.1   801.5\n |\n |      When `other` is a :class:`Series`, the index of `other` is aligned with the\n |      columns of the DataFrame.\n |\n |      &gt;&gt;&gt; s1 = pd.Series([0.5, 1.5], index=['weight', 'height'])\n |      &gt;&gt;&gt; df[['height', 'weight']] + s1\n |             height  weight\n |      elk       3.0   500.5\n |      moose     4.1   800.5\n |\n |      Even when the index of `other` is the same as the index of the DataFrame,\n |      the :class:`Series` will not be reoriented. If index-wise alignment is desired,\n |      :meth:`DataFrame.add` should be used with `axis='index'`.\n |\n |      &gt;&gt;&gt; s2 = pd.Series([0.5, 1.5], index=['elk', 'moose'])\n |      &gt;&gt;&gt; df[['height', 'weight']] + s2\n |             elk  height  moose  weight\n |      elk    NaN     NaN    NaN     NaN\n |      moose  NaN     NaN    NaN     NaN\n |\n |      &gt;&gt;&gt; df[['height', 'weight']].add(s2, axis='index')\n |             height  weight\n |      elk       2.0   500.5\n |      moose     4.1   801.5\n |\n |      When `other` is a :class:`DataFrame`, both columns names and the\n |      index are aligned.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'height': [0.2, 0.4, 0.6]},\n |      ...                      index=['elk', 'moose', 'deer'])\n |      &gt;&gt;&gt; df[['height', 'weight']] + other\n |             height  weight\n |      deer      NaN     NaN\n |      elk       1.7     NaN\n |      moose     3.0     NaN\n |\n |  __and__(self, other)\n |\n |  __divmod__(self, other)\n |\n |  __eq__(self, other)\n |      Return self==value.\n |\n |  __floordiv__(self, other)\n |\n |  __ge__(self, other)\n |      Return self&gt;=value.\n |\n |  __gt__(self, other)\n |      Return self&gt;value.\n |\n |  __le__(self, other)\n |      Return self&lt;=value.\n |\n |  __lt__(self, other)\n |      Return self&lt;value.\n |\n |  __mod__(self, other)\n |\n |  __mul__(self, other)\n |\n |  __ne__(self, other)\n |      Return self!=value.\n |\n |  __or__(self, other)\n |      Return self|value.\n |\n |  __pow__(self, other)\n |\n |  __radd__(self, other)\n |\n |  __rand__(self, other)\n |\n |  __rdivmod__(self, other)\n |\n |  __rfloordiv__(self, other)\n |\n |  __rmod__(self, other)\n |\n |  __rmul__(self, other)\n |\n |  __ror__(self, other)\n |      Return value|self.\n |\n |  __rpow__(self, other)\n |\n |  __rsub__(self, other)\n |\n |  __rtruediv__(self, other)\n |\n |  __rxor__(self, other)\n |\n |  __sub__(self, other)\n |\n |  __truediv__(self, other)\n |\n |  __xor__(self, other)\n |\n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from pandas.core.arraylike.OpsMixin:\n |\n |  __dict__\n |      dictionary for instance variables\n |\n |  __weakref__\n |      list of weak references to the object\n |\n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from pandas.core.arraylike.OpsMixin:\n |\n |  __hash__ = None\n |\n |  ----------------------------------------------------------------------\n |  Methods inherited from pandas.core.generic.NDFrame:\n |\n |  __abs__(self) -&gt; 'Self'\n |\n |  __array_ufunc__(self, ufunc: 'np.ufunc', method: 'str', *inputs: 'Any', **kwargs: 'Any')\n |\n |  __bool__ = __nonzero__(self) -&gt; 'NoReturn'\n |\n |  __contains__(self, key) -&gt; 'bool_t'\n |      True if the key is in the info axis\n |\n |  __copy__(self, deep: 'bool_t' = True) -&gt; 'Self'\n |\n |  __deepcopy__(self, memo=None) -&gt; 'Self'\n |      Parameters\n |      ----------\n |      memo, default None\n |          Standard signature. Unused\n |\n |  __delitem__(self, key) -&gt; 'None'\n |      Delete item\n |\n |  __finalize__(self, other, method: 'str | None' = None, **kwargs) -&gt; 'Self'\n |      Propagate metadata from other to self.\n |\n |      Parameters\n |      ----------\n |      other : the object from which to get the attributes that we are going\n |          to propagate\n |      method : str, optional\n |          A passed method name providing context on where ``__finalize__``\n |          was called.\n |\n |          .. warning::\n |\n |             The value passed as `method` are not currently considered\n |             stable across pandas releases.\n |\n |  __getattr__(self, name: 'str')\n |      After regular attribute access, try looking up the name\n |      This allows simpler access to columns for interactive use.\n |\n |  __getstate__(self) -&gt; 'dict[str, Any]'\n |      Helper for pickle.\n |\n |  __iadd__(self, other) -&gt; 'Self'\n |\n |  __iand__(self, other) -&gt; 'Self'\n |\n |  __ifloordiv__(self, other) -&gt; 'Self'\n |\n |  __imod__(self, other) -&gt; 'Self'\n |\n |  __imul__(self, other) -&gt; 'Self'\n |\n |  __invert__(self) -&gt; 'Self'\n |\n |  __ior__(self, other) -&gt; 'Self'\n |\n |  __ipow__(self, other) -&gt; 'Self'\n |\n |  __isub__(self, other) -&gt; 'Self'\n |\n |  __itruediv__(self, other) -&gt; 'Self'\n |\n |  __ixor__(self, other) -&gt; 'Self'\n |\n |  __neg__(self) -&gt; 'Self'\n |\n |  __nonzero__(self) -&gt; 'NoReturn'\n |\n |  __pos__(self) -&gt; 'Self'\n |\n |  __round__(self, decimals: 'int' = 0) -&gt; 'Self'\n |\n |  __setattr__(self, name: 'str', value) -&gt; 'None'\n |      After regular attribute access, try setting the name\n |      This allows simpler access to columns for interactive use.\n |\n |  __setstate__(self, state) -&gt; 'None'\n |\n |  abs(self) -&gt; 'Self'\n |      Return a Series/DataFrame with absolute numeric value of each element.\n |\n |      This function only applies to elements that are all numeric.\n |\n |      Returns\n |      -------\n |      abs\n |          Series/DataFrame containing the absolute value of each element.\n |\n |      See Also\n |      --------\n |      numpy.absolute : Calculate the absolute value element-wise.\n |\n |      Notes\n |      -----\n |      For ``complex`` inputs, ``1.2 + 1j``, the absolute value is\n |      :math:`\\sqrt{ a^2 + b^2 }`.\n |\n |      Examples\n |      --------\n |      Absolute numeric values in a Series.\n |\n |      &gt;&gt;&gt; s = pd.Series([-1.10, 2, -3.33, 4])\n |      &gt;&gt;&gt; s.abs()\n |      0    1.10\n |      1    2.00\n |      2    3.33\n |      3    4.00\n |      dtype: float64\n |\n |      Absolute numeric values in a Series with complex numbers.\n |\n |      &gt;&gt;&gt; s = pd.Series([1.2 + 1j])\n |      &gt;&gt;&gt; s.abs()\n |      0    1.56205\n |      dtype: float64\n |\n |      Absolute numeric values in a Series with a Timedelta element.\n |\n |      &gt;&gt;&gt; s = pd.Series([pd.Timedelta('1 days')])\n |      &gt;&gt;&gt; s.abs()\n |      0   1 days\n |      dtype: timedelta64[ns]\n |\n |      Select rows with data closest to certain value using argsort (from\n |      `StackOverflow &lt;https://stackoverflow.com/a/17758115&gt;`__).\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     'a': [4, 5, 6, 7],\n |      ...     'b': [10, 20, 30, 40],\n |      ...     'c': [100, 50, -30, -50]\n |      ... })\n |      &gt;&gt;&gt; df\n |           a    b    c\n |      0    4   10  100\n |      1    5   20   50\n |      2    6   30  -30\n |      3    7   40  -50\n |      &gt;&gt;&gt; df.loc[(df.c - 43).abs().argsort()]\n |           a    b    c\n |      1    5   20   50\n |      0    4   10  100\n |      2    6   30  -30\n |      3    7   40  -50\n |\n |  add_prefix(self, prefix: 'str', axis: 'Axis | None' = None) -&gt; 'Self'\n |      Prefix labels with string `prefix`.\n |\n |      For Series, the row labels are prefixed.\n |      For DataFrame, the column labels are prefixed.\n |\n |      Parameters\n |      ----------\n |      prefix : str\n |          The string to add before each label.\n |      axis : {0 or 'index', 1 or 'columns', None}, default None\n |          Axis to add prefix on\n |\n |          .. versionadded:: 2.0.0\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          New Series or DataFrame with updated labels.\n |\n |      See Also\n |      --------\n |      Series.add_suffix: Suffix row labels with string `suffix`.\n |      DataFrame.add_suffix: Suffix column labels with string `suffix`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4])\n |      &gt;&gt;&gt; s\n |      0    1\n |      1    2\n |      2    3\n |      3    4\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s.add_prefix('item_')\n |      item_0    1\n |      item_1    2\n |      item_2    3\n |      item_3    4\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  1  3\n |      1  2  4\n |      2  3  5\n |      3  4  6\n |\n |      &gt;&gt;&gt; df.add_prefix('col_')\n |           col_A  col_B\n |      0       1       3\n |      1       2       4\n |      2       3       5\n |      3       4       6\n |\n |  add_suffix(self, suffix: 'str', axis: 'Axis | None' = None) -&gt; 'Self'\n |      Suffix labels with string `suffix`.\n |\n |      For Series, the row labels are suffixed.\n |      For DataFrame, the column labels are suffixed.\n |\n |      Parameters\n |      ----------\n |      suffix : str\n |          The string to add after each label.\n |      axis : {0 or 'index', 1 or 'columns', None}, default None\n |          Axis to add suffix on\n |\n |          .. versionadded:: 2.0.0\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          New Series or DataFrame with updated labels.\n |\n |      See Also\n |      --------\n |      Series.add_prefix: Prefix row labels with string `prefix`.\n |      DataFrame.add_prefix: Prefix column labels with string `prefix`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4])\n |      &gt;&gt;&gt; s\n |      0    1\n |      1    2\n |      2    3\n |      3    4\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s.add_suffix('_item')\n |      0_item    1\n |      1_item    2\n |      2_item    3\n |      3_item    4\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  1  3\n |      1  2  4\n |      2  3  5\n |      3  4  6\n |\n |      &gt;&gt;&gt; df.add_suffix('_col')\n |           A_col  B_col\n |      0       1       3\n |      1       2       4\n |      2       3       5\n |      3       4       6\n |\n |  align(self, other: 'NDFrameT', join: 'AlignJoin' = 'outer', axis: 'Axis | None' = None, level: 'Level | None' = None, copy: 'bool_t | None' = None, fill_value: 'Hashable | None' = None, method: 'FillnaOptions | None | lib.NoDefault' = &lt;no_default&gt;, limit: 'int | None | lib.NoDefault' = &lt;no_default&gt;, fill_axis: 'Axis | lib.NoDefault' = &lt;no_default&gt;, broadcast_axis: 'Axis | None | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'tuple[Self, NDFrameT]'\n |      Align two objects on their axes with the specified join method.\n |\n |      Join method is specified for each axis Index.\n |\n |      Parameters\n |      ----------\n |      other : DataFrame or Series\n |      join : {'outer', 'inner', 'left', 'right'}, default 'outer'\n |          Type of alignment to be performed.\n |\n |          * left: use only keys from left frame, preserve key order.\n |          * right: use only keys from right frame, preserve key order.\n |          * outer: use union of keys from both frames, sort keys lexicographically.\n |          * inner: use intersection of keys from both frames,\n |            preserve the order of the left keys.\n |\n |      axis : allowed axis of the other object, default None\n |          Align on index (0), columns (1), or both (None).\n |      level : int or level name, default None\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      copy : bool, default True\n |          Always returns new objects. If copy=False and no reindexing is\n |          required then original objects are returned.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      fill_value : scalar, default np.nan\n |          Value to use for missing values. Defaults to NaN, but can be any\n |          \"compatible\" value.\n |      method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n |          Method to use for filling holes in reindexed Series:\n |\n |          - pad / ffill: propagate last valid observation forward to next valid.\n |          - backfill / bfill: use NEXT valid observation to fill gap.\n |\n |          .. deprecated:: 2.1\n |\n |      limit : int, default None\n |          If method is specified, this is the maximum number of consecutive\n |          NaN values to forward/backward fill. In other words, if there is\n |          a gap with more than this number of consecutive NaNs, it will only\n |          be partially filled. If method is not specified, this is the\n |          maximum number of entries along the entire axis where NaNs will be\n |          filled. Must be greater than 0 if not None.\n |\n |          .. deprecated:: 2.1\n |\n |      fill_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default 0\n |          Filling axis, method and limit.\n |\n |          .. deprecated:: 2.1\n |\n |      broadcast_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default None\n |          Broadcast values along this axis, if aligning two objects of\n |          different dimensions.\n |\n |          .. deprecated:: 2.1\n |\n |      Returns\n |      -------\n |      tuple of (Series/DataFrame, type of other)\n |          Aligned objects.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(\n |      ...     [[1, 2, 3, 4], [6, 7, 8, 9]], columns=[\"D\", \"B\", \"E\", \"A\"], index=[1, 2]\n |      ... )\n |      &gt;&gt;&gt; other = pd.DataFrame(\n |      ...     [[10, 20, 30, 40], [60, 70, 80, 90], [600, 700, 800, 900]],\n |      ...     columns=[\"A\", \"B\", \"C\", \"D\"],\n |      ...     index=[2, 3, 4],\n |      ... )\n |      &gt;&gt;&gt; df\n |         D  B  E  A\n |      1  1  2  3  4\n |      2  6  7  8  9\n |      &gt;&gt;&gt; other\n |          A    B    C    D\n |      2   10   20   30   40\n |      3   60   70   80   90\n |      4  600  700  800  900\n |\n |      Align on columns:\n |\n |      &gt;&gt;&gt; left, right = df.align(other, join=\"outer\", axis=1)\n |      &gt;&gt;&gt; left\n |         A  B   C  D  E\n |      1  4  2 NaN  1  3\n |      2  9  7 NaN  6  8\n |      &gt;&gt;&gt; right\n |          A    B    C    D   E\n |      2   10   20   30   40 NaN\n |      3   60   70   80   90 NaN\n |      4  600  700  800  900 NaN\n |\n |      We can also align on the index:\n |\n |      &gt;&gt;&gt; left, right = df.align(other, join=\"outer\", axis=0)\n |      &gt;&gt;&gt; left\n |          D    B    E    A\n |      1  1.0  2.0  3.0  4.0\n |      2  6.0  7.0  8.0  9.0\n |      3  NaN  NaN  NaN  NaN\n |      4  NaN  NaN  NaN  NaN\n |      &gt;&gt;&gt; right\n |          A      B      C      D\n |      1    NaN    NaN    NaN    NaN\n |      2   10.0   20.0   30.0   40.0\n |      3   60.0   70.0   80.0   90.0\n |      4  600.0  700.0  800.0  900.0\n |\n |      Finally, the default `axis=None` will align on both index and columns:\n |\n |      &gt;&gt;&gt; left, right = df.align(other, join=\"outer\", axis=None)\n |      &gt;&gt;&gt; left\n |           A    B   C    D    E\n |      1  4.0  2.0 NaN  1.0  3.0\n |      2  9.0  7.0 NaN  6.0  8.0\n |      3  NaN  NaN NaN  NaN  NaN\n |      4  NaN  NaN NaN  NaN  NaN\n |      &gt;&gt;&gt; right\n |             A      B      C      D   E\n |      1    NaN    NaN    NaN    NaN NaN\n |      2   10.0   20.0   30.0   40.0 NaN\n |      3   60.0   70.0   80.0   90.0 NaN\n |      4  600.0  700.0  800.0  900.0 NaN\n |\n |  asfreq(self, freq: 'Frequency', method: 'FillnaOptions | None' = None, how: \"Literal['start', 'end'] | None\" = None, normalize: 'bool_t' = False, fill_value: 'Hashable | None' = None) -&gt; 'Self'\n |      Convert time series to specified frequency.\n |\n |      Returns the original data conformed to a new index with the specified\n |      frequency.\n |\n |      If the index of this Series/DataFrame is a :class:`~pandas.PeriodIndex`, the new index\n |      is the result of transforming the original index with\n |      :meth:`PeriodIndex.asfreq &lt;pandas.PeriodIndex.asfreq&gt;` (so the original index\n |      will map one-to-one to the new index).\n |\n |      Otherwise, the new index will be equivalent to ``pd.date_range(start, end,\n |      freq=freq)`` where ``start`` and ``end`` are, respectively, the first and\n |      last entries in the original index (see :func:`pandas.date_range`). The\n |      values corresponding to any timesteps in the new index which were not present\n |      in the original index will be null (``NaN``), unless a method for filling\n |      such unknowns is provided (see the ``method`` parameter below).\n |\n |      The :meth:`resample` method is more appropriate if an operation on each group of\n |      timesteps (such as an aggregate) is necessary to represent the data at the new\n |      frequency.\n |\n |      Parameters\n |      ----------\n |      freq : DateOffset or str\n |          Frequency DateOffset or string.\n |      method : {'backfill'/'bfill', 'pad'/'ffill'}, default None\n |          Method to use for filling holes in reindexed Series (note this\n |          does not fill NaNs that already were present):\n |\n |          * 'pad' / 'ffill': propagate last valid observation forward to next\n |            valid\n |          * 'backfill' / 'bfill': use NEXT valid observation to fill.\n |      how : {'start', 'end'}, default end\n |          For PeriodIndex only (see PeriodIndex.asfreq).\n |      normalize : bool, default False\n |          Whether to reset output index to midnight.\n |      fill_value : scalar, optional\n |          Value to use for missing values, applied during upsampling (note\n |          this does not fill NaNs that already were present).\n |\n |      Returns\n |      -------\n |      Series/DataFrame\n |          Series/DataFrame object reindexed to the specified frequency.\n |\n |      See Also\n |      --------\n |      reindex : Conform DataFrame to new index with optional filling logic.\n |\n |      Notes\n |      -----\n |      To learn more about the frequency strings, please see `this link\n |      &lt;https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases&gt;`__.\n |\n |      Examples\n |      --------\n |      Start by creating a series with 4 one minute timestamps.\n |\n |      &gt;&gt;&gt; index = pd.date_range('1/1/2000', periods=4, freq='min')\n |      &gt;&gt;&gt; series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n |      &gt;&gt;&gt; df = pd.DataFrame({'s': series})\n |      &gt;&gt;&gt; df\n |                             s\n |      2000-01-01 00:00:00    0.0\n |      2000-01-01 00:01:00    NaN\n |      2000-01-01 00:02:00    2.0\n |      2000-01-01 00:03:00    3.0\n |\n |      Upsample the series into 30 second bins.\n |\n |      &gt;&gt;&gt; df.asfreq(freq='30s')\n |                             s\n |      2000-01-01 00:00:00    0.0\n |      2000-01-01 00:00:30    NaN\n |      2000-01-01 00:01:00    NaN\n |      2000-01-01 00:01:30    NaN\n |      2000-01-01 00:02:00    2.0\n |      2000-01-01 00:02:30    NaN\n |      2000-01-01 00:03:00    3.0\n |\n |      Upsample again, providing a ``fill value``.\n |\n |      &gt;&gt;&gt; df.asfreq(freq='30s', fill_value=9.0)\n |                             s\n |      2000-01-01 00:00:00    0.0\n |      2000-01-01 00:00:30    9.0\n |      2000-01-01 00:01:00    NaN\n |      2000-01-01 00:01:30    9.0\n |      2000-01-01 00:02:00    2.0\n |      2000-01-01 00:02:30    9.0\n |      2000-01-01 00:03:00    3.0\n |\n |      Upsample again, providing a ``method``.\n |\n |      &gt;&gt;&gt; df.asfreq(freq='30s', method='bfill')\n |                             s\n |      2000-01-01 00:00:00    0.0\n |      2000-01-01 00:00:30    NaN\n |      2000-01-01 00:01:00    NaN\n |      2000-01-01 00:01:30    2.0\n |      2000-01-01 00:02:00    2.0\n |      2000-01-01 00:02:30    3.0\n |      2000-01-01 00:03:00    3.0\n |\n |  asof(self, where, subset=None)\n |      Return the last row(s) without any NaNs before `where`.\n |\n |      The last row (for each element in `where`, if list) without any\n |      NaN is taken.\n |      In case of a :class:`~pandas.DataFrame`, the last row without NaN\n |      considering only the subset of columns (if not `None`)\n |\n |      If there is no good value, NaN is returned for a Series or\n |      a Series of NaN values for a DataFrame\n |\n |      Parameters\n |      ----------\n |      where : date or array-like of dates\n |          Date(s) before which the last row(s) are returned.\n |      subset : str or array-like of str, default `None`\n |          For DataFrame, if not `None`, only use these columns to\n |          check for NaNs.\n |\n |      Returns\n |      -------\n |      scalar, Series, or DataFrame\n |\n |          The return can be:\n |\n |          * scalar : when `self` is a Series and `where` is a scalar\n |          * Series: when `self` is a Series and `where` is an array-like,\n |            or when `self` is a DataFrame and `where` is a scalar\n |          * DataFrame : when `self` is a DataFrame and `where` is an\n |            array-like\n |\n |      See Also\n |      --------\n |      merge_asof : Perform an asof merge. Similar to left join.\n |\n |      Notes\n |      -----\n |      Dates are assumed to be sorted. Raises if this is not the case.\n |\n |      Examples\n |      --------\n |      A Series and a scalar `where`.\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n |      &gt;&gt;&gt; s\n |      10    1.0\n |      20    2.0\n |      30    NaN\n |      40    4.0\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s.asof(20)\n |      2.0\n |\n |      For a sequence `where`, a Series is returned. The first value is\n |      NaN, because the first element of `where` is before the first\n |      index value.\n |\n |      &gt;&gt;&gt; s.asof([5, 20])\n |      5     NaN\n |      20    2.0\n |      dtype: float64\n |\n |      Missing values are not considered. The following is ``2.0``, not\n |      NaN, even though NaN is at the index location for ``30``.\n |\n |      &gt;&gt;&gt; s.asof(30)\n |      2.0\n |\n |      Take all columns into consideration\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'a': [10., 20., 30., 40., 50.],\n |      ...                    'b': [None, None, None, None, 500]},\n |      ...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',\n |      ...                                           '2018-02-27 09:02:00',\n |      ...                                           '2018-02-27 09:03:00',\n |      ...                                           '2018-02-27 09:04:00',\n |      ...                                           '2018-02-27 09:05:00']))\n |      &gt;&gt;&gt; df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n |      ...                           '2018-02-27 09:04:30']))\n |                            a   b\n |      2018-02-27 09:03:30 NaN NaN\n |      2018-02-27 09:04:30 NaN NaN\n |\n |      Take a single column into consideration\n |\n |      &gt;&gt;&gt; df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n |      ...                           '2018-02-27 09:04:30']),\n |      ...         subset=['a'])\n |                              a   b\n |      2018-02-27 09:03:30  30.0 NaN\n |      2018-02-27 09:04:30  40.0 NaN\n |\n |  astype(self, dtype, copy: 'bool_t | None' = None, errors: 'IgnoreRaise' = 'raise') -&gt; 'Self'\n |      Cast a pandas object to a specified dtype ``dtype``.\n |\n |      Parameters\n |      ----------\n |      dtype : str, data type, Series or Mapping of column name -&gt; data type\n |          Use a str, numpy.dtype, pandas.ExtensionDtype or Python type to\n |          cast entire pandas object to the same type. Alternatively, use a\n |          mapping, e.g. {col: dtype, ...}, where col is a column label and dtype is\n |          a numpy.dtype or Python type to cast one or more of the DataFrame's\n |          columns to column-specific types.\n |      copy : bool, default True\n |          Return a copy when ``copy=True`` (be very careful setting\n |          ``copy=False`` as changes to values then may propagate to other\n |          pandas objects).\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      errors : {'raise', 'ignore'}, default 'raise'\n |          Control raising of exceptions on invalid data for provided dtype.\n |\n |          - ``raise`` : allow exceptions to be raised\n |          - ``ignore`` : suppress exceptions. On error return original object.\n |\n |      Returns\n |      -------\n |      same type as caller\n |\n |      See Also\n |      --------\n |      to_datetime : Convert argument to datetime.\n |      to_timedelta : Convert argument to timedelta.\n |      to_numeric : Convert argument to a numeric type.\n |      numpy.ndarray.astype : Cast a numpy array to a specified type.\n |\n |      Notes\n |      -----\n |      .. versionchanged:: 2.0.0\n |\n |          Using ``astype`` to convert from timezone-naive dtype to\n |          timezone-aware dtype will raise an exception.\n |          Use :meth:`Series.dt.tz_localize` instead.\n |\n |      Examples\n |      --------\n |      Create a DataFrame:\n |\n |      &gt;&gt;&gt; d = {'col1': [1, 2], 'col2': [3, 4]}\n |      &gt;&gt;&gt; df = pd.DataFrame(data=d)\n |      &gt;&gt;&gt; df.dtypes\n |      col1    int64\n |      col2    int64\n |      dtype: object\n |\n |      Cast all columns to int32:\n |\n |      &gt;&gt;&gt; df.astype('int32').dtypes\n |      col1    int32\n |      col2    int32\n |      dtype: object\n |\n |      Cast col1 to int32 using a dictionary:\n |\n |      &gt;&gt;&gt; df.astype({'col1': 'int32'}).dtypes\n |      col1    int32\n |      col2    int64\n |      dtype: object\n |\n |      Create a series:\n |\n |      &gt;&gt;&gt; ser = pd.Series([1, 2], dtype='int32')\n |      &gt;&gt;&gt; ser\n |      0    1\n |      1    2\n |      dtype: int32\n |      &gt;&gt;&gt; ser.astype('int64')\n |      0    1\n |      1    2\n |      dtype: int64\n |\n |      Convert to categorical type:\n |\n |      &gt;&gt;&gt; ser.astype('category')\n |      0    1\n |      1    2\n |      dtype: category\n |      Categories (2, int32): [1, 2]\n |\n |      Convert to ordered categorical type with custom ordering:\n |\n |      &gt;&gt;&gt; from pandas.api.types import CategoricalDtype\n |      &gt;&gt;&gt; cat_dtype = CategoricalDtype(\n |      ...     categories=[2, 1], ordered=True)\n |      &gt;&gt;&gt; ser.astype(cat_dtype)\n |      0    1\n |      1    2\n |      dtype: category\n |      Categories (2, int64): [2 &lt; 1]\n |\n |      Create a series of dates:\n |\n |      &gt;&gt;&gt; ser_date = pd.Series(pd.date_range('20200101', periods=3))\n |      &gt;&gt;&gt; ser_date\n |      0   2020-01-01\n |      1   2020-01-02\n |      2   2020-01-03\n |      dtype: datetime64[ns]\n |\n |  at_time(self, time, asof: 'bool_t' = False, axis: 'Axis | None' = None) -&gt; 'Self'\n |      Select values at particular time of day (e.g., 9:30AM).\n |\n |      Parameters\n |      ----------\n |      time : datetime.time or str\n |          The values to select.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |\n |      Raises\n |      ------\n |      TypeError\n |          If the index is not  a :class:`DatetimeIndex`\n |\n |      See Also\n |      --------\n |      between_time : Select values between particular times of the day.\n |      first : Select initial periods of time series based on a date offset.\n |      last : Select final periods of time series based on a date offset.\n |      DatetimeIndex.indexer_at_time : Get just the index locations for\n |          values at particular time of the day.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; i = pd.date_range('2018-04-09', periods=4, freq='12h')\n |      &gt;&gt;&gt; ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n |      &gt;&gt;&gt; ts\n |                           A\n |      2018-04-09 00:00:00  1\n |      2018-04-09 12:00:00  2\n |      2018-04-10 00:00:00  3\n |      2018-04-10 12:00:00  4\n |\n |      &gt;&gt;&gt; ts.at_time('12:00')\n |                           A\n |      2018-04-09 12:00:00  2\n |      2018-04-10 12:00:00  4\n |\n |  backfill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'Self | None'\n |      Fill NA/NaN values by using the next valid observation to fill the gap.\n |\n |      .. deprecated:: 2.0\n |\n |          Series/DataFrame.backfill is deprecated. Use Series/DataFrame.bfill instead.\n |\n |      Returns\n |      -------\n |      Series/DataFrame or None\n |          Object with missing values filled or None if ``inplace=True``.\n |\n |      Examples\n |      --------\n |      Please see examples for :meth:`DataFrame.bfill` or :meth:`Series.bfill`.\n |\n |  between_time(self, start_time, end_time, inclusive: 'IntervalClosedType' = 'both', axis: 'Axis | None' = None) -&gt; 'Self'\n |      Select values between particular times of the day (e.g., 9:00-9:30 AM).\n |\n |      By setting ``start_time`` to be later than ``end_time``,\n |      you can get the times that are *not* between the two times.\n |\n |      Parameters\n |      ----------\n |      start_time : datetime.time or str\n |          Initial time as a time filter limit.\n |      end_time : datetime.time or str\n |          End time as a time filter limit.\n |      inclusive : {\"both\", \"neither\", \"left\", \"right\"}, default \"both\"\n |          Include boundaries; whether to set each bound as closed or open.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Determine range time on index or columns value.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Data from the original object filtered to the specified dates range.\n |\n |      Raises\n |      ------\n |      TypeError\n |          If the index is not  a :class:`DatetimeIndex`\n |\n |      See Also\n |      --------\n |      at_time : Select values at a particular time of the day.\n |      first : Select initial periods of time series based on a date offset.\n |      last : Select final periods of time series based on a date offset.\n |      DatetimeIndex.indexer_between_time : Get just the index locations for\n |          values between particular times of the day.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; i = pd.date_range('2018-04-09', periods=4, freq='1D20min')\n |      &gt;&gt;&gt; ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n |      &gt;&gt;&gt; ts\n |                           A\n |      2018-04-09 00:00:00  1\n |      2018-04-10 00:20:00  2\n |      2018-04-11 00:40:00  3\n |      2018-04-12 01:00:00  4\n |\n |      &gt;&gt;&gt; ts.between_time('0:15', '0:45')\n |                           A\n |      2018-04-10 00:20:00  2\n |      2018-04-11 00:40:00  3\n |\n |      You get the times that are *not* between two times by setting\n |      ``start_time`` later than ``end_time``:\n |\n |      &gt;&gt;&gt; ts.between_time('0:45', '0:15')\n |                           A\n |      2018-04-09 00:00:00  1\n |      2018-04-12 01:00:00  4\n |\n |  bfill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: \"Literal['inside', 'outside'] | None\" = None, downcast: 'dict | None | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'Self | None'\n |      Fill NA/NaN values by using the next valid observation to fill the gap.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame\n |          Axis along which to fill missing values. For `Series`\n |          this parameter is unused and defaults to 0.\n |      inplace : bool, default False\n |          If True, fill in-place. Note: this will modify any\n |          other views on this object (e.g., a no-copy slice for a column in a\n |          DataFrame).\n |      limit : int, default None\n |          If method is specified, this is the maximum number of consecutive\n |          NaN values to forward/backward fill. In other words, if there is\n |          a gap with more than this number of consecutive NaNs, it will only\n |          be partially filled. If method is not specified, this is the\n |          maximum number of entries along the entire axis where NaNs will be\n |          filled. Must be greater than 0 if not None.\n |      limit_area : {`None`, 'inside', 'outside'}, default None\n |          If limit is specified, consecutive NaNs will be filled with this\n |          restriction.\n |\n |          * ``None``: No fill restriction.\n |          * 'inside': Only fill NaNs surrounded by valid values\n |            (interpolate).\n |          * 'outside': Only fill NaNs outside valid values (extrapolate).\n |\n |          .. versionadded:: 2.2.0\n |\n |      downcast : dict, default is None\n |          A dict of item-&gt;dtype of what to downcast if possible,\n |          or the string 'infer' which will try to downcast to an appropriate\n |          equal type (e.g. float64 to int64 if possible).\n |\n |          .. deprecated:: 2.2.0\n |\n |      Returns\n |      -------\n |      Series/DataFrame or None\n |          Object with missing values filled or None if ``inplace=True``.\n |\n |      Examples\n |      --------\n |      For Series:\n |\n |      &gt;&gt;&gt; s = pd.Series([1, None, None, 2])\n |      &gt;&gt;&gt; s.bfill()\n |      0    1.0\n |      1    2.0\n |      2    2.0\n |      3    2.0\n |      dtype: float64\n |      &gt;&gt;&gt; s.bfill(limit=1)\n |      0    1.0\n |      1    NaN\n |      2    2.0\n |      3    2.0\n |      dtype: float64\n |\n |      With DataFrame:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, None, None, 4], 'B': [None, 5, None, 7]})\n |      &gt;&gt;&gt; df\n |            A     B\n |      0   1.0   NaN\n |      1   NaN   5.0\n |      2   NaN   NaN\n |      3   4.0   7.0\n |      &gt;&gt;&gt; df.bfill()\n |            A     B\n |      0   1.0   5.0\n |      1   4.0   5.0\n |      2   4.0   7.0\n |      3   4.0   7.0\n |      &gt;&gt;&gt; df.bfill(limit=1)\n |            A     B\n |      0   1.0   5.0\n |      1   NaN   5.0\n |      2   4.0   7.0\n |      3   4.0   7.0\n |\n |  bool(self) -&gt; 'bool_t'\n |      Return the bool of a single element Series or DataFrame.\n |\n |      .. deprecated:: 2.1.0\n |\n |         bool is deprecated and will be removed in future version of pandas.\n |         For ``Series`` use ``pandas.Series.item``.\n |\n |      This must be a boolean scalar value, either True or False. It will raise a\n |      ValueError if the Series or DataFrame does not have exactly 1 element, or that\n |      element is not boolean (integer values 0 and 1 will also raise an exception).\n |\n |      Returns\n |      -------\n |      bool\n |          The value in the Series or DataFrame.\n |\n |      See Also\n |      --------\n |      Series.astype : Change the data type of a Series, including to boolean.\n |      DataFrame.astype : Change the data type of a DataFrame, including to boolean.\n |      numpy.bool_ : NumPy boolean data type, used by pandas for boolean values.\n |\n |      Examples\n |      --------\n |      The method will only work for single element objects with a boolean value:\n |\n |      &gt;&gt;&gt; pd.Series([True]).bool()  # doctest: +SKIP\n |      True\n |      &gt;&gt;&gt; pd.Series([False]).bool()  # doctest: +SKIP\n |      False\n |\n |      &gt;&gt;&gt; pd.DataFrame({'col': [True]}).bool()  # doctest: +SKIP\n |      True\n |      &gt;&gt;&gt; pd.DataFrame({'col': [False]}).bool()  # doctest: +SKIP\n |      False\n |\n |      This is an alternative method and will only work\n |      for single element objects with a boolean value:\n |\n |      &gt;&gt;&gt; pd.Series([True]).item()  # doctest: +SKIP\n |      True\n |      &gt;&gt;&gt; pd.Series([False]).item()  # doctest: +SKIP\n |      False\n |\n |  clip(self, lower=None, upper=None, *, axis: 'Axis | None' = None, inplace: 'bool_t' = False, **kwargs) -&gt; 'Self | None'\n |      Trim values at input threshold(s).\n |\n |      Assigns values outside boundary to boundary values. Thresholds\n |      can be singular values or array like, and in the latter case\n |      the clipping is performed element-wise in the specified axis.\n |\n |      Parameters\n |      ----------\n |      lower : float or array-like, default None\n |          Minimum threshold value. All values below this\n |          threshold will be set to it. A missing\n |          threshold (e.g `NA`) will not clip the value.\n |      upper : float or array-like, default None\n |          Maximum threshold value. All values above this\n |          threshold will be set to it. A missing\n |          threshold (e.g `NA`) will not clip the value.\n |      axis : {{0 or 'index', 1 or 'columns', None}}, default None\n |          Align object with lower and upper along the given axis.\n |          For `Series` this parameter is unused and defaults to `None`.\n |      inplace : bool, default False\n |          Whether to perform the operation in place on the data.\n |      *args, **kwargs\n |          Additional keywords have no effect but might be accepted\n |          for compatibility with numpy.\n |\n |      Returns\n |      -------\n |      Series or DataFrame or None\n |          Same type as calling object with the values outside the\n |          clip boundaries replaced or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      Series.clip : Trim values at input threshold in series.\n |      DataFrame.clip : Trim values at input threshold in dataframe.\n |      numpy.clip : Clip (limit) the values in an array.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}\n |      &gt;&gt;&gt; df = pd.DataFrame(data)\n |      &gt;&gt;&gt; df\n |         col_0  col_1\n |      0      9     -2\n |      1     -3     -7\n |      2      0      6\n |      3     -1      8\n |      4      5     -5\n |\n |      Clips per column using lower and upper thresholds:\n |\n |      &gt;&gt;&gt; df.clip(-4, 6)\n |         col_0  col_1\n |      0      6     -2\n |      1     -3     -4\n |      2      0      6\n |      3     -1      6\n |      4      5     -4\n |\n |      Clips using specific lower and upper thresholds per column:\n |\n |      &gt;&gt;&gt; df.clip([-2, -1], [4, 5])\n |          col_0  col_1\n |      0      4     -1\n |      1     -2     -1\n |      2      0      5\n |      3     -1      5\n |      4      4     -1\n |\n |      Clips using specific lower and upper thresholds per column element:\n |\n |      &gt;&gt;&gt; t = pd.Series([2, -4, -1, 6, 3])\n |      &gt;&gt;&gt; t\n |      0    2\n |      1   -4\n |      2   -1\n |      3    6\n |      4    3\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df.clip(t, t + 4, axis=0)\n |         col_0  col_1\n |      0      6      2\n |      1     -3     -4\n |      2      0      3\n |      3      6      8\n |      4      5      3\n |\n |      Clips using specific lower threshold per column element, with missing values:\n |\n |      &gt;&gt;&gt; t = pd.Series([2, -4, np.nan, 6, 3])\n |      &gt;&gt;&gt; t\n |      0    2.0\n |      1   -4.0\n |      2    NaN\n |      3    6.0\n |      4    3.0\n |      dtype: float64\n |\n |      &gt;&gt;&gt; df.clip(t, axis=0)\n |      col_0  col_1\n |      0      9      2\n |      1     -3     -4\n |      2      0      6\n |      3      6      8\n |      4      5      3\n |\n |  convert_dtypes(self, infer_objects: 'bool_t' = True, convert_string: 'bool_t' = True, convert_integer: 'bool_t' = True, convert_boolean: 'bool_t' = True, convert_floating: 'bool_t' = True, dtype_backend: 'DtypeBackend' = 'numpy_nullable') -&gt; 'Self'\n |      Convert columns to the best possible dtypes using dtypes supporting ``pd.NA``.\n |\n |      Parameters\n |      ----------\n |      infer_objects : bool, default True\n |          Whether object dtypes should be converted to the best possible types.\n |      convert_string : bool, default True\n |          Whether object dtypes should be converted to ``StringDtype()``.\n |      convert_integer : bool, default True\n |          Whether, if possible, conversion can be done to integer extension types.\n |      convert_boolean : bool, defaults True\n |          Whether object dtypes should be converted to ``BooleanDtypes()``.\n |      convert_floating : bool, defaults True\n |          Whether, if possible, conversion can be done to floating extension types.\n |          If `convert_integer` is also True, preference will be give to integer\n |          dtypes if the floats can be faithfully casted to integers.\n |      dtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n |          Back-end data type applied to the resultant :class:`DataFrame`\n |          (still experimental). Behaviour is as follows:\n |\n |          * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n |            (default).\n |          * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n |            DataFrame.\n |\n |          .. versionadded:: 2.0\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Copy of input object with new dtype.\n |\n |      See Also\n |      --------\n |      infer_objects : Infer dtypes of objects.\n |      to_datetime : Convert argument to datetime.\n |      to_timedelta : Convert argument to timedelta.\n |      to_numeric : Convert argument to a numeric type.\n |\n |      Notes\n |      -----\n |      By default, ``convert_dtypes`` will attempt to convert a Series (or each\n |      Series in a DataFrame) to dtypes that support ``pd.NA``. By using the options\n |      ``convert_string``, ``convert_integer``, ``convert_boolean`` and\n |      ``convert_floating``, it is possible to turn off individual conversions\n |      to ``StringDtype``, the integer extension types, ``BooleanDtype``\n |      or floating extension types, respectively.\n |\n |      For object-dtyped columns, if ``infer_objects`` is ``True``, use the inference\n |      rules as during normal Series/DataFrame construction.  Then, if possible,\n |      convert to ``StringDtype``, ``BooleanDtype`` or an appropriate integer\n |      or floating extension type, otherwise leave as ``object``.\n |\n |      If the dtype is integer, convert to an appropriate integer extension type.\n |\n |      If the dtype is numeric, and consists of all integers, convert to an\n |      appropriate integer extension type. Otherwise, convert to an\n |      appropriate floating extension type.\n |\n |      In the future, as new dtypes are added that support ``pd.NA``, the results\n |      of this method will change to support those new dtypes.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(\n |      ...     {\n |      ...         \"a\": pd.Series([1, 2, 3], dtype=np.dtype(\"int32\")),\n |      ...         \"b\": pd.Series([\"x\", \"y\", \"z\"], dtype=np.dtype(\"O\")),\n |      ...         \"c\": pd.Series([True, False, np.nan], dtype=np.dtype(\"O\")),\n |      ...         \"d\": pd.Series([\"h\", \"i\", np.nan], dtype=np.dtype(\"O\")),\n |      ...         \"e\": pd.Series([10, np.nan, 20], dtype=np.dtype(\"float\")),\n |      ...         \"f\": pd.Series([np.nan, 100.5, 200], dtype=np.dtype(\"float\")),\n |      ...     }\n |      ... )\n |\n |      Start with a DataFrame with default dtypes.\n |\n |      &gt;&gt;&gt; df\n |         a  b      c    d     e      f\n |      0  1  x   True    h  10.0    NaN\n |      1  2  y  False    i   NaN  100.5\n |      2  3  z    NaN  NaN  20.0  200.0\n |\n |      &gt;&gt;&gt; df.dtypes\n |      a      int32\n |      b     object\n |      c     object\n |      d     object\n |      e    float64\n |      f    float64\n |      dtype: object\n |\n |      Convert the DataFrame to use best possible dtypes.\n |\n |      &gt;&gt;&gt; dfn = df.convert_dtypes()\n |      &gt;&gt;&gt; dfn\n |         a  b      c     d     e      f\n |      0  1  x   True     h    10   &lt;NA&gt;\n |      1  2  y  False     i  &lt;NA&gt;  100.5\n |      2  3  z   &lt;NA&gt;  &lt;NA&gt;    20  200.0\n |\n |      &gt;&gt;&gt; dfn.dtypes\n |      a             Int32\n |      b    string[python]\n |      c           boolean\n |      d    string[python]\n |      e             Int64\n |      f           Float64\n |      dtype: object\n |\n |      Start with a Series of strings and missing data represented by ``np.nan``.\n |\n |      &gt;&gt;&gt; s = pd.Series([\"a\", \"b\", np.nan])\n |      &gt;&gt;&gt; s\n |      0      a\n |      1      b\n |      2    NaN\n |      dtype: object\n |\n |      Obtain a Series with dtype ``StringDtype``.\n |\n |      &gt;&gt;&gt; s.convert_dtypes()\n |      0       a\n |      1       b\n |      2    &lt;NA&gt;\n |      dtype: string\n |\n |  copy(self, deep: 'bool_t | None' = True) -&gt; 'Self'\n |      Make a copy of this object's indices and data.\n |\n |      When ``deep=True`` (default), a new object will be created with a\n |      copy of the calling object's data and indices. Modifications to\n |      the data or indices of the copy will not be reflected in the\n |      original object (see notes below).\n |\n |      When ``deep=False``, a new object will be created without copying\n |      the calling object's data or index (only references to the data\n |      and index are copied). Any changes to the data of the original\n |      will be reflected in the shallow copy (and vice versa).\n |\n |      .. note::\n |          The ``deep=False`` behaviour as described above will change\n |          in pandas 3.0. `Copy-on-Write\n |          &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |          will be enabled by default, which means that the \"shallow\" copy\n |          is that is returned with ``deep=False`` will still avoid making\n |          an eager copy, but changes to the data of the original will *no*\n |          longer be reflected in the shallow copy (or vice versa). Instead,\n |          it makes use of a lazy (deferred) copy mechanism that will copy\n |          the data only when any changes to the original or shallow copy is\n |          made.\n |\n |          You can already get the future behavior and improvements through\n |          enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Parameters\n |      ----------\n |      deep : bool, default True\n |          Make a deep copy, including a copy of the data and the indices.\n |          With ``deep=False`` neither the indices nor the data are copied.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Object type matches caller.\n |\n |      Notes\n |      -----\n |      When ``deep=True``, data is copied but actual Python objects\n |      will not be copied recursively, only the reference to the object.\n |      This is in contrast to `copy.deepcopy` in the Standard Library,\n |      which recursively copies object data (see examples below).\n |\n |      While ``Index`` objects are copied when ``deep=True``, the underlying\n |      numpy array is not copied for performance reasons. Since ``Index`` is\n |      immutable, the underlying data can be safely shared and a copy\n |      is not needed.\n |\n |      Since pandas is not thread safe, see the\n |      :ref:`gotchas &lt;gotchas.thread-safety&gt;` when copying in a threading\n |      environment.\n |\n |      When ``copy_on_write`` in pandas config is set to ``True``, the\n |      ``copy_on_write`` config takes effect even when ``deep=False``.\n |      This means that any changes to the copied data would make a new copy\n |      of the data upon write (and vice versa). Changes made to either the\n |      original or copied variable would not be reflected in the counterpart.\n |      See :ref:`Copy_on_Write &lt;copy_on_write&gt;` for more information.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2], index=[\"a\", \"b\"])\n |      &gt;&gt;&gt; s\n |      a    1\n |      b    2\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s_copy = s.copy()\n |      &gt;&gt;&gt; s_copy\n |      a    1\n |      b    2\n |      dtype: int64\n |\n |      **Shallow copy versus default (deep) copy:**\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2], index=[\"a\", \"b\"])\n |      &gt;&gt;&gt; deep = s.copy()\n |      &gt;&gt;&gt; shallow = s.copy(deep=False)\n |\n |      Shallow copy shares data and index with original.\n |\n |      &gt;&gt;&gt; s is shallow\n |      False\n |      &gt;&gt;&gt; s.values is shallow.values and s.index is shallow.index\n |      True\n |\n |      Deep copy has own copy of data and index.\n |\n |      &gt;&gt;&gt; s is deep\n |      False\n |      &gt;&gt;&gt; s.values is deep.values or s.index is deep.index\n |      False\n |\n |      Updates to the data shared by shallow copy and original is reflected\n |      in both (NOTE: this will no longer be true for pandas &gt;= 3.0);\n |      deep copy remains unchanged.\n |\n |      &gt;&gt;&gt; s.iloc[0] = 3\n |      &gt;&gt;&gt; shallow.iloc[1] = 4\n |      &gt;&gt;&gt; s\n |      a    3\n |      b    4\n |      dtype: int64\n |      &gt;&gt;&gt; shallow\n |      a    3\n |      b    4\n |      dtype: int64\n |      &gt;&gt;&gt; deep\n |      a    1\n |      b    2\n |      dtype: int64\n |\n |      Note that when copying an object containing Python objects, a deep copy\n |      will copy the data, but will not do so recursively. Updating a nested\n |      data object will be reflected in the deep copy.\n |\n |      &gt;&gt;&gt; s = pd.Series([[1, 2], [3, 4]])\n |      &gt;&gt;&gt; deep = s.copy()\n |      &gt;&gt;&gt; s[0][0] = 10\n |      &gt;&gt;&gt; s\n |      0    [10, 2]\n |      1     [3, 4]\n |      dtype: object\n |      &gt;&gt;&gt; deep\n |      0    [10, 2]\n |      1     [3, 4]\n |      dtype: object\n |\n |      **Copy-on-Write is set to true**, the shallow copy is not modified\n |      when the original data is changed:\n |\n |      &gt;&gt;&gt; with pd.option_context(\"mode.copy_on_write\", True):\n |      ...     s = pd.Series([1, 2], index=[\"a\", \"b\"])\n |      ...     copy = s.copy(deep=False)\n |      ...     s.iloc[0] = 100\n |      ...     s\n |      a    100\n |      b      2\n |      dtype: int64\n |      &gt;&gt;&gt; copy\n |      a    1\n |      b    2\n |      dtype: int64\n |\n |  describe(self, percentiles=None, include=None, exclude=None) -&gt; 'Self'\n |      Generate descriptive statistics.\n |\n |      Descriptive statistics include those that summarize the central\n |      tendency, dispersion and shape of a\n |      dataset's distribution, excluding ``NaN`` values.\n |\n |      Analyzes both numeric and object series, as well\n |      as ``DataFrame`` column sets of mixed data types. The output\n |      will vary depending on what is provided. Refer to the notes\n |      below for more detail.\n |\n |      Parameters\n |      ----------\n |      percentiles : list-like of numbers, optional\n |          The percentiles to include in the output. All should\n |          fall between 0 and 1. The default is\n |          ``[.25, .5, .75]``, which returns the 25th, 50th, and\n |          75th percentiles.\n |      include : 'all', list-like of dtypes or None (default), optional\n |          A white list of data types to include in the result. Ignored\n |          for ``Series``. Here are the options:\n |\n |          - 'all' : All columns of the input will be included in the output.\n |          - A list-like of dtypes : Limits the results to the\n |            provided data types.\n |            To limit the result to numeric types submit\n |            ``numpy.number``. To limit it instead to object columns submit\n |            the ``numpy.object`` data type. Strings\n |            can also be used in the style of\n |            ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n |            select pandas categorical columns, use ``'category'``\n |          - None (default) : The result will include all numeric columns.\n |      exclude : list-like of dtypes or None (default), optional,\n |          A black list of data types to omit from the result. Ignored\n |          for ``Series``. Here are the options:\n |\n |          - A list-like of dtypes : Excludes the provided data types\n |            from the result. To exclude numeric types submit\n |            ``numpy.number``. To exclude object columns submit the data\n |            type ``numpy.object``. Strings can also be used in the style of\n |            ``select_dtypes`` (e.g. ``df.describe(exclude=['O'])``). To\n |            exclude pandas categorical columns, use ``'category'``\n |          - None (default) : The result will exclude nothing.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Summary statistics of the Series or Dataframe provided.\n |\n |      See Also\n |      --------\n |      DataFrame.count: Count number of non-NA/null observations.\n |      DataFrame.max: Maximum of the values in the object.\n |      DataFrame.min: Minimum of the values in the object.\n |      DataFrame.mean: Mean of the values.\n |      DataFrame.std: Standard deviation of the observations.\n |      DataFrame.select_dtypes: Subset of a DataFrame including/excluding\n |          columns based on their dtype.\n |\n |      Notes\n |      -----\n |      For numeric data, the result's index will include ``count``,\n |      ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\n |      upper percentiles. By default the lower percentile is ``25`` and the\n |      upper percentile is ``75``. The ``50`` percentile is the\n |      same as the median.\n |\n |      For object data (e.g. strings or timestamps), the result's index\n |      will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\n |      is the most common value. The ``freq`` is the most common value's\n |      frequency. Timestamps also include the ``first`` and ``last`` items.\n |\n |      If multiple object values have the highest count, then the\n |      ``count`` and ``top`` results will be arbitrarily chosen from\n |      among those with the highest count.\n |\n |      For mixed data types provided via a ``DataFrame``, the default is to\n |      return only an analysis of numeric columns. If the dataframe consists\n |      only of object and categorical data without any numeric columns, the\n |      default is to return an analysis of both the object and categorical\n |      columns. If ``include='all'`` is provided as an option, the result\n |      will include a union of attributes of each type.\n |\n |      The `include` and `exclude` parameters can be used to limit\n |      which columns in a ``DataFrame`` are analyzed for the output.\n |      The parameters are ignored when analyzing a ``Series``.\n |\n |      Examples\n |      --------\n |      Describing a numeric ``Series``.\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s.describe()\n |      count    3.0\n |      mean     2.0\n |      std      1.0\n |      min      1.0\n |      25%      1.5\n |      50%      2.0\n |      75%      2.5\n |      max      3.0\n |      dtype: float64\n |\n |      Describing a categorical ``Series``.\n |\n |      &gt;&gt;&gt; s = pd.Series(['a', 'a', 'b', 'c'])\n |      &gt;&gt;&gt; s.describe()\n |      count     4\n |      unique    3\n |      top       a\n |      freq      2\n |      dtype: object\n |\n |      Describing a timestamp ``Series``.\n |\n |      &gt;&gt;&gt; s = pd.Series([\n |      ...     np.datetime64(\"2000-01-01\"),\n |      ...     np.datetime64(\"2010-01-01\"),\n |      ...     np.datetime64(\"2010-01-01\")\n |      ... ])\n |      &gt;&gt;&gt; s.describe()\n |      count                      3\n |      mean     2006-09-01 08:00:00\n |      min      2000-01-01 00:00:00\n |      25%      2004-12-31 12:00:00\n |      50%      2010-01-01 00:00:00\n |      75%      2010-01-01 00:00:00\n |      max      2010-01-01 00:00:00\n |      dtype: object\n |\n |      Describing a ``DataFrame``. By default only numeric fields\n |      are returned.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'categorical': pd.Categorical(['d', 'e', 'f']),\n |      ...                    'numeric': [1, 2, 3],\n |      ...                    'object': ['a', 'b', 'c']\n |      ...                    })\n |      &gt;&gt;&gt; df.describe()\n |             numeric\n |      count      3.0\n |      mean       2.0\n |      std        1.0\n |      min        1.0\n |      25%        1.5\n |      50%        2.0\n |      75%        2.5\n |      max        3.0\n |\n |      Describing all columns of a ``DataFrame`` regardless of data type.\n |\n |      &gt;&gt;&gt; df.describe(include='all')  # doctest: +SKIP\n |             categorical  numeric object\n |      count            3      3.0      3\n |      unique           3      NaN      3\n |      top              f      NaN      a\n |      freq             1      NaN      1\n |      mean           NaN      2.0    NaN\n |      std            NaN      1.0    NaN\n |      min            NaN      1.0    NaN\n |      25%            NaN      1.5    NaN\n |      50%            NaN      2.0    NaN\n |      75%            NaN      2.5    NaN\n |      max            NaN      3.0    NaN\n |\n |      Describing a column from a ``DataFrame`` by accessing it as\n |      an attribute.\n |\n |      &gt;&gt;&gt; df.numeric.describe()\n |      count    3.0\n |      mean     2.0\n |      std      1.0\n |      min      1.0\n |      25%      1.5\n |      50%      2.0\n |      75%      2.5\n |      max      3.0\n |      Name: numeric, dtype: float64\n |\n |      Including only numeric columns in a ``DataFrame`` description.\n |\n |      &gt;&gt;&gt; df.describe(include=[np.number])\n |             numeric\n |      count      3.0\n |      mean       2.0\n |      std        1.0\n |      min        1.0\n |      25%        1.5\n |      50%        2.0\n |      75%        2.5\n |      max        3.0\n |\n |      Including only string columns in a ``DataFrame`` description.\n |\n |      &gt;&gt;&gt; df.describe(include=[object])  # doctest: +SKIP\n |             object\n |      count       3\n |      unique      3\n |      top         a\n |      freq        1\n |\n |      Including only categorical columns from a ``DataFrame`` description.\n |\n |      &gt;&gt;&gt; df.describe(include=['category'])\n |             categorical\n |      count            3\n |      unique           3\n |      top              d\n |      freq             1\n |\n |      Excluding numeric columns from a ``DataFrame`` description.\n |\n |      &gt;&gt;&gt; df.describe(exclude=[np.number])  # doctest: +SKIP\n |             categorical object\n |      count            3      3\n |      unique           3      3\n |      top              f      a\n |      freq             1      1\n |\n |      Excluding object columns from a ``DataFrame`` description.\n |\n |      &gt;&gt;&gt; df.describe(exclude=[object])  # doctest: +SKIP\n |             categorical  numeric\n |      count            3      3.0\n |      unique           3      NaN\n |      top              f      NaN\n |      freq             1      NaN\n |      mean           NaN      2.0\n |      std            NaN      1.0\n |      min            NaN      1.0\n |      25%            NaN      1.5\n |      50%            NaN      2.0\n |      75%            NaN      2.5\n |      max            NaN      3.0\n |\n |  droplevel(self, level: 'IndexLabel', axis: 'Axis' = 0) -&gt; 'Self'\n |      Return Series/DataFrame with requested index / column level(s) removed.\n |\n |      Parameters\n |      ----------\n |      level : int, str, or list-like\n |          If a string is given, must be the name of a level\n |          If list-like, elements must be names or positional indexes\n |          of levels.\n |\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Axis along which the level(s) is removed:\n |\n |          * 0 or 'index': remove level(s) in column.\n |          * 1 or 'columns': remove level(s) in row.\n |\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |      Returns\n |      -------\n |      Series/DataFrame\n |          Series/DataFrame with requested index / column level(s) removed.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([\n |      ...     [1, 2, 3, 4],\n |      ...     [5, 6, 7, 8],\n |      ...     [9, 10, 11, 12]\n |      ... ]).set_index([0, 1]).rename_axis(['a', 'b'])\n |\n |      &gt;&gt;&gt; df.columns = pd.MultiIndex.from_tuples([\n |      ...     ('c', 'e'), ('d', 'f')\n |      ... ], names=['level_1', 'level_2'])\n |\n |      &gt;&gt;&gt; df\n |      level_1   c   d\n |      level_2   e   f\n |      a b\n |      1 2      3   4\n |      5 6      7   8\n |      9 10    11  12\n |\n |      &gt;&gt;&gt; df.droplevel('a')\n |      level_1   c   d\n |      level_2   e   f\n |      b\n |      2        3   4\n |      6        7   8\n |      10      11  12\n |\n |      &gt;&gt;&gt; df.droplevel('level_2', axis=1)\n |      level_1   c   d\n |      a b\n |      1 2      3   4\n |      5 6      7   8\n |      9 10    11  12\n |\n |  equals(self, other: 'object') -&gt; 'bool_t'\n |      Test whether two objects contain the same elements.\n |\n |      This function allows two Series or DataFrames to be compared against\n |      each other to see if they have the same shape and elements. NaNs in\n |      the same location are considered equal.\n |\n |      The row/column index do not need to have the same type, as long\n |      as the values are considered equal. Corresponding columns and\n |      index must be of the same dtype.\n |\n |      Parameters\n |      ----------\n |      other : Series or DataFrame\n |          The other Series or DataFrame to be compared with the first.\n |\n |      Returns\n |      -------\n |      bool\n |          True if all elements are the same in both objects, False\n |          otherwise.\n |\n |      See Also\n |      --------\n |      Series.eq : Compare two Series objects of the same length\n |          and return a Series where each element is True if the element\n |          in each Series is equal, False otherwise.\n |      DataFrame.eq : Compare two DataFrame objects of the same shape and\n |          return a DataFrame where each element is True if the respective\n |          element in each DataFrame is equal, False otherwise.\n |      testing.assert_series_equal : Raises an AssertionError if left and\n |          right are not equal. Provides an easy interface to ignore\n |          inequality in dtypes, indexes and precision among others.\n |      testing.assert_frame_equal : Like assert_series_equal, but targets\n |          DataFrames.\n |      numpy.array_equal : Return True if two arrays have the same shape\n |          and elements, False otherwise.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({1: [10], 2: [20]})\n |      &gt;&gt;&gt; df\n |          1   2\n |      0  10  20\n |\n |      DataFrames df and exactly_equal have the same types and values for\n |      their elements and column labels, which will return True.\n |\n |      &gt;&gt;&gt; exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n |      &gt;&gt;&gt; exactly_equal\n |          1   2\n |      0  10  20\n |      &gt;&gt;&gt; df.equals(exactly_equal)\n |      True\n |\n |      DataFrames df and different_column_type have the same element\n |      types and values, but have different types for the column labels,\n |      which will still return True.\n |\n |      &gt;&gt;&gt; different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n |      &gt;&gt;&gt; different_column_type\n |         1.0  2.0\n |      0   10   20\n |      &gt;&gt;&gt; df.equals(different_column_type)\n |      True\n |\n |      DataFrames df and different_data_type have different types for the\n |      same values for their elements, and will return False even though\n |      their column labels are the same values and types.\n |\n |      &gt;&gt;&gt; different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n |      &gt;&gt;&gt; different_data_type\n |            1     2\n |      0  10.0  20.0\n |      &gt;&gt;&gt; df.equals(different_data_type)\n |      False\n |\n |  ewm(self, com: 'float | None' = None, span: 'float | None' = None, halflife: 'float | TimedeltaConvertibleTypes | None' = None, alpha: 'float | None' = None, min_periods: 'int | None' = 0, adjust: 'bool_t' = True, ignore_na: 'bool_t' = False, axis: 'Axis | lib.NoDefault' = &lt;no_default&gt;, times: 'np.ndarray | DataFrame | Series | None' = None, method: \"Literal['single', 'table']\" = 'single') -&gt; 'ExponentialMovingWindow'\n |      Provide exponentially weighted (EW) calculations.\n |\n |      Exactly one of ``com``, ``span``, ``halflife``, or ``alpha`` must be\n |      provided if ``times`` is not provided. If ``times`` is provided,\n |      ``halflife`` and one of ``com``, ``span`` or ``alpha`` may be provided.\n |\n |      Parameters\n |      ----------\n |      com : float, optional\n |          Specify decay in terms of center of mass\n |\n |          :math:`\\alpha = 1 / (1 + com)`, for :math:`com \\geq 0`.\n |\n |      span : float, optional\n |          Specify decay in terms of span\n |\n |          :math:`\\alpha = 2 / (span + 1)`, for :math:`span \\geq 1`.\n |\n |      halflife : float, str, timedelta, optional\n |          Specify decay in terms of half-life\n |\n |          :math:`\\alpha = 1 - \\exp\\left(-\\ln(2) / halflife\\right)`, for\n |          :math:`halflife &gt; 0`.\n |\n |          If ``times`` is specified, a timedelta convertible unit over which an\n |          observation decays to half its value. Only applicable to ``mean()``,\n |          and halflife value will not apply to the other functions.\n |\n |      alpha : float, optional\n |          Specify smoothing factor :math:`\\alpha` directly\n |\n |          :math:`0 &lt; \\alpha \\leq 1`.\n |\n |      min_periods : int, default 0\n |          Minimum number of observations in window required to have a value;\n |          otherwise, result is ``np.nan``.\n |\n |      adjust : bool, default True\n |          Divide by decaying adjustment factor in beginning periods to account\n |          for imbalance in relative weightings (viewing EWMA as a moving average).\n |\n |          - When ``adjust=True`` (default), the EW function is calculated using weights\n |            :math:`w_i = (1 - \\alpha)^i`. For example, the EW moving average of the series\n |            [:math:`x_0, x_1, ..., x_t`] would be:\n |\n |          .. math::\n |              y_t = \\frac{x_t + (1 - \\alpha)x_{t-1} + (1 - \\alpha)^2 x_{t-2} + ... + (1 -\n |              \\alpha)^t x_0}{1 + (1 - \\alpha) + (1 - \\alpha)^2 + ... + (1 - \\alpha)^t}\n |\n |          - When ``adjust=False``, the exponentially weighted function is calculated\n |            recursively:\n |\n |          .. math::\n |              \\begin{split}\n |                  y_0 &= x_0\\\\\n |                  y_t &= (1 - \\alpha) y_{t-1} + \\alpha x_t,\n |              \\end{split}\n |      ignore_na : bool, default False\n |          Ignore missing values when calculating weights.\n |\n |          - When ``ignore_na=False`` (default), weights are based on absolute positions.\n |            For example, the weights of :math:`x_0` and :math:`x_2` used in calculating\n |            the final weighted average of [:math:`x_0`, None, :math:`x_2`] are\n |            :math:`(1-\\alpha)^2` and :math:`1` if ``adjust=True``, and\n |            :math:`(1-\\alpha)^2` and :math:`\\alpha` if ``adjust=False``.\n |\n |          - When ``ignore_na=True``, weights are based\n |            on relative positions. For example, the weights of :math:`x_0` and :math:`x_2`\n |            used in calculating the final weighted average of\n |            [:math:`x_0`, None, :math:`x_2`] are :math:`1-\\alpha` and :math:`1` if\n |            ``adjust=True``, and :math:`1-\\alpha` and :math:`\\alpha` if ``adjust=False``.\n |\n |      axis : {0, 1}, default 0\n |          If ``0`` or ``'index'``, calculate across the rows.\n |\n |          If ``1`` or ``'columns'``, calculate across the columns.\n |\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |      times : np.ndarray, Series, default None\n |\n |          Only applicable to ``mean()``.\n |\n |          Times corresponding to the observations. Must be monotonically increasing and\n |          ``datetime64[ns]`` dtype.\n |\n |          If 1-D array like, a sequence with the same shape as the observations.\n |\n |      method : str {'single', 'table'}, default 'single'\n |          .. versionadded:: 1.4.0\n |\n |          Execute the rolling operation per single column or row (``'single'``)\n |          or over the entire object (``'table'``).\n |\n |          This argument is only implemented when specifying ``engine='numba'``\n |          in the method call.\n |\n |          Only applicable to ``mean()``\n |\n |      Returns\n |      -------\n |      pandas.api.typing.ExponentialMovingWindow\n |\n |      See Also\n |      --------\n |      rolling : Provides rolling window calculations.\n |      expanding : Provides expanding transformations.\n |\n |      Notes\n |      -----\n |      See :ref:`Windowing Operations &lt;window.exponentially_weighted&gt;`\n |      for further usage details and examples.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n |      &gt;&gt;&gt; df\n |           B\n |      0  0.0\n |      1  1.0\n |      2  2.0\n |      3  NaN\n |      4  4.0\n |\n |      &gt;&gt;&gt; df.ewm(com=0.5).mean()\n |                B\n |      0  0.000000\n |      1  0.750000\n |      2  1.615385\n |      3  1.615385\n |      4  3.670213\n |      &gt;&gt;&gt; df.ewm(alpha=2 / 3).mean()\n |                B\n |      0  0.000000\n |      1  0.750000\n |      2  1.615385\n |      3  1.615385\n |      4  3.670213\n |\n |      **adjust**\n |\n |      &gt;&gt;&gt; df.ewm(com=0.5, adjust=True).mean()\n |                B\n |      0  0.000000\n |      1  0.750000\n |      2  1.615385\n |      3  1.615385\n |      4  3.670213\n |      &gt;&gt;&gt; df.ewm(com=0.5, adjust=False).mean()\n |                B\n |      0  0.000000\n |      1  0.666667\n |      2  1.555556\n |      3  1.555556\n |      4  3.650794\n |\n |      **ignore_na**\n |\n |      &gt;&gt;&gt; df.ewm(com=0.5, ignore_na=True).mean()\n |                B\n |      0  0.000000\n |      1  0.750000\n |      2  1.615385\n |      3  1.615385\n |      4  3.225000\n |      &gt;&gt;&gt; df.ewm(com=0.5, ignore_na=False).mean()\n |                B\n |      0  0.000000\n |      1  0.750000\n |      2  1.615385\n |      3  1.615385\n |      4  3.670213\n |\n |      **times**\n |\n |      Exponentially weighted mean with weights calculated with a timedelta ``halflife``\n |      relative to ``times``.\n |\n |      &gt;&gt;&gt; times = ['2020-01-01', '2020-01-03', '2020-01-10', '2020-01-15', '2020-01-17']\n |      &gt;&gt;&gt; df.ewm(halflife='4 days', times=pd.DatetimeIndex(times)).mean()\n |                B\n |      0  0.000000\n |      1  0.585786\n |      2  1.523889\n |      3  1.523889\n |      4  3.233686\n |\n |  expanding(self, min_periods: 'int' = 1, axis: 'Axis | lib.NoDefault' = &lt;no_default&gt;, method: \"Literal['single', 'table']\" = 'single') -&gt; 'Expanding'\n |      Provide expanding window calculations.\n |\n |      Parameters\n |      ----------\n |      min_periods : int, default 1\n |          Minimum number of observations in window required to have a value;\n |          otherwise, result is ``np.nan``.\n |\n |      axis : int or str, default 0\n |          If ``0`` or ``'index'``, roll across the rows.\n |\n |          If ``1`` or ``'columns'``, roll across the columns.\n |\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |      method : str {'single', 'table'}, default 'single'\n |          Execute the rolling operation per single column or row (``'single'``)\n |          or over the entire object (``'table'``).\n |\n |          This argument is only implemented when specifying ``engine='numba'``\n |          in the method call.\n |\n |          .. versionadded:: 1.3.0\n |\n |      Returns\n |      -------\n |      pandas.api.typing.Expanding\n |\n |      See Also\n |      --------\n |      rolling : Provides rolling window calculations.\n |      ewm : Provides exponential weighted functions.\n |\n |      Notes\n |      -----\n |      See :ref:`Windowing Operations &lt;window.expanding&gt;` for further usage details\n |      and examples.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({\"B\": [0, 1, 2, np.nan, 4]})\n |      &gt;&gt;&gt; df\n |           B\n |      0  0.0\n |      1  1.0\n |      2  2.0\n |      3  NaN\n |      4  4.0\n |\n |      **min_periods**\n |\n |      Expanding sum with 1 vs 3 observations needed to calculate a value.\n |\n |      &gt;&gt;&gt; df.expanding(1).sum()\n |           B\n |      0  0.0\n |      1  1.0\n |      2  3.0\n |      3  3.0\n |      4  7.0\n |      &gt;&gt;&gt; df.expanding(3).sum()\n |           B\n |      0  NaN\n |      1  NaN\n |      2  3.0\n |      3  3.0\n |      4  7.0\n |\n |  ffill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: \"Literal['inside', 'outside'] | None\" = None, downcast: 'dict | None | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'Self | None'\n |      Fill NA/NaN values by propagating the last valid observation to next valid.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame\n |          Axis along which to fill missing values. For `Series`\n |          this parameter is unused and defaults to 0.\n |      inplace : bool, default False\n |          If True, fill in-place. Note: this will modify any\n |          other views on this object (e.g., a no-copy slice for a column in a\n |          DataFrame).\n |      limit : int, default None\n |          If method is specified, this is the maximum number of consecutive\n |          NaN values to forward/backward fill. In other words, if there is\n |          a gap with more than this number of consecutive NaNs, it will only\n |          be partially filled. If method is not specified, this is the\n |          maximum number of entries along the entire axis where NaNs will be\n |          filled. Must be greater than 0 if not None.\n |      limit_area : {`None`, 'inside', 'outside'}, default None\n |          If limit is specified, consecutive NaNs will be filled with this\n |          restriction.\n |\n |          * ``None``: No fill restriction.\n |          * 'inside': Only fill NaNs surrounded by valid values\n |            (interpolate).\n |          * 'outside': Only fill NaNs outside valid values (extrapolate).\n |\n |          .. versionadded:: 2.2.0\n |\n |      downcast : dict, default is None\n |          A dict of item-&gt;dtype of what to downcast if possible,\n |          or the string 'infer' which will try to downcast to an appropriate\n |          equal type (e.g. float64 to int64 if possible).\n |\n |          .. deprecated:: 2.2.0\n |\n |      Returns\n |      -------\n |      Series/DataFrame or None\n |          Object with missing values filled or None if ``inplace=True``.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n |      ...                    [3, 4, np.nan, 1],\n |      ...                    [np.nan, np.nan, np.nan, np.nan],\n |      ...                    [np.nan, 3, np.nan, 4]],\n |      ...                   columns=list(\"ABCD\"))\n |      &gt;&gt;&gt; df\n |           A    B   C    D\n |      0  NaN  2.0 NaN  0.0\n |      1  3.0  4.0 NaN  1.0\n |      2  NaN  NaN NaN  NaN\n |      3  NaN  3.0 NaN  4.0\n |\n |      &gt;&gt;&gt; df.ffill()\n |           A    B   C    D\n |      0  NaN  2.0 NaN  0.0\n |      1  3.0  4.0 NaN  1.0\n |      2  3.0  4.0 NaN  1.0\n |      3  3.0  3.0 NaN  4.0\n |\n |      &gt;&gt;&gt; ser = pd.Series([1, np.nan, 2, 3])\n |      &gt;&gt;&gt; ser.ffill()\n |      0   1.0\n |      1   1.0\n |      2   2.0\n |      3   3.0\n |      dtype: float64\n |\n |  fillna(self, value: 'Hashable | Mapping | Series | DataFrame | None' = None, *, method: 'FillnaOptions | None' = None, axis: 'Axis | None' = None, inplace: 'bool_t' = False, limit: 'int | None' = None, downcast: 'dict | None | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'Self | None'\n |      Fill NA/NaN values using the specified method.\n |\n |      Parameters\n |      ----------\n |      value : scalar, dict, Series, or DataFrame\n |          Value to use to fill holes (e.g. 0), alternately a\n |          dict/Series/DataFrame of values specifying which value to use for\n |          each index (for a Series) or column (for a DataFrame).  Values not\n |          in the dict/Series/DataFrame will not be filled. This value cannot\n |          be a list.\n |      method : {'backfill', 'bfill', 'ffill', None}, default None\n |          Method to use for filling holes in reindexed Series:\n |\n |          * ffill: propagate last valid observation forward to next valid.\n |          * backfill / bfill: use next valid observation to fill gap.\n |\n |          .. deprecated:: 2.1.0\n |              Use ffill or bfill instead.\n |\n |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame\n |          Axis along which to fill missing values. For `Series`\n |          this parameter is unused and defaults to 0.\n |      inplace : bool, default False\n |          If True, fill in-place. Note: this will modify any\n |          other views on this object (e.g., a no-copy slice for a column in a\n |          DataFrame).\n |      limit : int, default None\n |          If method is specified, this is the maximum number of consecutive\n |          NaN values to forward/backward fill. In other words, if there is\n |          a gap with more than this number of consecutive NaNs, it will only\n |          be partially filled. If method is not specified, this is the\n |          maximum number of entries along the entire axis where NaNs will be\n |          filled. Must be greater than 0 if not None.\n |      downcast : dict, default is None\n |          A dict of item-&gt;dtype of what to downcast if possible,\n |          or the string 'infer' which will try to downcast to an appropriate\n |          equal type (e.g. float64 to int64 if possible).\n |\n |          .. deprecated:: 2.2.0\n |\n |      Returns\n |      -------\n |      Series/DataFrame or None\n |          Object with missing values filled or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      ffill : Fill values by propagating the last valid observation to next valid.\n |      bfill : Fill values by using the next valid observation to fill the gap.\n |      interpolate : Fill NaN values using interpolation.\n |      reindex : Conform object to new index.\n |      asfreq : Convert TimeSeries to specified frequency.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n |      ...                    [3, 4, np.nan, 1],\n |      ...                    [np.nan, np.nan, np.nan, np.nan],\n |      ...                    [np.nan, 3, np.nan, 4]],\n |      ...                   columns=list(\"ABCD\"))\n |      &gt;&gt;&gt; df\n |           A    B   C    D\n |      0  NaN  2.0 NaN  0.0\n |      1  3.0  4.0 NaN  1.0\n |      2  NaN  NaN NaN  NaN\n |      3  NaN  3.0 NaN  4.0\n |\n |      Replace all NaN elements with 0s.\n |\n |      &gt;&gt;&gt; df.fillna(0)\n |           A    B    C    D\n |      0  0.0  2.0  0.0  0.0\n |      1  3.0  4.0  0.0  1.0\n |      2  0.0  0.0  0.0  0.0\n |      3  0.0  3.0  0.0  4.0\n |\n |      Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n |      2, and 3 respectively.\n |\n |      &gt;&gt;&gt; values = {\"A\": 0, \"B\": 1, \"C\": 2, \"D\": 3}\n |      &gt;&gt;&gt; df.fillna(value=values)\n |           A    B    C    D\n |      0  0.0  2.0  2.0  0.0\n |      1  3.0  4.0  2.0  1.0\n |      2  0.0  1.0  2.0  3.0\n |      3  0.0  3.0  2.0  4.0\n |\n |      Only replace the first NaN element.\n |\n |      &gt;&gt;&gt; df.fillna(value=values, limit=1)\n |           A    B    C    D\n |      0  0.0  2.0  2.0  0.0\n |      1  3.0  4.0  NaN  1.0\n |      2  NaN  1.0  NaN  3.0\n |      3  NaN  3.0  NaN  4.0\n |\n |      When filling using a DataFrame, replacement happens along\n |      the same column names and same indices\n |\n |      &gt;&gt;&gt; df2 = pd.DataFrame(np.zeros((4, 4)), columns=list(\"ABCE\"))\n |      &gt;&gt;&gt; df.fillna(df2)\n |           A    B    C    D\n |      0  0.0  2.0  0.0  0.0\n |      1  3.0  4.0  0.0  1.0\n |      2  0.0  0.0  0.0  NaN\n |      3  0.0  3.0  0.0  4.0\n |\n |      Note that column D is not affected since it is not present in df2.\n |\n |  filter(self, items=None, like: 'str | None' = None, regex: 'str | None' = None, axis: 'Axis | None' = None) -&gt; 'Self'\n |      Subset the dataframe rows or columns according to the specified index labels.\n |\n |      Note that this routine does not filter a dataframe on its\n |      contents. The filter is applied to the labels of the index.\n |\n |      Parameters\n |      ----------\n |      items : list-like\n |          Keep labels from axis which are in items.\n |      like : str\n |          Keep labels from axis for which \"like in label == True\".\n |      regex : str (regular expression)\n |          Keep labels from axis for which re.search(regex, label) == True.\n |      axis : {0 or 'index', 1 or 'columns', None}, default None\n |          The axis to filter on, expressed either as an index (int)\n |          or axis name (str). By default this is the info axis, 'columns' for\n |          DataFrame. For `Series` this parameter is unused and defaults to `None`.\n |\n |      Returns\n |      -------\n |      same type as input object\n |\n |      See Also\n |      --------\n |      DataFrame.loc : Access a group of rows and columns\n |          by label(s) or a boolean array.\n |\n |      Notes\n |      -----\n |      The ``items``, ``like``, and ``regex`` parameters are\n |      enforced to be mutually exclusive.\n |\n |      ``axis`` defaults to the info axis that is used when indexing\n |      with ``[]``.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),\n |      ...                   index=['mouse', 'rabbit'],\n |      ...                   columns=['one', 'two', 'three'])\n |      &gt;&gt;&gt; df\n |              one  two  three\n |      mouse     1    2      3\n |      rabbit    4    5      6\n |\n |      &gt;&gt;&gt; # select columns by name\n |      &gt;&gt;&gt; df.filter(items=['one', 'three'])\n |               one  three\n |      mouse     1      3\n |      rabbit    4      6\n |\n |      &gt;&gt;&gt; # select columns by regular expression\n |      &gt;&gt;&gt; df.filter(regex='e$', axis=1)\n |               one  three\n |      mouse     1      3\n |      rabbit    4      6\n |\n |      &gt;&gt;&gt; # select rows containing 'bbi'\n |      &gt;&gt;&gt; df.filter(like='bbi', axis=0)\n |               one  two  three\n |      rabbit    4    5      6\n |\n |  first(self, offset) -&gt; 'Self'\n |      Select initial periods of time series data based on a date offset.\n |\n |      .. deprecated:: 2.1\n |          :meth:`.first` is deprecated and will be removed in a future version.\n |          Please create a mask and filter using `.loc` instead.\n |\n |      For a DataFrame with a sorted DatetimeIndex, this function can\n |      select the first few rows based on a date offset.\n |\n |      Parameters\n |      ----------\n |      offset : str, DateOffset or dateutil.relativedelta\n |          The offset length of the data that will be selected. For instance,\n |          '1ME' will display all the rows having their index within the first month.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          A subset of the caller.\n |\n |      Raises\n |      ------\n |      TypeError\n |          If the index is not  a :class:`DatetimeIndex`\n |\n |      See Also\n |      --------\n |      last : Select final periods of time series based on a date offset.\n |      at_time : Select values at a particular time of the day.\n |      between_time : Select values between particular times of the day.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; i = pd.date_range('2018-04-09', periods=4, freq='2D')\n |      &gt;&gt;&gt; ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n |      &gt;&gt;&gt; ts\n |                  A\n |      2018-04-09  1\n |      2018-04-11  2\n |      2018-04-13  3\n |      2018-04-15  4\n |\n |      Get the rows for the first 3 days:\n |\n |      &gt;&gt;&gt; ts.first('3D')\n |                  A\n |      2018-04-09  1\n |      2018-04-11  2\n |\n |      Notice the data for 3 first calendar days were returned, not the first\n |      3 days observed in the dataset, and therefore data for 2018-04-13 was\n |      not returned.\n |\n |  first_valid_index(self) -&gt; 'Hashable | None'\n |      Return index for first non-NA value or None, if no non-NA value is found.\n |\n |      Returns\n |      -------\n |      type of index\n |\n |      Examples\n |      --------\n |      For Series:\n |\n |      &gt;&gt;&gt; s = pd.Series([None, 3, 4])\n |      &gt;&gt;&gt; s.first_valid_index()\n |      1\n |      &gt;&gt;&gt; s.last_valid_index()\n |      2\n |\n |      &gt;&gt;&gt; s = pd.Series([None, None])\n |      &gt;&gt;&gt; print(s.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(s.last_valid_index())\n |      None\n |\n |      If all elements in Series are NA/null, returns None.\n |\n |      &gt;&gt;&gt; s = pd.Series()\n |      &gt;&gt;&gt; print(s.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(s.last_valid_index())\n |      None\n |\n |      If Series is empty, returns None.\n |\n |      For DataFrame:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})\n |      &gt;&gt;&gt; df\n |           A      B\n |      0  NaN    NaN\n |      1  NaN    3.0\n |      2  2.0    4.0\n |      &gt;&gt;&gt; df.first_valid_index()\n |      1\n |      &gt;&gt;&gt; df.last_valid_index()\n |      2\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})\n |      &gt;&gt;&gt; df\n |           A      B\n |      0  None   None\n |      1  None   None\n |      2  None   None\n |      &gt;&gt;&gt; print(df.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(df.last_valid_index())\n |      None\n |\n |      If all elements in DataFrame are NA/null, returns None.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame()\n |      &gt;&gt;&gt; df\n |      Empty DataFrame\n |      Columns: []\n |      Index: []\n |      &gt;&gt;&gt; print(df.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(df.last_valid_index())\n |      None\n |\n |      If DataFrame is empty, returns None.\n |\n |  get(self, key, default=None)\n |      Get item from object for given key (ex: DataFrame column).\n |\n |      Returns default value if not found.\n |\n |      Parameters\n |      ----------\n |      key : object\n |\n |      Returns\n |      -------\n |      same type as items contained in object\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(\n |      ...     [\n |      ...         [24.3, 75.7, \"high\"],\n |      ...         [31, 87.8, \"high\"],\n |      ...         [22, 71.6, \"medium\"],\n |      ...         [35, 95, \"medium\"],\n |      ...     ],\n |      ...     columns=[\"temp_celsius\", \"temp_fahrenheit\", \"windspeed\"],\n |      ...     index=pd.date_range(start=\"2014-02-12\", end=\"2014-02-15\", freq=\"D\"),\n |      ... )\n |\n |      &gt;&gt;&gt; df\n |                  temp_celsius  temp_fahrenheit windspeed\n |      2014-02-12          24.3             75.7      high\n |      2014-02-13          31.0             87.8      high\n |      2014-02-14          22.0             71.6    medium\n |      2014-02-15          35.0             95.0    medium\n |\n |      &gt;&gt;&gt; df.get([\"temp_celsius\", \"windspeed\"])\n |                  temp_celsius windspeed\n |      2014-02-12          24.3      high\n |      2014-02-13          31.0      high\n |      2014-02-14          22.0    medium\n |      2014-02-15          35.0    medium\n |\n |      &gt;&gt;&gt; ser = df['windspeed']\n |      &gt;&gt;&gt; ser.get('2014-02-13')\n |      'high'\n |\n |      If the key isn't found, the default value will be used.\n |\n |      &gt;&gt;&gt; df.get([\"temp_celsius\", \"temp_kelvin\"], default=\"default_value\")\n |      'default_value'\n |\n |      &gt;&gt;&gt; ser.get('2014-02-10', '[unknown]')\n |      '[unknown]'\n |\n |  head(self, n: 'int' = 5) -&gt; 'Self'\n |      Return the first `n` rows.\n |\n |      This function returns the first `n` rows for the object based\n |      on position. It is useful for quickly testing if your object\n |      has the right type of data in it.\n |\n |      For negative values of `n`, this function returns all rows except\n |      the last `|n|` rows, equivalent to ``df[:n]``.\n |\n |      If n is larger than the number of rows, this function returns all rows.\n |\n |      Parameters\n |      ----------\n |      n : int, default 5\n |          Number of rows to select.\n |\n |      Returns\n |      -------\n |      same type as caller\n |          The first `n` rows of the caller object.\n |\n |      See Also\n |      --------\n |      DataFrame.tail: Returns the last `n` rows.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n |      ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n |      &gt;&gt;&gt; df\n |            animal\n |      0  alligator\n |      1        bee\n |      2     falcon\n |      3       lion\n |      4     monkey\n |      5     parrot\n |      6      shark\n |      7      whale\n |      8      zebra\n |\n |      Viewing the first 5 lines\n |\n |      &gt;&gt;&gt; df.head()\n |            animal\n |      0  alligator\n |      1        bee\n |      2     falcon\n |      3       lion\n |      4     monkey\n |\n |      Viewing the first `n` lines (three in this case)\n |\n |      &gt;&gt;&gt; df.head(3)\n |            animal\n |      0  alligator\n |      1        bee\n |      2     falcon\n |\n |      For negative values of `n`\n |\n |      &gt;&gt;&gt; df.head(-3)\n |            animal\n |      0  alligator\n |      1        bee\n |      2     falcon\n |      3       lion\n |      4     monkey\n |      5     parrot\n |\n |  infer_objects(self, copy: 'bool_t | None' = None) -&gt; 'Self'\n |      Attempt to infer better dtypes for object columns.\n |\n |      Attempts soft conversion of object-dtyped\n |      columns, leaving non-object and unconvertible\n |      columns unchanged. The inference rules are the\n |      same as during normal Series/DataFrame construction.\n |\n |      Parameters\n |      ----------\n |      copy : bool, default True\n |          Whether to make a copy for non-object or non-inferable columns\n |          or Series.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Returns\n |      -------\n |      same type as input object\n |\n |      See Also\n |      --------\n |      to_datetime : Convert argument to datetime.\n |      to_timedelta : Convert argument to timedelta.\n |      to_numeric : Convert argument to numeric type.\n |      convert_dtypes : Convert argument to best possible dtype.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n |      &gt;&gt;&gt; df = df.iloc[1:]\n |      &gt;&gt;&gt; df\n |         A\n |      1  1\n |      2  2\n |      3  3\n |\n |      &gt;&gt;&gt; df.dtypes\n |      A    object\n |      dtype: object\n |\n |      &gt;&gt;&gt; df.infer_objects().dtypes\n |      A    int64\n |      dtype: object\n |\n |  interpolate(self, method: 'InterpolateOptions' = 'linear', *, axis: 'Axis' = 0, limit: 'int | None' = None, inplace: 'bool_t' = False, limit_direction: \"Literal['forward', 'backward', 'both'] | None\" = None, limit_area: \"Literal['inside', 'outside'] | None\" = None, downcast: \"Literal['infer'] | None | lib.NoDefault\" = &lt;no_default&gt;, **kwargs) -&gt; 'Self | None'\n |      Fill NaN values using an interpolation method.\n |\n |      Please note that only ``method='linear'`` is supported for\n |      DataFrame/Series with a MultiIndex.\n |\n |      Parameters\n |      ----------\n |      method : str, default 'linear'\n |          Interpolation technique to use. One of:\n |\n |          * 'linear': Ignore the index and treat the values as equally\n |            spaced. This is the only method supported on MultiIndexes.\n |          * 'time': Works on daily and higher resolution data to interpolate\n |            given length of interval.\n |          * 'index', 'values': use the actual numerical values of the index.\n |          * 'pad': Fill in NaNs using existing values.\n |          * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',\n |            'barycentric', 'polynomial': Passed to\n |            `scipy.interpolate.interp1d`, whereas 'spline' is passed to\n |            `scipy.interpolate.UnivariateSpline`. These methods use the numerical\n |            values of the index.  Both 'polynomial' and 'spline' require that\n |            you also specify an `order` (int), e.g.\n |            ``df.interpolate(method='polynomial', order=5)``. Note that,\n |            `slinear` method in Pandas refers to the Scipy first order `spline`\n |            instead of Pandas first order `spline`.\n |          * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima',\n |            'cubicspline': Wrappers around the SciPy interpolation methods of\n |            similar names. See `Notes`.\n |          * 'from_derivatives': Refers to\n |            `scipy.interpolate.BPoly.from_derivatives`.\n |\n |      axis : {{0 or 'index', 1 or 'columns', None}}, default None\n |          Axis to interpolate along. For `Series` this parameter is unused\n |          and defaults to 0.\n |      limit : int, optional\n |          Maximum number of consecutive NaNs to fill. Must be greater than\n |          0.\n |      inplace : bool, default False\n |          Update the data in place if possible.\n |      limit_direction : {{'forward', 'backward', 'both'}}, Optional\n |          Consecutive NaNs will be filled in this direction.\n |\n |          If limit is specified:\n |              * If 'method' is 'pad' or 'ffill', 'limit_direction' must be 'forward'.\n |              * If 'method' is 'backfill' or 'bfill', 'limit_direction' must be\n |                'backwards'.\n |\n |          If 'limit' is not specified:\n |              * If 'method' is 'backfill' or 'bfill', the default is 'backward'\n |              * else the default is 'forward'\n |\n |          raises ValueError if `limit_direction` is 'forward' or 'both' and\n |              method is 'backfill' or 'bfill'.\n |          raises ValueError if `limit_direction` is 'backward' or 'both' and\n |              method is 'pad' or 'ffill'.\n |\n |      limit_area : {{`None`, 'inside', 'outside'}}, default None\n |          If limit is specified, consecutive NaNs will be filled with this\n |          restriction.\n |\n |          * ``None``: No fill restriction.\n |          * 'inside': Only fill NaNs surrounded by valid values\n |            (interpolate).\n |          * 'outside': Only fill NaNs outside valid values (extrapolate).\n |\n |      downcast : optional, 'infer' or None, defaults to None\n |          Downcast dtypes if possible.\n |\n |          .. deprecated:: 2.1.0\n |\n |      ``**kwargs`` : optional\n |          Keyword arguments to pass on to the interpolating function.\n |\n |      Returns\n |      -------\n |      Series or DataFrame or None\n |          Returns the same object type as the caller, interpolated at\n |          some or all ``NaN`` values or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      fillna : Fill missing values using different methods.\n |      scipy.interpolate.Akima1DInterpolator : Piecewise cubic polynomials\n |          (Akima interpolator).\n |      scipy.interpolate.BPoly.from_derivatives : Piecewise polynomial in the\n |          Bernstein basis.\n |      scipy.interpolate.interp1d : Interpolate a 1-D function.\n |      scipy.interpolate.KroghInterpolator : Interpolate polynomial (Krogh\n |          interpolator).\n |      scipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic\n |          interpolation.\n |      scipy.interpolate.CubicSpline : Cubic spline data interpolator.\n |\n |      Notes\n |      -----\n |      The 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\n |      methods are wrappers around the respective SciPy implementations of\n |      similar names. These use the actual numerical values of the index.\n |      For more information on their behavior, see the\n |      `SciPy documentation\n |      &lt;https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation&gt;`__.\n |\n |      Examples\n |      --------\n |      Filling in ``NaN`` in a :class:`~pandas.Series` via linear\n |      interpolation.\n |\n |      &gt;&gt;&gt; s = pd.Series([0, 1, np.nan, 3])\n |      &gt;&gt;&gt; s\n |      0    0.0\n |      1    1.0\n |      2    NaN\n |      3    3.0\n |      dtype: float64\n |      &gt;&gt;&gt; s.interpolate()\n |      0    0.0\n |      1    1.0\n |      2    2.0\n |      3    3.0\n |      dtype: float64\n |\n |      Filling in ``NaN`` in a Series via polynomial interpolation or splines:\n |      Both 'polynomial' and 'spline' methods require that you also specify\n |      an ``order`` (int).\n |\n |      &gt;&gt;&gt; s = pd.Series([0, 2, np.nan, 8])\n |      &gt;&gt;&gt; s.interpolate(method='polynomial', order=2)\n |      0    0.000000\n |      1    2.000000\n |      2    4.666667\n |      3    8.000000\n |      dtype: float64\n |\n |      Fill the DataFrame forward (that is, going down) along each column\n |      using linear interpolation.\n |\n |      Note how the last entry in column 'a' is interpolated differently,\n |      because there is no entry after it to use for interpolation.\n |      Note how the first entry in column 'b' remains ``NaN``, because there\n |      is no entry before it to use for interpolation.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([(0.0, np.nan, -1.0, 1.0),\n |      ...                    (np.nan, 2.0, np.nan, np.nan),\n |      ...                    (2.0, 3.0, np.nan, 9.0),\n |      ...                    (np.nan, 4.0, -4.0, 16.0)],\n |      ...                   columns=list('abcd'))\n |      &gt;&gt;&gt; df\n |           a    b    c     d\n |      0  0.0  NaN -1.0   1.0\n |      1  NaN  2.0  NaN   NaN\n |      2  2.0  3.0  NaN   9.0\n |      3  NaN  4.0 -4.0  16.0\n |      &gt;&gt;&gt; df.interpolate(method='linear', limit_direction='forward', axis=0)\n |           a    b    c     d\n |      0  0.0  NaN -1.0   1.0\n |      1  1.0  2.0 -2.0   5.0\n |      2  2.0  3.0 -3.0   9.0\n |      3  2.0  4.0 -4.0  16.0\n |\n |      Using polynomial interpolation.\n |\n |      &gt;&gt;&gt; df['d'].interpolate(method='polynomial', order=2)\n |      0     1.0\n |      1     4.0\n |      2     9.0\n |      3    16.0\n |      Name: d, dtype: float64\n |\n |  last(self, offset) -&gt; 'Self'\n |      Select final periods of time series data based on a date offset.\n |\n |      .. deprecated:: 2.1\n |          :meth:`.last` is deprecated and will be removed in a future version.\n |          Please create a mask and filter using `.loc` instead.\n |\n |      For a DataFrame with a sorted DatetimeIndex, this function\n |      selects the last few rows based on a date offset.\n |\n |      Parameters\n |      ----------\n |      offset : str, DateOffset, dateutil.relativedelta\n |          The offset length of the data that will be selected. For instance,\n |          '3D' will display all the rows having their index within the last 3 days.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          A subset of the caller.\n |\n |      Raises\n |      ------\n |      TypeError\n |          If the index is not  a :class:`DatetimeIndex`\n |\n |      See Also\n |      --------\n |      first : Select initial periods of time series based on a date offset.\n |      at_time : Select values at a particular time of the day.\n |      between_time : Select values between particular times of the day.\n |\n |      Notes\n |      -----\n |      .. deprecated:: 2.1.0\n |          Please create a mask and filter using `.loc` instead\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; i = pd.date_range('2018-04-09', periods=4, freq='2D')\n |      &gt;&gt;&gt; ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n |      &gt;&gt;&gt; ts\n |                  A\n |      2018-04-09  1\n |      2018-04-11  2\n |      2018-04-13  3\n |      2018-04-15  4\n |\n |      Get the rows for the last 3 days:\n |\n |      &gt;&gt;&gt; ts.last('3D')  # doctest: +SKIP\n |                  A\n |      2018-04-13  3\n |      2018-04-15  4\n |\n |      Notice the data for 3 last calendar days were returned, not the last\n |      3 observed days in the dataset, and therefore data for 2018-04-11 was\n |      not returned.\n |\n |  last_valid_index(self) -&gt; 'Hashable | None'\n |      Return index for last non-NA value or None, if no non-NA value is found.\n |\n |      Returns\n |      -------\n |      type of index\n |\n |      Examples\n |      --------\n |      For Series:\n |\n |      &gt;&gt;&gt; s = pd.Series([None, 3, 4])\n |      &gt;&gt;&gt; s.first_valid_index()\n |      1\n |      &gt;&gt;&gt; s.last_valid_index()\n |      2\n |\n |      &gt;&gt;&gt; s = pd.Series([None, None])\n |      &gt;&gt;&gt; print(s.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(s.last_valid_index())\n |      None\n |\n |      If all elements in Series are NA/null, returns None.\n |\n |      &gt;&gt;&gt; s = pd.Series()\n |      &gt;&gt;&gt; print(s.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(s.last_valid_index())\n |      None\n |\n |      If Series is empty, returns None.\n |\n |      For DataFrame:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})\n |      &gt;&gt;&gt; df\n |           A      B\n |      0  NaN    NaN\n |      1  NaN    3.0\n |      2  2.0    4.0\n |      &gt;&gt;&gt; df.first_valid_index()\n |      1\n |      &gt;&gt;&gt; df.last_valid_index()\n |      2\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})\n |      &gt;&gt;&gt; df\n |           A      B\n |      0  None   None\n |      1  None   None\n |      2  None   None\n |      &gt;&gt;&gt; print(df.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(df.last_valid_index())\n |      None\n |\n |      If all elements in DataFrame are NA/null, returns None.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame()\n |      &gt;&gt;&gt; df\n |      Empty DataFrame\n |      Columns: []\n |      Index: []\n |      &gt;&gt;&gt; print(df.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(df.last_valid_index())\n |      None\n |\n |      If DataFrame is empty, returns None.\n |\n |  mask(self, cond, other=&lt;no_default&gt;, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -&gt; 'Self | None'\n |      Replace values where the condition is True.\n |\n |      Parameters\n |      ----------\n |      cond : bool Series/DataFrame, array-like, or callable\n |          Where `cond` is False, keep the original value. Where\n |          True, replace with corresponding value from `other`.\n |          If `cond` is callable, it is computed on the Series/DataFrame and\n |          should return boolean Series/DataFrame or array. The callable must\n |          not change input Series/DataFrame (though pandas doesn't check it).\n |      other : scalar, Series/DataFrame, or callable\n |          Entries where `cond` is True are replaced with\n |          corresponding value from `other`.\n |          If other is callable, it is computed on the Series/DataFrame and\n |          should return scalar or Series/DataFrame. The callable must not\n |          change input Series/DataFrame (though pandas doesn't check it).\n |          If not specified, entries will be filled with the corresponding\n |          NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension\n |          dtypes).\n |      inplace : bool, default False\n |          Whether to perform the operation in place on the data.\n |      axis : int, default None\n |          Alignment axis if needed. For `Series` this parameter is\n |          unused and defaults to 0.\n |      level : int, default None\n |          Alignment level if needed.\n |\n |      Returns\n |      -------\n |      Same type as caller or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      :func:`DataFrame.where` : Return an object of same shape as\n |          self.\n |\n |      Notes\n |      -----\n |      The mask method is an application of the if-then idiom. For each\n |      element in the calling DataFrame, if ``cond`` is ``False`` the\n |      element is used; otherwise the corresponding element from the DataFrame\n |      ``other`` is used. If the axis of ``other`` does not align with axis of\n |      ``cond`` Series/DataFrame, the misaligned index positions will be filled with\n |      True.\n |\n |      The signature for :func:`DataFrame.where` differs from\n |      :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n |      ``np.where(m, df1, df2)``.\n |\n |      For further details and examples see the ``mask`` documentation in\n |      :ref:`indexing &lt;indexing.where_mask&gt;`.\n |\n |      The dtype of the object takes precedence. The fill value is casted to\n |      the object's dtype, if this can be done losslessly.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(range(5))\n |      &gt;&gt;&gt; s.where(s &gt; 0)\n |      0    NaN\n |      1    1.0\n |      2    2.0\n |      3    3.0\n |      4    4.0\n |      dtype: float64\n |      &gt;&gt;&gt; s.mask(s &gt; 0)\n |      0    0.0\n |      1    NaN\n |      2    NaN\n |      3    NaN\n |      4    NaN\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s = pd.Series(range(5))\n |      &gt;&gt;&gt; t = pd.Series([True, False])\n |      &gt;&gt;&gt; s.where(t, 99)\n |      0     0\n |      1    99\n |      2    99\n |      3    99\n |      4    99\n |      dtype: int64\n |      &gt;&gt;&gt; s.mask(t, 99)\n |      0    99\n |      1     1\n |      2    99\n |      3    99\n |      4    99\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s.where(s &gt; 1, 10)\n |      0    10\n |      1    10\n |      2    2\n |      3    3\n |      4    4\n |      dtype: int64\n |      &gt;&gt;&gt; s.mask(s &gt; 1, 10)\n |      0     0\n |      1     1\n |      2    10\n |      3    10\n |      4    10\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  0  1\n |      1  2  3\n |      2  4  5\n |      3  6  7\n |      4  8  9\n |      &gt;&gt;&gt; m = df % 3 == 0\n |      &gt;&gt;&gt; df.where(m, -df)\n |         A  B\n |      0  0 -1\n |      1 -2  3\n |      2 -4 -5\n |      3  6 -7\n |      4 -8  9\n |      &gt;&gt;&gt; df.where(m, -df) == np.where(m, df, -df)\n |            A     B\n |      0  True  True\n |      1  True  True\n |      2  True  True\n |      3  True  True\n |      4  True  True\n |      &gt;&gt;&gt; df.where(m, -df) == df.mask(~m, -df)\n |            A     B\n |      0  True  True\n |      1  True  True\n |      2  True  True\n |      3  True  True\n |      4  True  True\n |\n |  pad(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'Self | None'\n |      Fill NA/NaN values by propagating the last valid observation to next valid.\n |\n |      .. deprecated:: 2.0\n |\n |          Series/DataFrame.pad is deprecated. Use Series/DataFrame.ffill instead.\n |\n |      Returns\n |      -------\n |      Series/DataFrame or None\n |          Object with missing values filled or None if ``inplace=True``.\n |\n |      Examples\n |      --------\n |      Please see examples for :meth:`DataFrame.ffill` or :meth:`Series.ffill`.\n |\n |  pct_change(self, periods: 'int' = 1, fill_method: 'FillnaOptions | None | lib.NoDefault' = &lt;no_default&gt;, limit: 'int | None | lib.NoDefault' = &lt;no_default&gt;, freq=None, **kwargs) -&gt; 'Self'\n |      Fractional change between the current and a prior element.\n |\n |      Computes the fractional change from the immediately previous row by\n |      default. This is useful in comparing the fraction of change in a time\n |      series of elements.\n |\n |      .. note::\n |\n |          Despite the name of this method, it calculates fractional change\n |          (also known as per unit change or relative change) and not\n |          percentage change. If you need the percentage change, multiply\n |          these values by 100.\n |\n |      Parameters\n |      ----------\n |      periods : int, default 1\n |          Periods to shift for forming percent change.\n |      fill_method : {'backfill', 'bfill', 'pad', 'ffill', None}, default 'pad'\n |          How to handle NAs **before** computing percent changes.\n |\n |          .. deprecated:: 2.1\n |              All options of `fill_method` are deprecated except `fill_method=None`.\n |\n |      limit : int, default None\n |          The number of consecutive NAs to fill before stopping.\n |\n |          .. deprecated:: 2.1\n |\n |      freq : DateOffset, timedelta, or str, optional\n |          Increment to use from time series API (e.g. 'ME' or BDay()).\n |      **kwargs\n |          Additional keyword arguments are passed into\n |          `DataFrame.shift` or `Series.shift`.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          The same type as the calling object.\n |\n |      See Also\n |      --------\n |      Series.diff : Compute the difference of two elements in a Series.\n |      DataFrame.diff : Compute the difference of two elements in a DataFrame.\n |      Series.shift : Shift the index by some number of periods.\n |      DataFrame.shift : Shift the index by some number of periods.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      &gt;&gt;&gt; s = pd.Series([90, 91, 85])\n |      &gt;&gt;&gt; s\n |      0    90\n |      1    91\n |      2    85\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s.pct_change()\n |      0         NaN\n |      1    0.011111\n |      2   -0.065934\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s.pct_change(periods=2)\n |      0         NaN\n |      1         NaN\n |      2   -0.055556\n |      dtype: float64\n |\n |      See the percentage change in a Series where filling NAs with last\n |      valid observation forward to next valid.\n |\n |      &gt;&gt;&gt; s = pd.Series([90, 91, None, 85])\n |      &gt;&gt;&gt; s\n |      0    90.0\n |      1    91.0\n |      2     NaN\n |      3    85.0\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s.ffill().pct_change()\n |      0         NaN\n |      1    0.011111\n |      2    0.000000\n |      3   -0.065934\n |      dtype: float64\n |\n |      **DataFrame**\n |\n |      Percentage change in French franc, Deutsche Mark, and Italian lira from\n |      1980-01-01 to 1980-03-01.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     'FR': [4.0405, 4.0963, 4.3149],\n |      ...     'GR': [1.7246, 1.7482, 1.8519],\n |      ...     'IT': [804.74, 810.01, 860.13]},\n |      ...     index=['1980-01-01', '1980-02-01', '1980-03-01'])\n |      &gt;&gt;&gt; df\n |                      FR      GR      IT\n |      1980-01-01  4.0405  1.7246  804.74\n |      1980-02-01  4.0963  1.7482  810.01\n |      1980-03-01  4.3149  1.8519  860.13\n |\n |      &gt;&gt;&gt; df.pct_change()\n |                        FR        GR        IT\n |      1980-01-01       NaN       NaN       NaN\n |      1980-02-01  0.013810  0.013684  0.006549\n |      1980-03-01  0.053365  0.059318  0.061876\n |\n |      Percentage of change in GOOG and APPL stock volume. Shows computing\n |      the percentage change between columns.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     '2016': [1769950, 30586265],\n |      ...     '2015': [1500923, 40912316],\n |      ...     '2014': [1371819, 41403351]},\n |      ...     index=['GOOG', 'APPL'])\n |      &gt;&gt;&gt; df\n |                2016      2015      2014\n |      GOOG   1769950   1500923   1371819\n |      APPL  30586265  40912316  41403351\n |\n |      &gt;&gt;&gt; df.pct_change(axis='columns', periods=-1)\n |                2016      2015  2014\n |      GOOG  0.179241  0.094112   NaN\n |      APPL -0.252395 -0.011860   NaN\n |\n |  pipe(self, func: 'Callable[..., T] | tuple[Callable[..., T], str]', *args, **kwargs) -&gt; 'T'\n |      Apply chainable functions that expect Series or DataFrames.\n |\n |      Parameters\n |      ----------\n |      func : function\n |          Function to apply to the Series/DataFrame.\n |          ``args``, and ``kwargs`` are passed into ``func``.\n |          Alternatively a ``(callable, data_keyword)`` tuple where\n |          ``data_keyword`` is a string indicating the keyword of\n |          ``callable`` that expects the Series/DataFrame.\n |      *args : iterable, optional\n |          Positional arguments passed into ``func``.\n |      **kwargs : mapping, optional\n |          A dictionary of keyword arguments passed into ``func``.\n |\n |      Returns\n |      -------\n |      the return type of ``func``.\n |\n |      See Also\n |      --------\n |      DataFrame.apply : Apply a function along input axis of DataFrame.\n |      DataFrame.map : Apply a function elementwise on a whole DataFrame.\n |      Series.map : Apply a mapping correspondence on a\n |          :class:`~pandas.Series`.\n |\n |      Notes\n |      -----\n |      Use ``.pipe`` when chaining together functions that expect\n |      Series, DataFrames or GroupBy objects.\n |\n |      Examples\n |      --------\n |      Constructing a income DataFrame from a dictionary.\n |\n |      &gt;&gt;&gt; data = [[8000, 1000], [9500, np.nan], [5000, 2000]]\n |      &gt;&gt;&gt; df = pd.DataFrame(data, columns=['Salary', 'Others'])\n |      &gt;&gt;&gt; df\n |         Salary  Others\n |      0    8000  1000.0\n |      1    9500     NaN\n |      2    5000  2000.0\n |\n |      Functions that perform tax reductions on an income DataFrame.\n |\n |      &gt;&gt;&gt; def subtract_federal_tax(df):\n |      ...     return df * 0.9\n |      &gt;&gt;&gt; def subtract_state_tax(df, rate):\n |      ...     return df * (1 - rate)\n |      &gt;&gt;&gt; def subtract_national_insurance(df, rate, rate_increase):\n |      ...     new_rate = rate + rate_increase\n |      ...     return df * (1 - new_rate)\n |\n |      Instead of writing\n |\n |      &gt;&gt;&gt; subtract_national_insurance(\n |      ...     subtract_state_tax(subtract_federal_tax(df), rate=0.12),\n |      ...     rate=0.05,\n |      ...     rate_increase=0.02)  # doctest: +SKIP\n |\n |      You can write\n |\n |      &gt;&gt;&gt; (\n |      ...     df.pipe(subtract_federal_tax)\n |      ...     .pipe(subtract_state_tax, rate=0.12)\n |      ...     .pipe(subtract_national_insurance, rate=0.05, rate_increase=0.02)\n |      ... )\n |          Salary   Others\n |      0  5892.48   736.56\n |      1  6997.32      NaN\n |      2  3682.80  1473.12\n |\n |      If you have a function that takes the data as (say) the second\n |      argument, pass a tuple indicating which keyword expects the\n |      data. For example, suppose ``national_insurance`` takes its data as ``df``\n |      in the second argument:\n |\n |      &gt;&gt;&gt; def subtract_national_insurance(rate, df, rate_increase):\n |      ...     new_rate = rate + rate_increase\n |      ...     return df * (1 - new_rate)\n |      &gt;&gt;&gt; (\n |      ...     df.pipe(subtract_federal_tax)\n |      ...     .pipe(subtract_state_tax, rate=0.12)\n |      ...     .pipe(\n |      ...         (subtract_national_insurance, 'df'),\n |      ...         rate=0.05,\n |      ...         rate_increase=0.02\n |      ...     )\n |      ... )\n |          Salary   Others\n |      0  5892.48   736.56\n |      1  6997.32      NaN\n |      2  3682.80  1473.12\n |\n |  rank(self, axis: 'Axis' = 0, method: \"Literal['average', 'min', 'max', 'first', 'dense']\" = 'average', numeric_only: 'bool_t' = False, na_option: \"Literal['keep', 'top', 'bottom']\" = 'keep', ascending: 'bool_t' = True, pct: 'bool_t' = False) -&gt; 'Self'\n |      Compute numerical data ranks (1 through n) along axis.\n |\n |      By default, equal values are assigned a rank that is the average of the\n |      ranks of those values.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Index to direct ranking.\n |          For `Series` this parameter is unused and defaults to 0.\n |      method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n |          How to rank the group of records that have the same value (i.e. ties):\n |\n |          * average: average rank of the group\n |          * min: lowest rank in the group\n |          * max: highest rank in the group\n |          * first: ranks assigned in order they appear in the array\n |          * dense: like 'min', but rank always increases by 1 between groups.\n |\n |      numeric_only : bool, default False\n |          For DataFrame objects, rank only numeric columns if set to True.\n |\n |          .. versionchanged:: 2.0.0\n |              The default value of ``numeric_only`` is now ``False``.\n |\n |      na_option : {'keep', 'top', 'bottom'}, default 'keep'\n |          How to rank NaN values:\n |\n |          * keep: assign NaN rank to NaN values\n |          * top: assign lowest rank to NaN values\n |          * bottom: assign highest rank to NaN values\n |\n |      ascending : bool, default True\n |          Whether or not the elements should be ranked in ascending order.\n |      pct : bool, default False\n |          Whether or not to display the returned rankings in percentile\n |          form.\n |\n |      Returns\n |      -------\n |      same type as caller\n |          Return a Series or DataFrame with data ranks as values.\n |\n |      See Also\n |      --------\n |      core.groupby.DataFrameGroupBy.rank : Rank of values within each group.\n |      core.groupby.SeriesGroupBy.rank : Rank of values within each group.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',\n |      ...                                    'spider', 'snake'],\n |      ...                         'Number_legs': [4, 2, 4, 8, np.nan]})\n |      &gt;&gt;&gt; df\n |          Animal  Number_legs\n |      0      cat          4.0\n |      1  penguin          2.0\n |      2      dog          4.0\n |      3   spider          8.0\n |      4    snake          NaN\n |\n |      Ties are assigned the mean of the ranks (by default) for the group.\n |\n |      &gt;&gt;&gt; s = pd.Series(range(5), index=list(\"abcde\"))\n |      &gt;&gt;&gt; s[\"d\"] = s[\"b\"]\n |      &gt;&gt;&gt; s.rank()\n |      a    1.0\n |      b    2.5\n |      c    4.0\n |      d    2.5\n |      e    5.0\n |      dtype: float64\n |\n |      The following example shows how the method behaves with the above\n |      parameters:\n |\n |      * default_rank: this is the default behaviour obtained without using\n |        any parameter.\n |      * max_rank: setting ``method = 'max'`` the records that have the\n |        same values are ranked using the highest rank (e.g.: since 'cat'\n |        and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)\n |      * NA_bottom: choosing ``na_option = 'bottom'``, if there are records\n |        with NaN values they are placed at the bottom of the ranking.\n |      * pct_rank: when setting ``pct = True``, the ranking is expressed as\n |        percentile rank.\n |\n |      &gt;&gt;&gt; df['default_rank'] = df['Number_legs'].rank()\n |      &gt;&gt;&gt; df['max_rank'] = df['Number_legs'].rank(method='max')\n |      &gt;&gt;&gt; df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\n |      &gt;&gt;&gt; df['pct_rank'] = df['Number_legs'].rank(pct=True)\n |      &gt;&gt;&gt; df\n |          Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank\n |      0      cat          4.0           2.5       3.0        2.5     0.625\n |      1  penguin          2.0           1.0       1.0        1.0     0.250\n |      2      dog          4.0           2.5       3.0        2.5     0.625\n |      3   spider          8.0           4.0       4.0        4.0     1.000\n |      4    snake          NaN           NaN       NaN        5.0       NaN\n |\n |  reindex_like(self, other, method: \"Literal['backfill', 'bfill', 'pad', 'ffill', 'nearest'] | None\" = None, copy: 'bool_t | None' = None, limit: 'int | None' = None, tolerance=None) -&gt; 'Self'\n |      Return an object with matching indices as other object.\n |\n |      Conform the object to the same index on all axes. Optional\n |      filling logic, placing NaN in locations having no value\n |      in the previous index. A new object is produced unless the\n |      new index is equivalent to the current one and copy=False.\n |\n |      Parameters\n |      ----------\n |      other : Object of the same data type\n |          Its row and column indices are used to define the new indices\n |          of this object.\n |      method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n |          Method to use for filling holes in reindexed DataFrame.\n |          Please note: this is only applicable to DataFrames/Series with a\n |          monotonically increasing/decreasing index.\n |\n |          * None (default): don't fill gaps\n |          * pad / ffill: propagate last valid observation forward to next\n |            valid\n |          * backfill / bfill: use next valid observation to fill gap\n |          * nearest: use nearest valid observations to fill gap.\n |\n |      copy : bool, default True\n |          Return a new object, even if the passed indexes are the same.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      limit : int, default None\n |          Maximum number of consecutive labels to fill for inexact matches.\n |      tolerance : optional\n |          Maximum distance between original and new labels for inexact\n |          matches. The values of the index at the matching locations must\n |          satisfy the equation ``abs(index[indexer] - target) &lt;= tolerance``.\n |\n |          Tolerance may be a scalar value, which applies the same tolerance\n |          to all values, or list-like, which applies variable tolerance per\n |          element. List-like includes list, tuple, array, Series, and must be\n |          the same size as the index and its dtype must exactly match the\n |          index's type.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Same type as caller, but with changed indices on each axis.\n |\n |      See Also\n |      --------\n |      DataFrame.set_index : Set row labels.\n |      DataFrame.reset_index : Remove row labels or move them to new columns.\n |      DataFrame.reindex : Change to new indices or expand indices.\n |\n |      Notes\n |      -----\n |      Same as calling\n |      ``.reindex(index=other.index, columns=other.columns,...)``.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n |      ...                     [31, 87.8, 'high'],\n |      ...                     [22, 71.6, 'medium'],\n |      ...                     [35, 95, 'medium']],\n |      ...                    columns=['temp_celsius', 'temp_fahrenheit',\n |      ...                             'windspeed'],\n |      ...                    index=pd.date_range(start='2014-02-12',\n |      ...                                        end='2014-02-15', freq='D'))\n |\n |      &gt;&gt;&gt; df1\n |                  temp_celsius  temp_fahrenheit windspeed\n |      2014-02-12          24.3             75.7      high\n |      2014-02-13          31.0             87.8      high\n |      2014-02-14          22.0             71.6    medium\n |      2014-02-15          35.0             95.0    medium\n |\n |      &gt;&gt;&gt; df2 = pd.DataFrame([[28, 'low'],\n |      ...                     [30, 'low'],\n |      ...                     [35.1, 'medium']],\n |      ...                    columns=['temp_celsius', 'windspeed'],\n |      ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n |      ...                                            '2014-02-15']))\n |\n |      &gt;&gt;&gt; df2\n |                  temp_celsius windspeed\n |      2014-02-12          28.0       low\n |      2014-02-13          30.0       low\n |      2014-02-15          35.1    medium\n |\n |      &gt;&gt;&gt; df2.reindex_like(df1)\n |                  temp_celsius  temp_fahrenheit windspeed\n |      2014-02-12          28.0              NaN       low\n |      2014-02-13          30.0              NaN       low\n |      2014-02-14           NaN              NaN       NaN\n |      2014-02-15          35.1              NaN    medium\n |\n |  replace(self, to_replace=None, value=&lt;no_default&gt;, *, inplace: 'bool_t' = False, limit: 'int | None' = None, regex: 'bool_t' = False, method: \"Literal['pad', 'ffill', 'bfill'] | lib.NoDefault\" = &lt;no_default&gt;) -&gt; 'Self | None'\n |      Replace values given in `to_replace` with `value`.\n |\n |      Values of the Series/DataFrame are replaced with other values dynamically.\n |      This differs from updating with ``.loc`` or ``.iloc``, which require\n |      you to specify a location to update with some value.\n |\n |      Parameters\n |      ----------\n |      to_replace : str, regex, list, dict, Series, int, float, or None\n |          How to find the values that will be replaced.\n |\n |          * numeric, str or regex:\n |\n |              - numeric: numeric values equal to `to_replace` will be\n |                replaced with `value`\n |              - str: string exactly matching `to_replace` will be replaced\n |                with `value`\n |              - regex: regexs matching `to_replace` will be replaced with\n |                `value`\n |\n |          * list of str, regex, or numeric:\n |\n |              - First, if `to_replace` and `value` are both lists, they\n |                **must** be the same length.\n |              - Second, if ``regex=True`` then all of the strings in **both**\n |                lists will be interpreted as regexs otherwise they will match\n |                directly. This doesn't matter much for `value` since there\n |                are only a few possible substitution regexes you can use.\n |              - str, regex and numeric rules apply as above.\n |\n |          * dict:\n |\n |              - Dicts can be used to specify different replacement values\n |                for different existing values. For example,\n |                ``{'a': 'b', 'y': 'z'}`` replaces the value 'a' with 'b' and\n |                'y' with 'z'. To use a dict in this way, the optional `value`\n |                parameter should not be given.\n |              - For a DataFrame a dict can specify that different values\n |                should be replaced in different columns. For example,\n |                ``{'a': 1, 'b': 'z'}`` looks for the value 1 in column 'a'\n |                and the value 'z' in column 'b' and replaces these values\n |                with whatever is specified in `value`. The `value` parameter\n |                should not be ``None`` in this case. You can treat this as a\n |                special case of passing two lists except that you are\n |                specifying the column to search in.\n |              - For a DataFrame nested dictionaries, e.g.,\n |                ``{'a': {'b': np.nan}}``, are read as follows: look in column\n |                'a' for the value 'b' and replace it with NaN. The optional `value`\n |                parameter should not be specified to use a nested dict in this\n |                way. You can nest regular expressions as well. Note that\n |                column names (the top-level dictionary keys in a nested\n |                dictionary) **cannot** be regular expressions.\n |\n |          * None:\n |\n |              - This means that the `regex` argument must be a string,\n |                compiled regular expression, or list, dict, ndarray or\n |                Series of such elements. If `value` is also ``None`` then\n |                this **must** be a nested dictionary or Series.\n |\n |          See the examples section for examples of each of these.\n |      value : scalar, dict, list, str, regex, default None\n |          Value to replace any values matching `to_replace` with.\n |          For a DataFrame a dict of values can be used to specify which\n |          value to use for each column (columns not in the dict will not be\n |          filled). Regular expressions, strings and lists or dicts of such\n |          objects are also allowed.\n |\n |      inplace : bool, default False\n |          If True, performs operation inplace and returns None.\n |      limit : int, default None\n |          Maximum size gap to forward or backward fill.\n |\n |          .. deprecated:: 2.1.0\n |      regex : bool or same types as `to_replace`, default False\n |          Whether to interpret `to_replace` and/or `value` as regular\n |          expressions. Alternatively, this could be a regular expression or a\n |          list, dict, or array of regular expressions in which case\n |          `to_replace` must be ``None``.\n |      method : {'pad', 'ffill', 'bfill'}\n |          The method to use when for replacement, when `to_replace` is a\n |          scalar, list or tuple and `value` is ``None``.\n |\n |          .. deprecated:: 2.1.0\n |\n |      Returns\n |      -------\n |      Series/DataFrame\n |          Object after replacement.\n |\n |      Raises\n |      ------\n |      AssertionError\n |          * If `regex` is not a ``bool`` and `to_replace` is not\n |            ``None``.\n |\n |      TypeError\n |          * If `to_replace` is not a scalar, array-like, ``dict``, or ``None``\n |          * If `to_replace` is a ``dict`` and `value` is not a ``list``,\n |            ``dict``, ``ndarray``, or ``Series``\n |          * If `to_replace` is ``None`` and `regex` is not compilable\n |            into a regular expression or is a list, dict, ndarray, or\n |            Series.\n |          * When replacing multiple ``bool`` or ``datetime64`` objects and\n |            the arguments to `to_replace` does not match the type of the\n |            value being replaced\n |\n |      ValueError\n |          * If a ``list`` or an ``ndarray`` is passed to `to_replace` and\n |            `value` but they are not the same length.\n |\n |      See Also\n |      --------\n |      Series.fillna : Fill NA values.\n |      DataFrame.fillna : Fill NA values.\n |      Series.where : Replace values based on boolean condition.\n |      DataFrame.where : Replace values based on boolean condition.\n |      DataFrame.map: Apply a function to a Dataframe elementwise.\n |      Series.map: Map values of Series according to an input mapping or function.\n |      Series.str.replace : Simple string replacement.\n |\n |      Notes\n |      -----\n |      * Regex substitution is performed under the hood with ``re.sub``. The\n |        rules for substitution for ``re.sub`` are the same.\n |      * Regular expressions will only substitute on strings, meaning you\n |        cannot provide, for example, a regular expression matching floating\n |        point numbers and expect the columns in your frame that have a\n |        numeric dtype to be matched. However, if those floating point\n |        numbers *are* strings, then you can do this.\n |      * This method has *a lot* of options. You are encouraged to experiment\n |        and play with this method to gain intuition about how it works.\n |      * When dict is used as the `to_replace` value, it is like\n |        key(s) in the dict are the to_replace part and\n |        value(s) in the dict are the value parameter.\n |\n |      Examples\n |      --------\n |\n |      **Scalar `to_replace` and `value`**\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4, 5])\n |      &gt;&gt;&gt; s.replace(1, 5)\n |      0    5\n |      1    2\n |      2    3\n |      3    4\n |      4    5\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n |      ...                    'B': [5, 6, 7, 8, 9],\n |      ...                    'C': ['a', 'b', 'c', 'd', 'e']})\n |      &gt;&gt;&gt; df.replace(0, 5)\n |          A  B  C\n |      0  5  5  a\n |      1  1  6  b\n |      2  2  7  c\n |      3  3  8  d\n |      4  4  9  e\n |\n |      **List-like `to_replace`**\n |\n |      &gt;&gt;&gt; df.replace([0, 1, 2, 3], 4)\n |          A  B  C\n |      0  4  5  a\n |      1  4  6  b\n |      2  4  7  c\n |      3  4  8  d\n |      4  4  9  e\n |\n |      &gt;&gt;&gt; df.replace([0, 1, 2, 3], [4, 3, 2, 1])\n |          A  B  C\n |      0  4  5  a\n |      1  3  6  b\n |      2  2  7  c\n |      3  1  8  d\n |      4  4  9  e\n |\n |      &gt;&gt;&gt; s.replace([1, 2], method='bfill')\n |      0    3\n |      1    3\n |      2    3\n |      3    4\n |      4    5\n |      dtype: int64\n |\n |      **dict-like `to_replace`**\n |\n |      &gt;&gt;&gt; df.replace({0: 10, 1: 100})\n |              A  B  C\n |      0   10  5  a\n |      1  100  6  b\n |      2    2  7  c\n |      3    3  8  d\n |      4    4  9  e\n |\n |      &gt;&gt;&gt; df.replace({'A': 0, 'B': 5}, 100)\n |              A    B  C\n |      0  100  100  a\n |      1    1    6  b\n |      2    2    7  c\n |      3    3    8  d\n |      4    4    9  e\n |\n |      &gt;&gt;&gt; df.replace({'A': {0: 100, 4: 400}})\n |              A  B  C\n |      0  100  5  a\n |      1    1  6  b\n |      2    2  7  c\n |      3    3  8  d\n |      4  400  9  e\n |\n |      **Regular expression `to_replace`**\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],\n |      ...                    'B': ['abc', 'bar', 'xyz']})\n |      &gt;&gt;&gt; df.replace(to_replace=r'^ba.$', value='new', regex=True)\n |              A    B\n |      0   new  abc\n |      1   foo  new\n |      2  bait  xyz\n |\n |      &gt;&gt;&gt; df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)\n |              A    B\n |      0   new  abc\n |      1   foo  bar\n |      2  bait  xyz\n |\n |      &gt;&gt;&gt; df.replace(regex=r'^ba.$', value='new')\n |              A    B\n |      0   new  abc\n |      1   foo  new\n |      2  bait  xyz\n |\n |      &gt;&gt;&gt; df.replace(regex={r'^ba.$': 'new', 'foo': 'xyz'})\n |              A    B\n |      0   new  abc\n |      1   xyz  new\n |      2  bait  xyz\n |\n |      &gt;&gt;&gt; df.replace(regex=[r'^ba.$', 'foo'], value='new')\n |              A    B\n |      0   new  abc\n |      1   new  new\n |      2  bait  xyz\n |\n |      Compare the behavior of ``s.replace({'a': None})`` and\n |      ``s.replace('a', None)`` to understand the peculiarities\n |      of the `to_replace` parameter:\n |\n |      &gt;&gt;&gt; s = pd.Series([10, 'a', 'a', 'b', 'a'])\n |\n |      When one uses a dict as the `to_replace` value, it is like the\n |      value(s) in the dict are equal to the `value` parameter.\n |      ``s.replace({'a': None})`` is equivalent to\n |      ``s.replace(to_replace={'a': None}, value=None, method=None)``:\n |\n |      &gt;&gt;&gt; s.replace({'a': None})\n |      0      10\n |      1    None\n |      2    None\n |      3       b\n |      4    None\n |      dtype: object\n |\n |      When ``value`` is not explicitly passed and `to_replace` is a scalar, list\n |      or tuple, `replace` uses the method parameter (default 'pad') to do the\n |      replacement. So this is why the 'a' values are being replaced by 10\n |      in rows 1 and 2 and 'b' in row 4 in this case.\n |\n |      &gt;&gt;&gt; s.replace('a')\n |      0    10\n |      1    10\n |      2    10\n |      3     b\n |      4     b\n |      dtype: object\n |\n |          .. deprecated:: 2.1.0\n |              The 'method' parameter and padding behavior are deprecated.\n |\n |      On the other hand, if ``None`` is explicitly passed for ``value``, it will\n |      be respected:\n |\n |      &gt;&gt;&gt; s.replace('a', None)\n |      0      10\n |      1    None\n |      2    None\n |      3       b\n |      4    None\n |      dtype: object\n |\n |          .. versionchanged:: 1.4.0\n |              Previously the explicit ``None`` was silently ignored.\n |\n |      When ``regex=True``, ``value`` is not ``None`` and `to_replace` is a string,\n |      the replacement will be applied in all columns of the DataFrame.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n |      ...                    'B': ['a', 'b', 'c', 'd', 'e'],\n |      ...                    'C': ['f', 'g', 'h', 'i', 'j']})\n |\n |      &gt;&gt;&gt; df.replace(to_replace='^[a-g]', value='e', regex=True)\n |          A  B  C\n |      0  0  e  e\n |      1  1  e  e\n |      2  2  e  h\n |      3  3  e  i\n |      4  4  e  j\n |\n |      If ``value`` is not ``None`` and `to_replace` is a dictionary, the dictionary\n |      keys will be the DataFrame columns that the replacement will be applied.\n |\n |      &gt;&gt;&gt; df.replace(to_replace={'B': '^[a-c]', 'C': '^[h-j]'}, value='e', regex=True)\n |          A  B  C\n |      0  0  e  f\n |      1  1  e  g\n |      2  2  e  e\n |      3  3  d  e\n |      4  4  e  e\n |\n |  resample(self, rule, axis: 'Axis | lib.NoDefault' = &lt;no_default&gt;, closed: \"Literal['right', 'left'] | None\" = None, label: \"Literal['right', 'left'] | None\" = None, convention: \"Literal['start', 'end', 's', 'e'] | lib.NoDefault\" = &lt;no_default&gt;, kind: \"Literal['timestamp', 'period'] | None | lib.NoDefault\" = &lt;no_default&gt;, on: 'Level | None' = None, level: 'Level | None' = None, origin: 'str | TimestampConvertibleTypes' = 'start_day', offset: 'TimedeltaConvertibleTypes | None' = None, group_keys: 'bool_t' = False) -&gt; 'Resampler'\n |      Resample time-series data.\n |\n |      Convenience method for frequency conversion and resampling of time series.\n |      The object must have a datetime-like index (`DatetimeIndex`, `PeriodIndex`,\n |      or `TimedeltaIndex`), or the caller must pass the label of a datetime-like\n |      series/index to the ``on``/``level`` keyword parameter.\n |\n |      Parameters\n |      ----------\n |      rule : DateOffset, Timedelta or str\n |          The offset string or object representing target conversion.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Which axis to use for up- or down-sampling. For `Series` this parameter\n |          is unused and defaults to 0. Must be\n |          `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.\n |\n |          .. deprecated:: 2.0.0\n |              Use frame.T.resample(...) instead.\n |      closed : {'right', 'left'}, default None\n |          Which side of bin interval is closed. The default is 'left'\n |          for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',\n |          'BA', 'BQE', and 'W' which all have a default of 'right'.\n |      label : {'right', 'left'}, default None\n |          Which bin edge label to label bucket with. The default is 'left'\n |          for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',\n |          'BA', 'BQE', and 'W' which all have a default of 'right'.\n |      convention : {'start', 'end', 's', 'e'}, default 'start'\n |          For `PeriodIndex` only, controls whether to use the start or\n |          end of `rule`.\n |\n |          .. deprecated:: 2.2.0\n |              Convert PeriodIndex to DatetimeIndex before resampling instead.\n |      kind : {'timestamp', 'period'}, optional, default None\n |          Pass 'timestamp' to convert the resulting index to a\n |          `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.\n |          By default the input representation is retained.\n |\n |          .. deprecated:: 2.2.0\n |              Convert index to desired type explicitly instead.\n |\n |      on : str, optional\n |          For a DataFrame, column to use instead of index for resampling.\n |          Column must be datetime-like.\n |      level : str or int, optional\n |          For a MultiIndex, level (name or number) to use for\n |          resampling. `level` must be datetime-like.\n |      origin : Timestamp or str, default 'start_day'\n |          The timestamp on which to adjust the grouping. The timezone of origin\n |          must match the timezone of the index.\n |          If string, must be one of the following:\n |\n |          - 'epoch': `origin` is 1970-01-01\n |          - 'start': `origin` is the first value of the timeseries\n |          - 'start_day': `origin` is the first day at midnight of the timeseries\n |\n |          - 'end': `origin` is the last value of the timeseries\n |          - 'end_day': `origin` is the ceiling midnight of the last day\n |\n |          .. versionadded:: 1.3.0\n |\n |          .. note::\n |\n |              Only takes effect for Tick-frequencies (i.e. fixed frequencies like\n |              days, hours, and minutes, rather than months or quarters).\n |      offset : Timedelta or str, default is None\n |          An offset timedelta added to the origin.\n |\n |      group_keys : bool, default False\n |          Whether to include the group keys in the result index when using\n |          ``.apply()`` on the resampled object.\n |\n |          .. versionadded:: 1.5.0\n |\n |              Not specifying ``group_keys`` will retain values-dependent behavior\n |              from pandas 1.4 and earlier (see :ref:`pandas 1.5.0 Release notes\n |              &lt;whatsnew_150.enhancements.resample_group_keys&gt;` for examples).\n |\n |          .. versionchanged:: 2.0.0\n |\n |              ``group_keys`` now defaults to ``False``.\n |\n |      Returns\n |      -------\n |      pandas.api.typing.Resampler\n |          :class:`~pandas.core.Resampler` object.\n |\n |      See Also\n |      --------\n |      Series.resample : Resample a Series.\n |      DataFrame.resample : Resample a DataFrame.\n |      groupby : Group Series/DataFrame by mapping, function, label, or list of labels.\n |      asfreq : Reindex a Series/DataFrame with the given frequency without grouping.\n |\n |      Notes\n |      -----\n |      See the `user guide\n |      &lt;https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling&gt;`__\n |      for more.\n |\n |      To learn more about the offset strings, please see `this link\n |      &lt;https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects&gt;`__.\n |\n |      Examples\n |      --------\n |      Start by creating a series with 9 one minute timestamps.\n |\n |      &gt;&gt;&gt; index = pd.date_range('1/1/2000', periods=9, freq='min')\n |      &gt;&gt;&gt; series = pd.Series(range(9), index=index)\n |      &gt;&gt;&gt; series\n |      2000-01-01 00:00:00    0\n |      2000-01-01 00:01:00    1\n |      2000-01-01 00:02:00    2\n |      2000-01-01 00:03:00    3\n |      2000-01-01 00:04:00    4\n |      2000-01-01 00:05:00    5\n |      2000-01-01 00:06:00    6\n |      2000-01-01 00:07:00    7\n |      2000-01-01 00:08:00    8\n |      Freq: min, dtype: int64\n |\n |      Downsample the series into 3 minute bins and sum the values\n |      of the timestamps falling into a bin.\n |\n |      &gt;&gt;&gt; series.resample('3min').sum()\n |      2000-01-01 00:00:00     3\n |      2000-01-01 00:03:00    12\n |      2000-01-01 00:06:00    21\n |      Freq: 3min, dtype: int64\n |\n |      Downsample the series into 3 minute bins as above, but label each\n |      bin using the right edge instead of the left. Please note that the\n |      value in the bucket used as the label is not included in the bucket,\n |      which it labels. For example, in the original series the\n |      bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\n |      value in the resampled bucket with the label ``2000-01-01 00:03:00``\n |      does not include 3 (if it did, the summed value would be 6, not 3).\n |\n |      &gt;&gt;&gt; series.resample('3min', label='right').sum()\n |      2000-01-01 00:03:00     3\n |      2000-01-01 00:06:00    12\n |      2000-01-01 00:09:00    21\n |      Freq: 3min, dtype: int64\n |\n |      To include this value close the right side of the bin interval,\n |      as shown below.\n |\n |      &gt;&gt;&gt; series.resample('3min', label='right', closed='right').sum()\n |      2000-01-01 00:00:00     0\n |      2000-01-01 00:03:00     6\n |      2000-01-01 00:06:00    15\n |      2000-01-01 00:09:00    15\n |      Freq: 3min, dtype: int64\n |\n |      Upsample the series into 30 second bins.\n |\n |      &gt;&gt;&gt; series.resample('30s').asfreq()[0:5]   # Select first 5 rows\n |      2000-01-01 00:00:00   0.0\n |      2000-01-01 00:00:30   NaN\n |      2000-01-01 00:01:00   1.0\n |      2000-01-01 00:01:30   NaN\n |      2000-01-01 00:02:00   2.0\n |      Freq: 30s, dtype: float64\n |\n |      Upsample the series into 30 second bins and fill the ``NaN``\n |      values using the ``ffill`` method.\n |\n |      &gt;&gt;&gt; series.resample('30s').ffill()[0:5]\n |      2000-01-01 00:00:00    0\n |      2000-01-01 00:00:30    0\n |      2000-01-01 00:01:00    1\n |      2000-01-01 00:01:30    1\n |      2000-01-01 00:02:00    2\n |      Freq: 30s, dtype: int64\n |\n |      Upsample the series into 30 second bins and fill the\n |      ``NaN`` values using the ``bfill`` method.\n |\n |      &gt;&gt;&gt; series.resample('30s').bfill()[0:5]\n |      2000-01-01 00:00:00    0\n |      2000-01-01 00:00:30    1\n |      2000-01-01 00:01:00    1\n |      2000-01-01 00:01:30    2\n |      2000-01-01 00:02:00    2\n |      Freq: 30s, dtype: int64\n |\n |      Pass a custom function via ``apply``\n |\n |      &gt;&gt;&gt; def custom_resampler(arraylike):\n |      ...     return np.sum(arraylike) + 5\n |      ...\n |      &gt;&gt;&gt; series.resample('3min').apply(custom_resampler)\n |      2000-01-01 00:00:00     8\n |      2000-01-01 00:03:00    17\n |      2000-01-01 00:06:00    26\n |      Freq: 3min, dtype: int64\n |\n |      For DataFrame objects, the keyword `on` can be used to specify the\n |      column instead of the index for resampling.\n |\n |      &gt;&gt;&gt; d = {'price': [10, 11, 9, 13, 14, 18, 17, 19],\n |      ...      'volume': [50, 60, 40, 100, 50, 100, 40, 50]}\n |      &gt;&gt;&gt; df = pd.DataFrame(d)\n |      &gt;&gt;&gt; df['week_starting'] = pd.date_range('01/01/2018',\n |      ...                                     periods=8,\n |      ...                                     freq='W')\n |      &gt;&gt;&gt; df\n |         price  volume week_starting\n |      0     10      50    2018-01-07\n |      1     11      60    2018-01-14\n |      2      9      40    2018-01-21\n |      3     13     100    2018-01-28\n |      4     14      50    2018-02-04\n |      5     18     100    2018-02-11\n |      6     17      40    2018-02-18\n |      7     19      50    2018-02-25\n |      &gt;&gt;&gt; df.resample('ME', on='week_starting').mean()\n |                     price  volume\n |      week_starting\n |      2018-01-31     10.75    62.5\n |      2018-02-28     17.00    60.0\n |\n |      For a DataFrame with MultiIndex, the keyword `level` can be used to\n |      specify on which level the resampling needs to take place.\n |\n |      &gt;&gt;&gt; days = pd.date_range('1/1/2000', periods=4, freq='D')\n |      &gt;&gt;&gt; d2 = {'price': [10, 11, 9, 13, 14, 18, 17, 19],\n |      ...       'volume': [50, 60, 40, 100, 50, 100, 40, 50]}\n |      &gt;&gt;&gt; df2 = pd.DataFrame(\n |      ...     d2,\n |      ...     index=pd.MultiIndex.from_product(\n |      ...         [days, ['morning', 'afternoon']]\n |      ...     )\n |      ... )\n |      &gt;&gt;&gt; df2\n |                            price  volume\n |      2000-01-01 morning       10      50\n |                 afternoon     11      60\n |      2000-01-02 morning        9      40\n |                 afternoon     13     100\n |      2000-01-03 morning       14      50\n |                 afternoon     18     100\n |      2000-01-04 morning       17      40\n |                 afternoon     19      50\n |      &gt;&gt;&gt; df2.resample('D', level=0).sum()\n |                  price  volume\n |      2000-01-01     21     110\n |      2000-01-02     22     140\n |      2000-01-03     32     150\n |      2000-01-04     36      90\n |\n |      If you want to adjust the start of the bins based on a fixed timestamp:\n |\n |      &gt;&gt;&gt; start, end = '2000-10-01 23:30:00', '2000-10-02 00:30:00'\n |      &gt;&gt;&gt; rng = pd.date_range(start, end, freq='7min')\n |      &gt;&gt;&gt; ts = pd.Series(np.arange(len(rng)) * 3, index=rng)\n |      &gt;&gt;&gt; ts\n |      2000-10-01 23:30:00     0\n |      2000-10-01 23:37:00     3\n |      2000-10-01 23:44:00     6\n |      2000-10-01 23:51:00     9\n |      2000-10-01 23:58:00    12\n |      2000-10-02 00:05:00    15\n |      2000-10-02 00:12:00    18\n |      2000-10-02 00:19:00    21\n |      2000-10-02 00:26:00    24\n |      Freq: 7min, dtype: int64\n |\n |      &gt;&gt;&gt; ts.resample('17min').sum()\n |      2000-10-01 23:14:00     0\n |      2000-10-01 23:31:00     9\n |      2000-10-01 23:48:00    21\n |      2000-10-02 00:05:00    54\n |      2000-10-02 00:22:00    24\n |      Freq: 17min, dtype: int64\n |\n |      &gt;&gt;&gt; ts.resample('17min', origin='epoch').sum()\n |      2000-10-01 23:18:00     0\n |      2000-10-01 23:35:00    18\n |      2000-10-01 23:52:00    27\n |      2000-10-02 00:09:00    39\n |      2000-10-02 00:26:00    24\n |      Freq: 17min, dtype: int64\n |\n |      &gt;&gt;&gt; ts.resample('17min', origin='2000-01-01').sum()\n |      2000-10-01 23:24:00     3\n |      2000-10-01 23:41:00    15\n |      2000-10-01 23:58:00    45\n |      2000-10-02 00:15:00    45\n |      Freq: 17min, dtype: int64\n |\n |      If you want to adjust the start of the bins with an `offset` Timedelta, the two\n |      following lines are equivalent:\n |\n |      &gt;&gt;&gt; ts.resample('17min', origin='start').sum()\n |      2000-10-01 23:30:00     9\n |      2000-10-01 23:47:00    21\n |      2000-10-02 00:04:00    54\n |      2000-10-02 00:21:00    24\n |      Freq: 17min, dtype: int64\n |\n |      &gt;&gt;&gt; ts.resample('17min', offset='23h30min').sum()\n |      2000-10-01 23:30:00     9\n |      2000-10-01 23:47:00    21\n |      2000-10-02 00:04:00    54\n |      2000-10-02 00:21:00    24\n |      Freq: 17min, dtype: int64\n |\n |      If you want to take the largest Timestamp as the end of the bins:\n |\n |      &gt;&gt;&gt; ts.resample('17min', origin='end').sum()\n |      2000-10-01 23:35:00     0\n |      2000-10-01 23:52:00    18\n |      2000-10-02 00:09:00    27\n |      2000-10-02 00:26:00    63\n |      Freq: 17min, dtype: int64\n |\n |      In contrast with the `start_day`, you can use `end_day` to take the ceiling\n |      midnight of the largest Timestamp as the end of the bins and drop the bins\n |      not containing data:\n |\n |      &gt;&gt;&gt; ts.resample('17min', origin='end_day').sum()\n |      2000-10-01 23:38:00     3\n |      2000-10-01 23:55:00    15\n |      2000-10-02 00:12:00    45\n |      2000-10-02 00:29:00    45\n |      Freq: 17min, dtype: int64\n |\n |  rolling(self, window: 'int | dt.timedelta | str | BaseOffset | BaseIndexer', min_periods: 'int | None' = None, center: 'bool_t' = False, win_type: 'str | None' = None, on: 'str | None' = None, axis: 'Axis | lib.NoDefault' = &lt;no_default&gt;, closed: 'IntervalClosedType | None' = None, step: 'int | None' = None, method: 'str' = 'single') -&gt; 'Window | Rolling'\n |      Provide rolling window calculations.\n |\n |      Parameters\n |      ----------\n |      window : int, timedelta, str, offset, or BaseIndexer subclass\n |          Size of the moving window.\n |\n |          If an integer, the fixed number of observations used for\n |          each window.\n |\n |          If a timedelta, str, or offset, the time period of each window. Each\n |          window will be a variable sized based on the observations included in\n |          the time-period. This is only valid for datetimelike indexes.\n |          To learn more about the offsets & frequency strings, please see `this link\n |          &lt;https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases&gt;`__.\n |\n |          If a BaseIndexer subclass, the window boundaries\n |          based on the defined ``get_window_bounds`` method. Additional rolling\n |          keyword arguments, namely ``min_periods``, ``center``, ``closed`` and\n |          ``step`` will be passed to ``get_window_bounds``.\n |\n |      min_periods : int, default None\n |          Minimum number of observations in window required to have a value;\n |          otherwise, result is ``np.nan``.\n |\n |          For a window that is specified by an offset, ``min_periods`` will default to 1.\n |\n |          For a window that is specified by an integer, ``min_periods`` will default\n |          to the size of the window.\n |\n |      center : bool, default False\n |          If False, set the window labels as the right edge of the window index.\n |\n |          If True, set the window labels as the center of the window index.\n |\n |      win_type : str, default None\n |          If ``None``, all points are evenly weighted.\n |\n |          If a string, it must be a valid `scipy.signal window function\n |          &lt;https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows&gt;`__.\n |\n |          Certain Scipy window types require additional parameters to be passed\n |          in the aggregation function. The additional parameters must match\n |          the keywords specified in the Scipy window type method signature.\n |\n |      on : str, optional\n |          For a DataFrame, a column label or Index level on which\n |          to calculate the rolling window, rather than the DataFrame's index.\n |\n |          Provided integer column is ignored and excluded from result since\n |          an integer index is not used to calculate the rolling window.\n |\n |      axis : int or str, default 0\n |          If ``0`` or ``'index'``, roll across the rows.\n |\n |          If ``1`` or ``'columns'``, roll across the columns.\n |\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          .. deprecated:: 2.1.0\n |\n |              The axis keyword is deprecated. For ``axis=1``,\n |              transpose the DataFrame first instead.\n |\n |      closed : str, default None\n |          If ``'right'``, the first point in the window is excluded from calculations.\n |\n |          If ``'left'``, the last point in the window is excluded from calculations.\n |\n |          If ``'both'``, the no points in the window are excluded from calculations.\n |\n |          If ``'neither'``, the first and last points in the window are excluded\n |          from calculations.\n |\n |          Default ``None`` (``'right'``).\n |\n |      step : int, default None\n |\n |          .. versionadded:: 1.5.0\n |\n |          Evaluate the window at every ``step`` result, equivalent to slicing as\n |          ``[::step]``. ``window`` must be an integer. Using a step argument other\n |          than None or 1 will produce a result with a different shape than the input.\n |\n |      method : str {'single', 'table'}, default 'single'\n |\n |          .. versionadded:: 1.3.0\n |\n |          Execute the rolling operation per single column or row (``'single'``)\n |          or over the entire object (``'table'``).\n |\n |          This argument is only implemented when specifying ``engine='numba'``\n |          in the method call.\n |\n |      Returns\n |      -------\n |      pandas.api.typing.Window or pandas.api.typing.Rolling\n |          An instance of Window is returned if ``win_type`` is passed. Otherwise,\n |          an instance of Rolling is returned.\n |\n |      See Also\n |      --------\n |      expanding : Provides expanding transformations.\n |      ewm : Provides exponential weighted functions.\n |\n |      Notes\n |      -----\n |      See :ref:`Windowing Operations &lt;window.generic&gt;` for further usage details\n |      and examples.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n |      &gt;&gt;&gt; df\n |           B\n |      0  0.0\n |      1  1.0\n |      2  2.0\n |      3  NaN\n |      4  4.0\n |\n |      **window**\n |\n |      Rolling sum with a window length of 2 observations.\n |\n |      &gt;&gt;&gt; df.rolling(2).sum()\n |           B\n |      0  NaN\n |      1  1.0\n |      2  3.0\n |      3  NaN\n |      4  NaN\n |\n |      Rolling sum with a window span of 2 seconds.\n |\n |      &gt;&gt;&gt; df_time = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]},\n |      ...                        index=[pd.Timestamp('20130101 09:00:00'),\n |      ...                               pd.Timestamp('20130101 09:00:02'),\n |      ...                               pd.Timestamp('20130101 09:00:03'),\n |      ...                               pd.Timestamp('20130101 09:00:05'),\n |      ...                               pd.Timestamp('20130101 09:00:06')])\n |\n |      &gt;&gt;&gt; df_time\n |                             B\n |      2013-01-01 09:00:00  0.0\n |      2013-01-01 09:00:02  1.0\n |      2013-01-01 09:00:03  2.0\n |      2013-01-01 09:00:05  NaN\n |      2013-01-01 09:00:06  4.0\n |\n |      &gt;&gt;&gt; df_time.rolling('2s').sum()\n |                             B\n |      2013-01-01 09:00:00  0.0\n |      2013-01-01 09:00:02  1.0\n |      2013-01-01 09:00:03  3.0\n |      2013-01-01 09:00:05  NaN\n |      2013-01-01 09:00:06  4.0\n |\n |      Rolling sum with forward looking windows with 2 observations.\n |\n |      &gt;&gt;&gt; indexer = pd.api.indexers.FixedForwardWindowIndexer(window_size=2)\n |      &gt;&gt;&gt; df.rolling(window=indexer, min_periods=1).sum()\n |           B\n |      0  1.0\n |      1  3.0\n |      2  2.0\n |      3  4.0\n |      4  4.0\n |\n |      **min_periods**\n |\n |      Rolling sum with a window length of 2 observations, but only needs a minimum of 1\n |      observation to calculate a value.\n |\n |      &gt;&gt;&gt; df.rolling(2, min_periods=1).sum()\n |           B\n |      0  0.0\n |      1  1.0\n |      2  3.0\n |      3  2.0\n |      4  4.0\n |\n |      **center**\n |\n |      Rolling sum with the result assigned to the center of the window index.\n |\n |      &gt;&gt;&gt; df.rolling(3, min_periods=1, center=True).sum()\n |           B\n |      0  1.0\n |      1  3.0\n |      2  3.0\n |      3  6.0\n |      4  4.0\n |\n |      &gt;&gt;&gt; df.rolling(3, min_periods=1, center=False).sum()\n |           B\n |      0  0.0\n |      1  1.0\n |      2  3.0\n |      3  3.0\n |      4  6.0\n |\n |      **step**\n |\n |      Rolling sum with a window length of 2 observations, minimum of 1 observation to\n |      calculate a value, and a step of 2.\n |\n |      &gt;&gt;&gt; df.rolling(2, min_periods=1, step=2).sum()\n |           B\n |      0  0.0\n |      2  3.0\n |      4  4.0\n |\n |      **win_type**\n |\n |      Rolling sum with a window length of 2, using the Scipy ``'gaussian'``\n |      window type. ``std`` is required in the aggregation function.\n |\n |      &gt;&gt;&gt; df.rolling(2, win_type='gaussian').sum(std=3)\n |                B\n |      0       NaN\n |      1  0.986207\n |      2  2.958621\n |      3       NaN\n |      4       NaN\n |\n |      **on**\n |\n |      Rolling sum with a window length of 2 days.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     'A': [pd.to_datetime('2020-01-01'),\n |      ...           pd.to_datetime('2020-01-01'),\n |      ...           pd.to_datetime('2020-01-02'),],\n |      ...     'B': [1, 2, 3], },\n |      ...     index=pd.date_range('2020', periods=3))\n |\n |      &gt;&gt;&gt; df\n |                          A  B\n |      2020-01-01 2020-01-01  1\n |      2020-01-02 2020-01-01  2\n |      2020-01-03 2020-01-02  3\n |\n |      &gt;&gt;&gt; df.rolling('2D', on='A').sum()\n |                          A    B\n |      2020-01-01 2020-01-01  1.0\n |      2020-01-02 2020-01-01  3.0\n |      2020-01-03 2020-01-02  6.0\n |\n |  sample(self, n: 'int | None' = None, frac: 'float | None' = None, replace: 'bool_t' = False, weights=None, random_state: 'RandomState | None' = None, axis: 'Axis | None' = None, ignore_index: 'bool_t' = False) -&gt; 'Self'\n |      Return a random sample of items from an axis of object.\n |\n |      You can use `random_state` for reproducibility.\n |\n |      Parameters\n |      ----------\n |      n : int, optional\n |          Number of items from axis to return. Cannot be used with `frac`.\n |          Default = 1 if `frac` = None.\n |      frac : float, optional\n |          Fraction of axis items to return. Cannot be used with `n`.\n |      replace : bool, default False\n |          Allow or disallow sampling of the same row more than once.\n |      weights : str or ndarray-like, optional\n |          Default 'None' results in equal probability weighting.\n |          If passed a Series, will align with target object on index. Index\n |          values in weights not found in sampled object will be ignored and\n |          index values in sampled object not in weights will be assigned\n |          weights of zero.\n |          If called on a DataFrame, will accept the name of a column\n |          when axis = 0.\n |          Unless weights are a Series, weights must be same length as axis\n |          being sampled.\n |          If weights do not sum to 1, they will be normalized to sum to 1.\n |          Missing values in the weights column will be treated as zero.\n |          Infinite values not allowed.\n |      random_state : int, array-like, BitGenerator, np.random.RandomState, np.random.Generator, optional\n |          If int, array-like, or BitGenerator, seed for random number generator.\n |          If np.random.RandomState or np.random.Generator, use as given.\n |\n |          .. versionchanged:: 1.4.0\n |\n |              np.random.Generator objects now accepted\n |\n |      axis : {0 or 'index', 1 or 'columns', None}, default None\n |          Axis to sample. Accepts axis number or name. Default is stat axis\n |          for given data type. For `Series` this parameter is unused and defaults to `None`.\n |      ignore_index : bool, default False\n |          If True, the resulting index will be labeled 0, 1, …, n - 1.\n |\n |          .. versionadded:: 1.3.0\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          A new object of same type as caller containing `n` items randomly\n |          sampled from the caller object.\n |\n |      See Also\n |      --------\n |      DataFrameGroupBy.sample: Generates random samples from each group of a\n |          DataFrame object.\n |      SeriesGroupBy.sample: Generates random samples from each group of a\n |          Series object.\n |      numpy.random.choice: Generates a random sample from a given 1-D numpy\n |          array.\n |\n |      Notes\n |      -----\n |      If `frac` &gt; 1, `replacement` should be set to `True`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'num_legs': [2, 4, 8, 0],\n |      ...                    'num_wings': [2, 0, 0, 0],\n |      ...                    'num_specimen_seen': [10, 2, 1, 8]},\n |      ...                   index=['falcon', 'dog', 'spider', 'fish'])\n |      &gt;&gt;&gt; df\n |              num_legs  num_wings  num_specimen_seen\n |      falcon         2          2                 10\n |      dog            4          0                  2\n |      spider         8          0                  1\n |      fish           0          0                  8\n |\n |      Extract 3 random elements from the ``Series`` ``df['num_legs']``:\n |      Note that we use `random_state` to ensure the reproducibility of\n |      the examples.\n |\n |      &gt;&gt;&gt; df['num_legs'].sample(n=3, random_state=1)\n |      fish      0\n |      spider    8\n |      falcon    2\n |      Name: num_legs, dtype: int64\n |\n |      A random 50% sample of the ``DataFrame`` with replacement:\n |\n |      &gt;&gt;&gt; df.sample(frac=0.5, replace=True, random_state=1)\n |            num_legs  num_wings  num_specimen_seen\n |      dog          4          0                  2\n |      fish         0          0                  8\n |\n |      An upsample sample of the ``DataFrame`` with replacement:\n |      Note that `replace` parameter has to be `True` for `frac` parameter &gt; 1.\n |\n |      &gt;&gt;&gt; df.sample(frac=2, replace=True, random_state=1)\n |              num_legs  num_wings  num_specimen_seen\n |      dog            4          0                  2\n |      fish           0          0                  8\n |      falcon         2          2                 10\n |      falcon         2          2                 10\n |      fish           0          0                  8\n |      dog            4          0                  2\n |      fish           0          0                  8\n |      dog            4          0                  2\n |\n |      Using a DataFrame column as weights. Rows with larger value in the\n |      `num_specimen_seen` column are more likely to be sampled.\n |\n |      &gt;&gt;&gt; df.sample(n=2, weights='num_specimen_seen', random_state=1)\n |              num_legs  num_wings  num_specimen_seen\n |      falcon         2          2                 10\n |      fish           0          0                  8\n |\n |  set_flags(self, *, copy: 'bool_t' = False, allows_duplicate_labels: 'bool_t | None' = None) -&gt; 'Self'\n |      Return a new object with updated flags.\n |\n |      Parameters\n |      ----------\n |      copy : bool, default False\n |          Specify if a copy of the object should be made.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      allows_duplicate_labels : bool, optional\n |          Whether the returned object allows duplicate labels.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          The same type as the caller.\n |\n |      See Also\n |      --------\n |      DataFrame.attrs : Global metadata applying to this dataset.\n |      DataFrame.flags : Global flags applying to this object.\n |\n |      Notes\n |      -----\n |      This method returns a new object that's a view on the same data\n |      as the input. Mutating the input or the output values will be reflected\n |      in the other.\n |\n |      This method is intended to be used in method chains.\n |\n |      \"Flags\" differ from \"metadata\". Flags reflect properties of the\n |      pandas object (the Series or DataFrame). Metadata refer to properties\n |      of the dataset, and should be stored in :attr:`DataFrame.attrs`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [1, 2]})\n |      &gt;&gt;&gt; df.flags.allows_duplicate_labels\n |      True\n |      &gt;&gt;&gt; df2 = df.set_flags(allows_duplicate_labels=False)\n |      &gt;&gt;&gt; df2.flags.allows_duplicate_labels\n |      False\n |\n |  shift(self, periods: 'int | Sequence[int]' = 1, freq=None, axis: 'Axis' = 0, fill_value: 'Hashable' = &lt;no_default&gt;, suffix: 'str | None' = None) -&gt; 'Self | DataFrame'\n |      Shift index by desired number of periods with an optional time `freq`.\n |\n |      When `freq` is not passed, shift the index without realigning the data.\n |      If `freq` is passed (in this case, the index must be date or datetime,\n |      or it will raise a `NotImplementedError`), the index will be\n |      increased using the periods and the `freq`. `freq` can be inferred\n |      when specified as \"infer\" as long as either freq or inferred_freq\n |      attribute is set in the index.\n |\n |      Parameters\n |      ----------\n |      periods : int or Sequence\n |          Number of periods to shift. Can be positive or negative.\n |          If an iterable of ints, the data will be shifted once by each int.\n |          This is equivalent to shifting by one value at a time and\n |          concatenating all resulting frames. The resulting columns will have\n |          the shift suffixed to their column names. For multiple periods,\n |          axis must not be 1.\n |      freq : DateOffset, tseries.offsets, timedelta, or str, optional\n |          Offset to use from the tseries module or time rule (e.g. 'EOM').\n |          If `freq` is specified then the index values are shifted but the\n |          data is not realigned. That is, use `freq` if you would like to\n |          extend the index when shifting and preserve the original data.\n |          If `freq` is specified as \"infer\" then it will be inferred from\n |          the freq or inferred_freq attributes of the index. If neither of\n |          those attributes exist, a ValueError is thrown.\n |      axis : {0 or 'index', 1 or 'columns', None}, default None\n |          Shift direction. For `Series` this parameter is unused and defaults to 0.\n |      fill_value : object, optional\n |          The scalar value to use for newly introduced missing values.\n |          the default depends on the dtype of `self`.\n |          For numeric data, ``np.nan`` is used.\n |          For datetime, timedelta, or period data, etc. :attr:`NaT` is used.\n |          For extension dtypes, ``self.dtype.na_value`` is used.\n |      suffix : str, optional\n |          If str and periods is an iterable, this is added after the column\n |          name and before the shift value for each shifted column name.\n |\n |      Returns\n |      -------\n |      Series/DataFrame\n |          Copy of input object, shifted.\n |\n |      See Also\n |      --------\n |      Index.shift : Shift values of Index.\n |      DatetimeIndex.shift : Shift values of DatetimeIndex.\n |      PeriodIndex.shift : Shift values of PeriodIndex.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({\"Col1\": [10, 20, 15, 30, 45],\n |      ...                    \"Col2\": [13, 23, 18, 33, 48],\n |      ...                    \"Col3\": [17, 27, 22, 37, 52]},\n |      ...                   index=pd.date_range(\"2020-01-01\", \"2020-01-05\"))\n |      &gt;&gt;&gt; df\n |                  Col1  Col2  Col3\n |      2020-01-01    10    13    17\n |      2020-01-02    20    23    27\n |      2020-01-03    15    18    22\n |      2020-01-04    30    33    37\n |      2020-01-05    45    48    52\n |\n |      &gt;&gt;&gt; df.shift(periods=3)\n |                  Col1  Col2  Col3\n |      2020-01-01   NaN   NaN   NaN\n |      2020-01-02   NaN   NaN   NaN\n |      2020-01-03   NaN   NaN   NaN\n |      2020-01-04  10.0  13.0  17.0\n |      2020-01-05  20.0  23.0  27.0\n |\n |      &gt;&gt;&gt; df.shift(periods=1, axis=\"columns\")\n |                  Col1  Col2  Col3\n |      2020-01-01   NaN    10    13\n |      2020-01-02   NaN    20    23\n |      2020-01-03   NaN    15    18\n |      2020-01-04   NaN    30    33\n |      2020-01-05   NaN    45    48\n |\n |      &gt;&gt;&gt; df.shift(periods=3, fill_value=0)\n |                  Col1  Col2  Col3\n |      2020-01-01     0     0     0\n |      2020-01-02     0     0     0\n |      2020-01-03     0     0     0\n |      2020-01-04    10    13    17\n |      2020-01-05    20    23    27\n |\n |      &gt;&gt;&gt; df.shift(periods=3, freq=\"D\")\n |                  Col1  Col2  Col3\n |      2020-01-04    10    13    17\n |      2020-01-05    20    23    27\n |      2020-01-06    15    18    22\n |      2020-01-07    30    33    37\n |      2020-01-08    45    48    52\n |\n |      &gt;&gt;&gt; df.shift(periods=3, freq=\"infer\")\n |                  Col1  Col2  Col3\n |      2020-01-04    10    13    17\n |      2020-01-05    20    23    27\n |      2020-01-06    15    18    22\n |      2020-01-07    30    33    37\n |      2020-01-08    45    48    52\n |\n |      &gt;&gt;&gt; df['Col1'].shift(periods=[0, 1, 2])\n |                  Col1_0  Col1_1  Col1_2\n |      2020-01-01      10     NaN     NaN\n |      2020-01-02      20    10.0     NaN\n |      2020-01-03      15    20.0    10.0\n |      2020-01-04      30    15.0    20.0\n |      2020-01-05      45    30.0    15.0\n |\n |  squeeze(self, axis: 'Axis | None' = None)\n |      Squeeze 1 dimensional axis objects into scalars.\n |\n |      Series or DataFrames with a single element are squeezed to a scalar.\n |      DataFrames with a single column or a single row are squeezed to a\n |      Series. Otherwise the object is unchanged.\n |\n |      This method is most useful when you don't know if your\n |      object is a Series or DataFrame, but you do know it has just a single\n |      column. In that case you can safely call `squeeze` to ensure you have a\n |      Series.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns', None}, default None\n |          A specific axis to squeeze. By default, all length-1 axes are\n |          squeezed. For `Series` this parameter is unused and defaults to `None`.\n |\n |      Returns\n |      -------\n |      DataFrame, Series, or scalar\n |          The projection after squeezing `axis` or all the axes.\n |\n |      See Also\n |      --------\n |      Series.iloc : Integer-location based indexing for selecting scalars.\n |      DataFrame.iloc : Integer-location based indexing for selecting Series.\n |      Series.to_frame : Inverse of DataFrame.squeeze for a\n |          single-column DataFrame.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; primes = pd.Series([2, 3, 5, 7])\n |\n |      Slicing might produce a Series with a single value:\n |\n |      &gt;&gt;&gt; even_primes = primes[primes % 2 == 0]\n |      &gt;&gt;&gt; even_primes\n |      0    2\n |      dtype: int64\n |\n |      &gt;&gt;&gt; even_primes.squeeze()\n |      2\n |\n |      Squeezing objects with more than one value in every axis does nothing:\n |\n |      &gt;&gt;&gt; odd_primes = primes[primes % 2 == 1]\n |      &gt;&gt;&gt; odd_primes\n |      1    3\n |      2    5\n |      3    7\n |      dtype: int64\n |\n |      &gt;&gt;&gt; odd_primes.squeeze()\n |      1    3\n |      2    5\n |      3    7\n |      dtype: int64\n |\n |      Squeezing is even more effective when used with DataFrames.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])\n |      &gt;&gt;&gt; df\n |         a  b\n |      0  1  2\n |      1  3  4\n |\n |      Slicing a single column will produce a DataFrame with the columns\n |      having only one value:\n |\n |      &gt;&gt;&gt; df_a = df[['a']]\n |      &gt;&gt;&gt; df_a\n |         a\n |      0  1\n |      1  3\n |\n |      So the columns can be squeezed down, resulting in a Series:\n |\n |      &gt;&gt;&gt; df_a.squeeze('columns')\n |      0    1\n |      1    3\n |      Name: a, dtype: int64\n |\n |      Slicing a single row from a single column will produce a single\n |      scalar DataFrame:\n |\n |      &gt;&gt;&gt; df_0a = df.loc[df.index &lt; 1, ['a']]\n |      &gt;&gt;&gt; df_0a\n |         a\n |      0  1\n |\n |      Squeezing the rows produces a single scalar Series:\n |\n |      &gt;&gt;&gt; df_0a.squeeze('rows')\n |      a    1\n |      Name: 0, dtype: int64\n |\n |      Squeezing all axes will project directly into a scalar:\n |\n |      &gt;&gt;&gt; df_0a.squeeze()\n |      1\n |\n |  swapaxes(self, axis1: 'Axis', axis2: 'Axis', copy: 'bool_t | None' = None) -&gt; 'Self'\n |      Interchange axes and swap values axes appropriately.\n |\n |      .. deprecated:: 2.1.0\n |          ``swapaxes`` is deprecated and will be removed.\n |          Please use ``transpose`` instead.\n |\n |      Returns\n |      -------\n |      same as input\n |\n |      Examples\n |      --------\n |      Please see examples for :meth:`DataFrame.transpose`.\n |\n |  tail(self, n: 'int' = 5) -&gt; 'Self'\n |      Return the last `n` rows.\n |\n |      This function returns last `n` rows from the object based on\n |      position. It is useful for quickly verifying data, for example,\n |      after sorting or appending rows.\n |\n |      For negative values of `n`, this function returns all rows except\n |      the first `|n|` rows, equivalent to ``df[|n|:]``.\n |\n |      If n is larger than the number of rows, this function returns all rows.\n |\n |      Parameters\n |      ----------\n |      n : int, default 5\n |          Number of rows to select.\n |\n |      Returns\n |      -------\n |      type of caller\n |          The last `n` rows of the caller object.\n |\n |      See Also\n |      --------\n |      DataFrame.head : The first `n` rows of the caller object.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n |      ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n |      &gt;&gt;&gt; df\n |            animal\n |      0  alligator\n |      1        bee\n |      2     falcon\n |      3       lion\n |      4     monkey\n |      5     parrot\n |      6      shark\n |      7      whale\n |      8      zebra\n |\n |      Viewing the last 5 lines\n |\n |      &gt;&gt;&gt; df.tail()\n |         animal\n |      4  monkey\n |      5  parrot\n |      6   shark\n |      7   whale\n |      8   zebra\n |\n |      Viewing the last `n` lines (three in this case)\n |\n |      &gt;&gt;&gt; df.tail(3)\n |        animal\n |      6  shark\n |      7  whale\n |      8  zebra\n |\n |      For negative values of `n`\n |\n |      &gt;&gt;&gt; df.tail(-3)\n |         animal\n |      3    lion\n |      4  monkey\n |      5  parrot\n |      6   shark\n |      7   whale\n |      8   zebra\n |\n |  take(self, indices, axis: 'Axis' = 0, **kwargs) -&gt; 'Self'\n |      Return the elements in the given *positional* indices along an axis.\n |\n |      This means that we are not indexing according to actual values in\n |      the index attribute of the object. We are indexing according to the\n |      actual position of the element in the object.\n |\n |      Parameters\n |      ----------\n |      indices : array-like\n |          An array of ints indicating which positions to take.\n |      axis : {0 or 'index', 1 or 'columns', None}, default 0\n |          The axis on which to select elements. ``0`` means that we are\n |          selecting rows, ``1`` means that we are selecting columns.\n |          For `Series` this parameter is unused and defaults to 0.\n |      **kwargs\n |          For compatibility with :meth:`numpy.take`. Has no effect on the\n |          output.\n |\n |      Returns\n |      -------\n |      same type as caller\n |          An array-like containing the elements taken from the object.\n |\n |      See Also\n |      --------\n |      DataFrame.loc : Select a subset of a DataFrame by labels.\n |      DataFrame.iloc : Select a subset of a DataFrame by positions.\n |      numpy.take : Take elements from an array along an axis.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([('falcon', 'bird', 389.0),\n |      ...                    ('parrot', 'bird', 24.0),\n |      ...                    ('lion', 'mammal', 80.5),\n |      ...                    ('monkey', 'mammal', np.nan)],\n |      ...                   columns=['name', 'class', 'max_speed'],\n |      ...                   index=[0, 2, 3, 1])\n |      &gt;&gt;&gt; df\n |           name   class  max_speed\n |      0  falcon    bird      389.0\n |      2  parrot    bird       24.0\n |      3    lion  mammal       80.5\n |      1  monkey  mammal        NaN\n |\n |      Take elements at positions 0 and 3 along the axis 0 (default).\n |\n |      Note how the actual indices selected (0 and 1) do not correspond to\n |      our selected indices 0 and 3. That's because we are selecting the 0th\n |      and 3rd rows, not rows whose indices equal 0 and 3.\n |\n |      &gt;&gt;&gt; df.take([0, 3])\n |           name   class  max_speed\n |      0  falcon    bird      389.0\n |      1  monkey  mammal        NaN\n |\n |      Take elements at indices 1 and 2 along the axis 1 (column selection).\n |\n |      &gt;&gt;&gt; df.take([1, 2], axis=1)\n |          class  max_speed\n |      0    bird      389.0\n |      2    bird       24.0\n |      3  mammal       80.5\n |      1  mammal        NaN\n |\n |      We may take elements using negative integers for positive indices,\n |      starting from the end of the object, just like with Python lists.\n |\n |      &gt;&gt;&gt; df.take([-1, -2])\n |           name   class  max_speed\n |      1  monkey  mammal        NaN\n |      3    lion  mammal       80.5\n |\n |  to_clipboard(self, *, excel: 'bool_t' = True, sep: 'str | None' = None, **kwargs) -&gt; 'None'\n |      Copy object to the system clipboard.\n |\n |      Write a text representation of object to the system clipboard.\n |      This can be pasted into Excel, for example.\n |\n |      Parameters\n |      ----------\n |      excel : bool, default True\n |          Produce output in a csv format for easy pasting into excel.\n |\n |          - True, use the provided separator for csv pasting.\n |          - False, write a string representation of the object to the clipboard.\n |\n |      sep : str, default ``'\\t'``\n |          Field delimiter.\n |      **kwargs\n |          These parameters will be passed to DataFrame.to_csv.\n |\n |      See Also\n |      --------\n |      DataFrame.to_csv : Write a DataFrame to a comma-separated values\n |          (csv) file.\n |      read_clipboard : Read text from clipboard and pass to read_csv.\n |\n |      Notes\n |      -----\n |      Requirements for your platform.\n |\n |        - Linux : `xclip`, or `xsel` (with `PyQt4` modules)\n |        - Windows : none\n |        - macOS : none\n |\n |      This method uses the processes developed for the package `pyperclip`. A\n |      solution to render any output string format is given in the examples.\n |\n |      Examples\n |      --------\n |      Copy the contents of a DataFrame to the clipboard.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])\n |\n |      &gt;&gt;&gt; df.to_clipboard(sep=',')  # doctest: +SKIP\n |      ... # Wrote the following to the system clipboard:\n |      ... # ,A,B,C\n |      ... # 0,1,2,3\n |      ... # 1,4,5,6\n |\n |      We can omit the index by passing the keyword `index` and setting\n |      it to false.\n |\n |      &gt;&gt;&gt; df.to_clipboard(sep=',', index=False)  # doctest: +SKIP\n |      ... # Wrote the following to the system clipboard:\n |      ... # A,B,C\n |      ... # 1,2,3\n |      ... # 4,5,6\n |\n |      Using the original `pyperclip` package for any string output format.\n |\n |      .. code-block:: python\n |\n |         import pyperclip\n |         html = df.style.to_html()\n |         pyperclip.copy(html)\n |\n |  to_csv(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, sep: 'str' = ',', na_rep: 'str' = '', float_format: 'str | Callable | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | list[str]' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, mode: 'str' = 'w', encoding: 'str | None' = None, compression: 'CompressionOptions' = 'infer', quoting: 'int | None' = None, quotechar: 'str' = '\"', lineterminator: 'str | None' = None, chunksize: 'int | None' = None, date_format: 'str | None' = None, doublequote: 'bool_t' = True, escapechar: 'str | None' = None, decimal: 'str' = '.', errors: 'OpenFileErrors' = 'strict', storage_options: 'StorageOptions | None' = None) -&gt; 'str | None'\n |      Write object to a comma-separated values (csv) file.\n |\n |      Parameters\n |      ----------\n |      path_or_buf : str, path object, file-like object, or None, default None\n |          String, path object (implementing os.PathLike[str]), or file-like\n |          object implementing a write() function. If None, the result is\n |          returned as a string. If a non-binary file object is passed, it should\n |          be opened with `newline=''`, disabling universal newlines. If a binary\n |          file object is passed, `mode` might need to contain a `'b'`.\n |      sep : str, default ','\n |          String of length 1. Field delimiter for the output file.\n |      na_rep : str, default ''\n |          Missing data representation.\n |      float_format : str, Callable, default None\n |          Format string for floating point numbers. If a Callable is given, it takes\n |          precedence over other numeric formatting parameters, like decimal.\n |      columns : sequence, optional\n |          Columns to write.\n |      header : bool or list of str, default True\n |          Write out the column names. If a list of strings is given it is\n |          assumed to be aliases for the column names.\n |      index : bool, default True\n |          Write row names (index).\n |      index_label : str or sequence, or False, default None\n |          Column label for index column(s) if desired. If None is given, and\n |          `header` and `index` are True, then the index names are used. A\n |          sequence should be given if the object uses MultiIndex. If\n |          False do not print fields for index names. Use index_label=False\n |          for easier importing in R.\n |      mode : {'w', 'x', 'a'}, default 'w'\n |          Forwarded to either `open(mode=)` or `fsspec.open(mode=)` to control\n |          the file opening. Typical values include:\n |\n |          - 'w', truncate the file first.\n |          - 'x', exclusive creation, failing if the file already exists.\n |          - 'a', append to the end of file if it exists.\n |\n |      encoding : str, optional\n |          A string representing the encoding to use in the output file,\n |          defaults to 'utf-8'. `encoding` is not supported if `path_or_buf`\n |          is a non-binary file object.\n |      compression : str or dict, default 'infer'\n |          For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is\n |          path-like, then detect compression from the following extensions: '.gz',\n |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n |          (otherwise no compression).\n |          Set to ``None`` for no compression.\n |          Can also be a dict with key ``'method'`` set\n |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n |          other key-value pairs are forwarded to\n |          ``zipfile.ZipFile``, ``gzip.GzipFile``,\n |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n |          ``tarfile.TarFile``, respectively.\n |          As an example, the following could be passed for faster compression and to create\n |          a reproducible gzip archive:\n |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n |\n |          .. versionadded:: 1.5.0\n |              Added support for `.tar` files.\n |\n |             May be a dict with key 'method' as compression mode\n |             and other entries as additional compression options if\n |             compression mode is 'zip'.\n |\n |             Passing compression options as keys in dict is\n |             supported for compression modes 'gzip', 'bz2', 'zstd', and 'zip'.\n |      quoting : optional constant from csv module\n |          Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n |          then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n |          will treat them as non-numeric.\n |      quotechar : str, default '\\\"'\n |          String of length 1. Character used to quote fields.\n |      lineterminator : str, optional\n |          The newline character or character sequence to use in the output\n |          file. Defaults to `os.linesep`, which depends on the OS in which\n |          this method is called ('\\\\n' for linux, '\\\\r\\\\n' for Windows, i.e.).\n |\n |          .. versionchanged:: 1.5.0\n |\n |              Previously was line_terminator, changed for consistency with\n |              read_csv and the standard library 'csv' module.\n |\n |      chunksize : int or None\n |          Rows to write at a time.\n |      date_format : str, default None\n |          Format string for datetime objects.\n |      doublequote : bool, default True\n |          Control quoting of `quotechar` inside a field.\n |      escapechar : str, default None\n |          String of length 1. Character used to escape `sep` and `quotechar`\n |          when appropriate.\n |      decimal : str, default '.'\n |          Character recognized as decimal separator. E.g. use ',' for\n |          European data.\n |      errors : str, default 'strict'\n |          Specifies how encoding and decoding errors are to be handled.\n |          See the errors argument for :func:`open` for a full list\n |          of options.\n |\n |      storage_options : dict, optional\n |          Extra options that make sense for a particular storage connection, e.g.\n |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n |          are forwarded to ``urllib.request.Request`` as header options. For other\n |          URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n |          details, and for more examples on storage options refer `here\n |          &lt;https://pandas.pydata.org/docs/user_guide/io.html?\n |          highlight=storage_options#reading-writing-remote-files&gt;`_.\n |\n |      Returns\n |      -------\n |      None or str\n |          If path_or_buf is None, returns the resulting csv format as a\n |          string. Otherwise returns None.\n |\n |      See Also\n |      --------\n |      read_csv : Load a CSV file into a DataFrame.\n |      to_excel : Write DataFrame to an Excel file.\n |\n |      Examples\n |      --------\n |      Create 'out.csv' containing 'df' without indices\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n |      ...                    'mask': ['red', 'purple'],\n |      ...                    'weapon': ['sai', 'bo staff']})\n |      &gt;&gt;&gt; df.to_csv('out.csv', index=False)  # doctest: +SKIP\n |\n |      Create 'out.zip' containing 'out.csv'\n |\n |      &gt;&gt;&gt; df.to_csv(index=False)\n |      'name,mask,weapon\\nRaphael,red,sai\\nDonatello,purple,bo staff\\n'\n |      &gt;&gt;&gt; compression_opts = dict(method='zip',\n |      ...                         archive_name='out.csv')  # doctest: +SKIP\n |      &gt;&gt;&gt; df.to_csv('out.zip', index=False,\n |      ...           compression=compression_opts)  # doctest: +SKIP\n |\n |      To write a csv file to a new folder or nested folder you will first\n |      need to create it using either Pathlib or os:\n |\n |      &gt;&gt;&gt; from pathlib import Path  # doctest: +SKIP\n |      &gt;&gt;&gt; filepath = Path('folder/subfolder/out.csv')  # doctest: +SKIP\n |      &gt;&gt;&gt; filepath.parent.mkdir(parents=True, exist_ok=True)  # doctest: +SKIP\n |      &gt;&gt;&gt; df.to_csv(filepath)  # doctest: +SKIP\n |\n |      &gt;&gt;&gt; import os  # doctest: +SKIP\n |      &gt;&gt;&gt; os.makedirs('folder/subfolder', exist_ok=True)  # doctest: +SKIP\n |      &gt;&gt;&gt; df.to_csv('folder/subfolder/out.csv')  # doctest: +SKIP\n |\n |  to_excel(self, excel_writer: 'FilePath | WriteExcelBuffer | ExcelWriter', *, sheet_name: 'str' = 'Sheet1', na_rep: 'str' = '', float_format: 'str | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'Sequence[Hashable] | bool_t' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, startrow: 'int' = 0, startcol: 'int' = 0, engine: \"Literal['openpyxl', 'xlsxwriter'] | None\" = None, merge_cells: 'bool_t' = True, inf_rep: 'str' = 'inf', freeze_panes: 'tuple[int, int] | None' = None, storage_options: 'StorageOptions | None' = None, engine_kwargs: 'dict[str, Any] | None' = None) -&gt; 'None'\n |      Write object to an Excel sheet.\n |\n |      To write a single object to an Excel .xlsx file it is only necessary to\n |      specify a target file name. To write to multiple sheets it is necessary to\n |      create an `ExcelWriter` object with a target file name, and specify a sheet\n |      in the file to write to.\n |\n |      Multiple sheets may be written to by specifying unique `sheet_name`.\n |      With all data written to the file it is necessary to save the changes.\n |      Note that creating an `ExcelWriter` object with a file name that already\n |      exists will result in the contents of the existing file being erased.\n |\n |      Parameters\n |      ----------\n |      excel_writer : path-like, file-like, or ExcelWriter object\n |          File path or existing ExcelWriter.\n |      sheet_name : str, default 'Sheet1'\n |          Name of sheet which will contain DataFrame.\n |      na_rep : str, default ''\n |          Missing data representation.\n |      float_format : str, optional\n |          Format string for floating point numbers. For example\n |          ``float_format=\"%.2f\"`` will format 0.1234 to 0.12.\n |      columns : sequence or list of str, optional\n |          Columns to write.\n |      header : bool or list of str, default True\n |          Write out the column names. If a list of string is given it is\n |          assumed to be aliases for the column names.\n |      index : bool, default True\n |          Write row names (index).\n |      index_label : str or sequence, optional\n |          Column label for index column(s) if desired. If not specified, and\n |          `header` and `index` are True, then the index names are used. A\n |          sequence should be given if the DataFrame uses MultiIndex.\n |      startrow : int, default 0\n |          Upper left cell row to dump data frame.\n |      startcol : int, default 0\n |          Upper left cell column to dump data frame.\n |      engine : str, optional\n |          Write engine to use, 'openpyxl' or 'xlsxwriter'. You can also set this\n |          via the options ``io.excel.xlsx.writer`` or\n |          ``io.excel.xlsm.writer``.\n |\n |      merge_cells : bool, default True\n |          Write MultiIndex and Hierarchical Rows as merged cells.\n |      inf_rep : str, default 'inf'\n |          Representation for infinity (there is no native representation for\n |          infinity in Excel).\n |      freeze_panes : tuple of int (length 2), optional\n |          Specifies the one-based bottommost row and rightmost column that\n |          is to be frozen.\n |      storage_options : dict, optional\n |          Extra options that make sense for a particular storage connection, e.g.\n |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n |          are forwarded to ``urllib.request.Request`` as header options. For other\n |          URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n |          details, and for more examples on storage options refer `here\n |          &lt;https://pandas.pydata.org/docs/user_guide/io.html?\n |          highlight=storage_options#reading-writing-remote-files&gt;`_.\n |\n |          .. versionadded:: 1.2.0\n |      engine_kwargs : dict, optional\n |          Arbitrary keyword arguments passed to excel engine.\n |\n |      See Also\n |      --------\n |      to_csv : Write DataFrame to a comma-separated values (csv) file.\n |      ExcelWriter : Class for writing DataFrame objects into excel sheets.\n |      read_excel : Read an Excel file into a pandas DataFrame.\n |      read_csv : Read a comma-separated values (csv) file into DataFrame.\n |      io.formats.style.Styler.to_excel : Add styles to Excel sheet.\n |\n |      Notes\n |      -----\n |      For compatibility with :meth:`~DataFrame.to_csv`,\n |      to_excel serializes lists and dicts to strings before writing.\n |\n |      Once a workbook has been saved it is not possible to write further\n |      data without rewriting the whole workbook.\n |\n |      Examples\n |      --------\n |\n |      Create, write to and save a workbook:\n |\n |      &gt;&gt;&gt; df1 = pd.DataFrame([['a', 'b'], ['c', 'd']],\n |      ...                    index=['row 1', 'row 2'],\n |      ...                    columns=['col 1', 'col 2'])\n |      &gt;&gt;&gt; df1.to_excel(\"output.xlsx\")  # doctest: +SKIP\n |\n |      To specify the sheet name:\n |\n |      &gt;&gt;&gt; df1.to_excel(\"output.xlsx\",\n |      ...              sheet_name='Sheet_name_1')  # doctest: +SKIP\n |\n |      If you wish to write to more than one sheet in the workbook, it is\n |      necessary to specify an ExcelWriter object:\n |\n |      &gt;&gt;&gt; df2 = df1.copy()\n |      &gt;&gt;&gt; with pd.ExcelWriter('output.xlsx') as writer:  # doctest: +SKIP\n |      ...     df1.to_excel(writer, sheet_name='Sheet_name_1')\n |      ...     df2.to_excel(writer, sheet_name='Sheet_name_2')\n |\n |      ExcelWriter can also be used to append to an existing Excel file:\n |\n |      &gt;&gt;&gt; with pd.ExcelWriter('output.xlsx',\n |      ...                     mode='a') as writer:  # doctest: +SKIP\n |      ...     df1.to_excel(writer, sheet_name='Sheet_name_3')\n |\n |      To set the library that is used to write the Excel file,\n |      you can pass the `engine` keyword (the default engine is\n |      automatically chosen depending on the file extension):\n |\n |      &gt;&gt;&gt; df1.to_excel('output1.xlsx', engine='xlsxwriter')  # doctest: +SKIP\n |\n |  to_hdf(self, path_or_buf: 'FilePath | HDFStore', *, key: 'str', mode: \"Literal['a', 'w', 'r+']\" = 'a', complevel: 'int | None' = None, complib: \"Literal['zlib', 'lzo', 'bzip2', 'blosc'] | None\" = None, append: 'bool_t' = False, format: \"Literal['fixed', 'table'] | None\" = None, index: 'bool_t' = True, min_itemsize: 'int | dict[str, int] | None' = None, nan_rep=None, dropna: 'bool_t | None' = None, data_columns: 'Literal[True] | list[str] | None' = None, errors: 'OpenFileErrors' = 'strict', encoding: 'str' = 'UTF-8') -&gt; 'None'\n |      Write the contained data to an HDF5 file using HDFStore.\n |\n |      Hierarchical Data Format (HDF) is self-describing, allowing an\n |      application to interpret the structure and contents of a file with\n |      no outside information. One HDF file can hold a mix of related objects\n |      which can be accessed as a group or as individual objects.\n |\n |      In order to add another DataFrame or Series to an existing HDF file\n |      please use append mode and a different a key.\n |\n |      .. warning::\n |\n |         One can store a subclass of ``DataFrame`` or ``Series`` to HDF5,\n |         but the type of the subclass is lost upon storing.\n |\n |      For more information see the :ref:`user guide &lt;io.hdf5&gt;`.\n |\n |      Parameters\n |      ----------\n |      path_or_buf : str or pandas.HDFStore\n |          File path or HDFStore object.\n |      key : str\n |          Identifier for the group in the store.\n |      mode : {'a', 'w', 'r+'}, default 'a'\n |          Mode to open file:\n |\n |          - 'w': write, a new file is created (an existing file with\n |            the same name would be deleted).\n |          - 'a': append, an existing file is opened for reading and\n |            writing, and if the file does not exist it is created.\n |          - 'r+': similar to 'a', but the file must already exist.\n |      complevel : {0-9}, default None\n |          Specifies a compression level for data.\n |          A value of 0 or None disables compression.\n |      complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n |          Specifies the compression library to be used.\n |          These additional compressors for Blosc are supported\n |          (default if no compressor specified: 'blosc:blosclz'):\n |          {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n |          'blosc:zlib', 'blosc:zstd'}.\n |          Specifying a compression library which is not available issues\n |          a ValueError.\n |      append : bool, default False\n |          For Table formats, append the input data to the existing.\n |      format : {'fixed', 'table', None}, default 'fixed'\n |          Possible values:\n |\n |          - 'fixed': Fixed format. Fast writing/reading. Not-appendable,\n |            nor searchable.\n |          - 'table': Table format. Write as a PyTables Table structure\n |            which may perform worse but allow more flexible operations\n |            like searching / selecting subsets of the data.\n |          - If None, pd.get_option('io.hdf.default_format') is checked,\n |            followed by fallback to \"fixed\".\n |      index : bool, default True\n |          Write DataFrame index as a column.\n |      min_itemsize : dict or int, optional\n |          Map column names to minimum string sizes for columns.\n |      nan_rep : Any, optional\n |          How to represent null values as str.\n |          Not allowed with append=True.\n |      dropna : bool, default False, optional\n |          Remove missing values.\n |      data_columns : list of columns or True, optional\n |          List of columns to create as indexed data columns for on-disk\n |          queries, or True to use all columns. By default only the axes\n |          of the object are indexed. See\n |          :ref:`Query via data columns&lt;io.hdf5-query-data-columns&gt;`. for\n |          more information.\n |          Applicable only to format='table'.\n |      errors : str, default 'strict'\n |          Specifies how encoding and decoding errors are to be handled.\n |          See the errors argument for :func:`open` for a full list\n |          of options.\n |      encoding : str, default \"UTF-8\"\n |\n |      See Also\n |      --------\n |      read_hdf : Read from HDF file.\n |      DataFrame.to_orc : Write a DataFrame to the binary orc format.\n |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n |      DataFrame.to_sql : Write to a SQL table.\n |      DataFrame.to_feather : Write out feather-format for DataFrames.\n |      DataFrame.to_csv : Write out to a csv file.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},\n |      ...                   index=['a', 'b', 'c'])  # doctest: +SKIP\n |      &gt;&gt;&gt; df.to_hdf('data.h5', key='df', mode='w')  # doctest: +SKIP\n |\n |      We can add another object to the same file:\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4])  # doctest: +SKIP\n |      &gt;&gt;&gt; s.to_hdf('data.h5', key='s')  # doctest: +SKIP\n |\n |      Reading from HDF file:\n |\n |      &gt;&gt;&gt; pd.read_hdf('data.h5', 'df')  # doctest: +SKIP\n |      A  B\n |      a  1  4\n |      b  2  5\n |      c  3  6\n |      &gt;&gt;&gt; pd.read_hdf('data.h5', 's')  # doctest: +SKIP\n |      0    1\n |      1    2\n |      2    3\n |      3    4\n |      dtype: int64\n |\n |  to_json(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, orient: \"Literal['split', 'records', 'index', 'table', 'columns', 'values'] | None\" = None, date_format: 'str | None' = None, double_precision: 'int' = 10, force_ascii: 'bool_t' = True, date_unit: 'TimeUnit' = 'ms', default_handler: 'Callable[[Any], JSONSerializable] | None' = None, lines: 'bool_t' = False, compression: 'CompressionOptions' = 'infer', index: 'bool_t | None' = None, indent: 'int | None' = None, storage_options: 'StorageOptions | None' = None, mode: \"Literal['a', 'w']\" = 'w') -&gt; 'str | None'\n |      Convert the object to a JSON string.\n |\n |      Note NaN's and None will be converted to null and datetime objects\n |      will be converted to UNIX timestamps.\n |\n |      Parameters\n |      ----------\n |      path_or_buf : str, path object, file-like object, or None, default None\n |          String, path object (implementing os.PathLike[str]), or file-like\n |          object implementing a write() function. If None, the result is\n |          returned as a string.\n |      orient : str\n |          Indication of expected JSON string format.\n |\n |          * Series:\n |\n |              - default is 'index'\n |              - allowed values are: {'split', 'records', 'index', 'table'}.\n |\n |          * DataFrame:\n |\n |              - default is 'columns'\n |              - allowed values are: {'split', 'records', 'index', 'columns',\n |                'values', 'table'}.\n |\n |          * The format of the JSON string:\n |\n |              - 'split' : dict like {'index' -&gt; [index], 'columns' -&gt; [columns],\n |                'data' -&gt; [values]}\n |              - 'records' : list like [{column -&gt; value}, ... , {column -&gt; value}]\n |              - 'index' : dict like {index -&gt; {column -&gt; value}}\n |              - 'columns' : dict like {column -&gt; {index -&gt; value}}\n |              - 'values' : just the values array\n |              - 'table' : dict like {'schema': {schema}, 'data': {data}}\n |\n |              Describing the data, where data component is like ``orient='records'``.\n |\n |      date_format : {None, 'epoch', 'iso'}\n |          Type of date conversion. 'epoch' = epoch milliseconds,\n |          'iso' = ISO8601. The default depends on the `orient`. For\n |          ``orient='table'``, the default is 'iso'. For all other orients,\n |          the default is 'epoch'.\n |      double_precision : int, default 10\n |          The number of decimal places to use when encoding\n |          floating point values. The possible maximal value is 15.\n |          Passing double_precision greater than 15 will raise a ValueError.\n |      force_ascii : bool, default True\n |          Force encoded string to be ASCII.\n |      date_unit : str, default 'ms' (milliseconds)\n |          The time unit to encode to, governs timestamp and ISO8601\n |          precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n |          microsecond, and nanosecond respectively.\n |      default_handler : callable, default None\n |          Handler to call if object cannot otherwise be converted to a\n |          suitable format for JSON. Should receive a single argument which is\n |          the object to convert and return a serialisable object.\n |      lines : bool, default False\n |          If 'orient' is 'records' write out line-delimited json format. Will\n |          throw ValueError if incorrect 'orient' since others are not\n |          list-like.\n |      compression : str or dict, default 'infer'\n |          For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is\n |          path-like, then detect compression from the following extensions: '.gz',\n |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n |          (otherwise no compression).\n |          Set to ``None`` for no compression.\n |          Can also be a dict with key ``'method'`` set\n |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n |          other key-value pairs are forwarded to\n |          ``zipfile.ZipFile``, ``gzip.GzipFile``,\n |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n |          ``tarfile.TarFile``, respectively.\n |          As an example, the following could be passed for faster compression and to create\n |          a reproducible gzip archive:\n |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n |\n |          .. versionadded:: 1.5.0\n |              Added support for `.tar` files.\n |\n |          .. versionchanged:: 1.4.0 Zstandard support.\n |\n |      index : bool or None, default None\n |          The index is only used when 'orient' is 'split', 'index', 'column',\n |          or 'table'. Of these, 'index' and 'column' do not support\n |          `index=False`.\n |\n |      indent : int, optional\n |         Length of whitespace used to indent each record.\n |\n |      storage_options : dict, optional\n |          Extra options that make sense for a particular storage connection, e.g.\n |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n |          are forwarded to ``urllib.request.Request`` as header options. For other\n |          URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n |          details, and for more examples on storage options refer `here\n |          &lt;https://pandas.pydata.org/docs/user_guide/io.html?\n |          highlight=storage_options#reading-writing-remote-files&gt;`_.\n |\n |      mode : str, default 'w' (writing)\n |          Specify the IO mode for output when supplying a path_or_buf.\n |          Accepted args are 'w' (writing) and 'a' (append) only.\n |          mode='a' is only supported when lines is True and orient is 'records'.\n |\n |      Returns\n |      -------\n |      None or str\n |          If path_or_buf is None, returns the resulting json format as a\n |          string. Otherwise returns None.\n |\n |      See Also\n |      --------\n |      read_json : Convert a JSON string to pandas object.\n |\n |      Notes\n |      -----\n |      The behavior of ``indent=0`` varies from the stdlib, which does not\n |      indent the output but does insert newlines. Currently, ``indent=0``\n |      and the default ``indent=None`` are equivalent in pandas, though this\n |      may change in a future release.\n |\n |      ``orient='table'`` contains a 'pandas_version' field under 'schema'.\n |      This stores the version of `pandas` used in the latest revision of the\n |      schema.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; from json import loads, dumps\n |      &gt;&gt;&gt; df = pd.DataFrame(\n |      ...     [[\"a\", \"b\"], [\"c\", \"d\"]],\n |      ...     index=[\"row 1\", \"row 2\"],\n |      ...     columns=[\"col 1\", \"col 2\"],\n |      ... )\n |\n |      &gt;&gt;&gt; result = df.to_json(orient=\"split\")\n |      &gt;&gt;&gt; parsed = loads(result)\n |      &gt;&gt;&gt; dumps(parsed, indent=4)  # doctest: +SKIP\n |      {\n |          \"columns\": [\n |              \"col 1\",\n |              \"col 2\"\n |          ],\n |          \"index\": [\n |              \"row 1\",\n |              \"row 2\"\n |          ],\n |          \"data\": [\n |              [\n |                  \"a\",\n |                  \"b\"\n |              ],\n |              [\n |                  \"c\",\n |                  \"d\"\n |              ]\n |          ]\n |      }\n |\n |      Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n |      Note that index labels are not preserved with this encoding.\n |\n |      &gt;&gt;&gt; result = df.to_json(orient=\"records\")\n |      &gt;&gt;&gt; parsed = loads(result)\n |      &gt;&gt;&gt; dumps(parsed, indent=4)  # doctest: +SKIP\n |      [\n |          {\n |              \"col 1\": \"a\",\n |              \"col 2\": \"b\"\n |          },\n |          {\n |              \"col 1\": \"c\",\n |              \"col 2\": \"d\"\n |          }\n |      ]\n |\n |      Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n |\n |      &gt;&gt;&gt; result = df.to_json(orient=\"index\")\n |      &gt;&gt;&gt; parsed = loads(result)\n |      &gt;&gt;&gt; dumps(parsed, indent=4)  # doctest: +SKIP\n |      {\n |          \"row 1\": {\n |              \"col 1\": \"a\",\n |              \"col 2\": \"b\"\n |          },\n |          \"row 2\": {\n |              \"col 1\": \"c\",\n |              \"col 2\": \"d\"\n |          }\n |      }\n |\n |      Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n |\n |      &gt;&gt;&gt; result = df.to_json(orient=\"columns\")\n |      &gt;&gt;&gt; parsed = loads(result)\n |      &gt;&gt;&gt; dumps(parsed, indent=4)  # doctest: +SKIP\n |      {\n |          \"col 1\": {\n |              \"row 1\": \"a\",\n |              \"row 2\": \"c\"\n |          },\n |          \"col 2\": {\n |              \"row 1\": \"b\",\n |              \"row 2\": \"d\"\n |          }\n |      }\n |\n |      Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n |\n |      &gt;&gt;&gt; result = df.to_json(orient=\"values\")\n |      &gt;&gt;&gt; parsed = loads(result)\n |      &gt;&gt;&gt; dumps(parsed, indent=4)  # doctest: +SKIP\n |      [\n |          [\n |              \"a\",\n |              \"b\"\n |          ],\n |          [\n |              \"c\",\n |              \"d\"\n |          ]\n |      ]\n |\n |      Encoding with Table Schema:\n |\n |      &gt;&gt;&gt; result = df.to_json(orient=\"table\")\n |      &gt;&gt;&gt; parsed = loads(result)\n |      &gt;&gt;&gt; dumps(parsed, indent=4)  # doctest: +SKIP\n |      {\n |          \"schema\": {\n |              \"fields\": [\n |                  {\n |                      \"name\": \"index\",\n |                      \"type\": \"string\"\n |                  },\n |                  {\n |                      \"name\": \"col 1\",\n |                      \"type\": \"string\"\n |                  },\n |                  {\n |                      \"name\": \"col 2\",\n |                      \"type\": \"string\"\n |                  }\n |              ],\n |              \"primaryKey\": [\n |                  \"index\"\n |              ],\n |              \"pandas_version\": \"1.4.0\"\n |          },\n |          \"data\": [\n |              {\n |                  \"index\": \"row 1\",\n |                  \"col 1\": \"a\",\n |                  \"col 2\": \"b\"\n |              },\n |              {\n |                  \"index\": \"row 2\",\n |                  \"col 1\": \"c\",\n |                  \"col 2\": \"d\"\n |              }\n |          ]\n |      }\n |\n |  to_latex(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | SequenceNotStr[str]' = True, index: 'bool_t' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool_t | None' = None, index_names: 'bool_t' = True, bold_rows: 'bool_t' = False, column_format: 'str | None' = None, longtable: 'bool_t | None' = None, escape: 'bool_t | None' = None, encoding: 'str | None' = None, decimal: 'str' = '.', multicolumn: 'bool_t | None' = None, multicolumn_format: 'str | None' = None, multirow: 'bool_t | None' = None, caption: 'str | tuple[str, str] | None' = None, label: 'str | None' = None, position: 'str | None' = None) -&gt; 'str | None'\n |      Render object to a LaTeX tabular, longtable, or nested table.\n |\n |      Requires ``\\usepackage{{booktabs}}``.  The output can be copy/pasted\n |      into a main LaTeX document or read from an external file\n |      with ``\\input{{table.tex}}``.\n |\n |      .. versionchanged:: 2.0.0\n |         Refactored to use the Styler implementation via jinja2 templating.\n |\n |      Parameters\n |      ----------\n |      buf : str, Path or StringIO-like, optional, default None\n |          Buffer to write to. If None, the output is returned as a string.\n |      columns : list of label, optional\n |          The subset of columns to write. Writes all columns by default.\n |      header : bool or list of str, default True\n |          Write out the column names. If a list of strings is given,\n |          it is assumed to be aliases for the column names.\n |      index : bool, default True\n |          Write row names (index).\n |      na_rep : str, default 'NaN'\n |          Missing data representation.\n |      formatters : list of functions or dict of {{str: function}}, optional\n |          Formatter functions to apply to columns' elements by position or\n |          name. The result of each function must be a unicode string.\n |          List must be of length equal to the number of columns.\n |      float_format : one-parameter function or str, optional, default None\n |          Formatter for floating point numbers. For example\n |          ``float_format=\"%.2f\"`` and ``float_format=\"{{:0.2f}}\".format`` will\n |          both result in 0.1234 being formatted as 0.12.\n |      sparsify : bool, optional\n |          Set to False for a DataFrame with a hierarchical index to print\n |          every multiindex key at each row. By default, the value will be\n |          read from the config module.\n |      index_names : bool, default True\n |          Prints the names of the indexes.\n |      bold_rows : bool, default False\n |          Make the row labels bold in the output.\n |      column_format : str, optional\n |          The columns format as specified in `LaTeX table format\n |          &lt;https://en.wikibooks.org/wiki/LaTeX/Tables&gt;`__ e.g. 'rcl' for 3\n |          columns. By default, 'l' will be used for all columns except\n |          columns of numbers, which default to 'r'.\n |      longtable : bool, optional\n |          Use a longtable environment instead of tabular. Requires\n |          adding a \\usepackage{{longtable}} to your LaTeX preamble.\n |          By default, the value will be read from the pandas config\n |          module, and set to `True` if the option ``styler.latex.environment`` is\n |          `\"longtable\"`.\n |\n |          .. versionchanged:: 2.0.0\n |             The pandas option affecting this argument has changed.\n |      escape : bool, optional\n |          By default, the value will be read from the pandas config\n |          module and set to `True` if the option ``styler.format.escape`` is\n |          `\"latex\"`. When set to False prevents from escaping latex special\n |          characters in column names.\n |\n |          .. versionchanged:: 2.0.0\n |             The pandas option affecting this argument has changed, as has the\n |             default value to `False`.\n |      encoding : str, optional\n |          A string representing the encoding to use in the output file,\n |          defaults to 'utf-8'.\n |      decimal : str, default '.'\n |          Character recognized as decimal separator, e.g. ',' in Europe.\n |      multicolumn : bool, default True\n |          Use \\multicolumn to enhance MultiIndex columns.\n |          The default will be read from the config module, and is set\n |          as the option ``styler.sparse.columns``.\n |\n |          .. versionchanged:: 2.0.0\n |             The pandas option affecting this argument has changed.\n |      multicolumn_format : str, default 'r'\n |          The alignment for multicolumns, similar to `column_format`\n |          The default will be read from the config module, and is set as the option\n |          ``styler.latex.multicol_align``.\n |\n |          .. versionchanged:: 2.0.0\n |             The pandas option affecting this argument has changed, as has the\n |             default value to \"r\".\n |      multirow : bool, default True\n |          Use \\multirow to enhance MultiIndex rows. Requires adding a\n |          \\usepackage{{multirow}} to your LaTeX preamble. Will print\n |          centered labels (instead of top-aligned) across the contained\n |          rows, separating groups via clines. The default will be read\n |          from the pandas config module, and is set as the option\n |          ``styler.sparse.index``.\n |\n |          .. versionchanged:: 2.0.0\n |             The pandas option affecting this argument has changed, as has the\n |             default value to `True`.\n |      caption : str or tuple, optional\n |          Tuple (full_caption, short_caption),\n |          which results in ``\\caption[short_caption]{{full_caption}}``;\n |          if a single string is passed, no short caption will be set.\n |      label : str, optional\n |          The LaTeX label to be placed inside ``\\label{{}}`` in the output.\n |          This is used with ``\\ref{{}}`` in the main ``.tex`` file.\n |\n |      position : str, optional\n |          The LaTeX positional argument for tables, to be placed after\n |          ``\\begin{{}}`` in the output.\n |\n |      Returns\n |      -------\n |      str or None\n |          If buf is None, returns the result as a string. Otherwise returns None.\n |\n |      See Also\n |      --------\n |      io.formats.style.Styler.to_latex : Render a DataFrame to LaTeX\n |          with conditional formatting.\n |      DataFrame.to_string : Render a DataFrame to a console-friendly\n |          tabular output.\n |      DataFrame.to_html : Render a DataFrame as an HTML table.\n |\n |      Notes\n |      -----\n |      As of v2.0.0 this method has changed to use the Styler implementation as\n |      part of :meth:`.Styler.to_latex` via ``jinja2`` templating. This means\n |      that ``jinja2`` is a requirement, and needs to be installed, for this method\n |      to function. It is advised that users switch to using Styler, since that\n |      implementation is more frequently updated and contains much more\n |      flexibility with the output.\n |\n |      Examples\n |      --------\n |      Convert a general DataFrame to LaTeX with formatting:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame(dict(name=['Raphael', 'Donatello'],\n |      ...                        age=[26, 45],\n |      ...                        height=[181.23, 177.65]))\n |      &gt;&gt;&gt; print(df.to_latex(index=False,\n |      ...                   formatters={\"name\": str.upper},\n |      ...                   float_format=\"{:.1f}\".format,\n |      ... ))  # doctest: +SKIP\n |      \\begin{tabular}{lrr}\n |      \\toprule\n |      name & age & height \\\\\n |      \\midrule\n |      RAPHAEL & 26 & 181.2 \\\\\n |      DONATELLO & 45 & 177.7 \\\\\n |      \\bottomrule\n |      \\end{tabular}\n |\n |  to_pickle(self, path: 'FilePath | WriteBuffer[bytes]', *, compression: 'CompressionOptions' = 'infer', protocol: 'int' = 5, storage_options: 'StorageOptions | None' = None) -&gt; 'None'\n |      Pickle (serialize) object to file.\n |\n |      Parameters\n |      ----------\n |      path : str, path object, or file-like object\n |          String, path object (implementing ``os.PathLike[str]``), or file-like\n |          object implementing a binary ``write()`` function. File path where\n |          the pickled object will be stored.\n |      compression : str or dict, default 'infer'\n |          For on-the-fly compression of the output data. If 'infer' and 'path' is\n |          path-like, then detect compression from the following extensions: '.gz',\n |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n |          (otherwise no compression).\n |          Set to ``None`` for no compression.\n |          Can also be a dict with key ``'method'`` set\n |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n |          other key-value pairs are forwarded to\n |          ``zipfile.ZipFile``, ``gzip.GzipFile``,\n |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n |          ``tarfile.TarFile``, respectively.\n |          As an example, the following could be passed for faster compression and to create\n |          a reproducible gzip archive:\n |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n |\n |          .. versionadded:: 1.5.0\n |              Added support for `.tar` files.\n |      protocol : int\n |          Int which indicates which protocol should be used by the pickler,\n |          default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible\n |          values are 0, 1, 2, 3, 4, 5. A negative value for the protocol\n |          parameter is equivalent to setting its value to HIGHEST_PROTOCOL.\n |\n |          .. [1] https://docs.python.org/3/library/pickle.html.\n |\n |      storage_options : dict, optional\n |          Extra options that make sense for a particular storage connection, e.g.\n |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n |          are forwarded to ``urllib.request.Request`` as header options. For other\n |          URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n |          details, and for more examples on storage options refer `here\n |          &lt;https://pandas.pydata.org/docs/user_guide/io.html?\n |          highlight=storage_options#reading-writing-remote-files&gt;`_.\n |\n |      See Also\n |      --------\n |      read_pickle : Load pickled pandas object (or any object) from file.\n |      DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n |      DataFrame.to_sql : Write DataFrame to a SQL database.\n |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})  # doctest: +SKIP\n |      &gt;&gt;&gt; original_df  # doctest: +SKIP\n |         foo  bar\n |      0    0    5\n |      1    1    6\n |      2    2    7\n |      3    3    8\n |      4    4    9\n |      &gt;&gt;&gt; original_df.to_pickle(\"./dummy.pkl\")  # doctest: +SKIP\n |\n |      &gt;&gt;&gt; unpickled_df = pd.read_pickle(\"./dummy.pkl\")  # doctest: +SKIP\n |      &gt;&gt;&gt; unpickled_df  # doctest: +SKIP\n |         foo  bar\n |      0    0    5\n |      1    1    6\n |      2    2    7\n |      3    3    8\n |      4    4    9\n |\n |  to_sql(self, name: 'str', con, *, schema: 'str | None' = None, if_exists: \"Literal['fail', 'replace', 'append']\" = 'fail', index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, chunksize: 'int | None' = None, dtype: 'DtypeArg | None' = None, method: \"Literal['multi'] | Callable | None\" = None) -&gt; 'int | None'\n |      Write records stored in a DataFrame to a SQL database.\n |\n |      Databases supported by SQLAlchemy [1]_ are supported. Tables can be\n |      newly created, appended to, or overwritten.\n |\n |      Parameters\n |      ----------\n |      name : str\n |          Name of SQL table.\n |      con : sqlalchemy.engine.(Engine or Connection) or sqlite3.Connection\n |          Using SQLAlchemy makes it possible to use any DB supported by that\n |          library. Legacy support is provided for sqlite3.Connection objects. The user\n |          is responsible for engine disposal and connection closure for the SQLAlchemy\n |          connectable. See `here                 &lt;https://docs.sqlalchemy.org/en/20/core/connections.html&gt;`_.\n |          If passing a sqlalchemy.engine.Connection which is already in a transaction,\n |          the transaction will not be committed.  If passing a sqlite3.Connection,\n |          it will not be possible to roll back the record insertion.\n |\n |      schema : str, optional\n |          Specify the schema (if database flavor supports this). If None, use\n |          default schema.\n |      if_exists : {'fail', 'replace', 'append'}, default 'fail'\n |          How to behave if the table already exists.\n |\n |          * fail: Raise a ValueError.\n |          * replace: Drop the table before inserting new values.\n |          * append: Insert new values to the existing table.\n |\n |      index : bool, default True\n |          Write DataFrame index as a column. Uses `index_label` as the column\n |          name in the table. Creates a table index for this column.\n |      index_label : str or sequence, default None\n |          Column label for index column(s). If None is given (default) and\n |          `index` is True, then the index names are used.\n |          A sequence should be given if the DataFrame uses MultiIndex.\n |      chunksize : int, optional\n |          Specify the number of rows in each batch to be written at a time.\n |          By default, all rows will be written at once.\n |      dtype : dict or scalar, optional\n |          Specifying the datatype for columns. If a dictionary is used, the\n |          keys should be the column names and the values should be the\n |          SQLAlchemy types or strings for the sqlite3 legacy mode. If a\n |          scalar is provided, it will be applied to all columns.\n |      method : {None, 'multi', callable}, optional\n |          Controls the SQL insertion clause used:\n |\n |          * None : Uses standard SQL ``INSERT`` clause (one per row).\n |          * 'multi': Pass multiple values in a single ``INSERT`` clause.\n |          * callable with signature ``(pd_table, conn, keys, data_iter)``.\n |\n |          Details and a sample callable implementation can be found in the\n |          section :ref:`insert method &lt;io.sql.method&gt;`.\n |\n |      Returns\n |      -------\n |      None or int\n |          Number of rows affected by to_sql. None is returned if the callable\n |          passed into ``method`` does not return an integer number of rows.\n |\n |          The number of returned rows affected is the sum of the ``rowcount``\n |          attribute of ``sqlite3.Cursor`` or SQLAlchemy connectable which may not\n |          reflect the exact number of written rows as stipulated in the\n |          `sqlite3 &lt;https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount&gt;`__ or\n |          `SQLAlchemy &lt;https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.CursorResult.rowcount&gt;`__.\n |\n |          .. versionadded:: 1.4.0\n |\n |      Raises\n |      ------\n |      ValueError\n |          When the table already exists and `if_exists` is 'fail' (the\n |          default).\n |\n |      See Also\n |      --------\n |      read_sql : Read a DataFrame from a table.\n |\n |      Notes\n |      -----\n |      Timezone aware datetime columns will be written as\n |      ``Timestamp with timezone`` type with SQLAlchemy if supported by the\n |      database. Otherwise, the datetimes will be stored as timezone unaware\n |      timestamps local to the original timezone.\n |\n |      Not all datastores support ``method=\"multi\"``. Oracle, for example,\n |      does not support multi-value insert.\n |\n |      References\n |      ----------\n |      .. [1] https://docs.sqlalchemy.org\n |      .. [2] https://www.python.org/dev/peps/pep-0249/\n |\n |      Examples\n |      --------\n |      Create an in-memory SQLite database.\n |\n |      &gt;&gt;&gt; from sqlalchemy import create_engine\n |      &gt;&gt;&gt; engine = create_engine('sqlite://', echo=False)\n |\n |      Create a table from scratch with 3 rows.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})\n |      &gt;&gt;&gt; df\n |           name\n |      0  User 1\n |      1  User 2\n |      2  User 3\n |\n |      &gt;&gt;&gt; df.to_sql(name='users', con=engine)\n |      3\n |      &gt;&gt;&gt; from sqlalchemy import text\n |      &gt;&gt;&gt; with engine.connect() as conn:\n |      ...    conn.execute(text(\"SELECT * FROM users\")).fetchall()\n |      [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]\n |\n |      An `sqlalchemy.engine.Connection` can also be passed to `con`:\n |\n |      &gt;&gt;&gt; with engine.begin() as connection:\n |      ...     df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})\n |      ...     df1.to_sql(name='users', con=connection, if_exists='append')\n |      2\n |\n |      This is allowed to support operations that require that the same\n |      DBAPI connection is used for the entire operation.\n |\n |      &gt;&gt;&gt; df2 = pd.DataFrame({'name' : ['User 6', 'User 7']})\n |      &gt;&gt;&gt; df2.to_sql(name='users', con=engine, if_exists='append')\n |      2\n |      &gt;&gt;&gt; with engine.connect() as conn:\n |      ...    conn.execute(text(\"SELECT * FROM users\")).fetchall()\n |      [(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),\n |       (0, 'User 4'), (1, 'User 5'), (0, 'User 6'),\n |       (1, 'User 7')]\n |\n |      Overwrite the table with just ``df2``.\n |\n |      &gt;&gt;&gt; df2.to_sql(name='users', con=engine, if_exists='replace',\n |      ...            index_label='id')\n |      2\n |      &gt;&gt;&gt; with engine.connect() as conn:\n |      ...    conn.execute(text(\"SELECT * FROM users\")).fetchall()\n |      [(0, 'User 6'), (1, 'User 7')]\n |\n |      Use ``method`` to define a callable insertion method to do nothing\n |      if there's a primary key conflict on a table in a PostgreSQL database.\n |\n |      &gt;&gt;&gt; from sqlalchemy.dialects.postgresql import insert\n |      &gt;&gt;&gt; def insert_on_conflict_nothing(table, conn, keys, data_iter):\n |      ...     # \"a\" is the primary key in \"conflict_table\"\n |      ...     data = [dict(zip(keys, row)) for row in data_iter]\n |      ...     stmt = insert(table.table).values(data).on_conflict_do_nothing(index_elements=[\"a\"])\n |      ...     result = conn.execute(stmt)\n |      ...     return result.rowcount\n |      &gt;&gt;&gt; df_conflict.to_sql(name=\"conflict_table\", con=conn, if_exists=\"append\", method=insert_on_conflict_nothing)  # doctest: +SKIP\n |      0\n |\n |      For MySQL, a callable to update columns ``b`` and ``c`` if there's a conflict\n |      on a primary key.\n |\n |      &gt;&gt;&gt; from sqlalchemy.dialects.mysql import insert\n |      &gt;&gt;&gt; def insert_on_conflict_update(table, conn, keys, data_iter):\n |      ...     # update columns \"b\" and \"c\" on primary key conflict\n |      ...     data = [dict(zip(keys, row)) for row in data_iter]\n |      ...     stmt = (\n |      ...         insert(table.table)\n |      ...         .values(data)\n |      ...     )\n |      ...     stmt = stmt.on_duplicate_key_update(b=stmt.inserted.b, c=stmt.inserted.c)\n |      ...     result = conn.execute(stmt)\n |      ...     return result.rowcount\n |      &gt;&gt;&gt; df_conflict.to_sql(name=\"conflict_table\", con=conn, if_exists=\"append\", method=insert_on_conflict_update)  # doctest: +SKIP\n |      2\n |\n |      Specify the dtype (especially useful for integers with missing values).\n |      Notice that while pandas is forced to store the data as floating point,\n |      the database supports nullable integers. When fetching the data with\n |      Python, we get back integer scalars.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [1, None, 2]})\n |      &gt;&gt;&gt; df\n |           A\n |      0  1.0\n |      1  NaN\n |      2  2.0\n |\n |      &gt;&gt;&gt; from sqlalchemy.types import Integer\n |      &gt;&gt;&gt; df.to_sql(name='integers', con=engine, index=False,\n |      ...           dtype={\"A\": Integer()})\n |      3\n |\n |      &gt;&gt;&gt; with engine.connect() as conn:\n |      ...   conn.execute(text(\"SELECT * FROM integers\")).fetchall()\n |      [(1,), (None,), (2,)]\n |\n |  to_xarray(self)\n |      Return an xarray object from the pandas object.\n |\n |      Returns\n |      -------\n |      xarray.DataArray or xarray.Dataset\n |          Data in the pandas structure converted to Dataset if the object is\n |          a DataFrame, or a DataArray if the object is a Series.\n |\n |      See Also\n |      --------\n |      DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n |\n |      Notes\n |      -----\n |      See the `xarray docs &lt;https://xarray.pydata.org/en/stable/&gt;`__\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([('falcon', 'bird', 389.0, 2),\n |      ...                    ('parrot', 'bird', 24.0, 2),\n |      ...                    ('lion', 'mammal', 80.5, 4),\n |      ...                    ('monkey', 'mammal', np.nan, 4)],\n |      ...                   columns=['name', 'class', 'max_speed',\n |      ...                            'num_legs'])\n |      &gt;&gt;&gt; df\n |           name   class  max_speed  num_legs\n |      0  falcon    bird      389.0         2\n |      1  parrot    bird       24.0         2\n |      2    lion  mammal       80.5         4\n |      3  monkey  mammal        NaN         4\n |\n |      &gt;&gt;&gt; df.to_xarray()  # doctest: +SKIP\n |      &lt;xarray.Dataset&gt;\n |      Dimensions:    (index: 4)\n |      Coordinates:\n |        * index      (index) int64 32B 0 1 2 3\n |      Data variables:\n |          name       (index) object 32B 'falcon' 'parrot' 'lion' 'monkey'\n |          class      (index) object 32B 'bird' 'bird' 'mammal' 'mammal'\n |          max_speed  (index) float64 32B 389.0 24.0 80.5 nan\n |          num_legs   (index) int64 32B 2 2 4 4\n |\n |      &gt;&gt;&gt; df['max_speed'].to_xarray()  # doctest: +SKIP\n |      &lt;xarray.DataArray 'max_speed' (index: 4)&gt;\n |      array([389. ,  24. ,  80.5,   nan])\n |      Coordinates:\n |        * index    (index) int64 0 1 2 3\n |\n |      &gt;&gt;&gt; dates = pd.to_datetime(['2018-01-01', '2018-01-01',\n |      ...                         '2018-01-02', '2018-01-02'])\n |      &gt;&gt;&gt; df_multiindex = pd.DataFrame({'date': dates,\n |      ...                               'animal': ['falcon', 'parrot',\n |      ...                                          'falcon', 'parrot'],\n |      ...                               'speed': [350, 18, 361, 15]})\n |      &gt;&gt;&gt; df_multiindex = df_multiindex.set_index(['date', 'animal'])\n |\n |      &gt;&gt;&gt; df_multiindex\n |                         speed\n |      date       animal\n |      2018-01-01 falcon    350\n |                 parrot     18\n |      2018-01-02 falcon    361\n |                 parrot     15\n |\n |      &gt;&gt;&gt; df_multiindex.to_xarray()  # doctest: +SKIP\n |      &lt;xarray.Dataset&gt;\n |      Dimensions:  (date: 2, animal: 2)\n |      Coordinates:\n |        * date     (date) datetime64[ns] 2018-01-01 2018-01-02\n |        * animal   (animal) object 'falcon' 'parrot'\n |      Data variables:\n |          speed    (date, animal) int64 350 18 361 15\n |\n |  truncate(self, before=None, after=None, axis: 'Axis | None' = None, copy: 'bool_t | None' = None) -&gt; 'Self'\n |      Truncate a Series or DataFrame before and after some index value.\n |\n |      This is a useful shorthand for boolean indexing based on index\n |      values above or below certain thresholds.\n |\n |      Parameters\n |      ----------\n |      before : date, str, int\n |          Truncate all rows before this index value.\n |      after : date, str, int\n |          Truncate all rows after this index value.\n |      axis : {0 or 'index', 1 or 'columns'}, optional\n |          Axis to truncate. Truncates the index (rows) by default.\n |          For `Series` this parameter is unused and defaults to 0.\n |      copy : bool, default is True,\n |          Return a copy of the truncated section.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Returns\n |      -------\n |      type of caller\n |          The truncated Series or DataFrame.\n |\n |      See Also\n |      --------\n |      DataFrame.loc : Select a subset of a DataFrame by label.\n |      DataFrame.iloc : Select a subset of a DataFrame by position.\n |\n |      Notes\n |      -----\n |      If the index being truncated contains only datetime values,\n |      `before` and `after` may be specified as strings instead of\n |      Timestamps.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n |      ...                    'B': ['f', 'g', 'h', 'i', 'j'],\n |      ...                    'C': ['k', 'l', 'm', 'n', 'o']},\n |      ...                   index=[1, 2, 3, 4, 5])\n |      &gt;&gt;&gt; df\n |         A  B  C\n |      1  a  f  k\n |      2  b  g  l\n |      3  c  h  m\n |      4  d  i  n\n |      5  e  j  o\n |\n |      &gt;&gt;&gt; df.truncate(before=2, after=4)\n |         A  B  C\n |      2  b  g  l\n |      3  c  h  m\n |      4  d  i  n\n |\n |      The columns of a DataFrame can be truncated.\n |\n |      &gt;&gt;&gt; df.truncate(before=\"A\", after=\"B\", axis=\"columns\")\n |         A  B\n |      1  a  f\n |      2  b  g\n |      3  c  h\n |      4  d  i\n |      5  e  j\n |\n |      For Series, only rows can be truncated.\n |\n |      &gt;&gt;&gt; df['A'].truncate(before=2, after=4)\n |      2    b\n |      3    c\n |      4    d\n |      Name: A, dtype: object\n |\n |      The index values in ``truncate`` can be datetimes or string\n |      dates.\n |\n |      &gt;&gt;&gt; dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')\n |      &gt;&gt;&gt; df = pd.DataFrame(index=dates, data={'A': 1})\n |      &gt;&gt;&gt; df.tail()\n |                           A\n |      2016-01-31 23:59:56  1\n |      2016-01-31 23:59:57  1\n |      2016-01-31 23:59:58  1\n |      2016-01-31 23:59:59  1\n |      2016-02-01 00:00:00  1\n |\n |      &gt;&gt;&gt; df.truncate(before=pd.Timestamp('2016-01-05'),\n |      ...             after=pd.Timestamp('2016-01-10')).tail()\n |                           A\n |      2016-01-09 23:59:56  1\n |      2016-01-09 23:59:57  1\n |      2016-01-09 23:59:58  1\n |      2016-01-09 23:59:59  1\n |      2016-01-10 00:00:00  1\n |\n |      Because the index is a DatetimeIndex containing only dates, we can\n |      specify `before` and `after` as strings. They will be coerced to\n |      Timestamps before truncation.\n |\n |      &gt;&gt;&gt; df.truncate('2016-01-05', '2016-01-10').tail()\n |                           A\n |      2016-01-09 23:59:56  1\n |      2016-01-09 23:59:57  1\n |      2016-01-09 23:59:58  1\n |      2016-01-09 23:59:59  1\n |      2016-01-10 00:00:00  1\n |\n |      Note that ``truncate`` assumes a 0 value for any unspecified time\n |      component (midnight). This differs from partial string slicing, which\n |      returns any partially matching dates.\n |\n |      &gt;&gt;&gt; df.loc['2016-01-05':'2016-01-10', :].tail()\n |                           A\n |      2016-01-10 23:59:55  1\n |      2016-01-10 23:59:56  1\n |      2016-01-10 23:59:57  1\n |      2016-01-10 23:59:58  1\n |      2016-01-10 23:59:59  1\n |\n |  tz_convert(self, tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None) -&gt; 'Self'\n |      Convert tz-aware axis to target time zone.\n |\n |      Parameters\n |      ----------\n |      tz : str or tzinfo object or None\n |          Target time zone. Passing ``None`` will convert to\n |          UTC and remove the timezone information.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis to convert\n |      level : int, str, default None\n |          If axis is a MultiIndex, convert a specific level. Otherwise\n |          must be None.\n |      copy : bool, default True\n |          Also make a copy of the underlying data.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Returns\n |      -------\n |      Series/DataFrame\n |          Object with time zone converted axis.\n |\n |      Raises\n |      ------\n |      TypeError\n |          If the axis is tz-naive.\n |\n |      Examples\n |      --------\n |      Change to another time zone:\n |\n |      &gt;&gt;&gt; s = pd.Series(\n |      ...     [1],\n |      ...     index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']),\n |      ... )\n |      &gt;&gt;&gt; s.tz_convert('Asia/Shanghai')\n |      2018-09-15 07:30:00+08:00    1\n |      dtype: int64\n |\n |      Pass None to convert to UTC and get a tz-naive index:\n |\n |      &gt;&gt;&gt; s = pd.Series([1],\n |      ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))\n |      &gt;&gt;&gt; s.tz_convert(None)\n |      2018-09-14 23:30:00    1\n |      dtype: int64\n |\n |  tz_localize(self, tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None, ambiguous: 'TimeAmbiguous' = 'raise', nonexistent: 'TimeNonexistent' = 'raise') -&gt; 'Self'\n |      Localize tz-naive index of a Series or DataFrame to target time zone.\n |\n |      This operation localizes the Index. To localize the values in a\n |      timezone-naive Series, use :meth:`Series.dt.tz_localize`.\n |\n |      Parameters\n |      ----------\n |      tz : str or tzinfo or None\n |          Time zone to localize. Passing ``None`` will remove the\n |          time zone information and preserve local time.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis to localize\n |      level : int, str, default None\n |          If axis ia a MultiIndex, localize a specific level. Otherwise\n |          must be None.\n |      copy : bool, default True\n |          Also make a copy of the underlying data.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n |          When clocks moved backward due to DST, ambiguous times may arise.\n |          For example in Central European Time (UTC+01), when going from\n |          03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n |          00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n |          `ambiguous` parameter dictates how ambiguous times should be\n |          handled.\n |\n |          - 'infer' will attempt to infer fall dst-transition hours based on\n |            order\n |          - bool-ndarray where True signifies a DST time, False designates\n |            a non-DST time (note that this flag is only applicable for\n |            ambiguous times)\n |          - 'NaT' will return NaT where there are ambiguous times\n |          - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n |            times.\n |      nonexistent : str, default 'raise'\n |          A nonexistent time does not exist in a particular timezone\n |          where clocks moved forward due to DST. Valid values are:\n |\n |          - 'shift_forward' will shift the nonexistent time forward to the\n |            closest existing time\n |          - 'shift_backward' will shift the nonexistent time backward to the\n |            closest existing time\n |          - 'NaT' will return NaT where there are nonexistent times\n |          - timedelta objects will shift nonexistent times by the timedelta\n |          - 'raise' will raise an NonExistentTimeError if there are\n |            nonexistent times.\n |\n |      Returns\n |      -------\n |      Series/DataFrame\n |          Same type as the input.\n |\n |      Raises\n |      ------\n |      TypeError\n |          If the TimeSeries is tz-aware and tz is not None.\n |\n |      Examples\n |      --------\n |      Localize local times:\n |\n |      &gt;&gt;&gt; s = pd.Series(\n |      ...     [1],\n |      ...     index=pd.DatetimeIndex(['2018-09-15 01:30:00']),\n |      ... )\n |      &gt;&gt;&gt; s.tz_localize('CET')\n |      2018-09-15 01:30:00+02:00    1\n |      dtype: int64\n |\n |      Pass None to convert to tz-naive index and preserve local time:\n |\n |      &gt;&gt;&gt; s = pd.Series([1],\n |      ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))\n |      &gt;&gt;&gt; s.tz_localize(None)\n |      2018-09-15 01:30:00    1\n |      dtype: int64\n |\n |      Be careful with DST changes. When there is sequential data, pandas\n |      can infer the DST time:\n |\n |      &gt;&gt;&gt; s = pd.Series(range(7),\n |      ...               index=pd.DatetimeIndex(['2018-10-28 01:30:00',\n |      ...                                       '2018-10-28 02:00:00',\n |      ...                                       '2018-10-28 02:30:00',\n |      ...                                       '2018-10-28 02:00:00',\n |      ...                                       '2018-10-28 02:30:00',\n |      ...                                       '2018-10-28 03:00:00',\n |      ...                                       '2018-10-28 03:30:00']))\n |      &gt;&gt;&gt; s.tz_localize('CET', ambiguous='infer')\n |      2018-10-28 01:30:00+02:00    0\n |      2018-10-28 02:00:00+02:00    1\n |      2018-10-28 02:30:00+02:00    2\n |      2018-10-28 02:00:00+01:00    3\n |      2018-10-28 02:30:00+01:00    4\n |      2018-10-28 03:00:00+01:00    5\n |      2018-10-28 03:30:00+01:00    6\n |      dtype: int64\n |\n |      In some cases, inferring the DST is impossible. In such cases, you can\n |      pass an ndarray to the ambiguous parameter to set the DST explicitly\n |\n |      &gt;&gt;&gt; s = pd.Series(range(3),\n |      ...               index=pd.DatetimeIndex(['2018-10-28 01:20:00',\n |      ...                                       '2018-10-28 02:36:00',\n |      ...                                       '2018-10-28 03:46:00']))\n |      &gt;&gt;&gt; s.tz_localize('CET', ambiguous=np.array([True, True, False]))\n |      2018-10-28 01:20:00+02:00    0\n |      2018-10-28 02:36:00+02:00    1\n |      2018-10-28 03:46:00+01:00    2\n |      dtype: int64\n |\n |      If the DST transition causes nonexistent times, you can shift these\n |      dates forward or backward with a timedelta object or `'shift_forward'`\n |      or `'shift_backward'`.\n |\n |      &gt;&gt;&gt; s = pd.Series(range(2),\n |      ...               index=pd.DatetimeIndex(['2015-03-29 02:30:00',\n |      ...                                       '2015-03-29 03:30:00']))\n |      &gt;&gt;&gt; s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n |      2015-03-29 03:00:00+02:00    0\n |      2015-03-29 03:30:00+02:00    1\n |      dtype: int64\n |      &gt;&gt;&gt; s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n |      2015-03-29 01:59:59.999999999+01:00    0\n |      2015-03-29 03:30:00+02:00              1\n |      dtype: int64\n |      &gt;&gt;&gt; s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1h'))\n |      2015-03-29 03:30:00+02:00    0\n |      2015-03-29 03:30:00+02:00    1\n |      dtype: int64\n |\n |  where(self, cond, other=nan, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -&gt; 'Self | None'\n |      Replace values where the condition is False.\n |\n |      Parameters\n |      ----------\n |      cond : bool Series/DataFrame, array-like, or callable\n |          Where `cond` is True, keep the original value. Where\n |          False, replace with corresponding value from `other`.\n |          If `cond` is callable, it is computed on the Series/DataFrame and\n |          should return boolean Series/DataFrame or array. The callable must\n |          not change input Series/DataFrame (though pandas doesn't check it).\n |      other : scalar, Series/DataFrame, or callable\n |          Entries where `cond` is False are replaced with\n |          corresponding value from `other`.\n |          If other is callable, it is computed on the Series/DataFrame and\n |          should return scalar or Series/DataFrame. The callable must not\n |          change input Series/DataFrame (though pandas doesn't check it).\n |          If not specified, entries will be filled with the corresponding\n |          NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension\n |          dtypes).\n |      inplace : bool, default False\n |          Whether to perform the operation in place on the data.\n |      axis : int, default None\n |          Alignment axis if needed. For `Series` this parameter is\n |          unused and defaults to 0.\n |      level : int, default None\n |          Alignment level if needed.\n |\n |      Returns\n |      -------\n |      Same type as caller or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      :func:`DataFrame.mask` : Return an object of same shape as\n |          self.\n |\n |      Notes\n |      -----\n |      The where method is an application of the if-then idiom. For each\n |      element in the calling DataFrame, if ``cond`` is ``True`` the\n |      element is used; otherwise the corresponding element from the DataFrame\n |      ``other`` is used. If the axis of ``other`` does not align with axis of\n |      ``cond`` Series/DataFrame, the misaligned index positions will be filled with\n |      False.\n |\n |      The signature for :func:`DataFrame.where` differs from\n |      :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n |      ``np.where(m, df1, df2)``.\n |\n |      For further details and examples see the ``where`` documentation in\n |      :ref:`indexing &lt;indexing.where_mask&gt;`.\n |\n |      The dtype of the object takes precedence. The fill value is casted to\n |      the object's dtype, if this can be done losslessly.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(range(5))\n |      &gt;&gt;&gt; s.where(s &gt; 0)\n |      0    NaN\n |      1    1.0\n |      2    2.0\n |      3    3.0\n |      4    4.0\n |      dtype: float64\n |      &gt;&gt;&gt; s.mask(s &gt; 0)\n |      0    0.0\n |      1    NaN\n |      2    NaN\n |      3    NaN\n |      4    NaN\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s = pd.Series(range(5))\n |      &gt;&gt;&gt; t = pd.Series([True, False])\n |      &gt;&gt;&gt; s.where(t, 99)\n |      0     0\n |      1    99\n |      2    99\n |      3    99\n |      4    99\n |      dtype: int64\n |      &gt;&gt;&gt; s.mask(t, 99)\n |      0    99\n |      1     1\n |      2    99\n |      3    99\n |      4    99\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s.where(s &gt; 1, 10)\n |      0    10\n |      1    10\n |      2    2\n |      3    3\n |      4    4\n |      dtype: int64\n |      &gt;&gt;&gt; s.mask(s &gt; 1, 10)\n |      0     0\n |      1     1\n |      2    10\n |      3    10\n |      4    10\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  0  1\n |      1  2  3\n |      2  4  5\n |      3  6  7\n |      4  8  9\n |      &gt;&gt;&gt; m = df % 3 == 0\n |      &gt;&gt;&gt; df.where(m, -df)\n |         A  B\n |      0  0 -1\n |      1 -2  3\n |      2 -4 -5\n |      3  6 -7\n |      4 -8  9\n |      &gt;&gt;&gt; df.where(m, -df) == np.where(m, df, -df)\n |            A     B\n |      0  True  True\n |      1  True  True\n |      2  True  True\n |      3  True  True\n |      4  True  True\n |      &gt;&gt;&gt; df.where(m, -df) == df.mask(~m, -df)\n |            A     B\n |      0  True  True\n |      1  True  True\n |      2  True  True\n |      3  True  True\n |      4  True  True\n |\n |  xs(self, key: 'IndexLabel', axis: 'Axis' = 0, level: 'IndexLabel | None' = None, drop_level: 'bool_t' = True) -&gt; 'Self'\n |      Return cross-section from the Series/DataFrame.\n |\n |      This method takes a `key` argument to select data at a particular\n |      level of a MultiIndex.\n |\n |      Parameters\n |      ----------\n |      key : label or tuple of label\n |          Label contained in the index, or partially in a MultiIndex.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Axis to retrieve cross-section on.\n |      level : object, defaults to first n levels (n=1 or len(key))\n |          In case of a key partially contained in a MultiIndex, indicate\n |          which levels are used. Levels can be referred by label or position.\n |      drop_level : bool, default True\n |          If False, returns object with same levels as self.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Cross-section from the original Series or DataFrame\n |          corresponding to the selected index levels.\n |\n |      See Also\n |      --------\n |      DataFrame.loc : Access a group of rows and columns\n |          by label(s) or a boolean array.\n |      DataFrame.iloc : Purely integer-location based indexing\n |          for selection by position.\n |\n |      Notes\n |      -----\n |      `xs` can not be used to set values.\n |\n |      MultiIndex Slicers is a generic way to get/set values on\n |      any level or levels.\n |      It is a superset of `xs` functionality, see\n |      :ref:`MultiIndex Slicers &lt;advanced.mi_slicers&gt;`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; d = {'num_legs': [4, 4, 2, 2],\n |      ...      'num_wings': [0, 0, 2, 2],\n |      ...      'class': ['mammal', 'mammal', 'mammal', 'bird'],\n |      ...      'animal': ['cat', 'dog', 'bat', 'penguin'],\n |      ...      'locomotion': ['walks', 'walks', 'flies', 'walks']}\n |      &gt;&gt;&gt; df = pd.DataFrame(data=d)\n |      &gt;&gt;&gt; df = df.set_index(['class', 'animal', 'locomotion'])\n |      &gt;&gt;&gt; df\n |                                 num_legs  num_wings\n |      class  animal  locomotion\n |      mammal cat     walks              4          0\n |             dog     walks              4          0\n |             bat     flies              2          2\n |      bird   penguin walks              2          2\n |\n |      Get values at specified index\n |\n |      &gt;&gt;&gt; df.xs('mammal')\n |                         num_legs  num_wings\n |      animal locomotion\n |      cat    walks              4          0\n |      dog    walks              4          0\n |      bat    flies              2          2\n |\n |      Get values at several indexes\n |\n |      &gt;&gt;&gt; df.xs(('mammal', 'dog', 'walks'))\n |      num_legs     4\n |      num_wings    0\n |      Name: (mammal, dog, walks), dtype: int64\n |\n |      Get values at specified index and level\n |\n |      &gt;&gt;&gt; df.xs('cat', level=1)\n |                         num_legs  num_wings\n |      class  locomotion\n |      mammal walks              4          0\n |\n |      Get values at several indexes and levels\n |\n |      &gt;&gt;&gt; df.xs(('bird', 'walks'),\n |      ...       level=[0, 'locomotion'])\n |               num_legs  num_wings\n |      animal\n |      penguin         2          2\n |\n |      Get values at specified column and axis\n |\n |      &gt;&gt;&gt; df.xs('num_wings', axis=1)\n |      class   animal   locomotion\n |      mammal  cat      walks         0\n |              dog      walks         0\n |              bat      flies         2\n |      bird    penguin  walks         2\n |      Name: num_wings, dtype: int64\n |\n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from pandas.core.generic.NDFrame:\n |\n |  flags\n |      Get the properties associated with this pandas object.\n |\n |      The available flags are\n |\n |      * :attr:`Flags.allows_duplicate_labels`\n |\n |      See Also\n |      --------\n |      Flags : Flags that apply to pandas objects.\n |      DataFrame.attrs : Global metadata applying to this dataset.\n |\n |      Notes\n |      -----\n |      \"Flags\" differ from \"metadata\". Flags reflect properties of the\n |      pandas object (the Series or DataFrame). Metadata refer to properties\n |      of the dataset, and should be stored in :attr:`DataFrame.attrs`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [1, 2]})\n |      &gt;&gt;&gt; df.flags\n |      &lt;Flags(allows_duplicate_labels=True)&gt;\n |\n |      Flags can be get or set using ``.``\n |\n |      &gt;&gt;&gt; df.flags.allows_duplicate_labels\n |      True\n |      &gt;&gt;&gt; df.flags.allows_duplicate_labels = False\n |\n |      Or by slicing with a key\n |\n |      &gt;&gt;&gt; df.flags[\"allows_duplicate_labels\"]\n |      False\n |      &gt;&gt;&gt; df.flags[\"allows_duplicate_labels\"] = True\n |\n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from pandas.core.generic.NDFrame:\n |\n |  attrs\n |      Dictionary of global attributes of this dataset.\n |\n |      .. warning::\n |\n |         attrs is experimental and may change without warning.\n |\n |      See Also\n |      --------\n |      DataFrame.flags : Global flags applying to this object.\n |\n |      Notes\n |      -----\n |      Many operations that create new datasets will copy ``attrs``. Copies\n |      are always deep so that changing ``attrs`` will only affect the\n |      present dataset. ``pandas.concat`` copies ``attrs`` only if all input\n |      datasets have the same ``attrs``.\n |\n |      Examples\n |      --------\n |      For Series:\n |\n |      &gt;&gt;&gt; ser = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; ser.attrs = {\"A\": [10, 20, 30]}\n |      &gt;&gt;&gt; ser.attrs\n |      {'A': [10, 20, 30]}\n |\n |      For DataFrame:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\n |      &gt;&gt;&gt; df.attrs = {\"A\": [10, 20, 30]}\n |      &gt;&gt;&gt; df.attrs\n |      {'A': [10, 20, 30]}\n |\n |  ----------------------------------------------------------------------\n |  Methods inherited from pandas.core.base.PandasObject:\n |\n |  __sizeof__(self) -&gt; 'int'\n |      Generates the total memory usage for an object that returns\n |      either a value or Series of values\n |\n |  ----------------------------------------------------------------------\n |  Methods inherited from pandas.core.accessor.DirNamesMixin:\n |\n |  __dir__(self) -&gt; 'list[str]'\n |      Provide method name lookup and completion.\n |\n |      Notes\n |      -----\n |      Only provide 'public' methods.\n |\n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from pandas.core.indexing.IndexingMixin:\n |\n |  at\n |      Access a single value for a row/column label pair.\n |\n |      Similar to ``loc``, in that both provide label-based lookups. Use\n |      ``at`` if you only need to get or set a single value in a DataFrame\n |      or Series.\n |\n |      Raises\n |      ------\n |      KeyError\n |          If getting a value and 'label' does not exist in a DataFrame or Series.\n |\n |      ValueError\n |          If row/column label pair is not a tuple or if any label\n |          from the pair is not a scalar for DataFrame.\n |          If label is list-like (*excluding* NamedTuple) for Series.\n |\n |      See Also\n |      --------\n |      DataFrame.at : Access a single value for a row/column pair by label.\n |      DataFrame.iat : Access a single value for a row/column pair by integer\n |          position.\n |      DataFrame.loc : Access a group of rows and columns by label(s).\n |      DataFrame.iloc : Access a group of rows and columns by integer\n |          position(s).\n |      Series.at : Access a single value by label.\n |      Series.iat : Access a single value by integer position.\n |      Series.loc : Access a group of rows by label(s).\n |      Series.iloc : Access a group of rows by integer position(s).\n |\n |      Notes\n |      -----\n |      See :ref:`Fast scalar value getting and setting &lt;indexing.basics.get_value&gt;`\n |      for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n |      ...                   index=[4, 5, 6], columns=['A', 'B', 'C'])\n |      &gt;&gt;&gt; df\n |          A   B   C\n |      4   0   2   3\n |      5   0   4   1\n |      6  10  20  30\n |\n |      Get value at specified row/column pair\n |\n |      &gt;&gt;&gt; df.at[4, 'B']\n |      2\n |\n |      Set value at specified row/column pair\n |\n |      &gt;&gt;&gt; df.at[4, 'B'] = 10\n |      &gt;&gt;&gt; df.at[4, 'B']\n |      10\n |\n |      Get value within a Series\n |\n |      &gt;&gt;&gt; df.loc[5].at['B']\n |      4\n |\n |  iat\n |      Access a single value for a row/column pair by integer position.\n |\n |      Similar to ``iloc``, in that both provide integer-based lookups. Use\n |      ``iat`` if you only need to get or set a single value in a DataFrame\n |      or Series.\n |\n |      Raises\n |      ------\n |      IndexError\n |          When integer position is out of bounds.\n |\n |      See Also\n |      --------\n |      DataFrame.at : Access a single value for a row/column label pair.\n |      DataFrame.loc : Access a group of rows and columns by label(s).\n |      DataFrame.iloc : Access a group of rows and columns by integer position(s).\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n |      ...                   columns=['A', 'B', 'C'])\n |      &gt;&gt;&gt; df\n |          A   B   C\n |      0   0   2   3\n |      1   0   4   1\n |      2  10  20  30\n |\n |      Get value at specified row/column pair\n |\n |      &gt;&gt;&gt; df.iat[1, 2]\n |      1\n |\n |      Set value at specified row/column pair\n |\n |      &gt;&gt;&gt; df.iat[1, 2] = 10\n |      &gt;&gt;&gt; df.iat[1, 2]\n |      10\n |\n |      Get value within a series\n |\n |      &gt;&gt;&gt; df.loc[0].iat[1]\n |      2\n |\n |  iloc\n |      Purely integer-location based indexing for selection by position.\n |\n |      .. deprecated:: 2.2.0\n |\n |         Returning a tuple from a callable is deprecated.\n |\n |      ``.iloc[]`` is primarily integer position based (from ``0`` to\n |      ``length-1`` of the axis), but may also be used with a boolean\n |      array.\n |\n |      Allowed inputs are:\n |\n |      - An integer, e.g. ``5``.\n |      - A list or array of integers, e.g. ``[4, 3, 0]``.\n |      - A slice object with ints, e.g. ``1:7``.\n |      - A boolean array.\n |      - A ``callable`` function with one argument (the calling Series or\n |        DataFrame) and that returns valid output for indexing (one of the above).\n |        This is useful in method chains, when you don't have a reference to the\n |        calling object, but would like to base your selection on\n |        some value.\n |      - A tuple of row and column indexes. The tuple elements consist of one of the\n |        above inputs, e.g. ``(0, 1)``.\n |\n |      ``.iloc`` will raise ``IndexError`` if a requested indexer is\n |      out-of-bounds, except *slice* indexers which allow out-of-bounds\n |      indexing (this conforms with python/numpy *slice* semantics).\n |\n |      See more at :ref:`Selection by Position &lt;indexing.integer&gt;`.\n |\n |      See Also\n |      --------\n |      DataFrame.iat : Fast integer location scalar accessor.\n |      DataFrame.loc : Purely label-location based indexer for selection by label.\n |      Series.iloc : Purely integer-location based indexing for\n |                     selection by position.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n |      ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n |      ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000}]\n |      &gt;&gt;&gt; df = pd.DataFrame(mydict)\n |      &gt;&gt;&gt; df\n |            a     b     c     d\n |      0     1     2     3     4\n |      1   100   200   300   400\n |      2  1000  2000  3000  4000\n |\n |      **Indexing just the rows**\n |\n |      With a scalar integer.\n |\n |      &gt;&gt;&gt; type(df.iloc[0])\n |      &lt;class 'pandas.core.series.Series'&gt;\n |      &gt;&gt;&gt; df.iloc[0]\n |      a    1\n |      b    2\n |      c    3\n |      d    4\n |      Name: 0, dtype: int64\n |\n |      With a list of integers.\n |\n |      &gt;&gt;&gt; df.iloc[[0]]\n |         a  b  c  d\n |      0  1  2  3  4\n |      &gt;&gt;&gt; type(df.iloc[[0]])\n |      &lt;class 'pandas.core.frame.DataFrame'&gt;\n |\n |      &gt;&gt;&gt; df.iloc[[0, 1]]\n |           a    b    c    d\n |      0    1    2    3    4\n |      1  100  200  300  400\n |\n |      With a `slice` object.\n |\n |      &gt;&gt;&gt; df.iloc[:3]\n |            a     b     c     d\n |      0     1     2     3     4\n |      1   100   200   300   400\n |      2  1000  2000  3000  4000\n |\n |      With a boolean mask the same length as the index.\n |\n |      &gt;&gt;&gt; df.iloc[[True, False, True]]\n |            a     b     c     d\n |      0     1     2     3     4\n |      2  1000  2000  3000  4000\n |\n |      With a callable, useful in method chains. The `x` passed\n |      to the ``lambda`` is the DataFrame being sliced. This selects\n |      the rows whose index label even.\n |\n |      &gt;&gt;&gt; df.iloc[lambda x: x.index % 2 == 0]\n |            a     b     c     d\n |      0     1     2     3     4\n |      2  1000  2000  3000  4000\n |\n |      **Indexing both axes**\n |\n |      You can mix the indexer types for the index and columns. Use ``:`` to\n |      select the entire axis.\n |\n |      With scalar integers.\n |\n |      &gt;&gt;&gt; df.iloc[0, 1]\n |      2\n |\n |      With lists of integers.\n |\n |      &gt;&gt;&gt; df.iloc[[0, 2], [1, 3]]\n |            b     d\n |      0     2     4\n |      2  2000  4000\n |\n |      With `slice` objects.\n |\n |      &gt;&gt;&gt; df.iloc[1:3, 0:3]\n |            a     b     c\n |      1   100   200   300\n |      2  1000  2000  3000\n |\n |      With a boolean array whose length matches the columns.\n |\n |      &gt;&gt;&gt; df.iloc[:, [True, False, True, False]]\n |            a     c\n |      0     1     3\n |      1   100   300\n |      2  1000  3000\n |\n |      With a callable function that expects the Series or DataFrame.\n |\n |      &gt;&gt;&gt; df.iloc[:, lambda df: [0, 2]]\n |            a     c\n |      0     1     3\n |      1   100   300\n |      2  1000  3000\n |\n |  loc\n |      Access a group of rows and columns by label(s) or a boolean array.\n |\n |      ``.loc[]`` is primarily label based, but may also be used with a\n |      boolean array.\n |\n |      Allowed inputs are:\n |\n |      - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is\n |        interpreted as a *label* of the index, and **never** as an\n |        integer position along the index).\n |      - A list or array of labels, e.g. ``['a', 'b', 'c']``.\n |      - A slice object with labels, e.g. ``'a':'f'``.\n |\n |        .. warning:: Note that contrary to usual python slices, **both** the\n |            start and the stop are included\n |\n |      - A boolean array of the same length as the axis being sliced,\n |        e.g. ``[True, False, True]``.\n |      - An alignable boolean Series. The index of the key will be aligned before\n |        masking.\n |      - An alignable Index. The Index of the returned selection will be the input.\n |      - A ``callable`` function with one argument (the calling Series or\n |        DataFrame) and that returns valid output for indexing (one of the above)\n |\n |      See more at :ref:`Selection by Label &lt;indexing.label&gt;`.\n |\n |      Raises\n |      ------\n |      KeyError\n |          If any items are not found.\n |      IndexingError\n |          If an indexed key is passed and its index is unalignable to the frame index.\n |\n |      See Also\n |      --------\n |      DataFrame.at : Access a single value for a row/column label pair.\n |      DataFrame.iloc : Access group of rows and columns by integer position(s).\n |      DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the\n |                     Series/DataFrame.\n |      Series.loc : Access group of values using labels.\n |\n |      Examples\n |      --------\n |      **Getting values**\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n |      ...                   index=['cobra', 'viper', 'sidewinder'],\n |      ...                   columns=['max_speed', 'shield'])\n |      &gt;&gt;&gt; df\n |                  max_speed  shield\n |      cobra               1       2\n |      viper               4       5\n |      sidewinder          7       8\n |\n |      Single label. Note this returns the row as a Series.\n |\n |      &gt;&gt;&gt; df.loc['viper']\n |      max_speed    4\n |      shield       5\n |      Name: viper, dtype: int64\n |\n |      List of labels. Note using ``[[]]`` returns a DataFrame.\n |\n |      &gt;&gt;&gt; df.loc[['viper', 'sidewinder']]\n |                  max_speed  shield\n |      viper               4       5\n |      sidewinder          7       8\n |\n |      Single label for row and column\n |\n |      &gt;&gt;&gt; df.loc['cobra', 'shield']\n |      2\n |\n |      Slice with labels for row and single label for column. As mentioned\n |      above, note that both the start and stop of the slice are included.\n |\n |      &gt;&gt;&gt; df.loc['cobra':'viper', 'max_speed']\n |      cobra    1\n |      viper    4\n |      Name: max_speed, dtype: int64\n |\n |      Boolean list with the same length as the row axis\n |\n |      &gt;&gt;&gt; df.loc[[False, False, True]]\n |                  max_speed  shield\n |      sidewinder          7       8\n |\n |      Alignable boolean Series:\n |\n |      &gt;&gt;&gt; df.loc[pd.Series([False, True, False],\n |      ...                  index=['viper', 'sidewinder', 'cobra'])]\n |                           max_speed  shield\n |      sidewinder          7       8\n |\n |      Index (same behavior as ``df.reindex``)\n |\n |      &gt;&gt;&gt; df.loc[pd.Index([\"cobra\", \"viper\"], name=\"foo\")]\n |             max_speed  shield\n |      foo\n |      cobra          1       2\n |      viper          4       5\n |\n |      Conditional that returns a boolean Series\n |\n |      &gt;&gt;&gt; df.loc[df['shield'] &gt; 6]\n |                  max_speed  shield\n |      sidewinder          7       8\n |\n |      Conditional that returns a boolean Series with column labels specified\n |\n |      &gt;&gt;&gt; df.loc[df['shield'] &gt; 6, ['max_speed']]\n |                  max_speed\n |      sidewinder          7\n |\n |      Multiple conditional using ``&`` that returns a boolean Series\n |\n |      &gt;&gt;&gt; df.loc[(df['max_speed'] &gt; 1) & (df['shield'] &lt; 8)]\n |                  max_speed  shield\n |      viper          4       5\n |\n |      Multiple conditional using ``|`` that returns a boolean Series\n |\n |      &gt;&gt;&gt; df.loc[(df['max_speed'] &gt; 4) | (df['shield'] &lt; 5)]\n |                  max_speed  shield\n |      cobra               1       2\n |      sidewinder          7       8\n |\n |      Please ensure that each condition is wrapped in parentheses ``()``.\n |      See the :ref:`user guide&lt;indexing.boolean&gt;`\n |      for more details and explanations of Boolean indexing.\n |\n |      .. note::\n |          If you find yourself using 3 or more conditionals in ``.loc[]``,\n |          consider using :ref:`advanced indexing&lt;advanced.advanced_hierarchical&gt;`.\n |\n |          See below for using ``.loc[]`` on MultiIndex DataFrames.\n |\n |      Callable that returns a boolean Series\n |\n |      &gt;&gt;&gt; df.loc[lambda df: df['shield'] == 8]\n |                  max_speed  shield\n |      sidewinder          7       8\n |\n |      **Setting values**\n |\n |      Set value for all items matching the list of labels\n |\n |      &gt;&gt;&gt; df.loc[['viper', 'sidewinder'], ['shield']] = 50\n |      &gt;&gt;&gt; df\n |                  max_speed  shield\n |      cobra               1       2\n |      viper               4      50\n |      sidewinder          7      50\n |\n |      Set value for an entire row\n |\n |      &gt;&gt;&gt; df.loc['cobra'] = 10\n |      &gt;&gt;&gt; df\n |                  max_speed  shield\n |      cobra              10      10\n |      viper               4      50\n |      sidewinder          7      50\n |\n |      Set value for an entire column\n |\n |      &gt;&gt;&gt; df.loc[:, 'max_speed'] = 30\n |      &gt;&gt;&gt; df\n |                  max_speed  shield\n |      cobra              30      10\n |      viper              30      50\n |      sidewinder         30      50\n |\n |      Set value for rows matching callable condition\n |\n |      &gt;&gt;&gt; df.loc[df['shield'] &gt; 35] = 0\n |      &gt;&gt;&gt; df\n |                  max_speed  shield\n |      cobra              30      10\n |      viper               0       0\n |      sidewinder          0       0\n |\n |      Add value matching location\n |\n |      &gt;&gt;&gt; df.loc[\"viper\", \"shield\"] += 5\n |      &gt;&gt;&gt; df\n |                  max_speed  shield\n |      cobra              30      10\n |      viper               0       5\n |      sidewinder          0       0\n |\n |      Setting using a ``Series`` or a ``DataFrame`` sets the values matching the\n |      index labels, not the index positions.\n |\n |      &gt;&gt;&gt; shuffled_df = df.loc[[\"viper\", \"cobra\", \"sidewinder\"]]\n |      &gt;&gt;&gt; df.loc[:] += shuffled_df\n |      &gt;&gt;&gt; df\n |                  max_speed  shield\n |      cobra              60      20\n |      viper               0      10\n |      sidewinder          0       0\n |\n |      **Getting values on a DataFrame with an index that has integer labels**\n |\n |      Another example using integers for the index\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n |      ...                   index=[7, 8, 9], columns=['max_speed', 'shield'])\n |      &gt;&gt;&gt; df\n |         max_speed  shield\n |      7          1       2\n |      8          4       5\n |      9          7       8\n |\n |      Slice with integer labels for rows. As mentioned above, note that both\n |      the start and stop of the slice are included.\n |\n |      &gt;&gt;&gt; df.loc[7:9]\n |         max_speed  shield\n |      7          1       2\n |      8          4       5\n |      9          7       8\n |\n |      **Getting values with a MultiIndex**\n |\n |      A number of examples using a DataFrame with a MultiIndex\n |\n |      &gt;&gt;&gt; tuples = [\n |      ...     ('cobra', 'mark i'), ('cobra', 'mark ii'),\n |      ...     ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n |      ...     ('viper', 'mark ii'), ('viper', 'mark iii')\n |      ... ]\n |      &gt;&gt;&gt; index = pd.MultiIndex.from_tuples(tuples)\n |      &gt;&gt;&gt; values = [[12, 2], [0, 4], [10, 20],\n |      ...           [1, 4], [7, 1], [16, 36]]\n |      &gt;&gt;&gt; df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n |      &gt;&gt;&gt; df\n |                           max_speed  shield\n |      cobra      mark i           12       2\n |                 mark ii           0       4\n |      sidewinder mark i           10      20\n |                 mark ii           1       4\n |      viper      mark ii           7       1\n |                 mark iii         16      36\n |\n |      Single label. Note this returns a DataFrame with a single index.\n |\n |      &gt;&gt;&gt; df.loc['cobra']\n |               max_speed  shield\n |      mark i          12       2\n |      mark ii          0       4\n |\n |      Single index tuple. Note this returns a Series.\n |\n |      &gt;&gt;&gt; df.loc[('cobra', 'mark ii')]\n |      max_speed    0\n |      shield       4\n |      Name: (cobra, mark ii), dtype: int64\n |\n |      Single label for row and column. Similar to passing in a tuple, this\n |      returns a Series.\n |\n |      &gt;&gt;&gt; df.loc['cobra', 'mark i']\n |      max_speed    12\n |      shield        2\n |      Name: (cobra, mark i), dtype: int64\n |\n |      Single tuple. Note using ``[[]]`` returns a DataFrame.\n |\n |      &gt;&gt;&gt; df.loc[[('cobra', 'mark ii')]]\n |                     max_speed  shield\n |      cobra mark ii          0       4\n |\n |      Single tuple for the index with a single label for the column\n |\n |      &gt;&gt;&gt; df.loc[('cobra', 'mark i'), 'shield']\n |      2\n |\n |      Slice from index tuple to single label\n |\n |      &gt;&gt;&gt; df.loc[('cobra', 'mark i'):'viper']\n |                           max_speed  shield\n |      cobra      mark i           12       2\n |                 mark ii           0       4\n |      sidewinder mark i           10      20\n |                 mark ii           1       4\n |      viper      mark ii           7       1\n |                 mark iii         16      36\n |\n |      Slice from index tuple to index tuple\n |\n |      &gt;&gt;&gt; df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n |                          max_speed  shield\n |      cobra      mark i          12       2\n |                 mark ii          0       4\n |      sidewinder mark i          10      20\n |                 mark ii          1       4\n |      viper      mark ii          7       1\n |\n |      Please see the :ref:`user guide&lt;advanced.advanced_hierarchical&gt;`\n |      for more details and explanations of advanced indexing.\n\n\n\n\n\nUsing a list:\n\ns1 = pd.Series([1, 3, 5, 6, 8])\ns1\n\n0    1\n1    3\n2    5\n3    6\n4    8\ndtype: int64\n\n\n\n\nUsing a scalar (single value):\n\ns2 = pd.Series(5.0, index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\ns2\n\na    5.0\nb    5.0\nc    5.0\nd    5.0\ne    5.0\ndtype: float64\n\n\n\n\nUsing a numpy array:\nTo create a Series using ndarray first import numpy library.\n\nimport numpy as np\n\nNumPy, short for Numerical Python, is a fundamental Python library for scientific computing. It provides support for working with large, multi-dimensional arrays and matrices, as well as a collection of high-level mathematical functions to operate on these arrays.\n\ns3 = pd.Series(np.random.randn(5), index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\ns3\n\na   -0.198517\nb    0.441084\nc   -0.008270\nd   -1.930252\ne   -0.492805\ndtype: float64\n\n\nThe np.random module in NumPy is designed for generating pseudo-random numbers, enabling you to extract samples from a wide range of probability distributions. Specifically, the np.random.randn function is used to obtain one or more samples from the “standard normal” distribution, characterized by a mean of 0 and a variance of 1.\nIf data is an ndarray, index must be the same length as data. If no index is passed, one will be created having values [0, …, len(data) - 1].\n\ns3 = pd.Series(np.random.randn(5))\ns3\n\n0   -0.538925\n1    1.122233\n2   -1.685373\n3    1.106628\n4    0.669752\ndtype: float64\n\n\n\n\nUsing a dictionary:\nSeries can be instantiated from dicts (recall dictionary from last week) as follows:\n\nd = {\"A\": 248, \"C\": 243, \"G\": 266, \"T\": 243}\ns4 = pd.Series(d)\ns4\n\nA    248\nC    243\nG    266\nT    243\ndtype: int64\n\n\n\ns4 = pd.Series(dict, index=[\"A\", \"B\", \"C\"])\ns4\n\nA    &lt;class 'dict'&gt;\nB    &lt;class 'dict'&gt;\nC    &lt;class 'dict'&gt;\ndtype: object"
  },
  {
    "objectID": "vignettes/2_Intro_pandas.html#dataframe",
    "href": "vignettes/2_Intro_pandas.html#dataframe",
    "title": "Getting started with pandas",
    "section": "DataFrame",
    "text": "DataFrame\nDataFrame is a 2-dimensional labeled data structure with columns of potentially different types. You can think of it like a spreadsheet or SQL table, or a dict of Series objects. The DataFrame is generally the most commonly used pandas object. It accepts many different types of input including dictionary of 1-D ndarrays, lists, dictionaries or Series, 2-D ndarray, a Series or even another DataFrame.\nAlong with the data, you can optionally pass index (row labels) and columns (column labels) arguments. If you pass an index and/or columns, you are guaranteeing the index and/or columns of the resulting DataFrame.\nThe basic method to create a DataFrame is to call:\ndf = pd.DataFrame(data, index=index, columns=columns)\nTo open the help page for DataFrame, you can use the following code:\n\nimport pandas as pd\nhelp(pd.DataFrame)  \n# or help(pandas.DataFrame)\n\n\n\n\nHelp on class DataFrame in module pandas.core.frame:\n\nclass DataFrame(pandas.core.generic.NDFrame, pandas.core.arraylike.OpsMixin)\n |  DataFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -&gt; 'None'\n |\n |  Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n |\n |  Data structure also contains labeled axes (rows and columns).\n |  Arithmetic operations align on both row and column labels. Can be\n |  thought of as a dict-like container for Series objects. The primary\n |  pandas data structure.\n |\n |  Parameters\n |  ----------\n |  data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n |      Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n |      data is a dict, column order follows insertion-order. If a dict contains Series\n |      which have an index defined, it is aligned by its index. This alignment also\n |      occurs if data is a Series or a DataFrame itself. Alignment is done on\n |      Series/DataFrame inputs.\n |\n |      If data is a list of dicts, column order follows insertion-order.\n |\n |  index : Index or array-like\n |      Index to use for resulting frame. Will default to RangeIndex if\n |      no indexing information part of input data and no index provided.\n |  columns : Index or array-like\n |      Column labels to use for resulting frame when data does not have them,\n |      defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n |      will perform column selection instead.\n |  dtype : dtype, default None\n |      Data type to force. Only a single dtype is allowed. If None, infer.\n |  copy : bool or None, default None\n |      Copy data from inputs.\n |      For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n |      or 2d ndarray input, the default of None behaves like ``copy=False``.\n |      If data is a dict containing one or more Series (possibly of different dtypes),\n |      ``copy=False`` will ensure that these inputs are not copied.\n |\n |      .. versionchanged:: 1.3.0\n |\n |  See Also\n |  --------\n |  DataFrame.from_records : Constructor from tuples, also record arrays.\n |  DataFrame.from_dict : From dicts of Series, arrays, or dicts.\n |  read_csv : Read a comma-separated values (csv) file into DataFrame.\n |  read_table : Read general delimited file into DataFrame.\n |  read_clipboard : Read text from clipboard into DataFrame.\n |\n |  Notes\n |  -----\n |  Please reference the :ref:`User Guide &lt;basics.dataframe&gt;` for more information.\n |\n |  Examples\n |  --------\n |  Constructing DataFrame from a dictionary.\n |\n |  &gt;&gt;&gt; d = {'col1': [1, 2], 'col2': [3, 4]}\n |  &gt;&gt;&gt; df = pd.DataFrame(data=d)\n |  &gt;&gt;&gt; df\n |     col1  col2\n |  0     1     3\n |  1     2     4\n |\n |  Notice that the inferred dtype is int64.\n |\n |  &gt;&gt;&gt; df.dtypes\n |  col1    int64\n |  col2    int64\n |  dtype: object\n |\n |  To enforce a single dtype:\n |\n |  &gt;&gt;&gt; df = pd.DataFrame(data=d, dtype=np.int8)\n |  &gt;&gt;&gt; df.dtypes\n |  col1    int8\n |  col2    int8\n |  dtype: object\n |\n |  Constructing DataFrame from a dictionary including Series:\n |\n |  &gt;&gt;&gt; d = {'col1': [0, 1, 2, 3], 'col2': pd.Series([2, 3], index=[2, 3])}\n |  &gt;&gt;&gt; pd.DataFrame(data=d, index=[0, 1, 2, 3])\n |     col1  col2\n |  0     0   NaN\n |  1     1   NaN\n |  2     2   2.0\n |  3     3   3.0\n |\n |  Constructing DataFrame from numpy ndarray:\n |\n |  &gt;&gt;&gt; df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n |  ...                    columns=['a', 'b', 'c'])\n |  &gt;&gt;&gt; df2\n |     a  b  c\n |  0  1  2  3\n |  1  4  5  6\n |  2  7  8  9\n |\n |  Constructing DataFrame from a numpy ndarray that has labeled columns:\n |\n |  &gt;&gt;&gt; data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n |  ...                 dtype=[(\"a\", \"i4\"), (\"b\", \"i4\"), (\"c\", \"i4\")])\n |  &gt;&gt;&gt; df3 = pd.DataFrame(data, columns=['c', 'a'])\n |  ...\n |  &gt;&gt;&gt; df3\n |     c  a\n |  0  3  1\n |  1  6  4\n |  2  9  7\n |\n |  Constructing DataFrame from dataclass:\n |\n |  &gt;&gt;&gt; from dataclasses import make_dataclass\n |  &gt;&gt;&gt; Point = make_dataclass(\"Point\", [(\"x\", int), (\"y\", int)])\n |  &gt;&gt;&gt; pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n |     x  y\n |  0  0  0\n |  1  0  3\n |  2  2  3\n |\n |  Constructing DataFrame from Series/DataFrame:\n |\n |  &gt;&gt;&gt; ser = pd.Series([1, 2, 3], index=[\"a\", \"b\", \"c\"])\n |  &gt;&gt;&gt; df = pd.DataFrame(data=ser, index=[\"a\", \"c\"])\n |  &gt;&gt;&gt; df\n |     0\n |  a  1\n |  c  3\n |\n |  &gt;&gt;&gt; df1 = pd.DataFrame([1, 2, 3], index=[\"a\", \"b\", \"c\"], columns=[\"x\"])\n |  &gt;&gt;&gt; df2 = pd.DataFrame(data=df1, index=[\"a\", \"c\"])\n |  &gt;&gt;&gt; df2\n |     x\n |  a  1\n |  c  3\n |\n |  Method resolution order:\n |      DataFrame\n |      pandas.core.generic.NDFrame\n |      pandas.core.base.PandasObject\n |      pandas.core.accessor.DirNamesMixin\n |      pandas.core.indexing.IndexingMixin\n |      pandas.core.arraylike.OpsMixin\n |      builtins.object\n |\n |  Methods defined here:\n |\n |  __arrow_c_stream__(self, requested_schema=None)\n |      Export the pandas DataFrame as an Arrow C stream PyCapsule.\n |\n |      This relies on pyarrow to convert the pandas DataFrame to the Arrow\n |      format (and follows the default behaviour of ``pyarrow.Table.from_pandas``\n |      in its handling of the index, i.e. store the index as a column except\n |      for RangeIndex).\n |      This conversion is not necessarily zero-copy.\n |\n |      Parameters\n |      ----------\n |      requested_schema : PyCapsule, default None\n |          The schema to which the dataframe should be casted, passed as a\n |          PyCapsule containing a C ArrowSchema representation of the\n |          requested schema.\n |\n |      Returns\n |      -------\n |      PyCapsule\n |\n |  __dataframe__(self, nan_as_null: 'bool' = False, allow_copy: 'bool' = True) -&gt; 'DataFrameXchg'\n |      Return the dataframe interchange object implementing the interchange protocol.\n |\n |      Parameters\n |      ----------\n |      nan_as_null : bool, default False\n |          `nan_as_null` is DEPRECATED and has no effect. Please avoid using\n |          it; it will be removed in a future release.\n |      allow_copy : bool, default True\n |          Whether to allow memory copying when exporting. If set to False\n |          it would cause non-zero-copy exports to fail.\n |\n |      Returns\n |      -------\n |      DataFrame interchange object\n |          The object which consuming library can use to ingress the dataframe.\n |\n |      Notes\n |      -----\n |      Details on the interchange protocol:\n |      https://data-apis.org/dataframe-protocol/latest/index.html\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df_not_necessarily_pandas = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\n |      &gt;&gt;&gt; interchange_object = df_not_necessarily_pandas.__dataframe__()\n |      &gt;&gt;&gt; interchange_object.column_names()\n |      Index(['A', 'B'], dtype='object')\n |      &gt;&gt;&gt; df_pandas = (pd.api.interchange.from_dataframe\n |      ...              (interchange_object.select_columns_by_name(['A'])))\n |      &gt;&gt;&gt; df_pandas\n |           A\n |      0    1\n |      1    2\n |\n |      These methods (``column_names``, ``select_columns_by_name``) should work\n |      for any dataframe library which implements the interchange protocol.\n |\n |  __dataframe_consortium_standard__(self, *, api_version: 'str | None' = None) -&gt; 'Any'\n |      Provide entry point to the Consortium DataFrame Standard API.\n |\n |      This is developed and maintained outside of pandas.\n |      Please report any issues to https://github.com/data-apis/dataframe-api-compat.\n |\n |  __divmod__(self, other) -&gt; 'tuple[DataFrame, DataFrame]'\n |\n |  __getitem__(self, key)\n |\n |  __init__(self, data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -&gt; 'None'\n |      Initialize self.  See help(type(self)) for accurate signature.\n |\n |  __len__(self) -&gt; 'int'\n |      Returns length of info axis, but here we use the index.\n |\n |  __matmul__(self, other: 'AnyArrayLike | DataFrame') -&gt; 'DataFrame | Series'\n |      Matrix multiplication using binary `@` operator.\n |\n |  __rdivmod__(self, other) -&gt; 'tuple[DataFrame, DataFrame]'\n |\n |  __repr__(self) -&gt; 'str'\n |      Return a string representation for a particular DataFrame.\n |\n |  __rmatmul__(self, other) -&gt; 'DataFrame'\n |      Matrix multiplication using binary `@` operator.\n |\n |  __setitem__(self, key, value) -&gt; 'None'\n |\n |  add(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |      Get Addition of dataframe and other, element-wise (binary operator `add`).\n |\n |      Equivalent to ``dataframe + other``, but with support to substitute a fill_value\n |      for missing data in one of the inputs. With reverse version, `radd`.\n |\n |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\n |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}\n |          Whether to compare by the index (0 or 'index') or columns.\n |          (1 or 'columns'). For Series input, axis to match Series index on.\n |      level : int or label\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : float or None, default None\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful DataFrame alignment, with this value before computation.\n |          If data in both corresponding DataFrame locations is missing\n |          the result will be missing.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Result of the arithmetic operation.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add DataFrames.\n |      DataFrame.sub : Subtract DataFrames.\n |      DataFrame.mul : Multiply DataFrames.\n |      DataFrame.div : Divide DataFrames (float division).\n |      DataFrame.truediv : Divide DataFrames (float division).\n |      DataFrame.floordiv : Divide DataFrames (integer division).\n |      DataFrame.mod : Calculate modulo (remainder after division).\n |      DataFrame.pow : Calculate exponential power.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n |      ...                    'degrees': [360, 180, 360]},\n |      ...                   index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; df\n |                 angles  degrees\n |      circle          0      360\n |      triangle        3      180\n |      rectangle       4      360\n |\n |      Add a scalar with operator version which return the same\n |      results.\n |\n |      &gt;&gt;&gt; df + 1\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      &gt;&gt;&gt; df.add(1)\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      Divide by constant with reverse version.\n |\n |      &gt;&gt;&gt; df.div(10)\n |                 angles  degrees\n |      circle        0.0     36.0\n |      triangle      0.3     18.0\n |      rectangle     0.4     36.0\n |\n |      &gt;&gt;&gt; df.rdiv(10)\n |                   angles   degrees\n |      circle          inf  0.027778\n |      triangle   3.333333  0.055556\n |      rectangle  2.500000  0.027778\n |\n |      Subtract a list and Series by axis with operator version.\n |\n |      &gt;&gt;&gt; df - [1, 2]\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub([1, 2], axis='columns')\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n |      ...        axis='index')\n |                 angles  degrees\n |      circle         -1      359\n |      triangle        2      179\n |      rectangle       3      359\n |\n |      Multiply a dictionary by axis.\n |\n |      &gt;&gt;&gt; df.mul({'angles': 0, 'degrees': 2})\n |                  angles  degrees\n |      circle           0      720\n |      triangle         0      360\n |      rectangle        0      720\n |\n |      &gt;&gt;&gt; df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n |                  angles  degrees\n |      circle           0        0\n |      triangle         6      360\n |      rectangle       12     1080\n |\n |      Multiply a DataFrame of different shape with operator version.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'angles': [0, 3, 4]},\n |      ...                      index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; other\n |                 angles\n |      circle          0\n |      triangle        3\n |      rectangle       4\n |\n |      &gt;&gt;&gt; df * other\n |                 angles  degrees\n |      circle          0      NaN\n |      triangle        9      NaN\n |      rectangle      16      NaN\n |\n |      &gt;&gt;&gt; df.mul(other, fill_value=0)\n |                 angles  degrees\n |      circle          0      0.0\n |      triangle        9      0.0\n |      rectangle      16      0.0\n |\n |      Divide by a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},\n |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n |      ...                                    ['circle', 'triangle', 'rectangle',\n |      ...                                     'square', 'pentagon', 'hexagon']])\n |      &gt;&gt;&gt; df_multindex\n |                   angles  degrees\n |      A circle          0      360\n |        triangle        3      180\n |        rectangle       4      360\n |      B square          4      360\n |        pentagon        5      540\n |        hexagon         6      720\n |\n |      &gt;&gt;&gt; df.div(df_multindex, level=1, fill_value=0)\n |                   angles  degrees\n |      A circle        NaN      1.0\n |        triangle      1.0      1.0\n |        rectangle     1.0      1.0\n |      B square        0.0      0.0\n |        pentagon      0.0      0.0\n |        hexagon       0.0      0.0\n |\n |  agg = aggregate(self, func=None, axis: 'Axis' = 0, *args, **kwargs)\n |\n |  aggregate(self, func=None, axis: 'Axis' = 0, *args, **kwargs)\n |      Aggregate using one or more operations over the specified axis.\n |\n |      Parameters\n |      ----------\n |      func : function, str, list or dict\n |          Function to use for aggregating the data. If a function, must either\n |          work when passed a DataFrame or when passed to DataFrame.apply.\n |\n |          Accepted combinations are:\n |\n |          - function\n |          - string function name\n |          - list of functions and/or function names, e.g. ``[np.sum, 'mean']``\n |          - dict of axis labels -&gt; functions, function names or list of such.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |              If 0 or 'index': apply function to each column.\n |              If 1 or 'columns': apply function to each row.\n |      *args\n |          Positional arguments to pass to `func`.\n |      **kwargs\n |          Keyword arguments to pass to `func`.\n |\n |      Returns\n |      -------\n |      scalar, Series or DataFrame\n |\n |          The return can be:\n |\n |          * scalar : when Series.agg is called with single function\n |          * Series : when DataFrame.agg is called with a single function\n |          * DataFrame : when DataFrame.agg is called with several functions\n |\n |      See Also\n |      --------\n |      DataFrame.apply : Perform any type of operations.\n |      DataFrame.transform : Perform transformation type operations.\n |      pandas.DataFrame.groupby : Perform operations over groups.\n |      pandas.DataFrame.resample : Perform operations over resampled bins.\n |      pandas.DataFrame.rolling : Perform operations over rolling window.\n |      pandas.DataFrame.expanding : Perform operations over expanding window.\n |      pandas.core.window.ewm.ExponentialMovingWindow : Perform operation over exponential\n |          weighted window.\n |\n |      Notes\n |      -----\n |      The aggregation operations are always performed over an axis, either the\n |      index (default) or the column axis. This behavior is different from\n |      `numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n |      `var`), where the default is to compute the aggregation of the flattened\n |      array, e.g., ``numpy.mean(arr_2d)`` as opposed to\n |      ``numpy.mean(arr_2d, axis=0)``.\n |\n |      `agg` is an alias for `aggregate`. Use the alias.\n |\n |      Functions that mutate the passed object can produce unexpected\n |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\n |      for more details.\n |\n |      A passed user-defined-function will be passed a Series for evaluation.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([[1, 2, 3],\n |      ...                    [4, 5, 6],\n |      ...                    [7, 8, 9],\n |      ...                    [np.nan, np.nan, np.nan]],\n |      ...                   columns=['A', 'B', 'C'])\n |\n |      Aggregate these functions over the rows.\n |\n |      &gt;&gt;&gt; df.agg(['sum', 'min'])\n |              A     B     C\n |      sum  12.0  15.0  18.0\n |      min   1.0   2.0   3.0\n |\n |      Different aggregations per column.\n |\n |      &gt;&gt;&gt; df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n |              A    B\n |      sum  12.0  NaN\n |      min   1.0  2.0\n |      max   NaN  8.0\n |\n |      Aggregate different functions over the columns and rename the index of the resulting\n |      DataFrame.\n |\n |      &gt;&gt;&gt; df.agg(x=('A', 'max'), y=('B', 'min'), z=('C', 'mean'))\n |           A    B    C\n |      x  7.0  NaN  NaN\n |      y  NaN  2.0  NaN\n |      z  NaN  NaN  6.0\n |\n |      Aggregate over the columns.\n |\n |      &gt;&gt;&gt; df.agg(\"mean\", axis=\"columns\")\n |      0    2.0\n |      1    5.0\n |      2    8.0\n |      3    NaN\n |      dtype: float64\n |\n |  all(self, axis: 'Axis | None' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -&gt; 'Series | bool'\n |      Return whether all elements are True, potentially over an axis.\n |\n |      Returns True unless there at least one element within a series or\n |      along a Dataframe axis that is False or equivalent (e.g. zero or\n |      empty).\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns', None}, default 0\n |          Indicate which axis or axes should be reduced. For `Series` this parameter\n |          is unused and defaults to 0.\n |\n |          * 0 / 'index' : reduce the index, return a Series whose index is the\n |            original column labels.\n |          * 1 / 'columns' : reduce the columns, return a Series whose index is the\n |            original index.\n |          * None : reduce all axes, return a scalar.\n |\n |      bool_only : bool, default False\n |          Include only boolean columns. Not implemented for Series.\n |      skipna : bool, default True\n |          Exclude NA/null values. If the entire row/column is NA and skipna is\n |          True, then the result will be True, as for an empty row/column.\n |          If skipna is False, then NA are treated as True, because these are not\n |          equal to zero.\n |      **kwargs : any, default None\n |          Additional keywords have no effect but might be accepted for\n |          compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          If level is specified, then, DataFrame is returned; otherwise, Series\n |          is returned.\n |\n |      See Also\n |      --------\n |      Series.all : Return True if all elements are True.\n |      DataFrame.any : Return True if one (or more) elements are True.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      &gt;&gt;&gt; pd.Series([True, True]).all()\n |      True\n |      &gt;&gt;&gt; pd.Series([True, False]).all()\n |      False\n |      &gt;&gt;&gt; pd.Series([], dtype=\"float64\").all()\n |      True\n |      &gt;&gt;&gt; pd.Series([np.nan]).all()\n |      True\n |      &gt;&gt;&gt; pd.Series([np.nan]).all(skipna=False)\n |      True\n |\n |      **DataFrames**\n |\n |      Create a dataframe from a dictionary.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'col1': [True, True], 'col2': [True, False]})\n |      &gt;&gt;&gt; df\n |         col1   col2\n |      0  True   True\n |      1  True  False\n |\n |      Default behaviour checks if values in each column all return True.\n |\n |      &gt;&gt;&gt; df.all()\n |      col1     True\n |      col2    False\n |      dtype: bool\n |\n |      Specify ``axis='columns'`` to check if values in each row all return True.\n |\n |      &gt;&gt;&gt; df.all(axis='columns')\n |      0     True\n |      1    False\n |      dtype: bool\n |\n |      Or ``axis=None`` for whether every value is True.\n |\n |      &gt;&gt;&gt; df.all(axis=None)\n |      False\n |\n |  any(self, *, axis: 'Axis | None' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -&gt; 'Series | bool'\n |      Return whether any element is True, potentially over an axis.\n |\n |      Returns False unless there is at least one element within a series or\n |      along a Dataframe axis that is True or equivalent (e.g. non-zero or\n |      non-empty).\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns', None}, default 0\n |          Indicate which axis or axes should be reduced. For `Series` this parameter\n |          is unused and defaults to 0.\n |\n |          * 0 / 'index' : reduce the index, return a Series whose index is the\n |            original column labels.\n |          * 1 / 'columns' : reduce the columns, return a Series whose index is the\n |            original index.\n |          * None : reduce all axes, return a scalar.\n |\n |      bool_only : bool, default False\n |          Include only boolean columns. Not implemented for Series.\n |      skipna : bool, default True\n |          Exclude NA/null values. If the entire row/column is NA and skipna is\n |          True, then the result will be False, as for an empty row/column.\n |          If skipna is False, then NA are treated as True, because these are not\n |          equal to zero.\n |      **kwargs : any, default None\n |          Additional keywords have no effect but might be accepted for\n |          compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          If level is specified, then, DataFrame is returned; otherwise, Series\n |          is returned.\n |\n |      See Also\n |      --------\n |      numpy.any : Numpy version of this method.\n |      Series.any : Return whether any element is True.\n |      Series.all : Return whether all elements are True.\n |      DataFrame.any : Return whether any element is True over requested axis.\n |      DataFrame.all : Return whether all elements are True over requested axis.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      For Series input, the output is a scalar indicating whether any element\n |      is True.\n |\n |      &gt;&gt;&gt; pd.Series([False, False]).any()\n |      False\n |      &gt;&gt;&gt; pd.Series([True, False]).any()\n |      True\n |      &gt;&gt;&gt; pd.Series([], dtype=\"float64\").any()\n |      False\n |      &gt;&gt;&gt; pd.Series([np.nan]).any()\n |      False\n |      &gt;&gt;&gt; pd.Series([np.nan]).any(skipna=False)\n |      True\n |\n |      **DataFrame**\n |\n |      Whether each column contains at least one True element (the default).\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [1, 2], \"B\": [0, 2], \"C\": [0, 0]})\n |      &gt;&gt;&gt; df\n |         A  B  C\n |      0  1  0  0\n |      1  2  2  0\n |\n |      &gt;&gt;&gt; df.any()\n |      A     True\n |      B     True\n |      C    False\n |      dtype: bool\n |\n |      Aggregating over the columns.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 2]})\n |      &gt;&gt;&gt; df\n |             A  B\n |      0   True  1\n |      1  False  2\n |\n |      &gt;&gt;&gt; df.any(axis='columns')\n |      0    True\n |      1    True\n |      dtype: bool\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 0]})\n |      &gt;&gt;&gt; df\n |             A  B\n |      0   True  1\n |      1  False  0\n |\n |      &gt;&gt;&gt; df.any(axis='columns')\n |      0    True\n |      1    False\n |      dtype: bool\n |\n |      Aggregating over the entire DataFrame with ``axis=None``.\n |\n |      &gt;&gt;&gt; df.any(axis=None)\n |      True\n |\n |      `any` for an empty DataFrame is an empty Series.\n |\n |      &gt;&gt;&gt; pd.DataFrame([]).any()\n |      Series([], dtype: bool)\n |\n |  apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type: \"Literal['expand', 'reduce', 'broadcast'] | None\" = None, args=(), by_row: \"Literal[False, 'compat']\" = 'compat', engine: \"Literal['python', 'numba']\" = 'python', engine_kwargs: 'dict[str, bool] | None' = None, **kwargs)\n |      Apply a function along an axis of the DataFrame.\n |\n |      Objects passed to the function are Series objects whose index is\n |      either the DataFrame's index (``axis=0``) or the DataFrame's columns\n |      (``axis=1``). By default (``result_type=None``), the final return type\n |      is inferred from the return type of the applied function. Otherwise,\n |      it depends on the `result_type` argument.\n |\n |      Parameters\n |      ----------\n |      func : function\n |          Function to apply to each column or row.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Axis along which the function is applied:\n |\n |          * 0 or 'index': apply function to each column.\n |          * 1 or 'columns': apply function to each row.\n |\n |      raw : bool, default False\n |          Determines if row or column is passed as a Series or ndarray object:\n |\n |          * ``False`` : passes each row or column as a Series to the\n |            function.\n |          * ``True`` : the passed function will receive ndarray objects\n |            instead.\n |            If you are just applying a NumPy reduction function this will\n |            achieve much better performance.\n |\n |      result_type : {'expand', 'reduce', 'broadcast', None}, default None\n |          These only act when ``axis=1`` (columns):\n |\n |          * 'expand' : list-like results will be turned into columns.\n |          * 'reduce' : returns a Series if possible rather than expanding\n |            list-like results. This is the opposite of 'expand'.\n |          * 'broadcast' : results will be broadcast to the original shape\n |            of the DataFrame, the original index and columns will be\n |            retained.\n |\n |          The default behaviour (None) depends on the return value of the\n |          applied function: list-like results will be returned as a Series\n |          of those. However if the apply function returns a Series these\n |          are expanded to columns.\n |      args : tuple\n |          Positional arguments to pass to `func` in addition to the\n |          array/series.\n |      by_row : False or \"compat\", default \"compat\"\n |          Only has an effect when ``func`` is a listlike or dictlike of funcs\n |          and the func isn't a string.\n |          If \"compat\", will if possible first translate the func into pandas\n |          methods (e.g. ``Series().apply(np.sum)`` will be translated to\n |          ``Series().sum()``). If that doesn't work, will try call to apply again with\n |          ``by_row=True`` and if that fails, will call apply again with\n |          ``by_row=False`` (backward compatible).\n |          If False, the funcs will be passed the whole Series at once.\n |\n |          .. versionadded:: 2.1.0\n |\n |      engine : {'python', 'numba'}, default 'python'\n |          Choose between the python (default) engine or the numba engine in apply.\n |\n |          The numba engine will attempt to JIT compile the passed function,\n |          which may result in speedups for large DataFrames.\n |          It also supports the following engine_kwargs :\n |\n |          - nopython (compile the function in nopython mode)\n |          - nogil (release the GIL inside the JIT compiled function)\n |          - parallel (try to apply the function in parallel over the DataFrame)\n |\n |            Note: Due to limitations within numba/how pandas interfaces with numba,\n |            you should only use this if raw=True\n |\n |          Note: The numba compiler only supports a subset of\n |          valid Python/numpy operations.\n |\n |          Please read more about the `supported python features\n |          &lt;https://numba.pydata.org/numba-doc/dev/reference/pysupported.html&gt;`_\n |          and `supported numpy features\n |          &lt;https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html&gt;`_\n |          in numba to learn what you can or cannot use in the passed function.\n |\n |          .. versionadded:: 2.2.0\n |\n |      engine_kwargs : dict\n |          Pass keyword arguments to the engine.\n |          This is currently only used by the numba engine,\n |          see the documentation for the engine argument for more information.\n |      **kwargs\n |          Additional keyword arguments to pass as keywords arguments to\n |          `func`.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Result of applying ``func`` along the given axis of the\n |          DataFrame.\n |\n |      See Also\n |      --------\n |      DataFrame.map: For elementwise operations.\n |      DataFrame.aggregate: Only perform aggregating type operations.\n |      DataFrame.transform: Only perform transforming type operations.\n |\n |      Notes\n |      -----\n |      Functions that mutate the passed object can produce unexpected\n |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\n |      for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  4  9\n |      1  4  9\n |      2  4  9\n |\n |      Using a numpy universal function (in this case the same as\n |      ``np.sqrt(df)``):\n |\n |      &gt;&gt;&gt; df.apply(np.sqrt)\n |           A    B\n |      0  2.0  3.0\n |      1  2.0  3.0\n |      2  2.0  3.0\n |\n |      Using a reducing function on either axis\n |\n |      &gt;&gt;&gt; df.apply(np.sum, axis=0)\n |      A    12\n |      B    27\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df.apply(np.sum, axis=1)\n |      0    13\n |      1    13\n |      2    13\n |      dtype: int64\n |\n |      Returning a list-like will result in a Series\n |\n |      &gt;&gt;&gt; df.apply(lambda x: [1, 2], axis=1)\n |      0    [1, 2]\n |      1    [1, 2]\n |      2    [1, 2]\n |      dtype: object\n |\n |      Passing ``result_type='expand'`` will expand list-like results\n |      to columns of a Dataframe\n |\n |      &gt;&gt;&gt; df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n |         0  1\n |      0  1  2\n |      1  1  2\n |      2  1  2\n |\n |      Returning a Series inside the function is similar to passing\n |      ``result_type='expand'``. The resulting column names\n |      will be the Series index.\n |\n |      &gt;&gt;&gt; df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n |         foo  bar\n |      0    1    2\n |      1    1    2\n |      2    1    2\n |\n |      Passing ``result_type='broadcast'`` will ensure the same shape\n |      result, whether list-like or scalar is returned by the function,\n |      and broadcast it along the axis. The resulting column names will\n |      be the originals.\n |\n |      &gt;&gt;&gt; df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n |         A  B\n |      0  1  2\n |      1  1  2\n |      2  1  2\n |\n |  applymap(self, func: 'PythonFuncType', na_action: 'NaAction | None' = None, **kwargs) -&gt; 'DataFrame'\n |      Apply a function to a Dataframe elementwise.\n |\n |      .. deprecated:: 2.1.0\n |\n |         DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n |\n |      This method applies a function that accepts and returns a scalar\n |      to every element of a DataFrame.\n |\n |      Parameters\n |      ----------\n |      func : callable\n |          Python function, returns a single value from a single value.\n |      na_action : {None, 'ignore'}, default None\n |          If 'ignore', propagate NaN values, without passing them to func.\n |      **kwargs\n |          Additional keyword arguments to pass as keywords arguments to\n |          `func`.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Transformed DataFrame.\n |\n |      See Also\n |      --------\n |      DataFrame.apply : Apply a function along input axis of DataFrame.\n |      DataFrame.map : Apply a function along input axis of DataFrame.\n |      DataFrame.replace: Replace values given in `to_replace` with `value`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n |      &gt;&gt;&gt; df\n |             0      1\n |      0  1.000  2.120\n |      1  3.356  4.567\n |\n |      &gt;&gt;&gt; df.map(lambda x: len(str(x)))\n |         0  1\n |      0  3  4\n |      1  5  5\n |\n |  assign(self, **kwargs) -&gt; 'DataFrame'\n |      Assign new columns to a DataFrame.\n |\n |      Returns a new object with all original columns in addition to new ones.\n |      Existing columns that are re-assigned will be overwritten.\n |\n |      Parameters\n |      ----------\n |      **kwargs : dict of {str: callable or Series}\n |          The column names are keywords. If the values are\n |          callable, they are computed on the DataFrame and\n |          assigned to the new columns. The callable must not\n |          change input DataFrame (though pandas doesn't check it).\n |          If the values are not callable, (e.g. a Series, scalar, or array),\n |          they are simply assigned.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          A new DataFrame with the new columns in addition to\n |          all the existing columns.\n |\n |      Notes\n |      -----\n |      Assigning multiple columns within the same ``assign`` is possible.\n |      Later items in '\\*\\*kwargs' may refer to newly created or modified\n |      columns in 'df'; items are computed and assigned into 'df' in order.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'temp_c': [17.0, 25.0]},\n |      ...                   index=['Portland', 'Berkeley'])\n |      &gt;&gt;&gt; df\n |                temp_c\n |      Portland    17.0\n |      Berkeley    25.0\n |\n |      Where the value is a callable, evaluated on `df`:\n |\n |      &gt;&gt;&gt; df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)\n |                temp_c  temp_f\n |      Portland    17.0    62.6\n |      Berkeley    25.0    77.0\n |\n |      Alternatively, the same behavior can be achieved by directly\n |      referencing an existing Series or sequence:\n |\n |      &gt;&gt;&gt; df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)\n |                temp_c  temp_f\n |      Portland    17.0    62.6\n |      Berkeley    25.0    77.0\n |\n |      You can create multiple columns within the same assign where one\n |      of the columns depends on another one defined within the same assign:\n |\n |      &gt;&gt;&gt; df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,\n |      ...           temp_k=lambda x: (x['temp_f'] + 459.67) * 5 / 9)\n |                temp_c  temp_f  temp_k\n |      Portland    17.0    62.6  290.15\n |      Berkeley    25.0    77.0  298.15\n |\n |  boxplot = boxplot_frame(self: 'DataFrame', column=None, by=None, ax=None, fontsize: 'int | None' = None, rot: 'int' = 0, grid: 'bool' = True, figsize: 'tuple[float, float] | None' = None, layout=None, return_type=None, backend=None, **kwargs) from pandas.plotting._core\n |      Make a box plot from DataFrame columns.\n |\n |      Make a box-and-whisker plot from DataFrame columns, optionally grouped\n |      by some other columns. A box plot is a method for graphically depicting\n |      groups of numerical data through their quartiles.\n |      The box extends from the Q1 to Q3 quartile values of the data,\n |      with a line at the median (Q2). The whiskers extend from the edges\n |      of box to show the range of the data. By default, they extend no more than\n |      `1.5 * IQR (IQR = Q3 - Q1)` from the edges of the box, ending at the farthest\n |      data point within that interval. Outliers are plotted as separate dots.\n |\n |      For further details see\n |      Wikipedia's entry for `boxplot &lt;https://en.wikipedia.org/wiki/Box_plot&gt;`_.\n |\n |      Parameters\n |      ----------\n |      column : str or list of str, optional\n |          Column name or list of names, or vector.\n |          Can be any valid input to :meth:`pandas.DataFrame.groupby`.\n |      by : str or array-like, optional\n |          Column in the DataFrame to :meth:`pandas.DataFrame.groupby`.\n |          One box-plot will be done per value of columns in `by`.\n |      ax : object of class matplotlib.axes.Axes, optional\n |          The matplotlib axes to be used by boxplot.\n |      fontsize : float or str\n |          Tick label font size in points or as a string (e.g., `large`).\n |      rot : float, default 0\n |          The rotation angle of labels (in degrees)\n |          with respect to the screen coordinate system.\n |      grid : bool, default True\n |          Setting this to True will show the grid.\n |      figsize : A tuple (width, height) in inches\n |          The size of the figure to create in matplotlib.\n |      layout : tuple (rows, columns), optional\n |          For example, (3, 5) will display the subplots\n |          using 3 rows and 5 columns, starting from the top-left.\n |      return_type : {'axes', 'dict', 'both'} or None, default 'axes'\n |          The kind of object to return. The default is ``axes``.\n |\n |          * 'axes' returns the matplotlib axes the boxplot is drawn on.\n |          * 'dict' returns a dictionary whose values are the matplotlib\n |            Lines of the boxplot.\n |          * 'both' returns a namedtuple with the axes and dict.\n |          * when grouping with ``by``, a Series mapping columns to\n |            ``return_type`` is returned.\n |\n |            If ``return_type`` is `None`, a NumPy array\n |            of axes with the same shape as ``layout`` is returned.\n |      backend : str, default None\n |          Backend to use instead of the backend specified in the option\n |          ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to\n |          specify the ``plotting.backend`` for the whole session, set\n |          ``pd.options.plotting.backend``.\n |\n |      **kwargs\n |          All other plotting keyword arguments to be passed to\n |          :func:`matplotlib.pyplot.boxplot`.\n |\n |      Returns\n |      -------\n |      result\n |          See Notes.\n |\n |      See Also\n |      --------\n |      pandas.Series.plot.hist: Make a histogram.\n |      matplotlib.pyplot.boxplot : Matplotlib equivalent plot.\n |\n |      Notes\n |      -----\n |      The return type depends on the `return_type` parameter:\n |\n |      * 'axes' : object of class matplotlib.axes.Axes\n |      * 'dict' : dict of matplotlib.lines.Line2D objects\n |      * 'both' : a namedtuple with structure (ax, lines)\n |\n |      For data grouped with ``by``, return a Series of the above or a numpy\n |      array:\n |\n |      * :class:`~pandas.Series`\n |      * :class:`~numpy.array` (for ``return_type = None``)\n |\n |      Use ``return_type='dict'`` when you want to tweak the appearance\n |      of the lines after plotting. In this case a dict containing the Lines\n |      making up the boxes, caps, fliers, medians, and whiskers is returned.\n |\n |      Examples\n |      --------\n |\n |      Boxplots can be created for every column in the dataframe\n |      by ``df.boxplot()`` or indicating the columns to be used:\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; np.random.seed(1234)\n |          &gt;&gt;&gt; df = pd.DataFrame(np.random.randn(10, 4),\n |          ...                   columns=['Col1', 'Col2', 'Col3', 'Col4'])\n |          &gt;&gt;&gt; boxplot = df.boxplot(column=['Col1', 'Col2', 'Col3'])  # doctest: +SKIP\n |\n |      Boxplots of variables distributions grouped by the values of a third\n |      variable can be created using the option ``by``. For instance:\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; df = pd.DataFrame(np.random.randn(10, 2),\n |          ...                   columns=['Col1', 'Col2'])\n |          &gt;&gt;&gt; df['X'] = pd.Series(['A', 'A', 'A', 'A', 'A',\n |          ...                      'B', 'B', 'B', 'B', 'B'])\n |          &gt;&gt;&gt; boxplot = df.boxplot(by='X')\n |\n |      A list of strings (i.e. ``['X', 'Y']``) can be passed to boxplot\n |      in order to group the data by combination of the variables in the x-axis:\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; df = pd.DataFrame(np.random.randn(10, 3),\n |          ...                   columns=['Col1', 'Col2', 'Col3'])\n |          &gt;&gt;&gt; df['X'] = pd.Series(['A', 'A', 'A', 'A', 'A',\n |          ...                      'B', 'B', 'B', 'B', 'B'])\n |          &gt;&gt;&gt; df['Y'] = pd.Series(['A', 'B', 'A', 'B', 'A',\n |          ...                      'B', 'A', 'B', 'A', 'B'])\n |          &gt;&gt;&gt; boxplot = df.boxplot(column=['Col1', 'Col2'], by=['X', 'Y'])\n |\n |      The layout of boxplot can be adjusted giving a tuple to ``layout``:\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',\n |          ...                      layout=(2, 1))\n |\n |      Additional formatting can be done to the boxplot, like suppressing the grid\n |      (``grid=False``), rotating the labels in the x-axis (i.e. ``rot=45``)\n |      or changing the fontsize (i.e. ``fontsize=15``):\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; boxplot = df.boxplot(grid=False, rot=45, fontsize=15)  # doctest: +SKIP\n |\n |      The parameter ``return_type`` can be used to select the type of element\n |      returned by `boxplot`.  When ``return_type='axes'`` is selected,\n |      the matplotlib axes on which the boxplot is drawn are returned:\n |\n |          &gt;&gt;&gt; boxplot = df.boxplot(column=['Col1', 'Col2'], return_type='axes')\n |          &gt;&gt;&gt; type(boxplot)\n |          &lt;class 'matplotlib.axes._axes.Axes'&gt;\n |\n |      When grouping with ``by``, a Series mapping columns to ``return_type``\n |      is returned:\n |\n |          &gt;&gt;&gt; boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',\n |          ...                      return_type='axes')\n |          &gt;&gt;&gt; type(boxplot)\n |          &lt;class 'pandas.core.series.Series'&gt;\n |\n |      If ``return_type`` is `None`, a NumPy array of axes with the same shape\n |      as ``layout`` is returned:\n |\n |          &gt;&gt;&gt; boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',\n |          ...                      return_type=None)\n |          &gt;&gt;&gt; type(boxplot)\n |          &lt;class 'numpy.ndarray'&gt;\n |\n |  combine(self, other: 'DataFrame', func: 'Callable[[Series, Series], Series | Hashable]', fill_value=None, overwrite: 'bool' = True) -&gt; 'DataFrame'\n |      Perform column-wise combine with another DataFrame.\n |\n |      Combines a DataFrame with `other` DataFrame using `func`\n |      to element-wise combine columns. The row and column indexes of the\n |      resulting DataFrame will be the union of the two.\n |\n |      Parameters\n |      ----------\n |      other : DataFrame\n |          The DataFrame to merge column-wise.\n |      func : function\n |          Function that takes two series as inputs and return a Series or a\n |          scalar. Used to merge the two dataframes column by columns.\n |      fill_value : scalar value, default None\n |          The value to fill NaNs with prior to passing any column to the\n |          merge func.\n |      overwrite : bool, default True\n |          If True, columns in `self` that do not exist in `other` will be\n |          overwritten with NaNs.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Combination of the provided DataFrames.\n |\n |      See Also\n |      --------\n |      DataFrame.combine_first : Combine two DataFrame objects and default to\n |          non-null values in frame calling the method.\n |\n |      Examples\n |      --------\n |      Combine using a simple function that chooses the smaller column.\n |\n |      &gt;&gt;&gt; df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n |      &gt;&gt;&gt; df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n |      &gt;&gt;&gt; take_smaller = lambda s1, s2: s1 if s1.sum() &lt; s2.sum() else s2\n |      &gt;&gt;&gt; df1.combine(df2, take_smaller)\n |         A  B\n |      0  0  3\n |      1  0  3\n |\n |      Example using a true element-wise combine function.\n |\n |      &gt;&gt;&gt; df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})\n |      &gt;&gt;&gt; df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n |      &gt;&gt;&gt; df1.combine(df2, np.minimum)\n |         A  B\n |      0  1  2\n |      1  0  3\n |\n |      Using `fill_value` fills Nones prior to passing the column to the\n |      merge function.\n |\n |      &gt;&gt;&gt; df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n |      &gt;&gt;&gt; df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n |      &gt;&gt;&gt; df1.combine(df2, take_smaller, fill_value=-5)\n |         A    B\n |      0  0 -5.0\n |      1  0  4.0\n |\n |      However, if the same element in both dataframes is None, that None\n |      is preserved\n |\n |      &gt;&gt;&gt; df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n |      &gt;&gt;&gt; df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})\n |      &gt;&gt;&gt; df1.combine(df2, take_smaller, fill_value=-5)\n |          A    B\n |      0  0 -5.0\n |      1  0  3.0\n |\n |      Example that demonstrates the use of `overwrite` and behavior when\n |      the axis differ between the dataframes.\n |\n |      &gt;&gt;&gt; df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n |      &gt;&gt;&gt; df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1], }, index=[1, 2])\n |      &gt;&gt;&gt; df1.combine(df2, take_smaller)\n |           A    B     C\n |      0  NaN  NaN   NaN\n |      1  NaN  3.0 -10.0\n |      2  NaN  3.0   1.0\n |\n |      &gt;&gt;&gt; df1.combine(df2, take_smaller, overwrite=False)\n |           A    B     C\n |      0  0.0  NaN   NaN\n |      1  0.0  3.0 -10.0\n |      2  NaN  3.0   1.0\n |\n |      Demonstrating the preference of the passed in dataframe.\n |\n |      &gt;&gt;&gt; df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1], }, index=[1, 2])\n |      &gt;&gt;&gt; df2.combine(df1, take_smaller)\n |         A    B   C\n |      0  0.0  NaN NaN\n |      1  0.0  3.0 NaN\n |      2  NaN  3.0 NaN\n |\n |      &gt;&gt;&gt; df2.combine(df1, take_smaller, overwrite=False)\n |           A    B   C\n |      0  0.0  NaN NaN\n |      1  0.0  3.0 1.0\n |      2  NaN  3.0 1.0\n |\n |  combine_first(self, other: 'DataFrame') -&gt; 'DataFrame'\n |      Update null elements with value in the same location in `other`.\n |\n |      Combine two DataFrame objects by filling null values in one DataFrame\n |      with non-null values from other DataFrame. The row and column indexes\n |      of the resulting DataFrame will be the union of the two. The resulting\n |      dataframe contains the 'first' dataframe values and overrides the\n |      second one values where both first.loc[index, col] and\n |      second.loc[index, col] are not missing values, upon calling\n |      first.combine_first(second).\n |\n |      Parameters\n |      ----------\n |      other : DataFrame\n |          Provided DataFrame to use to fill null values.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          The result of combining the provided DataFrame with the other object.\n |\n |      See Also\n |      --------\n |      DataFrame.combine : Perform series-wise operation on two DataFrames\n |          using a given function.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n |      &gt;&gt;&gt; df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n |      &gt;&gt;&gt; df1.combine_first(df2)\n |           A    B\n |      0  1.0  3.0\n |      1  0.0  4.0\n |\n |      Null values still persist if the location of that null value\n |      does not exist in `other`\n |\n |      &gt;&gt;&gt; df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})\n |      &gt;&gt;&gt; df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])\n |      &gt;&gt;&gt; df1.combine_first(df2)\n |           A    B    C\n |      0  NaN  4.0  NaN\n |      1  0.0  3.0  1.0\n |      2  NaN  3.0  1.0\n |\n |  compare(self, other: 'DataFrame', align_axis: 'Axis' = 1, keep_shape: 'bool' = False, keep_equal: 'bool' = False, result_names: 'Suffixes' = ('self', 'other')) -&gt; 'DataFrame'\n |      Compare to another DataFrame and show the differences.\n |\n |      Parameters\n |      ----------\n |      other : DataFrame\n |          Object to compare with.\n |\n |      align_axis : {0 or 'index', 1 or 'columns'}, default 1\n |          Determine which axis to align the comparison on.\n |\n |          * 0, or 'index' : Resulting differences are stacked vertically\n |              with rows drawn alternately from self and other.\n |          * 1, or 'columns' : Resulting differences are aligned horizontally\n |              with columns drawn alternately from self and other.\n |\n |      keep_shape : bool, default False\n |          If true, all rows and columns are kept.\n |          Otherwise, only the ones with different values are kept.\n |\n |      keep_equal : bool, default False\n |          If true, the result keeps values that are equal.\n |          Otherwise, equal values are shown as NaNs.\n |\n |      result_names : tuple, default ('self', 'other')\n |          Set the dataframes names in the comparison.\n |\n |          .. versionadded:: 1.5.0\n |\n |      Returns\n |      -------\n |      DataFrame\n |          DataFrame that shows the differences stacked side by side.\n |\n |          The resulting index will be a MultiIndex with 'self' and 'other'\n |          stacked alternately at the inner level.\n |\n |      Raises\n |      ------\n |      ValueError\n |          When the two DataFrames don't have identical labels or shape.\n |\n |      See Also\n |      --------\n |      Series.compare : Compare with another Series and show differences.\n |      DataFrame.equals : Test whether two objects contain the same elements.\n |\n |      Notes\n |      -----\n |      Matching NaNs will not appear as a difference.\n |\n |      Can only compare identically-labeled\n |      (i.e. same shape, identical row and column labels) DataFrames\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(\n |      ...     {\n |      ...         \"col1\": [\"a\", \"a\", \"b\", \"b\", \"a\"],\n |      ...         \"col2\": [1.0, 2.0, 3.0, np.nan, 5.0],\n |      ...         \"col3\": [1.0, 2.0, 3.0, 4.0, 5.0]\n |      ...     },\n |      ...     columns=[\"col1\", \"col2\", \"col3\"],\n |      ... )\n |      &gt;&gt;&gt; df\n |        col1  col2  col3\n |      0    a   1.0   1.0\n |      1    a   2.0   2.0\n |      2    b   3.0   3.0\n |      3    b   NaN   4.0\n |      4    a   5.0   5.0\n |\n |      &gt;&gt;&gt; df2 = df.copy()\n |      &gt;&gt;&gt; df2.loc[0, 'col1'] = 'c'\n |      &gt;&gt;&gt; df2.loc[2, 'col3'] = 4.0\n |      &gt;&gt;&gt; df2\n |        col1  col2  col3\n |      0    c   1.0   1.0\n |      1    a   2.0   2.0\n |      2    b   3.0   4.0\n |      3    b   NaN   4.0\n |      4    a   5.0   5.0\n |\n |      Align the differences on columns\n |\n |      &gt;&gt;&gt; df.compare(df2)\n |        col1       col3\n |        self other self other\n |      0    a     c  NaN   NaN\n |      2  NaN   NaN  3.0   4.0\n |\n |      Assign result_names\n |\n |      &gt;&gt;&gt; df.compare(df2, result_names=(\"left\", \"right\"))\n |        col1       col3\n |        left right left right\n |      0    a     c  NaN   NaN\n |      2  NaN   NaN  3.0   4.0\n |\n |      Stack the differences on rows\n |\n |      &gt;&gt;&gt; df.compare(df2, align_axis=0)\n |              col1  col3\n |      0 self     a   NaN\n |        other    c   NaN\n |      2 self   NaN   3.0\n |        other  NaN   4.0\n |\n |      Keep the equal values\n |\n |      &gt;&gt;&gt; df.compare(df2, keep_equal=True)\n |        col1       col3\n |        self other self other\n |      0    a     c  1.0   1.0\n |      2    b     b  3.0   4.0\n |\n |      Keep all original rows and columns\n |\n |      &gt;&gt;&gt; df.compare(df2, keep_shape=True)\n |        col1       col2       col3\n |        self other self other self other\n |      0    a     c  NaN   NaN  NaN   NaN\n |      1  NaN   NaN  NaN   NaN  NaN   NaN\n |      2  NaN   NaN  NaN   NaN  3.0   4.0\n |      3  NaN   NaN  NaN   NaN  NaN   NaN\n |      4  NaN   NaN  NaN   NaN  NaN   NaN\n |\n |      Keep all original rows and columns and also all original values\n |\n |      &gt;&gt;&gt; df.compare(df2, keep_shape=True, keep_equal=True)\n |        col1       col2       col3\n |        self other self other self other\n |      0    a     c  1.0   1.0  1.0   1.0\n |      1    a     a  2.0   2.0  2.0   2.0\n |      2    b     b  3.0   3.0  3.0   4.0\n |      3    b     b  NaN   NaN  4.0   4.0\n |      4    a     a  5.0   5.0  5.0   5.0\n |\n |  corr(self, method: 'CorrelationMethod' = 'pearson', min_periods: 'int' = 1, numeric_only: 'bool' = False) -&gt; 'DataFrame'\n |      Compute pairwise correlation of columns, excluding NA/null values.\n |\n |      Parameters\n |      ----------\n |      method : {'pearson', 'kendall', 'spearman'} or callable\n |          Method of correlation:\n |\n |          * pearson : standard correlation coefficient\n |          * kendall : Kendall Tau correlation coefficient\n |          * spearman : Spearman rank correlation\n |          * callable: callable with input two 1d ndarrays\n |              and returning a float. Note that the returned matrix from corr\n |              will have 1 along the diagonals and will be symmetric\n |              regardless of the callable's behavior.\n |      min_periods : int, optional\n |          Minimum number of observations required per pair of columns\n |          to have a valid result. Currently only available for Pearson\n |          and Spearman correlation.\n |      numeric_only : bool, default False\n |          Include only `float`, `int` or `boolean` data.\n |\n |          .. versionadded:: 1.5.0\n |\n |          .. versionchanged:: 2.0.0\n |              The default value of ``numeric_only`` is now ``False``.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Correlation matrix.\n |\n |      See Also\n |      --------\n |      DataFrame.corrwith : Compute pairwise correlation with another\n |          DataFrame or Series.\n |      Series.corr : Compute the correlation between two Series.\n |\n |      Notes\n |      -----\n |      Pearson, Kendall and Spearman correlation are currently computed using pairwise complete observations.\n |\n |      * `Pearson correlation coefficient &lt;https://en.wikipedia.org/wiki/Pearson_correlation_coefficient&gt;`_\n |      * `Kendall rank correlation coefficient &lt;https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient&gt;`_\n |      * `Spearman's rank correlation coefficient &lt;https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient&gt;`_\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; def histogram_intersection(a, b):\n |      ...     v = np.minimum(a, b).sum().round(decimals=1)\n |      ...     return v\n |      &gt;&gt;&gt; df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n |      ...                   columns=['dogs', 'cats'])\n |      &gt;&gt;&gt; df.corr(method=histogram_intersection)\n |            dogs  cats\n |      dogs   1.0   0.3\n |      cats   0.3   1.0\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([(1, 1), (2, np.nan), (np.nan, 3), (4, 4)],\n |      ...                   columns=['dogs', 'cats'])\n |      &gt;&gt;&gt; df.corr(min_periods=3)\n |            dogs  cats\n |      dogs   1.0   NaN\n |      cats   NaN   1.0\n |\n |  corrwith(self, other: 'DataFrame | Series', axis: 'Axis' = 0, drop: 'bool' = False, method: 'CorrelationMethod' = 'pearson', numeric_only: 'bool' = False) -&gt; 'Series'\n |      Compute pairwise correlation.\n |\n |      Pairwise correlation is computed between rows or columns of\n |      DataFrame with rows or columns of Series or DataFrame. DataFrames\n |      are first aligned along both axes before computing the\n |      correlations.\n |\n |      Parameters\n |      ----------\n |      other : DataFrame, Series\n |          Object with which to compute correlations.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis to use. 0 or 'index' to compute row-wise, 1 or 'columns' for\n |          column-wise.\n |      drop : bool, default False\n |          Drop missing indices from result.\n |      method : {'pearson', 'kendall', 'spearman'} or callable\n |          Method of correlation:\n |\n |          * pearson : standard correlation coefficient\n |          * kendall : Kendall Tau correlation coefficient\n |          * spearman : Spearman rank correlation\n |          * callable: callable with input two 1d ndarrays\n |              and returning a float.\n |\n |      numeric_only : bool, default False\n |          Include only `float`, `int` or `boolean` data.\n |\n |          .. versionadded:: 1.5.0\n |\n |          .. versionchanged:: 2.0.0\n |              The default value of ``numeric_only`` is now ``False``.\n |\n |      Returns\n |      -------\n |      Series\n |          Pairwise correlations.\n |\n |      See Also\n |      --------\n |      DataFrame.corr : Compute pairwise correlation of columns.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; index = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n |      &gt;&gt;&gt; columns = [\"one\", \"two\", \"three\", \"four\"]\n |      &gt;&gt;&gt; df1 = pd.DataFrame(np.arange(20).reshape(5, 4), index=index, columns=columns)\n |      &gt;&gt;&gt; df2 = pd.DataFrame(np.arange(16).reshape(4, 4), index=index[:4], columns=columns)\n |      &gt;&gt;&gt; df1.corrwith(df2)\n |      one      1.0\n |      two      1.0\n |      three    1.0\n |      four     1.0\n |      dtype: float64\n |\n |      &gt;&gt;&gt; df2.corrwith(df1, axis=1)\n |      a    1.0\n |      b    1.0\n |      c    1.0\n |      d    1.0\n |      e    NaN\n |      dtype: float64\n |\n |  count(self, axis: 'Axis' = 0, numeric_only: 'bool' = False)\n |      Count non-NA cells for each column or row.\n |\n |      The values `None`, `NaN`, `NaT`, ``pandas.NA`` are considered NA.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          If 0 or 'index' counts are generated for each column.\n |          If 1 or 'columns' counts are generated for each row.\n |      numeric_only : bool, default False\n |          Include only `float`, `int` or `boolean` data.\n |\n |      Returns\n |      -------\n |      Series\n |          For each column/row the number of non-NA/null entries.\n |\n |      See Also\n |      --------\n |      Series.count: Number of non-NA elements in a Series.\n |      DataFrame.value_counts: Count unique combinations of columns.\n |      DataFrame.shape: Number of DataFrame rows and columns (including NA\n |          elements).\n |      DataFrame.isna: Boolean same-sized DataFrame showing places of NA\n |          elements.\n |\n |      Examples\n |      --------\n |      Constructing DataFrame from a dictionary:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"Person\":\n |      ...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n |      ...                    \"Age\": [24., np.nan, 21., 33, 26],\n |      ...                    \"Single\": [False, True, True, True, False]})\n |      &gt;&gt;&gt; df\n |         Person   Age  Single\n |      0    John  24.0   False\n |      1    Myla   NaN    True\n |      2   Lewis  21.0    True\n |      3    John  33.0    True\n |      4    Myla  26.0   False\n |\n |      Notice the uncounted NA values:\n |\n |      &gt;&gt;&gt; df.count()\n |      Person    5\n |      Age       4\n |      Single    5\n |      dtype: int64\n |\n |      Counts for each **row**:\n |\n |      &gt;&gt;&gt; df.count(axis='columns')\n |      0    3\n |      1    2\n |      2    3\n |      3    3\n |      4    3\n |      dtype: int64\n |\n |  cov(self, min_periods: 'int | None' = None, ddof: 'int | None' = 1, numeric_only: 'bool' = False) -&gt; 'DataFrame'\n |      Compute pairwise covariance of columns, excluding NA/null values.\n |\n |      Compute the pairwise covariance among the series of a DataFrame.\n |      The returned data frame is the `covariance matrix\n |      &lt;https://en.wikipedia.org/wiki/Covariance_matrix&gt;`__ of the columns\n |      of the DataFrame.\n |\n |      Both NA and null values are automatically excluded from the\n |      calculation. (See the note below about bias from missing values.)\n |      A threshold can be set for the minimum number of\n |      observations for each value created. Comparisons with observations\n |      below this threshold will be returned as ``NaN``.\n |\n |      This method is generally used for the analysis of time series data to\n |      understand the relationship between different measures\n |      across time.\n |\n |      Parameters\n |      ----------\n |      min_periods : int, optional\n |          Minimum number of observations required per pair of columns\n |          to have a valid result.\n |\n |      ddof : int, default 1\n |          Delta degrees of freedom.  The divisor used in calculations\n |          is ``N - ddof``, where ``N`` represents the number of elements.\n |          This argument is applicable only when no ``nan`` is in the dataframe.\n |\n |      numeric_only : bool, default False\n |          Include only `float`, `int` or `boolean` data.\n |\n |          .. versionadded:: 1.5.0\n |\n |          .. versionchanged:: 2.0.0\n |              The default value of ``numeric_only`` is now ``False``.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          The covariance matrix of the series of the DataFrame.\n |\n |      See Also\n |      --------\n |      Series.cov : Compute covariance with another Series.\n |      core.window.ewm.ExponentialMovingWindow.cov : Exponential weighted sample\n |          covariance.\n |      core.window.expanding.Expanding.cov : Expanding sample covariance.\n |      core.window.rolling.Rolling.cov : Rolling sample covariance.\n |\n |      Notes\n |      -----\n |      Returns the covariance matrix of the DataFrame's time series.\n |      The covariance is normalized by N-ddof.\n |\n |      For DataFrames that have Series that are missing data (assuming that\n |      data is `missing at random\n |      &lt;https://en.wikipedia.org/wiki/Missing_data#Missing_at_random&gt;`__)\n |      the returned covariance matrix will be an unbiased estimate\n |      of the variance and covariance between the member Series.\n |\n |      However, for many applications this estimate may not be acceptable\n |      because the estimate covariance matrix is not guaranteed to be positive\n |      semi-definite. This could lead to estimate correlations having\n |      absolute values which are greater than one, and/or a non-invertible\n |      covariance matrix. See `Estimation of covariance matrices\n |      &lt;https://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\n |      matrices&gt;`__ for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n |      ...                   columns=['dogs', 'cats'])\n |      &gt;&gt;&gt; df.cov()\n |                dogs      cats\n |      dogs  0.666667 -1.000000\n |      cats -1.000000  1.666667\n |\n |      &gt;&gt;&gt; np.random.seed(42)\n |      &gt;&gt;&gt; df = pd.DataFrame(np.random.randn(1000, 5),\n |      ...                   columns=['a', 'b', 'c', 'd', 'e'])\n |      &gt;&gt;&gt; df.cov()\n |                a         b         c         d         e\n |      a  0.998438 -0.020161  0.059277 -0.008943  0.014144\n |      b -0.020161  1.059352 -0.008543 -0.024738  0.009826\n |      c  0.059277 -0.008543  1.010670 -0.001486 -0.000271\n |      d -0.008943 -0.024738 -0.001486  0.921297 -0.013692\n |      e  0.014144  0.009826 -0.000271 -0.013692  0.977795\n |\n |      **Minimum number of periods**\n |\n |      This method also supports an optional ``min_periods`` keyword\n |      that specifies the required minimum number of non-NA observations for\n |      each column pair in order to have a valid result:\n |\n |      &gt;&gt;&gt; np.random.seed(42)\n |      &gt;&gt;&gt; df = pd.DataFrame(np.random.randn(20, 3),\n |      ...                   columns=['a', 'b', 'c'])\n |      &gt;&gt;&gt; df.loc[df.index[:5], 'a'] = np.nan\n |      &gt;&gt;&gt; df.loc[df.index[5:10], 'b'] = np.nan\n |      &gt;&gt;&gt; df.cov(min_periods=12)\n |                a         b         c\n |      a  0.316741       NaN -0.150812\n |      b       NaN  1.248003  0.191417\n |      c -0.150812  0.191417  0.895202\n |\n |  cummax(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)\n |      Return cumulative maximum over a DataFrame or Series axis.\n |\n |      Returns a DataFrame or Series of the same size containing the cumulative\n |      maximum.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The index or the name of the axis. 0 is equivalent to None or 'index'.\n |          For `Series` this parameter is unused and defaults to 0.\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      *args, **kwargs\n |          Additional keywords have no effect but might be accepted for\n |          compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Return cumulative maximum of Series or DataFrame.\n |\n |      See Also\n |      --------\n |      core.window.expanding.Expanding.max : Similar functionality\n |          but ignores ``NaN`` values.\n |      DataFrame.max : Return the maximum over\n |          DataFrame axis.\n |      DataFrame.cummax : Return cumulative maximum over DataFrame axis.\n |      DataFrame.cummin : Return cumulative minimum over DataFrame axis.\n |      DataFrame.cumsum : Return cumulative sum over DataFrame axis.\n |      DataFrame.cumprod : Return cumulative product over DataFrame axis.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      &gt;&gt;&gt; s = pd.Series([2, np.nan, 5, -1, 0])\n |      &gt;&gt;&gt; s\n |      0    2.0\n |      1    NaN\n |      2    5.0\n |      3   -1.0\n |      4    0.0\n |      dtype: float64\n |\n |      By default, NA values are ignored.\n |\n |      &gt;&gt;&gt; s.cummax()\n |      0    2.0\n |      1    NaN\n |      2    5.0\n |      3    5.0\n |      4    5.0\n |      dtype: float64\n |\n |      To include NA values in the operation, use ``skipna=False``\n |\n |      &gt;&gt;&gt; s.cummax(skipna=False)\n |      0    2.0\n |      1    NaN\n |      2    NaN\n |      3    NaN\n |      4    NaN\n |      dtype: float64\n |\n |      **DataFrame**\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[2.0, 1.0],\n |      ...                    [3.0, np.nan],\n |      ...                    [1.0, 0.0]],\n |      ...                   columns=list('AB'))\n |      &gt;&gt;&gt; df\n |           A    B\n |      0  2.0  1.0\n |      1  3.0  NaN\n |      2  1.0  0.0\n |\n |      By default, iterates over rows and finds the maximum\n |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n |\n |      &gt;&gt;&gt; df.cummax()\n |           A    B\n |      0  2.0  1.0\n |      1  3.0  NaN\n |      2  3.0  1.0\n |\n |      To iterate over columns and find the maximum in each row,\n |      use ``axis=1``\n |\n |      &gt;&gt;&gt; df.cummax(axis=1)\n |           A    B\n |      0  2.0  2.0\n |      1  3.0  NaN\n |      2  1.0  1.0\n |\n |  cummin(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)\n |      Return cumulative minimum over a DataFrame or Series axis.\n |\n |      Returns a DataFrame or Series of the same size containing the cumulative\n |      minimum.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The index or the name of the axis. 0 is equivalent to None or 'index'.\n |          For `Series` this parameter is unused and defaults to 0.\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      *args, **kwargs\n |          Additional keywords have no effect but might be accepted for\n |          compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Return cumulative minimum of Series or DataFrame.\n |\n |      See Also\n |      --------\n |      core.window.expanding.Expanding.min : Similar functionality\n |          but ignores ``NaN`` values.\n |      DataFrame.min : Return the minimum over\n |          DataFrame axis.\n |      DataFrame.cummax : Return cumulative maximum over DataFrame axis.\n |      DataFrame.cummin : Return cumulative minimum over DataFrame axis.\n |      DataFrame.cumsum : Return cumulative sum over DataFrame axis.\n |      DataFrame.cumprod : Return cumulative product over DataFrame axis.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      &gt;&gt;&gt; s = pd.Series([2, np.nan, 5, -1, 0])\n |      &gt;&gt;&gt; s\n |      0    2.0\n |      1    NaN\n |      2    5.0\n |      3   -1.0\n |      4    0.0\n |      dtype: float64\n |\n |      By default, NA values are ignored.\n |\n |      &gt;&gt;&gt; s.cummin()\n |      0    2.0\n |      1    NaN\n |      2    2.0\n |      3   -1.0\n |      4   -1.0\n |      dtype: float64\n |\n |      To include NA values in the operation, use ``skipna=False``\n |\n |      &gt;&gt;&gt; s.cummin(skipna=False)\n |      0    2.0\n |      1    NaN\n |      2    NaN\n |      3    NaN\n |      4    NaN\n |      dtype: float64\n |\n |      **DataFrame**\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[2.0, 1.0],\n |      ...                    [3.0, np.nan],\n |      ...                    [1.0, 0.0]],\n |      ...                   columns=list('AB'))\n |      &gt;&gt;&gt; df\n |           A    B\n |      0  2.0  1.0\n |      1  3.0  NaN\n |      2  1.0  0.0\n |\n |      By default, iterates over rows and finds the minimum\n |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n |\n |      &gt;&gt;&gt; df.cummin()\n |           A    B\n |      0  2.0  1.0\n |      1  2.0  NaN\n |      2  1.0  0.0\n |\n |      To iterate over columns and find the minimum in each row,\n |      use ``axis=1``\n |\n |      &gt;&gt;&gt; df.cummin(axis=1)\n |           A    B\n |      0  2.0  1.0\n |      1  3.0  NaN\n |      2  1.0  0.0\n |\n |  cumprod(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)\n |      Return cumulative product over a DataFrame or Series axis.\n |\n |      Returns a DataFrame or Series of the same size containing the cumulative\n |      product.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The index or the name of the axis. 0 is equivalent to None or 'index'.\n |          For `Series` this parameter is unused and defaults to 0.\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      *args, **kwargs\n |          Additional keywords have no effect but might be accepted for\n |          compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Return cumulative product of Series or DataFrame.\n |\n |      See Also\n |      --------\n |      core.window.expanding.Expanding.prod : Similar functionality\n |          but ignores ``NaN`` values.\n |      DataFrame.prod : Return the product over\n |          DataFrame axis.\n |      DataFrame.cummax : Return cumulative maximum over DataFrame axis.\n |      DataFrame.cummin : Return cumulative minimum over DataFrame axis.\n |      DataFrame.cumsum : Return cumulative sum over DataFrame axis.\n |      DataFrame.cumprod : Return cumulative product over DataFrame axis.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      &gt;&gt;&gt; s = pd.Series([2, np.nan, 5, -1, 0])\n |      &gt;&gt;&gt; s\n |      0    2.0\n |      1    NaN\n |      2    5.0\n |      3   -1.0\n |      4    0.0\n |      dtype: float64\n |\n |      By default, NA values are ignored.\n |\n |      &gt;&gt;&gt; s.cumprod()\n |      0     2.0\n |      1     NaN\n |      2    10.0\n |      3   -10.0\n |      4    -0.0\n |      dtype: float64\n |\n |      To include NA values in the operation, use ``skipna=False``\n |\n |      &gt;&gt;&gt; s.cumprod(skipna=False)\n |      0    2.0\n |      1    NaN\n |      2    NaN\n |      3    NaN\n |      4    NaN\n |      dtype: float64\n |\n |      **DataFrame**\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[2.0, 1.0],\n |      ...                    [3.0, np.nan],\n |      ...                    [1.0, 0.0]],\n |      ...                   columns=list('AB'))\n |      &gt;&gt;&gt; df\n |           A    B\n |      0  2.0  1.0\n |      1  3.0  NaN\n |      2  1.0  0.0\n |\n |      By default, iterates over rows and finds the product\n |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n |\n |      &gt;&gt;&gt; df.cumprod()\n |           A    B\n |      0  2.0  1.0\n |      1  6.0  NaN\n |      2  6.0  0.0\n |\n |      To iterate over columns and find the product in each row,\n |      use ``axis=1``\n |\n |      &gt;&gt;&gt; df.cumprod(axis=1)\n |           A    B\n |      0  2.0  2.0\n |      1  3.0  NaN\n |      2  1.0  0.0\n |\n |  cumsum(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)\n |      Return cumulative sum over a DataFrame or Series axis.\n |\n |      Returns a DataFrame or Series of the same size containing the cumulative\n |      sum.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The index or the name of the axis. 0 is equivalent to None or 'index'.\n |          For `Series` this parameter is unused and defaults to 0.\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      *args, **kwargs\n |          Additional keywords have no effect but might be accepted for\n |          compatibility with NumPy.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Return cumulative sum of Series or DataFrame.\n |\n |      See Also\n |      --------\n |      core.window.expanding.Expanding.sum : Similar functionality\n |          but ignores ``NaN`` values.\n |      DataFrame.sum : Return the sum over\n |          DataFrame axis.\n |      DataFrame.cummax : Return cumulative maximum over DataFrame axis.\n |      DataFrame.cummin : Return cumulative minimum over DataFrame axis.\n |      DataFrame.cumsum : Return cumulative sum over DataFrame axis.\n |      DataFrame.cumprod : Return cumulative product over DataFrame axis.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      &gt;&gt;&gt; s = pd.Series([2, np.nan, 5, -1, 0])\n |      &gt;&gt;&gt; s\n |      0    2.0\n |      1    NaN\n |      2    5.0\n |      3   -1.0\n |      4    0.0\n |      dtype: float64\n |\n |      By default, NA values are ignored.\n |\n |      &gt;&gt;&gt; s.cumsum()\n |      0    2.0\n |      1    NaN\n |      2    7.0\n |      3    6.0\n |      4    6.0\n |      dtype: float64\n |\n |      To include NA values in the operation, use ``skipna=False``\n |\n |      &gt;&gt;&gt; s.cumsum(skipna=False)\n |      0    2.0\n |      1    NaN\n |      2    NaN\n |      3    NaN\n |      4    NaN\n |      dtype: float64\n |\n |      **DataFrame**\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[2.0, 1.0],\n |      ...                    [3.0, np.nan],\n |      ...                    [1.0, 0.0]],\n |      ...                   columns=list('AB'))\n |      &gt;&gt;&gt; df\n |           A    B\n |      0  2.0  1.0\n |      1  3.0  NaN\n |      2  1.0  0.0\n |\n |      By default, iterates over rows and finds the sum\n |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n |\n |      &gt;&gt;&gt; df.cumsum()\n |           A    B\n |      0  2.0  1.0\n |      1  5.0  NaN\n |      2  6.0  1.0\n |\n |      To iterate over columns and find the sum in each row,\n |      use ``axis=1``\n |\n |      &gt;&gt;&gt; df.cumsum(axis=1)\n |           A    B\n |      0  2.0  3.0\n |      1  3.0  NaN\n |      2  1.0  1.0\n |\n |  diff(self, periods: 'int' = 1, axis: 'Axis' = 0) -&gt; 'DataFrame'\n |      First discrete difference of element.\n |\n |      Calculates the difference of a DataFrame element compared with another\n |      element in the DataFrame (default is element in previous row).\n |\n |      Parameters\n |      ----------\n |      periods : int, default 1\n |          Periods to shift for calculating difference, accepts negative\n |          values.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Take difference over rows (0) or columns (1).\n |\n |      Returns\n |      -------\n |      DataFrame\n |          First differences of the Series.\n |\n |      See Also\n |      --------\n |      DataFrame.pct_change: Percent change over given number of periods.\n |      DataFrame.shift: Shift index by desired number of periods with an\n |          optional time freq.\n |      Series.diff: First discrete difference of object.\n |\n |      Notes\n |      -----\n |      For boolean dtypes, this uses :meth:`operator.xor` rather than\n |      :meth:`operator.sub`.\n |      The result is calculated according to current dtype in DataFrame,\n |      however dtype of the result is always float64.\n |\n |      Examples\n |      --------\n |\n |      Difference with previous row\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n |      ...                    'b': [1, 1, 2, 3, 5, 8],\n |      ...                    'c': [1, 4, 9, 16, 25, 36]})\n |      &gt;&gt;&gt; df\n |         a  b   c\n |      0  1  1   1\n |      1  2  1   4\n |      2  3  2   9\n |      3  4  3  16\n |      4  5  5  25\n |      5  6  8  36\n |\n |      &gt;&gt;&gt; df.diff()\n |           a    b     c\n |      0  NaN  NaN   NaN\n |      1  1.0  0.0   3.0\n |      2  1.0  1.0   5.0\n |      3  1.0  1.0   7.0\n |      4  1.0  2.0   9.0\n |      5  1.0  3.0  11.0\n |\n |      Difference with previous column\n |\n |      &gt;&gt;&gt; df.diff(axis=1)\n |          a  b   c\n |      0 NaN  0   0\n |      1 NaN -1   3\n |      2 NaN -1   7\n |      3 NaN -1  13\n |      4 NaN  0  20\n |      5 NaN  2  28\n |\n |      Difference with 3rd previous row\n |\n |      &gt;&gt;&gt; df.diff(periods=3)\n |           a    b     c\n |      0  NaN  NaN   NaN\n |      1  NaN  NaN   NaN\n |      2  NaN  NaN   NaN\n |      3  3.0  2.0  15.0\n |      4  3.0  4.0  21.0\n |      5  3.0  6.0  27.0\n |\n |      Difference with following row\n |\n |      &gt;&gt;&gt; df.diff(periods=-1)\n |           a    b     c\n |      0 -1.0  0.0  -3.0\n |      1 -1.0 -1.0  -5.0\n |      2 -1.0 -1.0  -7.0\n |      3 -1.0 -2.0  -9.0\n |      4 -1.0 -3.0 -11.0\n |      5  NaN  NaN   NaN\n |\n |      Overflow in input dtype\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 0]}, dtype=np.uint8)\n |      &gt;&gt;&gt; df.diff()\n |             a\n |      0    NaN\n |      1  255.0\n |\n |  div = truediv(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |\n |  divide = truediv(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |\n |  dot(self, other: 'AnyArrayLike | DataFrame') -&gt; 'DataFrame | Series'\n |      Compute the matrix multiplication between the DataFrame and other.\n |\n |      This method computes the matrix product between the DataFrame and the\n |      values of an other Series, DataFrame or a numpy array.\n |\n |      It can also be called using ``self @ other``.\n |\n |      Parameters\n |      ----------\n |      other : Series, DataFrame or array-like\n |          The other object to compute the matrix product with.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          If other is a Series, return the matrix product between self and\n |          other as a Series. If other is a DataFrame or a numpy.array, return\n |          the matrix product of self and other in a DataFrame of a np.array.\n |\n |      See Also\n |      --------\n |      Series.dot: Similar method for Series.\n |\n |      Notes\n |      -----\n |      The dimensions of DataFrame and other must be compatible in order to\n |      compute the matrix multiplication. In addition, the column names of\n |      DataFrame and the index of other must contain the same values, as they\n |      will be aligned prior to the multiplication.\n |\n |      The dot method for Series computes the inner product, instead of the\n |      matrix product here.\n |\n |      Examples\n |      --------\n |      Here we multiply a DataFrame with a Series.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])\n |      &gt;&gt;&gt; s = pd.Series([1, 1, 2, 1])\n |      &gt;&gt;&gt; df.dot(s)\n |      0    -4\n |      1     5\n |      dtype: int64\n |\n |      Here we multiply a DataFrame with another DataFrame.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame([[0, 1], [1, 2], [-1, -1], [2, 0]])\n |      &gt;&gt;&gt; df.dot(other)\n |          0   1\n |      0   1   4\n |      1   2   2\n |\n |      Note that the dot method give the same result as @\n |\n |      &gt;&gt;&gt; df @ other\n |          0   1\n |      0   1   4\n |      1   2   2\n |\n |      The dot method works also if other is an np.array.\n |\n |      &gt;&gt;&gt; arr = np.array([[0, 1], [1, 2], [-1, -1], [2, 0]])\n |      &gt;&gt;&gt; df.dot(arr)\n |          0   1\n |      0   1   4\n |      1   2   2\n |\n |      Note how shuffling of the objects does not change the result.\n |\n |      &gt;&gt;&gt; s2 = s.reindex([1, 0, 2, 3])\n |      &gt;&gt;&gt; df.dot(s2)\n |      0    -4\n |      1     5\n |      dtype: int64\n |\n |  drop(self, labels: 'IndexLabel | None' = None, *, axis: 'Axis' = 0, index: 'IndexLabel | None' = None, columns: 'IndexLabel | None' = None, level: 'Level | None' = None, inplace: 'bool' = False, errors: 'IgnoreRaise' = 'raise') -&gt; 'DataFrame | None'\n |      Drop specified labels from rows or columns.\n |\n |      Remove rows or columns by specifying label names and corresponding\n |      axis, or by directly specifying index or column names. When using a\n |      multi-index, labels on different levels can be removed by specifying\n |      the level. See the :ref:`user guide &lt;advanced.shown_levels&gt;`\n |      for more information about the now unused levels.\n |\n |      Parameters\n |      ----------\n |      labels : single label or list-like\n |          Index or column labels to drop. A tuple will be used as a single\n |          label and not treated as a list-like.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Whether to drop labels from the index (0 or 'index') or\n |          columns (1 or 'columns').\n |      index : single label or list-like\n |          Alternative to specifying axis (``labels, axis=0``\n |          is equivalent to ``index=labels``).\n |      columns : single label or list-like\n |          Alternative to specifying axis (``labels, axis=1``\n |          is equivalent to ``columns=labels``).\n |      level : int or level name, optional\n |          For MultiIndex, level from which the labels will be removed.\n |      inplace : bool, default False\n |          If False, return a copy. Otherwise, do operation\n |          in place and return None.\n |      errors : {'ignore', 'raise'}, default 'raise'\n |          If 'ignore', suppress error and only existing labels are\n |          dropped.\n |\n |      Returns\n |      -------\n |      DataFrame or None\n |          Returns DataFrame or None DataFrame with the specified\n |          index or column labels removed or None if inplace=True.\n |\n |      Raises\n |      ------\n |      KeyError\n |          If any of the labels is not found in the selected axis.\n |\n |      See Also\n |      --------\n |      DataFrame.loc : Label-location based indexer for selection by label.\n |      DataFrame.dropna : Return DataFrame with labels on given axis omitted\n |          where (all or any) data are missing.\n |      DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n |          removed, optionally only considering certain columns.\n |      Series.drop : Return Series with specified index labels removed.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(np.arange(12).reshape(3, 4),\n |      ...                   columns=['A', 'B', 'C', 'D'])\n |      &gt;&gt;&gt; df\n |         A  B   C   D\n |      0  0  1   2   3\n |      1  4  5   6   7\n |      2  8  9  10  11\n |\n |      Drop columns\n |\n |      &gt;&gt;&gt; df.drop(['B', 'C'], axis=1)\n |         A   D\n |      0  0   3\n |      1  4   7\n |      2  8  11\n |\n |      &gt;&gt;&gt; df.drop(columns=['B', 'C'])\n |         A   D\n |      0  0   3\n |      1  4   7\n |      2  8  11\n |\n |      Drop a row by index\n |\n |      &gt;&gt;&gt; df.drop([0, 1])\n |         A  B   C   D\n |      2  8  9  10  11\n |\n |      Drop columns and/or rows of MultiIndex DataFrame\n |\n |      &gt;&gt;&gt; midx = pd.MultiIndex(levels=[['llama', 'cow', 'falcon'],\n |      ...                              ['speed', 'weight', 'length']],\n |      ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n |      ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n |      &gt;&gt;&gt; df = pd.DataFrame(index=midx, columns=['big', 'small'],\n |      ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n |      ...                         [250, 150], [1.5, 0.8], [320, 250],\n |      ...                         [1, 0.8], [0.3, 0.2]])\n |      &gt;&gt;&gt; df\n |                      big     small\n |      llama   speed   45.0    30.0\n |              weight  200.0   100.0\n |              length  1.5     1.0\n |      cow     speed   30.0    20.0\n |              weight  250.0   150.0\n |              length  1.5     0.8\n |      falcon  speed   320.0   250.0\n |              weight  1.0     0.8\n |              length  0.3     0.2\n |\n |      Drop a specific index combination from the MultiIndex\n |      DataFrame, i.e., drop the combination ``'falcon'`` and\n |      ``'weight'``, which deletes only the corresponding row\n |\n |      &gt;&gt;&gt; df.drop(index=('falcon', 'weight'))\n |                      big     small\n |      llama   speed   45.0    30.0\n |              weight  200.0   100.0\n |              length  1.5     1.0\n |      cow     speed   30.0    20.0\n |              weight  250.0   150.0\n |              length  1.5     0.8\n |      falcon  speed   320.0   250.0\n |              length  0.3     0.2\n |\n |      &gt;&gt;&gt; df.drop(index='cow', columns='small')\n |                      big\n |      llama   speed   45.0\n |              weight  200.0\n |              length  1.5\n |      falcon  speed   320.0\n |              weight  1.0\n |              length  0.3\n |\n |      &gt;&gt;&gt; df.drop(index='length', level=1)\n |                      big     small\n |      llama   speed   45.0    30.0\n |              weight  200.0   100.0\n |      cow     speed   30.0    20.0\n |              weight  250.0   150.0\n |      falcon  speed   320.0   250.0\n |              weight  1.0     0.8\n |\n |  drop_duplicates(self, subset: 'Hashable | Sequence[Hashable] | None' = None, *, keep: 'DropKeep' = 'first', inplace: 'bool' = False, ignore_index: 'bool' = False) -&gt; 'DataFrame | None'\n |      Return DataFrame with duplicate rows removed.\n |\n |      Considering certain columns is optional. Indexes, including time indexes\n |      are ignored.\n |\n |      Parameters\n |      ----------\n |      subset : column label or sequence of labels, optional\n |          Only consider certain columns for identifying duplicates, by\n |          default use all of the columns.\n |      keep : {'first', 'last', ``False``}, default 'first'\n |          Determines which duplicates (if any) to keep.\n |\n |          - 'first' : Drop duplicates except for the first occurrence.\n |          - 'last' : Drop duplicates except for the last occurrence.\n |          - ``False`` : Drop all duplicates.\n |\n |      inplace : bool, default ``False``\n |          Whether to modify the DataFrame rather than creating a new one.\n |      ignore_index : bool, default ``False``\n |          If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.\n |\n |      Returns\n |      -------\n |      DataFrame or None\n |          DataFrame with duplicates removed or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      DataFrame.value_counts: Count unique combinations of columns.\n |\n |      Examples\n |      --------\n |      Consider dataset containing ramen rating.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     'brand': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],\n |      ...     'style': ['cup', 'cup', 'cup', 'pack', 'pack'],\n |      ...     'rating': [4, 4, 3.5, 15, 5]\n |      ... })\n |      &gt;&gt;&gt; df\n |          brand style  rating\n |      0  Yum Yum   cup     4.0\n |      1  Yum Yum   cup     4.0\n |      2  Indomie   cup     3.5\n |      3  Indomie  pack    15.0\n |      4  Indomie  pack     5.0\n |\n |      By default, it removes duplicate rows based on all columns.\n |\n |      &gt;&gt;&gt; df.drop_duplicates()\n |          brand style  rating\n |      0  Yum Yum   cup     4.0\n |      2  Indomie   cup     3.5\n |      3  Indomie  pack    15.0\n |      4  Indomie  pack     5.0\n |\n |      To remove duplicates on specific column(s), use ``subset``.\n |\n |      &gt;&gt;&gt; df.drop_duplicates(subset=['brand'])\n |          brand style  rating\n |      0  Yum Yum   cup     4.0\n |      2  Indomie   cup     3.5\n |\n |      To remove duplicates and keep last occurrences, use ``keep``.\n |\n |      &gt;&gt;&gt; df.drop_duplicates(subset=['brand', 'style'], keep='last')\n |          brand style  rating\n |      1  Yum Yum   cup     4.0\n |      2  Indomie   cup     3.5\n |      4  Indomie  pack     5.0\n |\n |  dropna(self, *, axis: 'Axis' = 0, how: 'AnyAll | lib.NoDefault' = &lt;no_default&gt;, thresh: 'int | lib.NoDefault' = &lt;no_default&gt;, subset: 'IndexLabel | None' = None, inplace: 'bool' = False, ignore_index: 'bool' = False) -&gt; 'DataFrame | None'\n |      Remove missing values.\n |\n |      See the :ref:`User Guide &lt;missing_data&gt;` for more on which values are\n |      considered missing, and how to work with missing data.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Determine if rows or columns which contain missing values are\n |          removed.\n |\n |          * 0, or 'index' : Drop rows which contain missing values.\n |          * 1, or 'columns' : Drop columns which contain missing value.\n |\n |          Only a single axis is allowed.\n |\n |      how : {'any', 'all'}, default 'any'\n |          Determine if row or column is removed from DataFrame, when we have\n |          at least one NA or all NA.\n |\n |          * 'any' : If any NA values are present, drop that row or column.\n |          * 'all' : If all values are NA, drop that row or column.\n |\n |      thresh : int, optional\n |          Require that many non-NA values. Cannot be combined with how.\n |      subset : column label or sequence of labels, optional\n |          Labels along other axis to consider, e.g. if you are dropping rows\n |          these would be a list of columns to include.\n |      inplace : bool, default False\n |          Whether to modify the DataFrame rather than creating a new one.\n |      ignore_index : bool, default ``False``\n |          If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.\n |\n |          .. versionadded:: 2.0.0\n |\n |      Returns\n |      -------\n |      DataFrame or None\n |          DataFrame with NA entries dropped from it or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      DataFrame.isna: Indicate missing values.\n |      DataFrame.notna : Indicate existing (non-missing) values.\n |      DataFrame.fillna : Replace missing values.\n |      Series.dropna : Drop missing values.\n |      Index.dropna : Drop missing indices.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n |      ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n |      ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n |      ...                             pd.NaT]})\n |      &gt;&gt;&gt; df\n |             name        toy       born\n |      0    Alfred        NaN        NaT\n |      1    Batman  Batmobile 1940-04-25\n |      2  Catwoman   Bullwhip        NaT\n |\n |      Drop the rows where at least one element is missing.\n |\n |      &gt;&gt;&gt; df.dropna()\n |           name        toy       born\n |      1  Batman  Batmobile 1940-04-25\n |\n |      Drop the columns where at least one element is missing.\n |\n |      &gt;&gt;&gt; df.dropna(axis='columns')\n |             name\n |      0    Alfred\n |      1    Batman\n |      2  Catwoman\n |\n |      Drop the rows where all elements are missing.\n |\n |      &gt;&gt;&gt; df.dropna(how='all')\n |             name        toy       born\n |      0    Alfred        NaN        NaT\n |      1    Batman  Batmobile 1940-04-25\n |      2  Catwoman   Bullwhip        NaT\n |\n |      Keep only the rows with at least 2 non-NA values.\n |\n |      &gt;&gt;&gt; df.dropna(thresh=2)\n |             name        toy       born\n |      1    Batman  Batmobile 1940-04-25\n |      2  Catwoman   Bullwhip        NaT\n |\n |      Define in which columns to look for missing values.\n |\n |      &gt;&gt;&gt; df.dropna(subset=['name', 'toy'])\n |             name        toy       born\n |      1    Batman  Batmobile 1940-04-25\n |      2  Catwoman   Bullwhip        NaT\n |\n |  duplicated(self, subset: 'Hashable | Sequence[Hashable] | None' = None, keep: 'DropKeep' = 'first') -&gt; 'Series'\n |      Return boolean Series denoting duplicate rows.\n |\n |      Considering certain columns is optional.\n |\n |      Parameters\n |      ----------\n |      subset : column label or sequence of labels, optional\n |          Only consider certain columns for identifying duplicates, by\n |          default use all of the columns.\n |      keep : {'first', 'last', False}, default 'first'\n |          Determines which duplicates (if any) to mark.\n |\n |          - ``first`` : Mark duplicates as ``True`` except for the first occurrence.\n |          - ``last`` : Mark duplicates as ``True`` except for the last occurrence.\n |          - False : Mark all duplicates as ``True``.\n |\n |      Returns\n |      -------\n |      Series\n |          Boolean series for each duplicated rows.\n |\n |      See Also\n |      --------\n |      Index.duplicated : Equivalent method on index.\n |      Series.duplicated : Equivalent method on Series.\n |      Series.drop_duplicates : Remove duplicate values from Series.\n |      DataFrame.drop_duplicates : Remove duplicate values from DataFrame.\n |\n |      Examples\n |      --------\n |      Consider dataset containing ramen rating.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     'brand': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],\n |      ...     'style': ['cup', 'cup', 'cup', 'pack', 'pack'],\n |      ...     'rating': [4, 4, 3.5, 15, 5]\n |      ... })\n |      &gt;&gt;&gt; df\n |          brand style  rating\n |      0  Yum Yum   cup     4.0\n |      1  Yum Yum   cup     4.0\n |      2  Indomie   cup     3.5\n |      3  Indomie  pack    15.0\n |      4  Indomie  pack     5.0\n |\n |      By default, for each set of duplicated values, the first occurrence\n |      is set on False and all others on True.\n |\n |      &gt;&gt;&gt; df.duplicated()\n |      0    False\n |      1     True\n |      2    False\n |      3    False\n |      4    False\n |      dtype: bool\n |\n |      By using 'last', the last occurrence of each set of duplicated values\n |      is set on False and all others on True.\n |\n |      &gt;&gt;&gt; df.duplicated(keep='last')\n |      0     True\n |      1    False\n |      2    False\n |      3    False\n |      4    False\n |      dtype: bool\n |\n |      By setting ``keep`` on False, all duplicates are True.\n |\n |      &gt;&gt;&gt; df.duplicated(keep=False)\n |      0     True\n |      1     True\n |      2    False\n |      3    False\n |      4    False\n |      dtype: bool\n |\n |      To find duplicates on specific column(s), use ``subset``.\n |\n |      &gt;&gt;&gt; df.duplicated(subset=['brand'])\n |      0    False\n |      1     True\n |      2    False\n |      3     True\n |      4     True\n |      dtype: bool\n |\n |  eq(self, other, axis: 'Axis' = 'columns', level=None) -&gt; 'DataFrame'\n |      Get Equal to of dataframe and other, element-wise (binary operator `eq`).\n |\n |      Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\n |      operators.\n |\n |      Equivalent to `==`, `!=`, `&lt;=`, `&lt;`, `&gt;=`, `&gt;` with support to choose axis\n |      (rows or columns) and level for comparison.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}, default 'columns'\n |          Whether to compare by the index (0 or 'index') or columns\n |          (1 or 'columns').\n |      level : int or label\n |          Broadcast across a level, matching Index values on the passed\n |          MultiIndex level.\n |\n |      Returns\n |      -------\n |      DataFrame of bool\n |          Result of the comparison.\n |\n |      See Also\n |      --------\n |      DataFrame.eq : Compare DataFrames for equality elementwise.\n |      DataFrame.ne : Compare DataFrames for inequality elementwise.\n |      DataFrame.le : Compare DataFrames for less than inequality\n |          or equality elementwise.\n |      DataFrame.lt : Compare DataFrames for strictly less than\n |          inequality elementwise.\n |      DataFrame.ge : Compare DataFrames for greater than inequality\n |          or equality elementwise.\n |      DataFrame.gt : Compare DataFrames for strictly greater than\n |          inequality elementwise.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |      `NaN` values are considered different (i.e. `NaN` != `NaN`).\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'cost': [250, 150, 100],\n |      ...                    'revenue': [100, 250, 300]},\n |      ...                   index=['A', 'B', 'C'])\n |      &gt;&gt;&gt; df\n |         cost  revenue\n |      A   250      100\n |      B   150      250\n |      C   100      300\n |\n |      Comparison with a scalar, using either the operator or method:\n |\n |      &gt;&gt;&gt; df == 100\n |          cost  revenue\n |      A  False     True\n |      B  False    False\n |      C   True    False\n |\n |      &gt;&gt;&gt; df.eq(100)\n |          cost  revenue\n |      A  False     True\n |      B  False    False\n |      C   True    False\n |\n |      When `other` is a :class:`Series`, the columns of a DataFrame are aligned\n |      with the index of `other` and broadcast:\n |\n |      &gt;&gt;&gt; df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n |          cost  revenue\n |      A   True     True\n |      B   True    False\n |      C  False     True\n |\n |      Use the method to control the broadcast axis:\n |\n |      &gt;&gt;&gt; df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n |         cost  revenue\n |      A  True    False\n |      B  True     True\n |      C  True     True\n |      D  True     True\n |\n |      When comparing to an arbitrary sequence, the number of columns must\n |      match the number elements in `other`:\n |\n |      &gt;&gt;&gt; df == [250, 100]\n |          cost  revenue\n |      A   True     True\n |      B  False    False\n |      C  False    False\n |\n |      Use the method to control the axis:\n |\n |      &gt;&gt;&gt; df.eq([250, 250, 100], axis='index')\n |          cost  revenue\n |      A   True    False\n |      B  False     True\n |      C   True    False\n |\n |      Compare to a DataFrame of different shape.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n |      ...                      index=['A', 'B', 'C', 'D'])\n |      &gt;&gt;&gt; other\n |         revenue\n |      A      300\n |      B      250\n |      C      100\n |      D      150\n |\n |      &gt;&gt;&gt; df.gt(other)\n |          cost  revenue\n |      A  False    False\n |      B  False    False\n |      C  False     True\n |      D  False    False\n |\n |      Compare to a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n |      ...                              'revenue': [100, 250, 300, 200, 175, 225]},\n |      ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n |      ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n |      &gt;&gt;&gt; df_multindex\n |            cost  revenue\n |      Q1 A   250      100\n |         B   150      250\n |         C   100      300\n |      Q2 A   150      200\n |         B   300      175\n |         C   220      225\n |\n |      &gt;&gt;&gt; df.le(df_multindex, level=1)\n |             cost  revenue\n |      Q1 A   True     True\n |         B   True     True\n |         C   True     True\n |      Q2 A  False     True\n |         B   True    False\n |         C   True    False\n |\n |  eval(self, expr: 'str', *, inplace: 'bool' = False, **kwargs) -&gt; 'Any | None'\n |      Evaluate a string describing operations on DataFrame columns.\n |\n |      Operates on columns only, not specific rows or elements.  This allows\n |      `eval` to run arbitrary code, which can make you vulnerable to code\n |      injection if you pass user input to this function.\n |\n |      Parameters\n |      ----------\n |      expr : str\n |          The expression string to evaluate.\n |      inplace : bool, default False\n |          If the expression contains an assignment, whether to perform the\n |          operation inplace and mutate the existing DataFrame. Otherwise,\n |          a new DataFrame is returned.\n |      **kwargs\n |          See the documentation for :func:`eval` for complete details\n |          on the keyword arguments accepted by\n |          :meth:`~pandas.DataFrame.query`.\n |\n |      Returns\n |      -------\n |      ndarray, scalar, pandas object, or None\n |          The result of the evaluation or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      DataFrame.query : Evaluates a boolean expression to query the columns\n |          of a frame.\n |      DataFrame.assign : Can evaluate an expression or function to create new\n |          values for a column.\n |      eval : Evaluate a Python expression as a string using various\n |          backends.\n |\n |      Notes\n |      -----\n |      For more details see the API documentation for :func:`~eval`.\n |      For detailed examples see :ref:`enhancing performance with eval\n |      &lt;enhancingperf.eval&gt;`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n |      &gt;&gt;&gt; df\n |         A   B\n |      0  1  10\n |      1  2   8\n |      2  3   6\n |      3  4   4\n |      4  5   2\n |      &gt;&gt;&gt; df.eval('A + B')\n |      0    11\n |      1    10\n |      2     9\n |      3     8\n |      4     7\n |      dtype: int64\n |\n |      Assignment is allowed though by default the original DataFrame is not\n |      modified.\n |\n |      &gt;&gt;&gt; df.eval('C = A + B')\n |         A   B   C\n |      0  1  10  11\n |      1  2   8  10\n |      2  3   6   9\n |      3  4   4   8\n |      4  5   2   7\n |      &gt;&gt;&gt; df\n |         A   B\n |      0  1  10\n |      1  2   8\n |      2  3   6\n |      3  4   4\n |      4  5   2\n |\n |      Multiple columns can be assigned to using multi-line expressions:\n |\n |      &gt;&gt;&gt; df.eval(\n |      ...     '''\n |      ... C = A + B\n |      ... D = A - B\n |      ... '''\n |      ... )\n |         A   B   C  D\n |      0  1  10  11 -9\n |      1  2   8  10 -6\n |      2  3   6   9 -3\n |      3  4   4   8  0\n |      4  5   2   7  3\n |\n |  explode(self, column: 'IndexLabel', ignore_index: 'bool' = False) -&gt; 'DataFrame'\n |      Transform each element of a list-like to a row, replicating index values.\n |\n |      Parameters\n |      ----------\n |      column : IndexLabel\n |          Column(s) to explode.\n |          For multiple columns, specify a non-empty list with each element\n |          be str or tuple, and all specified columns their list-like data\n |          on same row of the frame must have matching length.\n |\n |          .. versionadded:: 1.3.0\n |              Multi-column explode\n |\n |      ignore_index : bool, default False\n |          If True, the resulting index will be labeled 0, 1, …, n - 1.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Exploded lists to rows of the subset columns;\n |          index will be duplicated for these rows.\n |\n |      Raises\n |      ------\n |      ValueError :\n |          * If columns of the frame are not unique.\n |          * If specified columns to explode is empty list.\n |          * If specified columns to explode have not matching count of\n |            elements rowwise in the frame.\n |\n |      See Also\n |      --------\n |      DataFrame.unstack : Pivot a level of the (necessarily hierarchical)\n |          index labels.\n |      DataFrame.melt : Unpivot a DataFrame from wide format to long format.\n |      Series.explode : Explode a DataFrame from list-like columns to long format.\n |\n |      Notes\n |      -----\n |      This routine will explode list-likes including lists, tuples, sets,\n |      Series, and np.ndarray. The result dtype of the subset rows will\n |      be object. Scalars will be returned unchanged, and empty list-likes will\n |      result in a np.nan for that row. In addition, the ordering of rows in the\n |      output will be non-deterministic when exploding sets.\n |\n |      Reference :ref:`the user guide &lt;reshaping.explode&gt;` for more examples.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [[0, 1, 2], 'foo', [], [3, 4]],\n |      ...                    'B': 1,\n |      ...                    'C': [['a', 'b', 'c'], np.nan, [], ['d', 'e']]})\n |      &gt;&gt;&gt; df\n |                 A  B          C\n |      0  [0, 1, 2]  1  [a, b, c]\n |      1        foo  1        NaN\n |      2         []  1         []\n |      3     [3, 4]  1     [d, e]\n |\n |      Single-column explode.\n |\n |      &gt;&gt;&gt; df.explode('A')\n |           A  B          C\n |      0    0  1  [a, b, c]\n |      0    1  1  [a, b, c]\n |      0    2  1  [a, b, c]\n |      1  foo  1        NaN\n |      2  NaN  1         []\n |      3    3  1     [d, e]\n |      3    4  1     [d, e]\n |\n |      Multi-column explode.\n |\n |      &gt;&gt;&gt; df.explode(list('AC'))\n |           A  B    C\n |      0    0  1    a\n |      0    1  1    b\n |      0    2  1    c\n |      1  foo  1  NaN\n |      2  NaN  1  NaN\n |      3    3  1    d\n |      3    4  1    e\n |\n |  floordiv(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |      Get Integer division of dataframe and other, element-wise (binary operator `floordiv`).\n |\n |      Equivalent to ``dataframe // other``, but with support to substitute a fill_value\n |      for missing data in one of the inputs. With reverse version, `rfloordiv`.\n |\n |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\n |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}\n |          Whether to compare by the index (0 or 'index') or columns.\n |          (1 or 'columns'). For Series input, axis to match Series index on.\n |      level : int or label\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : float or None, default None\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful DataFrame alignment, with this value before computation.\n |          If data in both corresponding DataFrame locations is missing\n |          the result will be missing.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Result of the arithmetic operation.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add DataFrames.\n |      DataFrame.sub : Subtract DataFrames.\n |      DataFrame.mul : Multiply DataFrames.\n |      DataFrame.div : Divide DataFrames (float division).\n |      DataFrame.truediv : Divide DataFrames (float division).\n |      DataFrame.floordiv : Divide DataFrames (integer division).\n |      DataFrame.mod : Calculate modulo (remainder after division).\n |      DataFrame.pow : Calculate exponential power.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n |      ...                    'degrees': [360, 180, 360]},\n |      ...                   index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; df\n |                 angles  degrees\n |      circle          0      360\n |      triangle        3      180\n |      rectangle       4      360\n |\n |      Add a scalar with operator version which return the same\n |      results.\n |\n |      &gt;&gt;&gt; df + 1\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      &gt;&gt;&gt; df.add(1)\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      Divide by constant with reverse version.\n |\n |      &gt;&gt;&gt; df.div(10)\n |                 angles  degrees\n |      circle        0.0     36.0\n |      triangle      0.3     18.0\n |      rectangle     0.4     36.0\n |\n |      &gt;&gt;&gt; df.rdiv(10)\n |                   angles   degrees\n |      circle          inf  0.027778\n |      triangle   3.333333  0.055556\n |      rectangle  2.500000  0.027778\n |\n |      Subtract a list and Series by axis with operator version.\n |\n |      &gt;&gt;&gt; df - [1, 2]\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub([1, 2], axis='columns')\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n |      ...        axis='index')\n |                 angles  degrees\n |      circle         -1      359\n |      triangle        2      179\n |      rectangle       3      359\n |\n |      Multiply a dictionary by axis.\n |\n |      &gt;&gt;&gt; df.mul({'angles': 0, 'degrees': 2})\n |                  angles  degrees\n |      circle           0      720\n |      triangle         0      360\n |      rectangle        0      720\n |\n |      &gt;&gt;&gt; df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n |                  angles  degrees\n |      circle           0        0\n |      triangle         6      360\n |      rectangle       12     1080\n |\n |      Multiply a DataFrame of different shape with operator version.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'angles': [0, 3, 4]},\n |      ...                      index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; other\n |                 angles\n |      circle          0\n |      triangle        3\n |      rectangle       4\n |\n |      &gt;&gt;&gt; df * other\n |                 angles  degrees\n |      circle          0      NaN\n |      triangle        9      NaN\n |      rectangle      16      NaN\n |\n |      &gt;&gt;&gt; df.mul(other, fill_value=0)\n |                 angles  degrees\n |      circle          0      0.0\n |      triangle        9      0.0\n |      rectangle      16      0.0\n |\n |      Divide by a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},\n |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n |      ...                                    ['circle', 'triangle', 'rectangle',\n |      ...                                     'square', 'pentagon', 'hexagon']])\n |      &gt;&gt;&gt; df_multindex\n |                   angles  degrees\n |      A circle          0      360\n |        triangle        3      180\n |        rectangle       4      360\n |      B square          4      360\n |        pentagon        5      540\n |        hexagon         6      720\n |\n |      &gt;&gt;&gt; df.div(df_multindex, level=1, fill_value=0)\n |                   angles  degrees\n |      A circle        NaN      1.0\n |        triangle      1.0      1.0\n |        rectangle     1.0      1.0\n |      B square        0.0      0.0\n |        pentagon      0.0      0.0\n |        hexagon       0.0      0.0\n |\n |  ge(self, other, axis: 'Axis' = 'columns', level=None) -&gt; 'DataFrame'\n |      Get Greater than or equal to of dataframe and other, element-wise (binary operator `ge`).\n |\n |      Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\n |      operators.\n |\n |      Equivalent to `==`, `!=`, `&lt;=`, `&lt;`, `&gt;=`, `&gt;` with support to choose axis\n |      (rows or columns) and level for comparison.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}, default 'columns'\n |          Whether to compare by the index (0 or 'index') or columns\n |          (1 or 'columns').\n |      level : int or label\n |          Broadcast across a level, matching Index values on the passed\n |          MultiIndex level.\n |\n |      Returns\n |      -------\n |      DataFrame of bool\n |          Result of the comparison.\n |\n |      See Also\n |      --------\n |      DataFrame.eq : Compare DataFrames for equality elementwise.\n |      DataFrame.ne : Compare DataFrames for inequality elementwise.\n |      DataFrame.le : Compare DataFrames for less than inequality\n |          or equality elementwise.\n |      DataFrame.lt : Compare DataFrames for strictly less than\n |          inequality elementwise.\n |      DataFrame.ge : Compare DataFrames for greater than inequality\n |          or equality elementwise.\n |      DataFrame.gt : Compare DataFrames for strictly greater than\n |          inequality elementwise.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |      `NaN` values are considered different (i.e. `NaN` != `NaN`).\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'cost': [250, 150, 100],\n |      ...                    'revenue': [100, 250, 300]},\n |      ...                   index=['A', 'B', 'C'])\n |      &gt;&gt;&gt; df\n |         cost  revenue\n |      A   250      100\n |      B   150      250\n |      C   100      300\n |\n |      Comparison with a scalar, using either the operator or method:\n |\n |      &gt;&gt;&gt; df == 100\n |          cost  revenue\n |      A  False     True\n |      B  False    False\n |      C   True    False\n |\n |      &gt;&gt;&gt; df.eq(100)\n |          cost  revenue\n |      A  False     True\n |      B  False    False\n |      C   True    False\n |\n |      When `other` is a :class:`Series`, the columns of a DataFrame are aligned\n |      with the index of `other` and broadcast:\n |\n |      &gt;&gt;&gt; df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n |          cost  revenue\n |      A   True     True\n |      B   True    False\n |      C  False     True\n |\n |      Use the method to control the broadcast axis:\n |\n |      &gt;&gt;&gt; df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n |         cost  revenue\n |      A  True    False\n |      B  True     True\n |      C  True     True\n |      D  True     True\n |\n |      When comparing to an arbitrary sequence, the number of columns must\n |      match the number elements in `other`:\n |\n |      &gt;&gt;&gt; df == [250, 100]\n |          cost  revenue\n |      A   True     True\n |      B  False    False\n |      C  False    False\n |\n |      Use the method to control the axis:\n |\n |      &gt;&gt;&gt; df.eq([250, 250, 100], axis='index')\n |          cost  revenue\n |      A   True    False\n |      B  False     True\n |      C   True    False\n |\n |      Compare to a DataFrame of different shape.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n |      ...                      index=['A', 'B', 'C', 'D'])\n |      &gt;&gt;&gt; other\n |         revenue\n |      A      300\n |      B      250\n |      C      100\n |      D      150\n |\n |      &gt;&gt;&gt; df.gt(other)\n |          cost  revenue\n |      A  False    False\n |      B  False    False\n |      C  False     True\n |      D  False    False\n |\n |      Compare to a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n |      ...                              'revenue': [100, 250, 300, 200, 175, 225]},\n |      ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n |      ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n |      &gt;&gt;&gt; df_multindex\n |            cost  revenue\n |      Q1 A   250      100\n |         B   150      250\n |         C   100      300\n |      Q2 A   150      200\n |         B   300      175\n |         C   220      225\n |\n |      &gt;&gt;&gt; df.le(df_multindex, level=1)\n |             cost  revenue\n |      Q1 A   True     True\n |         B   True     True\n |         C   True     True\n |      Q2 A  False     True\n |         B   True    False\n |         C   True    False\n |\n |  groupby(self, by=None, axis: 'Axis | lib.NoDefault' = &lt;no_default&gt;, level: 'IndexLabel | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, observed: 'bool | lib.NoDefault' = &lt;no_default&gt;, dropna: 'bool' = True) -&gt; 'DataFrameGroupBy'\n |      Group DataFrame using a mapper or by a Series of columns.\n |\n |      A groupby operation involves some combination of splitting the\n |      object, applying a function, and combining the results. This can be\n |      used to group large amounts of data and compute operations on these\n |      groups.\n |\n |      Parameters\n |      ----------\n |      by : mapping, function, label, pd.Grouper or list of such\n |          Used to determine the groups for the groupby.\n |          If ``by`` is a function, it's called on each value of the object's\n |          index. If a dict or Series is passed, the Series or dict VALUES\n |          will be used to determine the groups (the Series' values are first\n |          aligned; see ``.align()`` method). If a list or ndarray of length\n |          equal to the selected axis is passed (see the `groupby user guide\n |          &lt;https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#splitting-an-object-into-groups&gt;`_),\n |          the values are used as-is to determine the groups. A label or list\n |          of labels may be passed to group by the columns in ``self``.\n |          Notice that a tuple is interpreted as a (single) key.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Split along rows (0) or columns (1). For `Series` this parameter\n |          is unused and defaults to 0.\n |\n |          .. deprecated:: 2.1.0\n |\n |              Will be removed and behave like axis=0 in a future version.\n |              For ``axis=1``, do ``frame.T.groupby(...)`` instead.\n |\n |      level : int, level name, or sequence of such, default None\n |          If the axis is a MultiIndex (hierarchical), group by a particular\n |          level or levels. Do not specify both ``by`` and ``level``.\n |      as_index : bool, default True\n |          Return object with group labels as the\n |          index. Only relevant for DataFrame input. as_index=False is\n |          effectively \"SQL-style\" grouped output. This argument has no effect\n |          on filtrations (see the `filtrations in the user guide\n |          &lt;https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration&gt;`_),\n |          such as ``head()``, ``tail()``, ``nth()`` and in transformations\n |          (see the `transformations in the user guide\n |          &lt;https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation&gt;`_).\n |      sort : bool, default True\n |          Sort group keys. Get better performance by turning this off.\n |          Note this does not influence the order of observations within each\n |          group. Groupby preserves the order of rows within each group. If False,\n |          the groups will appear in the same order as they did in the original DataFrame.\n |          This argument has no effect on filtrations (see the `filtrations in the user guide\n |          &lt;https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration&gt;`_),\n |          such as ``head()``, ``tail()``, ``nth()`` and in transformations\n |          (see the `transformations in the user guide\n |          &lt;https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation&gt;`_).\n |\n |          .. versionchanged:: 2.0.0\n |\n |              Specifying ``sort=False`` with an ordered categorical grouper will no\n |              longer sort the values.\n |\n |      group_keys : bool, default True\n |          When calling apply and the ``by`` argument produces a like-indexed\n |          (i.e. :ref:`a transform &lt;groupby.transform&gt;`) result, add group keys to\n |          index to identify pieces. By default group keys are not included\n |          when the result's index (and column) labels match the inputs, and\n |          are included otherwise.\n |\n |          .. versionchanged:: 1.5.0\n |\n |             Warns that ``group_keys`` will no longer be ignored when the\n |             result from ``apply`` is a like-indexed Series or DataFrame.\n |             Specify ``group_keys`` explicitly to include the group keys or\n |             not.\n |\n |          .. versionchanged:: 2.0.0\n |\n |             ``group_keys`` now defaults to ``True``.\n |\n |      observed : bool, default False\n |          This only applies if any of the groupers are Categoricals.\n |          If True: only show observed values for categorical groupers.\n |          If False: show all values for categorical groupers.\n |\n |          .. deprecated:: 2.1.0\n |\n |              The default value will change to True in a future version of pandas.\n |\n |      dropna : bool, default True\n |          If True, and if group keys contain NA values, NA values together\n |          with row/column will be dropped.\n |          If False, NA values will also be treated as the key in groups.\n |\n |      Returns\n |      -------\n |      pandas.api.typing.DataFrameGroupBy\n |          Returns a groupby object that contains information about the groups.\n |\n |      See Also\n |      --------\n |      resample : Convenience method for frequency conversion and resampling\n |          of time series.\n |\n |      Notes\n |      -----\n |      See the `user guide\n |      &lt;https://pandas.pydata.org/pandas-docs/stable/groupby.html&gt;`__ for more\n |      detailed usage and examples, including splitting an object into groups,\n |      iterating through groups, selecting a group, aggregation, and more.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n |      ...                               'Parrot', 'Parrot'],\n |      ...                    'Max Speed': [380., 370., 24., 26.]})\n |      &gt;&gt;&gt; df\n |         Animal  Max Speed\n |      0  Falcon      380.0\n |      1  Falcon      370.0\n |      2  Parrot       24.0\n |      3  Parrot       26.0\n |      &gt;&gt;&gt; df.groupby(['Animal']).mean()\n |              Max Speed\n |      Animal\n |      Falcon      375.0\n |      Parrot       25.0\n |\n |      **Hierarchical Indexes**\n |\n |      We can groupby different levels of a hierarchical index\n |      using the `level` parameter:\n |\n |      &gt;&gt;&gt; arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n |      ...           ['Captive', 'Wild', 'Captive', 'Wild']]\n |      &gt;&gt;&gt; index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\n |      &gt;&gt;&gt; df = pd.DataFrame({'Max Speed': [390., 350., 30., 20.]},\n |      ...                   index=index)\n |      &gt;&gt;&gt; df\n |                      Max Speed\n |      Animal Type\n |      Falcon Captive      390.0\n |             Wild         350.0\n |      Parrot Captive       30.0\n |             Wild          20.0\n |      &gt;&gt;&gt; df.groupby(level=0).mean()\n |              Max Speed\n |      Animal\n |      Falcon      370.0\n |      Parrot       25.0\n |      &gt;&gt;&gt; df.groupby(level=\"Type\").mean()\n |               Max Speed\n |      Type\n |      Captive      210.0\n |      Wild         185.0\n |\n |      We can also choose to include NA in group keys or not by setting\n |      `dropna` parameter, the default setting is `True`.\n |\n |      &gt;&gt;&gt; l = [[1, 2, 3], [1, None, 4], [2, 1, 3], [1, 2, 2]]\n |      &gt;&gt;&gt; df = pd.DataFrame(l, columns=[\"a\", \"b\", \"c\"])\n |\n |      &gt;&gt;&gt; df.groupby(by=[\"b\"]).sum()\n |          a   c\n |      b\n |      1.0 2   3\n |      2.0 2   5\n |\n |      &gt;&gt;&gt; df.groupby(by=[\"b\"], dropna=False).sum()\n |          a   c\n |      b\n |      1.0 2   3\n |      2.0 2   5\n |      NaN 1   4\n |\n |      &gt;&gt;&gt; l = [[\"a\", 12, 12], [None, 12.3, 33.], [\"b\", 12.3, 123], [\"a\", 1, 1]]\n |      &gt;&gt;&gt; df = pd.DataFrame(l, columns=[\"a\", \"b\", \"c\"])\n |\n |      &gt;&gt;&gt; df.groupby(by=\"a\").sum()\n |          b     c\n |      a\n |      a   13.0   13.0\n |      b   12.3  123.0\n |\n |      &gt;&gt;&gt; df.groupby(by=\"a\", dropna=False).sum()\n |          b     c\n |      a\n |      a   13.0   13.0\n |      b   12.3  123.0\n |      NaN 12.3   33.0\n |\n |      When using ``.apply()``, use ``group_keys`` to include or exclude the\n |      group keys. The ``group_keys`` argument defaults to ``True`` (include).\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n |      ...                               'Parrot', 'Parrot'],\n |      ...                    'Max Speed': [380., 370., 24., 26.]})\n |      &gt;&gt;&gt; df.groupby(\"Animal\", group_keys=True)[['Max Speed']].apply(lambda x: x)\n |                Max Speed\n |      Animal\n |      Falcon 0      380.0\n |             1      370.0\n |      Parrot 2       24.0\n |             3       26.0\n |\n |      &gt;&gt;&gt; df.groupby(\"Animal\", group_keys=False)[['Max Speed']].apply(lambda x: x)\n |         Max Speed\n |      0      380.0\n |      1      370.0\n |      2       24.0\n |      3       26.0\n |\n |  gt(self, other, axis: 'Axis' = 'columns', level=None) -&gt; 'DataFrame'\n |      Get Greater than of dataframe and other, element-wise (binary operator `gt`).\n |\n |      Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\n |      operators.\n |\n |      Equivalent to `==`, `!=`, `&lt;=`, `&lt;`, `&gt;=`, `&gt;` with support to choose axis\n |      (rows or columns) and level for comparison.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}, default 'columns'\n |          Whether to compare by the index (0 or 'index') or columns\n |          (1 or 'columns').\n |      level : int or label\n |          Broadcast across a level, matching Index values on the passed\n |          MultiIndex level.\n |\n |      Returns\n |      -------\n |      DataFrame of bool\n |          Result of the comparison.\n |\n |      See Also\n |      --------\n |      DataFrame.eq : Compare DataFrames for equality elementwise.\n |      DataFrame.ne : Compare DataFrames for inequality elementwise.\n |      DataFrame.le : Compare DataFrames for less than inequality\n |          or equality elementwise.\n |      DataFrame.lt : Compare DataFrames for strictly less than\n |          inequality elementwise.\n |      DataFrame.ge : Compare DataFrames for greater than inequality\n |          or equality elementwise.\n |      DataFrame.gt : Compare DataFrames for strictly greater than\n |          inequality elementwise.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |      `NaN` values are considered different (i.e. `NaN` != `NaN`).\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'cost': [250, 150, 100],\n |      ...                    'revenue': [100, 250, 300]},\n |      ...                   index=['A', 'B', 'C'])\n |      &gt;&gt;&gt; df\n |         cost  revenue\n |      A   250      100\n |      B   150      250\n |      C   100      300\n |\n |      Comparison with a scalar, using either the operator or method:\n |\n |      &gt;&gt;&gt; df == 100\n |          cost  revenue\n |      A  False     True\n |      B  False    False\n |      C   True    False\n |\n |      &gt;&gt;&gt; df.eq(100)\n |          cost  revenue\n |      A  False     True\n |      B  False    False\n |      C   True    False\n |\n |      When `other` is a :class:`Series`, the columns of a DataFrame are aligned\n |      with the index of `other` and broadcast:\n |\n |      &gt;&gt;&gt; df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n |          cost  revenue\n |      A   True     True\n |      B   True    False\n |      C  False     True\n |\n |      Use the method to control the broadcast axis:\n |\n |      &gt;&gt;&gt; df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n |         cost  revenue\n |      A  True    False\n |      B  True     True\n |      C  True     True\n |      D  True     True\n |\n |      When comparing to an arbitrary sequence, the number of columns must\n |      match the number elements in `other`:\n |\n |      &gt;&gt;&gt; df == [250, 100]\n |          cost  revenue\n |      A   True     True\n |      B  False    False\n |      C  False    False\n |\n |      Use the method to control the axis:\n |\n |      &gt;&gt;&gt; df.eq([250, 250, 100], axis='index')\n |          cost  revenue\n |      A   True    False\n |      B  False     True\n |      C   True    False\n |\n |      Compare to a DataFrame of different shape.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n |      ...                      index=['A', 'B', 'C', 'D'])\n |      &gt;&gt;&gt; other\n |         revenue\n |      A      300\n |      B      250\n |      C      100\n |      D      150\n |\n |      &gt;&gt;&gt; df.gt(other)\n |          cost  revenue\n |      A  False    False\n |      B  False    False\n |      C  False     True\n |      D  False    False\n |\n |      Compare to a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n |      ...                              'revenue': [100, 250, 300, 200, 175, 225]},\n |      ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n |      ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n |      &gt;&gt;&gt; df_multindex\n |            cost  revenue\n |      Q1 A   250      100\n |         B   150      250\n |         C   100      300\n |      Q2 A   150      200\n |         B   300      175\n |         C   220      225\n |\n |      &gt;&gt;&gt; df.le(df_multindex, level=1)\n |             cost  revenue\n |      Q1 A   True     True\n |         B   True     True\n |         C   True     True\n |      Q2 A  False     True\n |         B   True    False\n |         C   True    False\n |\n |  hist = hist_frame(data: 'DataFrame', column: 'IndexLabel | None' = None, by=None, grid: 'bool' = True, xlabelsize: 'int | None' = None, xrot: 'float | None' = None, ylabelsize: 'int | None' = None, yrot: 'float | None' = None, ax=None, sharex: 'bool' = False, sharey: 'bool' = False, figsize: 'tuple[int, int] | None' = None, layout: 'tuple[int, int] | None' = None, bins: 'int | Sequence[int]' = 10, backend: 'str | None' = None, legend: 'bool' = False, **kwargs) from pandas.plotting._core\n |      Make a histogram of the DataFrame's columns.\n |\n |      A `histogram`_ is a representation of the distribution of data.\n |      This function calls :meth:`matplotlib.pyplot.hist`, on each series in\n |      the DataFrame, resulting in one histogram per column.\n |\n |      .. _histogram: https://en.wikipedia.org/wiki/Histogram\n |\n |      Parameters\n |      ----------\n |      data : DataFrame\n |          The pandas object holding the data.\n |      column : str or sequence, optional\n |          If passed, will be used to limit data to a subset of columns.\n |      by : object, optional\n |          If passed, then used to form histograms for separate groups.\n |      grid : bool, default True\n |          Whether to show axis grid lines.\n |      xlabelsize : int, default None\n |          If specified changes the x-axis label size.\n |      xrot : float, default None\n |          Rotation of x axis labels. For example, a value of 90 displays the\n |          x labels rotated 90 degrees clockwise.\n |      ylabelsize : int, default None\n |          If specified changes the y-axis label size.\n |      yrot : float, default None\n |          Rotation of y axis labels. For example, a value of 90 displays the\n |          y labels rotated 90 degrees clockwise.\n |      ax : Matplotlib axes object, default None\n |          The axes to plot the histogram on.\n |      sharex : bool, default True if ax is None else False\n |          In case subplots=True, share x axis and set some x axis labels to\n |          invisible; defaults to True if ax is None otherwise False if an ax\n |          is passed in.\n |          Note that passing in both an ax and sharex=True will alter all x axis\n |          labels for all subplots in a figure.\n |      sharey : bool, default False\n |          In case subplots=True, share y axis and set some y axis labels to\n |          invisible.\n |      figsize : tuple, optional\n |          The size in inches of the figure to create. Uses the value in\n |          `matplotlib.rcParams` by default.\n |      layout : tuple, optional\n |          Tuple of (rows, columns) for the layout of the histograms.\n |      bins : int or sequence, default 10\n |          Number of histogram bins to be used. If an integer is given, bins + 1\n |          bin edges are calculated and returned. If bins is a sequence, gives\n |          bin edges, including left edge of first bin and right edge of last\n |          bin. In this case, bins is returned unmodified.\n |\n |      backend : str, default None\n |          Backend to use instead of the backend specified in the option\n |          ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to\n |          specify the ``plotting.backend`` for the whole session, set\n |          ``pd.options.plotting.backend``.\n |\n |      legend : bool, default False\n |          Whether to show the legend.\n |\n |      **kwargs\n |          All other plotting keyword arguments to be passed to\n |          :meth:`matplotlib.pyplot.hist`.\n |\n |      Returns\n |      -------\n |      matplotlib.AxesSubplot or numpy.ndarray of them\n |\n |      See Also\n |      --------\n |      matplotlib.pyplot.hist : Plot a histogram using matplotlib.\n |\n |      Examples\n |      --------\n |      This example draws a histogram based on the length and width of\n |      some animals, displayed in three bins\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; data = {'length': [1.5, 0.5, 1.2, 0.9, 3],\n |          ...         'width': [0.7, 0.2, 0.15, 0.2, 1.1]}\n |          &gt;&gt;&gt; index = ['pig', 'rabbit', 'duck', 'chicken', 'horse']\n |          &gt;&gt;&gt; df = pd.DataFrame(data, index=index)\n |          &gt;&gt;&gt; hist = df.hist(bins=3)\n |\n |  idxmax(self, axis: 'Axis' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False) -&gt; 'Series'\n |      Return index of first occurrence of maximum over requested axis.\n |\n |      NA/null values are excluded.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      numeric_only : bool, default False\n |          Include only `float`, `int` or `boolean` data.\n |\n |          .. versionadded:: 1.5.0\n |\n |      Returns\n |      -------\n |      Series\n |          Indexes of maxima along the specified axis.\n |\n |      Raises\n |      ------\n |      ValueError\n |          * If the row/column is empty\n |\n |      See Also\n |      --------\n |      Series.idxmax : Return index of the maximum element.\n |\n |      Notes\n |      -----\n |      This method is the DataFrame version of ``ndarray.argmax``.\n |\n |      Examples\n |      --------\n |      Consider a dataset containing food consumption in Argentina.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'consumption': [10.51, 103.11, 55.48],\n |      ...                     'co2_emissions': [37.2, 19.66, 1712]},\n |      ...                   index=['Pork', 'Wheat Products', 'Beef'])\n |\n |      &gt;&gt;&gt; df\n |                      consumption  co2_emissions\n |      Pork                  10.51         37.20\n |      Wheat Products       103.11         19.66\n |      Beef                  55.48       1712.00\n |\n |      By default, it returns the index for the maximum value in each column.\n |\n |      &gt;&gt;&gt; df.idxmax()\n |      consumption     Wheat Products\n |      co2_emissions             Beef\n |      dtype: object\n |\n |      To return the index for the maximum value in each row, use ``axis=\"columns\"``.\n |\n |      &gt;&gt;&gt; df.idxmax(axis=\"columns\")\n |      Pork              co2_emissions\n |      Wheat Products     consumption\n |      Beef              co2_emissions\n |      dtype: object\n |\n |  idxmin(self, axis: 'Axis' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False) -&gt; 'Series'\n |      Return index of first occurrence of minimum over requested axis.\n |\n |      NA/null values are excluded.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      numeric_only : bool, default False\n |          Include only `float`, `int` or `boolean` data.\n |\n |          .. versionadded:: 1.5.0\n |\n |      Returns\n |      -------\n |      Series\n |          Indexes of minima along the specified axis.\n |\n |      Raises\n |      ------\n |      ValueError\n |          * If the row/column is empty\n |\n |      See Also\n |      --------\n |      Series.idxmin : Return index of the minimum element.\n |\n |      Notes\n |      -----\n |      This method is the DataFrame version of ``ndarray.argmin``.\n |\n |      Examples\n |      --------\n |      Consider a dataset containing food consumption in Argentina.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'consumption': [10.51, 103.11, 55.48],\n |      ...                     'co2_emissions': [37.2, 19.66, 1712]},\n |      ...                   index=['Pork', 'Wheat Products', 'Beef'])\n |\n |      &gt;&gt;&gt; df\n |                      consumption  co2_emissions\n |      Pork                  10.51         37.20\n |      Wheat Products       103.11         19.66\n |      Beef                  55.48       1712.00\n |\n |      By default, it returns the index for the minimum value in each column.\n |\n |      &gt;&gt;&gt; df.idxmin()\n |      consumption                Pork\n |      co2_emissions    Wheat Products\n |      dtype: object\n |\n |      To return the index for the minimum value in each row, use ``axis=\"columns\"``.\n |\n |      &gt;&gt;&gt; df.idxmin(axis=\"columns\")\n |      Pork                consumption\n |      Wheat Products    co2_emissions\n |      Beef                consumption\n |      dtype: object\n |\n |  info(self, verbose: 'bool | None' = None, buf: 'WriteBuffer[str] | None' = None, max_cols: 'int | None' = None, memory_usage: 'bool | str | None' = None, show_counts: 'bool | None' = None) -&gt; 'None'\n |      Print a concise summary of a DataFrame.\n |\n |      This method prints information about a DataFrame including\n |      the index dtype and columns, non-null values and memory usage.\n |\n |      Parameters\n |      ----------\n |      verbose : bool, optional\n |          Whether to print the full summary. By default, the setting in\n |          ``pandas.options.display.max_info_columns`` is followed.\n |      buf : writable buffer, defaults to sys.stdout\n |          Where to send the output. By default, the output is printed to\n |          sys.stdout. Pass a writable buffer if you need to further process\n |          the output.\n |      max_cols : int, optional\n |          When to switch from the verbose to the truncated output. If the\n |          DataFrame has more than `max_cols` columns, the truncated output\n |          is used. By default, the setting in\n |          ``pandas.options.display.max_info_columns`` is used.\n |      memory_usage : bool, str, optional\n |          Specifies whether total memory usage of the DataFrame\n |          elements (including the index) should be displayed. By default,\n |          this follows the ``pandas.options.display.memory_usage`` setting.\n |\n |          True always show memory usage. False never shows memory usage.\n |          A value of 'deep' is equivalent to \"True with deep introspection\".\n |          Memory usage is shown in human-readable units (base-2\n |          representation). Without deep introspection a memory estimation is\n |          made based in column dtype and number of rows assuming values\n |          consume the same memory amount for corresponding dtypes. With deep\n |          memory introspection, a real memory usage calculation is performed\n |          at the cost of computational resources. See the\n |          :ref:`Frequently Asked Questions &lt;df-memory-usage&gt;` for more\n |          details.\n |      show_counts : bool, optional\n |          Whether to show the non-null counts. By default, this is shown\n |          only if the DataFrame is smaller than\n |          ``pandas.options.display.max_info_rows`` and\n |          ``pandas.options.display.max_info_columns``. A value of True always\n |          shows the counts, and False never shows the counts.\n |\n |      Returns\n |      -------\n |      None\n |          This method prints a summary of a DataFrame and returns None.\n |\n |      See Also\n |      --------\n |      DataFrame.describe: Generate descriptive statistics of DataFrame\n |          columns.\n |      DataFrame.memory_usage: Memory usage of DataFrame columns.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; int_values = [1, 2, 3, 4, 5]\n |      &gt;&gt;&gt; text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n |      &gt;&gt;&gt; float_values = [0.0, 0.25, 0.5, 0.75, 1.0]\n |      &gt;&gt;&gt; df = pd.DataFrame({\"int_col\": int_values, \"text_col\": text_values,\n |      ...                   \"float_col\": float_values})\n |      &gt;&gt;&gt; df\n |          int_col text_col  float_col\n |      0        1    alpha       0.00\n |      1        2     beta       0.25\n |      2        3    gamma       0.50\n |      3        4    delta       0.75\n |      4        5  epsilon       1.00\n |\n |      Prints information of all columns:\n |\n |      &gt;&gt;&gt; df.info(verbose=True)\n |      &lt;class 'pandas.core.frame.DataFrame'&gt;\n |      RangeIndex: 5 entries, 0 to 4\n |      Data columns (total 3 columns):\n |       #   Column     Non-Null Count  Dtype\n |      ---  ------     --------------  -----\n |       0   int_col    5 non-null      int64\n |       1   text_col   5 non-null      object\n |       2   float_col  5 non-null      float64\n |      dtypes: float64(1), int64(1), object(1)\n |      memory usage: 248.0+ bytes\n |\n |      Prints a summary of columns count and its dtypes but not per column\n |      information:\n |\n |      &gt;&gt;&gt; df.info(verbose=False)\n |      &lt;class 'pandas.core.frame.DataFrame'&gt;\n |      RangeIndex: 5 entries, 0 to 4\n |      Columns: 3 entries, int_col to float_col\n |      dtypes: float64(1), int64(1), object(1)\n |      memory usage: 248.0+ bytes\n |\n |      Pipe output of DataFrame.info to buffer instead of sys.stdout, get\n |      buffer content and writes to a text file:\n |\n |      &gt;&gt;&gt; import io\n |      &gt;&gt;&gt; buffer = io.StringIO()\n |      &gt;&gt;&gt; df.info(buf=buffer)\n |      &gt;&gt;&gt; s = buffer.getvalue()\n |      &gt;&gt;&gt; with open(\"df_info.txt\", \"w\",\n |      ...           encoding=\"utf-8\") as f:  # doctest: +SKIP\n |      ...     f.write(s)\n |      260\n |\n |      The `memory_usage` parameter allows deep introspection mode, specially\n |      useful for big DataFrames and fine-tune memory optimization:\n |\n |      &gt;&gt;&gt; random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     'column_1': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n |      ...     'column_2': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n |      ...     'column_3': np.random.choice(['a', 'b', 'c'], 10 ** 6)\n |      ... })\n |      &gt;&gt;&gt; df.info()\n |      &lt;class 'pandas.core.frame.DataFrame'&gt;\n |      RangeIndex: 1000000 entries, 0 to 999999\n |      Data columns (total 3 columns):\n |       #   Column    Non-Null Count    Dtype\n |      ---  ------    --------------    -----\n |       0   column_1  1000000 non-null  object\n |       1   column_2  1000000 non-null  object\n |       2   column_3  1000000 non-null  object\n |      dtypes: object(3)\n |      memory usage: 22.9+ MB\n |\n |      &gt;&gt;&gt; df.info(memory_usage='deep')\n |      &lt;class 'pandas.core.frame.DataFrame'&gt;\n |      RangeIndex: 1000000 entries, 0 to 999999\n |      Data columns (total 3 columns):\n |       #   Column    Non-Null Count    Dtype\n |      ---  ------    --------------    -----\n |       0   column_1  1000000 non-null  object\n |       1   column_2  1000000 non-null  object\n |       2   column_3  1000000 non-null  object\n |      dtypes: object(3)\n |      memory usage: 165.9 MB\n |\n |  insert(self, loc: 'int', column: 'Hashable', value: 'Scalar | AnyArrayLike', allow_duplicates: 'bool | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'None'\n |      Insert column into DataFrame at specified location.\n |\n |      Raises a ValueError if `column` is already contained in the DataFrame,\n |      unless `allow_duplicates` is set to True.\n |\n |      Parameters\n |      ----------\n |      loc : int\n |          Insertion index. Must verify 0 &lt;= loc &lt;= len(columns).\n |      column : str, number, or hashable object\n |          Label of the inserted column.\n |      value : Scalar, Series, or array-like\n |          Content of the inserted column.\n |      allow_duplicates : bool, optional, default lib.no_default\n |          Allow duplicate column labels to be created.\n |\n |      See Also\n |      --------\n |      Index.insert : Insert new item by index.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n |      &gt;&gt;&gt; df\n |         col1  col2\n |      0     1     3\n |      1     2     4\n |      &gt;&gt;&gt; df.insert(1, \"newcol\", [99, 99])\n |      &gt;&gt;&gt; df\n |         col1  newcol  col2\n |      0     1      99     3\n |      1     2      99     4\n |      &gt;&gt;&gt; df.insert(0, \"col1\", [100, 100], allow_duplicates=True)\n |      &gt;&gt;&gt; df\n |         col1  col1  newcol  col2\n |      0   100     1      99     3\n |      1   100     2      99     4\n |\n |      Notice that pandas uses index alignment in case of `value` from type `Series`:\n |\n |      &gt;&gt;&gt; df.insert(0, \"col0\", pd.Series([5, 6], index=[1, 2]))\n |      &gt;&gt;&gt; df\n |         col0  col1  col1  newcol  col2\n |      0   NaN   100     1      99     3\n |      1   5.0   100     2      99     4\n |\n |  isetitem(self, loc, value) -&gt; 'None'\n |      Set the given value in the column with position `loc`.\n |\n |      This is a positional analogue to ``__setitem__``.\n |\n |      Parameters\n |      ----------\n |      loc : int or sequence of ints\n |          Index position for the column.\n |      value : scalar or arraylike\n |          Value(s) for the column.\n |\n |      Notes\n |      -----\n |      ``frame.isetitem(loc, value)`` is an in-place method as it will\n |      modify the DataFrame in place (not returning a new object). In contrast to\n |      ``frame.iloc[:, i] = value`` which will try to update the existing values in\n |      place, ``frame.isetitem(loc, value)`` will not update the values of the column\n |      itself in place, it will instead insert a new array.\n |\n |      In cases where ``frame.columns`` is unique, this is equivalent to\n |      ``frame[frame.columns[i]] = value``.\n |\n |  isin(self, values: 'Series | DataFrame | Sequence | Mapping') -&gt; 'DataFrame'\n |      Whether each element in the DataFrame is contained in values.\n |\n |      Parameters\n |      ----------\n |      values : iterable, Series, DataFrame or dict\n |          The result will only be true at a location if all the\n |          labels match. If `values` is a Series, that's the index. If\n |          `values` is a dict, the keys must be the column names,\n |          which must match. If `values` is a DataFrame,\n |          then both the index and column labels must match.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          DataFrame of booleans showing whether each element in the DataFrame\n |          is contained in values.\n |\n |      See Also\n |      --------\n |      DataFrame.eq: Equality test for DataFrame.\n |      Series.isin: Equivalent method on Series.\n |      Series.str.contains: Test if pattern or regex is contained within a\n |          string of a Series or Index.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'num_legs': [2, 4], 'num_wings': [2, 0]},\n |      ...                   index=['falcon', 'dog'])\n |      &gt;&gt;&gt; df\n |              num_legs  num_wings\n |      falcon         2          2\n |      dog            4          0\n |\n |      When ``values`` is a list check whether every value in the DataFrame\n |      is present in the list (which animals have 0 or 2 legs or wings)\n |\n |      &gt;&gt;&gt; df.isin([0, 2])\n |              num_legs  num_wings\n |      falcon      True       True\n |      dog        False       True\n |\n |      To check if ``values`` is *not* in the DataFrame, use the ``~`` operator:\n |\n |      &gt;&gt;&gt; ~df.isin([0, 2])\n |              num_legs  num_wings\n |      falcon     False      False\n |      dog         True      False\n |\n |      When ``values`` is a dict, we can pass values to check for each\n |      column separately:\n |\n |      &gt;&gt;&gt; df.isin({'num_wings': [0, 3]})\n |              num_legs  num_wings\n |      falcon     False      False\n |      dog        False       True\n |\n |      When ``values`` is a Series or DataFrame the index and column must\n |      match. Note that 'falcon' does not match based on the number of legs\n |      in other.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'num_legs': [8, 3], 'num_wings': [0, 2]},\n |      ...                      index=['spider', 'falcon'])\n |      &gt;&gt;&gt; df.isin(other)\n |              num_legs  num_wings\n |      falcon     False       True\n |      dog        False      False\n |\n |  isna(self) -&gt; 'DataFrame'\n |      Detect missing values.\n |\n |      Return a boolean same-sized object indicating if the values are NA.\n |      NA values, such as None or :attr:`numpy.NaN`, gets mapped to True\n |      values.\n |      Everything else gets mapped to False values. Characters such as empty\n |      strings ``''`` or :attr:`numpy.inf` are not considered NA values\n |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Mask of bool values for each element in DataFrame that\n |          indicates whether an element is an NA value.\n |\n |      See Also\n |      --------\n |      DataFrame.isnull : Alias of isna.\n |      DataFrame.notna : Boolean inverse of isna.\n |      DataFrame.dropna : Omit axes labels with missing values.\n |      isna : Top-level isna.\n |\n |      Examples\n |      --------\n |      Show which entries in a DataFrame are NA.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame(dict(age=[5, 6, np.nan],\n |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n |      ...                              pd.Timestamp('1940-04-25')],\n |      ...                        name=['Alfred', 'Batman', ''],\n |      ...                        toy=[None, 'Batmobile', 'Joker']))\n |      &gt;&gt;&gt; df\n |         age       born    name        toy\n |      0  5.0        NaT  Alfred       None\n |      1  6.0 1939-05-27  Batman  Batmobile\n |      2  NaN 1940-04-25              Joker\n |\n |      &gt;&gt;&gt; df.isna()\n |           age   born   name    toy\n |      0  False   True  False   True\n |      1  False  False  False  False\n |      2   True  False  False  False\n |\n |      Show which entries in a Series are NA.\n |\n |      &gt;&gt;&gt; ser = pd.Series([5, 6, np.nan])\n |      &gt;&gt;&gt; ser\n |      0    5.0\n |      1    6.0\n |      2    NaN\n |      dtype: float64\n |\n |      &gt;&gt;&gt; ser.isna()\n |      0    False\n |      1    False\n |      2     True\n |      dtype: bool\n |\n |  isnull(self) -&gt; 'DataFrame'\n |      DataFrame.isnull is an alias for DataFrame.isna.\n |\n |      Detect missing values.\n |\n |      Return a boolean same-sized object indicating if the values are NA.\n |      NA values, such as None or :attr:`numpy.NaN`, gets mapped to True\n |      values.\n |      Everything else gets mapped to False values. Characters such as empty\n |      strings ``''`` or :attr:`numpy.inf` are not considered NA values\n |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Mask of bool values for each element in DataFrame that\n |          indicates whether an element is an NA value.\n |\n |      See Also\n |      --------\n |      DataFrame.isnull : Alias of isna.\n |      DataFrame.notna : Boolean inverse of isna.\n |      DataFrame.dropna : Omit axes labels with missing values.\n |      isna : Top-level isna.\n |\n |      Examples\n |      --------\n |      Show which entries in a DataFrame are NA.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame(dict(age=[5, 6, np.nan],\n |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n |      ...                              pd.Timestamp('1940-04-25')],\n |      ...                        name=['Alfred', 'Batman', ''],\n |      ...                        toy=[None, 'Batmobile', 'Joker']))\n |      &gt;&gt;&gt; df\n |         age       born    name        toy\n |      0  5.0        NaT  Alfred       None\n |      1  6.0 1939-05-27  Batman  Batmobile\n |      2  NaN 1940-04-25              Joker\n |\n |      &gt;&gt;&gt; df.isna()\n |           age   born   name    toy\n |      0  False   True  False   True\n |      1  False  False  False  False\n |      2   True  False  False  False\n |\n |      Show which entries in a Series are NA.\n |\n |      &gt;&gt;&gt; ser = pd.Series([5, 6, np.nan])\n |      &gt;&gt;&gt; ser\n |      0    5.0\n |      1    6.0\n |      2    NaN\n |      dtype: float64\n |\n |      &gt;&gt;&gt; ser.isna()\n |      0    False\n |      1    False\n |      2     True\n |      dtype: bool\n |\n |  items(self) -&gt; 'Iterable[tuple[Hashable, Series]]'\n |      Iterate over (column name, Series) pairs.\n |\n |      Iterates over the DataFrame columns, returning a tuple with\n |      the column name and the content as a Series.\n |\n |      Yields\n |      ------\n |      label : object\n |          The column names for the DataFrame being iterated over.\n |      content : Series\n |          The column entries belonging to each label, as a Series.\n |\n |      See Also\n |      --------\n |      DataFrame.iterrows : Iterate over DataFrame rows as\n |          (index, Series) pairs.\n |      DataFrame.itertuples : Iterate over DataFrame rows as namedtuples\n |          of the values.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'species': ['bear', 'bear', 'marsupial'],\n |      ...                   'population': [1864, 22000, 80000]},\n |      ...                   index=['panda', 'polar', 'koala'])\n |      &gt;&gt;&gt; df\n |              species   population\n |      panda   bear      1864\n |      polar   bear      22000\n |      koala   marsupial 80000\n |      &gt;&gt;&gt; for label, content in df.items():\n |      ...     print(f'label: {label}')\n |      ...     print(f'content: {content}', sep='\\n')\n |      ...\n |      label: species\n |      content:\n |      panda         bear\n |      polar         bear\n |      koala    marsupial\n |      Name: species, dtype: object\n |      label: population\n |      content:\n |      panda     1864\n |      polar    22000\n |      koala    80000\n |      Name: population, dtype: int64\n |\n |  iterrows(self) -&gt; 'Iterable[tuple[Hashable, Series]]'\n |      Iterate over DataFrame rows as (index, Series) pairs.\n |\n |      Yields\n |      ------\n |      index : label or tuple of label\n |          The index of the row. A tuple for a `MultiIndex`.\n |      data : Series\n |          The data of the row as a Series.\n |\n |      See Also\n |      --------\n |      DataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.\n |      DataFrame.items : Iterate over (column name, Series) pairs.\n |\n |      Notes\n |      -----\n |      1. Because ``iterrows`` returns a Series for each row,\n |         it does **not** preserve dtypes across the rows (dtypes are\n |         preserved across columns for DataFrames).\n |\n |         To preserve dtypes while iterating over the rows, it is better\n |         to use :meth:`itertuples` which returns namedtuples of the values\n |         and which is generally faster than ``iterrows``.\n |\n |      2. You should **never modify** something you are iterating over.\n |         This is not guaranteed to work in all cases. Depending on the\n |         data types, the iterator returns a copy and not a view, and writing\n |         to it will have no effect.\n |\n |      Examples\n |      --------\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n |      &gt;&gt;&gt; row = next(df.iterrows())[1]\n |      &gt;&gt;&gt; row\n |      int      1.0\n |      float    1.5\n |      Name: 0, dtype: float64\n |      &gt;&gt;&gt; print(row['int'].dtype)\n |      float64\n |      &gt;&gt;&gt; print(df['int'].dtype)\n |      int64\n |\n |  itertuples(self, index: 'bool' = True, name: 'str | None' = 'Pandas') -&gt; 'Iterable[tuple[Any, ...]]'\n |      Iterate over DataFrame rows as namedtuples.\n |\n |      Parameters\n |      ----------\n |      index : bool, default True\n |          If True, return the index as the first element of the tuple.\n |      name : str or None, default \"Pandas\"\n |          The name of the returned namedtuples or None to return regular\n |          tuples.\n |\n |      Returns\n |      -------\n |      iterator\n |          An object to iterate over namedtuples for each row in the\n |          DataFrame with the first field possibly being the index and\n |          following fields being the column values.\n |\n |      See Also\n |      --------\n |      DataFrame.iterrows : Iterate over DataFrame rows as (index, Series)\n |          pairs.\n |      DataFrame.items : Iterate over (column name, Series) pairs.\n |\n |      Notes\n |      -----\n |      The column names will be renamed to positional names if they are\n |      invalid Python identifiers, repeated, or start with an underscore.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'num_legs': [4, 2], 'num_wings': [0, 2]},\n |      ...                   index=['dog', 'hawk'])\n |      &gt;&gt;&gt; df\n |            num_legs  num_wings\n |      dog          4          0\n |      hawk         2          2\n |      &gt;&gt;&gt; for row in df.itertuples():\n |      ...     print(row)\n |      ...\n |      Pandas(Index='dog', num_legs=4, num_wings=0)\n |      Pandas(Index='hawk', num_legs=2, num_wings=2)\n |\n |      By setting the `index` parameter to False we can remove the index\n |      as the first element of the tuple:\n |\n |      &gt;&gt;&gt; for row in df.itertuples(index=False):\n |      ...     print(row)\n |      ...\n |      Pandas(num_legs=4, num_wings=0)\n |      Pandas(num_legs=2, num_wings=2)\n |\n |      With the `name` parameter set we set a custom name for the yielded\n |      namedtuples:\n |\n |      &gt;&gt;&gt; for row in df.itertuples(name='Animal'):\n |      ...     print(row)\n |      ...\n |      Animal(Index='dog', num_legs=4, num_wings=0)\n |      Animal(Index='hawk', num_legs=2, num_wings=2)\n |\n |  join(self, other: 'DataFrame | Series | Iterable[DataFrame | Series]', on: 'IndexLabel | None' = None, how: 'MergeHow' = 'left', lsuffix: 'str' = '', rsuffix: 'str' = '', sort: 'bool' = False, validate: 'JoinValidate | None' = None) -&gt; 'DataFrame'\n |      Join columns of another DataFrame.\n |\n |      Join columns with `other` DataFrame either on index or on a key\n |      column. Efficiently join multiple DataFrame objects by index at once by\n |      passing a list.\n |\n |      Parameters\n |      ----------\n |      other : DataFrame, Series, or a list containing any combination of them\n |          Index should be similar to one of the columns in this one. If a\n |          Series is passed, its name attribute must be set, and that will be\n |          used as the column name in the resulting joined DataFrame.\n |      on : str, list of str, or array-like, optional\n |          Column or index level name(s) in the caller to join on the index\n |          in `other`, otherwise joins index-on-index. If multiple\n |          values given, the `other` DataFrame must have a MultiIndex. Can\n |          pass an array as the join key if it is not already contained in\n |          the calling DataFrame. Like an Excel VLOOKUP operation.\n |      how : {'left', 'right', 'outer', 'inner', 'cross'}, default 'left'\n |          How to handle the operation of the two objects.\n |\n |          * left: use calling frame's index (or column if on is specified)\n |          * right: use `other`'s index.\n |          * outer: form union of calling frame's index (or column if on is\n |            specified) with `other`'s index, and sort it lexicographically.\n |          * inner: form intersection of calling frame's index (or column if\n |            on is specified) with `other`'s index, preserving the order\n |            of the calling's one.\n |          * cross: creates the cartesian product from both frames, preserves the order\n |            of the left keys.\n |      lsuffix : str, default ''\n |          Suffix to use from left frame's overlapping columns.\n |      rsuffix : str, default ''\n |          Suffix to use from right frame's overlapping columns.\n |      sort : bool, default False\n |          Order result DataFrame lexicographically by the join key. If False,\n |          the order of the join key depends on the join type (how keyword).\n |      validate : str, optional\n |          If specified, checks if join is of specified type.\n |\n |          * \"one_to_one\" or \"1:1\": check if join keys are unique in both left\n |            and right datasets.\n |          * \"one_to_many\" or \"1:m\": check if join keys are unique in left dataset.\n |          * \"many_to_one\" or \"m:1\": check if join keys are unique in right dataset.\n |          * \"many_to_many\" or \"m:m\": allowed, but does not result in checks.\n |\n |          .. versionadded:: 1.5.0\n |\n |      Returns\n |      -------\n |      DataFrame\n |          A dataframe containing columns from both the caller and `other`.\n |\n |      See Also\n |      --------\n |      DataFrame.merge : For column(s)-on-column(s) operations.\n |\n |      Notes\n |      -----\n |      Parameters `on`, `lsuffix`, and `rsuffix` are not supported when\n |      passing a list of `DataFrame` objects.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n |      ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n |\n |      &gt;&gt;&gt; df\n |        key   A\n |      0  K0  A0\n |      1  K1  A1\n |      2  K2  A2\n |      3  K3  A3\n |      4  K4  A4\n |      5  K5  A5\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n |      ...                       'B': ['B0', 'B1', 'B2']})\n |\n |      &gt;&gt;&gt; other\n |        key   B\n |      0  K0  B0\n |      1  K1  B1\n |      2  K2  B2\n |\n |      Join DataFrames using their indexes.\n |\n |      &gt;&gt;&gt; df.join(other, lsuffix='_caller', rsuffix='_other')\n |        key_caller   A key_other    B\n |      0         K0  A0        K0   B0\n |      1         K1  A1        K1   B1\n |      2         K2  A2        K2   B2\n |      3         K3  A3       NaN  NaN\n |      4         K4  A4       NaN  NaN\n |      5         K5  A5       NaN  NaN\n |\n |      If we want to join using the key columns, we need to set key to be\n |      the index in both `df` and `other`. The joined DataFrame will have\n |      key as its index.\n |\n |      &gt;&gt;&gt; df.set_index('key').join(other.set_index('key'))\n |            A    B\n |      key\n |      K0   A0   B0\n |      K1   A1   B1\n |      K2   A2   B2\n |      K3   A3  NaN\n |      K4   A4  NaN\n |      K5   A5  NaN\n |\n |      Another option to join using the key columns is to use the `on`\n |      parameter. DataFrame.join always uses `other`'s index but we can use\n |      any column in `df`. This method preserves the original DataFrame's\n |      index in the result.\n |\n |      &gt;&gt;&gt; df.join(other.set_index('key'), on='key')\n |        key   A    B\n |      0  K0  A0   B0\n |      1  K1  A1   B1\n |      2  K2  A2   B2\n |      3  K3  A3  NaN\n |      4  K4  A4  NaN\n |      5  K5  A5  NaN\n |\n |      Using non-unique key values shows how they are matched.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'key': ['K0', 'K1', 'K1', 'K3', 'K0', 'K1'],\n |      ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n |\n |      &gt;&gt;&gt; df\n |        key   A\n |      0  K0  A0\n |      1  K1  A1\n |      2  K1  A2\n |      3  K3  A3\n |      4  K0  A4\n |      5  K1  A5\n |\n |      &gt;&gt;&gt; df.join(other.set_index('key'), on='key', validate='m:1')\n |        key   A    B\n |      0  K0  A0   B0\n |      1  K1  A1   B1\n |      2  K1  A2   B1\n |      3  K3  A3  NaN\n |      4  K0  A4   B0\n |      5  K1  A5   B1\n |\n |  kurt(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)\n |      Return unbiased kurtosis over requested axis.\n |\n |      Kurtosis obtained using Fisher's definition of\n |      kurtosis (kurtosis of normal == 0.0). Normalized by N-1.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0), columns (1)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          For DataFrames, specifying ``axis=None`` will apply the aggregation\n |          across both axes.\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      Series or scalar\n |\n |                  Examples\n |                  --------\n |                  &gt;&gt;&gt; s = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])\n |                  &gt;&gt;&gt; s\n |                  cat    1\n |                  dog    2\n |                  dog    2\n |                  mouse  3\n |                  dtype: int64\n |                  &gt;&gt;&gt; s.kurt()\n |                  1.5\n |\n |                  With a DataFrame\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2, 2, 3], 'b': [3, 4, 4, 4]},\n |                  ...                   index=['cat', 'dog', 'dog', 'mouse'])\n |                  &gt;&gt;&gt; df\n |                         a   b\n |                    cat  1   3\n |                    dog  2   4\n |                    dog  2   4\n |                  mouse  3   4\n |                  &gt;&gt;&gt; df.kurt()\n |                  a   1.5\n |                  b   4.0\n |                  dtype: float64\n |\n |                  With axis=None\n |\n |                  &gt;&gt;&gt; df.kurt(axis=None).round(6)\n |                  -0.988693\n |\n |                  Using axis=1\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [3, 4], 'd': [1, 2]},\n |                  ...                   index=['cat', 'dog'])\n |                  &gt;&gt;&gt; df.kurt(axis=1)\n |                  cat   -6.0\n |                  dog   -6.0\n |                  dtype: float64\n |\n |  kurtosis = kurt(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)\n |\n |  le(self, other, axis: 'Axis' = 'columns', level=None) -&gt; 'DataFrame'\n |      Get Less than or equal to of dataframe and other, element-wise (binary operator `le`).\n |\n |      Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\n |      operators.\n |\n |      Equivalent to `==`, `!=`, `&lt;=`, `&lt;`, `&gt;=`, `&gt;` with support to choose axis\n |      (rows or columns) and level for comparison.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}, default 'columns'\n |          Whether to compare by the index (0 or 'index') or columns\n |          (1 or 'columns').\n |      level : int or label\n |          Broadcast across a level, matching Index values on the passed\n |          MultiIndex level.\n |\n |      Returns\n |      -------\n |      DataFrame of bool\n |          Result of the comparison.\n |\n |      See Also\n |      --------\n |      DataFrame.eq : Compare DataFrames for equality elementwise.\n |      DataFrame.ne : Compare DataFrames for inequality elementwise.\n |      DataFrame.le : Compare DataFrames for less than inequality\n |          or equality elementwise.\n |      DataFrame.lt : Compare DataFrames for strictly less than\n |          inequality elementwise.\n |      DataFrame.ge : Compare DataFrames for greater than inequality\n |          or equality elementwise.\n |      DataFrame.gt : Compare DataFrames for strictly greater than\n |          inequality elementwise.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |      `NaN` values are considered different (i.e. `NaN` != `NaN`).\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'cost': [250, 150, 100],\n |      ...                    'revenue': [100, 250, 300]},\n |      ...                   index=['A', 'B', 'C'])\n |      &gt;&gt;&gt; df\n |         cost  revenue\n |      A   250      100\n |      B   150      250\n |      C   100      300\n |\n |      Comparison with a scalar, using either the operator or method:\n |\n |      &gt;&gt;&gt; df == 100\n |          cost  revenue\n |      A  False     True\n |      B  False    False\n |      C   True    False\n |\n |      &gt;&gt;&gt; df.eq(100)\n |          cost  revenue\n |      A  False     True\n |      B  False    False\n |      C   True    False\n |\n |      When `other` is a :class:`Series`, the columns of a DataFrame are aligned\n |      with the index of `other` and broadcast:\n |\n |      &gt;&gt;&gt; df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n |          cost  revenue\n |      A   True     True\n |      B   True    False\n |      C  False     True\n |\n |      Use the method to control the broadcast axis:\n |\n |      &gt;&gt;&gt; df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n |         cost  revenue\n |      A  True    False\n |      B  True     True\n |      C  True     True\n |      D  True     True\n |\n |      When comparing to an arbitrary sequence, the number of columns must\n |      match the number elements in `other`:\n |\n |      &gt;&gt;&gt; df == [250, 100]\n |          cost  revenue\n |      A   True     True\n |      B  False    False\n |      C  False    False\n |\n |      Use the method to control the axis:\n |\n |      &gt;&gt;&gt; df.eq([250, 250, 100], axis='index')\n |          cost  revenue\n |      A   True    False\n |      B  False     True\n |      C   True    False\n |\n |      Compare to a DataFrame of different shape.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n |      ...                      index=['A', 'B', 'C', 'D'])\n |      &gt;&gt;&gt; other\n |         revenue\n |      A      300\n |      B      250\n |      C      100\n |      D      150\n |\n |      &gt;&gt;&gt; df.gt(other)\n |          cost  revenue\n |      A  False    False\n |      B  False    False\n |      C  False     True\n |      D  False    False\n |\n |      Compare to a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n |      ...                              'revenue': [100, 250, 300, 200, 175, 225]},\n |      ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n |      ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n |      &gt;&gt;&gt; df_multindex\n |            cost  revenue\n |      Q1 A   250      100\n |         B   150      250\n |         C   100      300\n |      Q2 A   150      200\n |         B   300      175\n |         C   220      225\n |\n |      &gt;&gt;&gt; df.le(df_multindex, level=1)\n |             cost  revenue\n |      Q1 A   True     True\n |         B   True     True\n |         C   True     True\n |      Q2 A  False     True\n |         B   True    False\n |         C   True    False\n |\n |  lt(self, other, axis: 'Axis' = 'columns', level=None) -&gt; 'DataFrame'\n |      Get Less than of dataframe and other, element-wise (binary operator `lt`).\n |\n |      Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\n |      operators.\n |\n |      Equivalent to `==`, `!=`, `&lt;=`, `&lt;`, `&gt;=`, `&gt;` with support to choose axis\n |      (rows or columns) and level for comparison.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}, default 'columns'\n |          Whether to compare by the index (0 or 'index') or columns\n |          (1 or 'columns').\n |      level : int or label\n |          Broadcast across a level, matching Index values on the passed\n |          MultiIndex level.\n |\n |      Returns\n |      -------\n |      DataFrame of bool\n |          Result of the comparison.\n |\n |      See Also\n |      --------\n |      DataFrame.eq : Compare DataFrames for equality elementwise.\n |      DataFrame.ne : Compare DataFrames for inequality elementwise.\n |      DataFrame.le : Compare DataFrames for less than inequality\n |          or equality elementwise.\n |      DataFrame.lt : Compare DataFrames for strictly less than\n |          inequality elementwise.\n |      DataFrame.ge : Compare DataFrames for greater than inequality\n |          or equality elementwise.\n |      DataFrame.gt : Compare DataFrames for strictly greater than\n |          inequality elementwise.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |      `NaN` values are considered different (i.e. `NaN` != `NaN`).\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'cost': [250, 150, 100],\n |      ...                    'revenue': [100, 250, 300]},\n |      ...                   index=['A', 'B', 'C'])\n |      &gt;&gt;&gt; df\n |         cost  revenue\n |      A   250      100\n |      B   150      250\n |      C   100      300\n |\n |      Comparison with a scalar, using either the operator or method:\n |\n |      &gt;&gt;&gt; df == 100\n |          cost  revenue\n |      A  False     True\n |      B  False    False\n |      C   True    False\n |\n |      &gt;&gt;&gt; df.eq(100)\n |          cost  revenue\n |      A  False     True\n |      B  False    False\n |      C   True    False\n |\n |      When `other` is a :class:`Series`, the columns of a DataFrame are aligned\n |      with the index of `other` and broadcast:\n |\n |      &gt;&gt;&gt; df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n |          cost  revenue\n |      A   True     True\n |      B   True    False\n |      C  False     True\n |\n |      Use the method to control the broadcast axis:\n |\n |      &gt;&gt;&gt; df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n |         cost  revenue\n |      A  True    False\n |      B  True     True\n |      C  True     True\n |      D  True     True\n |\n |      When comparing to an arbitrary sequence, the number of columns must\n |      match the number elements in `other`:\n |\n |      &gt;&gt;&gt; df == [250, 100]\n |          cost  revenue\n |      A   True     True\n |      B  False    False\n |      C  False    False\n |\n |      Use the method to control the axis:\n |\n |      &gt;&gt;&gt; df.eq([250, 250, 100], axis='index')\n |          cost  revenue\n |      A   True    False\n |      B  False     True\n |      C   True    False\n |\n |      Compare to a DataFrame of different shape.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n |      ...                      index=['A', 'B', 'C', 'D'])\n |      &gt;&gt;&gt; other\n |         revenue\n |      A      300\n |      B      250\n |      C      100\n |      D      150\n |\n |      &gt;&gt;&gt; df.gt(other)\n |          cost  revenue\n |      A  False    False\n |      B  False    False\n |      C  False     True\n |      D  False    False\n |\n |      Compare to a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n |      ...                              'revenue': [100, 250, 300, 200, 175, 225]},\n |      ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n |      ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n |      &gt;&gt;&gt; df_multindex\n |            cost  revenue\n |      Q1 A   250      100\n |         B   150      250\n |         C   100      300\n |      Q2 A   150      200\n |         B   300      175\n |         C   220      225\n |\n |      &gt;&gt;&gt; df.le(df_multindex, level=1)\n |             cost  revenue\n |      Q1 A   True     True\n |         B   True     True\n |         C   True     True\n |      Q2 A  False     True\n |         B   True    False\n |         C   True    False\n |\n |  map(self, func: 'PythonFuncType', na_action: 'str | None' = None, **kwargs) -&gt; 'DataFrame'\n |      Apply a function to a Dataframe elementwise.\n |\n |      .. versionadded:: 2.1.0\n |\n |         DataFrame.applymap was deprecated and renamed to DataFrame.map.\n |\n |      This method applies a function that accepts and returns a scalar\n |      to every element of a DataFrame.\n |\n |      Parameters\n |      ----------\n |      func : callable\n |          Python function, returns a single value from a single value.\n |      na_action : {None, 'ignore'}, default None\n |          If 'ignore', propagate NaN values, without passing them to func.\n |      **kwargs\n |          Additional keyword arguments to pass as keywords arguments to\n |          `func`.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Transformed DataFrame.\n |\n |      See Also\n |      --------\n |      DataFrame.apply : Apply a function along input axis of DataFrame.\n |      DataFrame.replace: Replace values given in `to_replace` with `value`.\n |      Series.map : Apply a function elementwise on a Series.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n |      &gt;&gt;&gt; df\n |             0      1\n |      0  1.000  2.120\n |      1  3.356  4.567\n |\n |      &gt;&gt;&gt; df.map(lambda x: len(str(x)))\n |         0  1\n |      0  3  4\n |      1  5  5\n |\n |      Like Series.map, NA values can be ignored:\n |\n |      &gt;&gt;&gt; df_copy = df.copy()\n |      &gt;&gt;&gt; df_copy.iloc[0, 0] = pd.NA\n |      &gt;&gt;&gt; df_copy.map(lambda x: len(str(x)), na_action='ignore')\n |           0  1\n |      0  NaN  4\n |      1  5.0  5\n |\n |      It is also possible to use `map` with functions that are not\n |      `lambda` functions:\n |\n |      &gt;&gt;&gt; df.map(round, ndigits=1)\n |           0    1\n |      0  1.0  2.1\n |      1  3.4  4.6\n |\n |      Note that a vectorized version of `func` often exists, which will\n |      be much faster. You could square each number elementwise.\n |\n |      &gt;&gt;&gt; df.map(lambda x: x**2)\n |                 0          1\n |      0   1.000000   4.494400\n |      1  11.262736  20.857489\n |\n |      But it's better to avoid map in that case.\n |\n |      &gt;&gt;&gt; df ** 2\n |                 0          1\n |      0   1.000000   4.494400\n |      1  11.262736  20.857489\n |\n |  max(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)\n |      Return the maximum of the values over the requested axis.\n |\n |      If you want the *index* of the maximum, use ``idxmax``. This is the equivalent of the ``numpy.ndarray`` method ``argmax``.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0), columns (1)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          For DataFrames, specifying ``axis=None`` will apply the aggregation\n |          across both axes.\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      Series or scalar\n |\n |      See Also\n |      --------\n |      Series.sum : Return the sum.\n |      Series.min : Return the minimum.\n |      Series.max : Return the maximum.\n |      Series.idxmin : Return the index of the minimum.\n |      Series.idxmax : Return the index of the maximum.\n |      DataFrame.sum : Return the sum over the requested axis.\n |      DataFrame.min : Return the minimum over the requested axis.\n |      DataFrame.max : Return the maximum over the requested axis.\n |      DataFrame.idxmin : Return the index of the minimum over the requested axis.\n |      DataFrame.idxmax : Return the index of the maximum over the requested axis.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; idx = pd.MultiIndex.from_arrays([\n |      ...     ['warm', 'warm', 'cold', 'cold'],\n |      ...     ['dog', 'falcon', 'fish', 'spider']],\n |      ...     names=['blooded', 'animal'])\n |      &gt;&gt;&gt; s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n |      &gt;&gt;&gt; s\n |      blooded  animal\n |      warm     dog       4\n |               falcon    2\n |      cold     fish      0\n |               spider    8\n |      Name: legs, dtype: int64\n |\n |      &gt;&gt;&gt; s.max()\n |      8\n |\n |  mean(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)\n |      Return the mean of the values over the requested axis.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0), columns (1)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          For DataFrames, specifying ``axis=None`` will apply the aggregation\n |          across both axes.\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      Series or scalar\n |\n |                  Examples\n |                  --------\n |                  &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |                  &gt;&gt;&gt; s.mean()\n |                  2.0\n |\n |                  With a DataFrame\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n |                  &gt;&gt;&gt; df\n |                         a   b\n |                  tiger  1   2\n |                  zebra  2   3\n |                  &gt;&gt;&gt; df.mean()\n |                  a   1.5\n |                  b   2.5\n |                  dtype: float64\n |\n |                  Using axis=1\n |\n |                  &gt;&gt;&gt; df.mean(axis=1)\n |                  tiger   1.5\n |                  zebra   2.5\n |                  dtype: float64\n |\n |                  In this case, `numeric_only` should be set to `True` to avoid\n |                  getting an error.\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n |                  ...                   index=['tiger', 'zebra'])\n |                  &gt;&gt;&gt; df.mean(numeric_only=True)\n |                  a   1.5\n |                  dtype: float64\n |\n |  median(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)\n |      Return the median of the values over the requested axis.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0), columns (1)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          For DataFrames, specifying ``axis=None`` will apply the aggregation\n |          across both axes.\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      Series or scalar\n |\n |                  Examples\n |                  --------\n |                  &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |                  &gt;&gt;&gt; s.median()\n |                  2.0\n |\n |                  With a DataFrame\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n |                  &gt;&gt;&gt; df\n |                         a   b\n |                  tiger  1   2\n |                  zebra  2   3\n |                  &gt;&gt;&gt; df.median()\n |                  a   1.5\n |                  b   2.5\n |                  dtype: float64\n |\n |                  Using axis=1\n |\n |                  &gt;&gt;&gt; df.median(axis=1)\n |                  tiger   1.5\n |                  zebra   2.5\n |                  dtype: float64\n |\n |                  In this case, `numeric_only` should be set to `True`\n |                  to avoid getting an error.\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n |                  ...                   index=['tiger', 'zebra'])\n |                  &gt;&gt;&gt; df.median(numeric_only=True)\n |                  a   1.5\n |                  dtype: float64\n |\n |  melt(self, id_vars=None, value_vars=None, var_name=None, value_name: 'Hashable' = 'value', col_level: 'Level | None' = None, ignore_index: 'bool' = True) -&gt; 'DataFrame'\n |      Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.\n |\n |      This function is useful to massage a DataFrame into a format where one\n |      or more columns are identifier variables (`id_vars`), while all other\n |      columns, considered measured variables (`value_vars`), are \"unpivoted\" to\n |      the row axis, leaving just two non-identifier columns, 'variable' and\n |      'value'.\n |\n |      Parameters\n |      ----------\n |      id_vars : scalar, tuple, list, or ndarray, optional\n |          Column(s) to use as identifier variables.\n |      value_vars : scalar, tuple, list, or ndarray, optional\n |          Column(s) to unpivot. If not specified, uses all columns that\n |          are not set as `id_vars`.\n |      var_name : scalar, default None\n |          Name to use for the 'variable' column. If None it uses\n |          ``frame.columns.name`` or 'variable'.\n |      value_name : scalar, default 'value'\n |          Name to use for the 'value' column, can't be an existing column label.\n |      col_level : scalar, optional\n |          If columns are a MultiIndex then use this level to melt.\n |      ignore_index : bool, default True\n |          If True, original index is ignored. If False, the original index is retained.\n |          Index labels will be repeated as necessary.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Unpivoted DataFrame.\n |\n |      See Also\n |      --------\n |      melt : Identical method.\n |      pivot_table : Create a spreadsheet-style pivot table as a DataFrame.\n |      DataFrame.pivot : Return reshaped DataFrame organized\n |          by given index / column values.\n |      DataFrame.explode : Explode a DataFrame from list-like\n |              columns to long format.\n |\n |      Notes\n |      -----\n |      Reference :ref:`the user guide &lt;reshaping.melt&gt;` for more examples.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},\n |      ...                    'B': {0: 1, 1: 3, 2: 5},\n |      ...                    'C': {0: 2, 1: 4, 2: 6}})\n |      &gt;&gt;&gt; df\n |         A  B  C\n |      0  a  1  2\n |      1  b  3  4\n |      2  c  5  6\n |\n |      &gt;&gt;&gt; df.melt(id_vars=['A'], value_vars=['B'])\n |         A variable  value\n |      0  a        B      1\n |      1  b        B      3\n |      2  c        B      5\n |\n |      &gt;&gt;&gt; df.melt(id_vars=['A'], value_vars=['B', 'C'])\n |         A variable  value\n |      0  a        B      1\n |      1  b        B      3\n |      2  c        B      5\n |      3  a        C      2\n |      4  b        C      4\n |      5  c        C      6\n |\n |      The names of 'variable' and 'value' columns can be customized:\n |\n |      &gt;&gt;&gt; df.melt(id_vars=['A'], value_vars=['B'],\n |      ...         var_name='myVarname', value_name='myValname')\n |         A myVarname  myValname\n |      0  a         B          1\n |      1  b         B          3\n |      2  c         B          5\n |\n |      Original index values can be kept around:\n |\n |      &gt;&gt;&gt; df.melt(id_vars=['A'], value_vars=['B', 'C'], ignore_index=False)\n |         A variable  value\n |      0  a        B      1\n |      1  b        B      3\n |      2  c        B      5\n |      0  a        C      2\n |      1  b        C      4\n |      2  c        C      6\n |\n |      If you have multi-index columns:\n |\n |      &gt;&gt;&gt; df.columns = [list('ABC'), list('DEF')]\n |      &gt;&gt;&gt; df\n |         A  B  C\n |         D  E  F\n |      0  a  1  2\n |      1  b  3  4\n |      2  c  5  6\n |\n |      &gt;&gt;&gt; df.melt(col_level=0, id_vars=['A'], value_vars=['B'])\n |         A variable  value\n |      0  a        B      1\n |      1  b        B      3\n |      2  c        B      5\n |\n |      &gt;&gt;&gt; df.melt(id_vars=[('A', 'D')], value_vars=[('B', 'E')])\n |        (A, D) variable_0 variable_1  value\n |      0      a          B          E      1\n |      1      b          B          E      3\n |      2      c          B          E      5\n |\n |  memory_usage(self, index: 'bool' = True, deep: 'bool' = False) -&gt; 'Series'\n |      Return the memory usage of each column in bytes.\n |\n |      The memory usage can optionally include the contribution of\n |      the index and elements of `object` dtype.\n |\n |      This value is displayed in `DataFrame.info` by default. This can be\n |      suppressed by setting ``pandas.options.display.memory_usage`` to False.\n |\n |      Parameters\n |      ----------\n |      index : bool, default True\n |          Specifies whether to include the memory usage of the DataFrame's\n |          index in returned Series. If ``index=True``, the memory usage of\n |          the index is the first item in the output.\n |      deep : bool, default False\n |          If True, introspect the data deeply by interrogating\n |          `object` dtypes for system-level memory consumption, and include\n |          it in the returned values.\n |\n |      Returns\n |      -------\n |      Series\n |          A Series whose index is the original column names and whose values\n |          is the memory usage of each column in bytes.\n |\n |      See Also\n |      --------\n |      numpy.ndarray.nbytes : Total bytes consumed by the elements of an\n |          ndarray.\n |      Series.memory_usage : Bytes consumed by a Series.\n |      Categorical : Memory-efficient array for string values with\n |          many repeated values.\n |      DataFrame.info : Concise summary of a DataFrame.\n |\n |      Notes\n |      -----\n |      See the :ref:`Frequently Asked Questions &lt;df-memory-usage&gt;` for more\n |      details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n |      &gt;&gt;&gt; data = dict([(t, np.ones(shape=5000, dtype=int).astype(t))\n |      ...              for t in dtypes])\n |      &gt;&gt;&gt; df = pd.DataFrame(data)\n |      &gt;&gt;&gt; df.head()\n |         int64  float64            complex128  object  bool\n |      0      1      1.0              1.0+0.0j       1  True\n |      1      1      1.0              1.0+0.0j       1  True\n |      2      1      1.0              1.0+0.0j       1  True\n |      3      1      1.0              1.0+0.0j       1  True\n |      4      1      1.0              1.0+0.0j       1  True\n |\n |      &gt;&gt;&gt; df.memory_usage()\n |      Index           128\n |      int64         40000\n |      float64       40000\n |      complex128    80000\n |      object        40000\n |      bool           5000\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df.memory_usage(index=False)\n |      int64         40000\n |      float64       40000\n |      complex128    80000\n |      object        40000\n |      bool           5000\n |      dtype: int64\n |\n |      The memory footprint of `object` dtype columns is ignored by default:\n |\n |      &gt;&gt;&gt; df.memory_usage(deep=True)\n |      Index            128\n |      int64          40000\n |      float64        40000\n |      complex128     80000\n |      object        180000\n |      bool            5000\n |      dtype: int64\n |\n |      Use a Categorical for efficient storage of an object-dtype column with\n |      many repeated values.\n |\n |      &gt;&gt;&gt; df['object'].astype('category').memory_usage(deep=True)\n |      5244\n |\n |  merge(self, right: 'DataFrame | Series', how: 'MergeHow' = 'inner', on: 'IndexLabel | AnyArrayLike | None' = None, left_on: 'IndexLabel | AnyArrayLike | None' = None, right_on: 'IndexLabel | AnyArrayLike | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), copy: 'bool | None' = None, indicator: 'str | bool' = False, validate: 'MergeValidate | None' = None) -&gt; 'DataFrame'\n |      Merge DataFrame or named Series objects with a database-style join.\n |\n |      A named Series object is treated as a DataFrame with a single named column.\n |\n |      The join is done on columns or indexes. If joining columns on\n |      columns, the DataFrame indexes *will be ignored*. Otherwise if joining indexes\n |      on indexes or indexes on a column or columns, the index will be passed on.\n |      When performing a cross merge, no column specifications to merge on are\n |      allowed.\n |\n |      .. warning::\n |\n |          If both key columns contain rows where the key is a null value, those\n |          rows will be matched against each other. This is different from usual SQL\n |          join behaviour and can lead to unexpected results.\n |\n |      Parameters\n |      ----------\n |      right : DataFrame or named Series\n |          Object to merge with.\n |      how : {'left', 'right', 'outer', 'inner', 'cross'}, default 'inner'\n |          Type of merge to be performed.\n |\n |          * left: use only keys from left frame, similar to a SQL left outer join;\n |            preserve key order.\n |          * right: use only keys from right frame, similar to a SQL right outer join;\n |            preserve key order.\n |          * outer: use union of keys from both frames, similar to a SQL full outer\n |            join; sort keys lexicographically.\n |          * inner: use intersection of keys from both frames, similar to a SQL inner\n |            join; preserve the order of the left keys.\n |          * cross: creates the cartesian product from both frames, preserves the order\n |            of the left keys.\n |      on : label or list\n |          Column or index level names to join on. These must be found in both\n |          DataFrames. If `on` is None and not merging on indexes then this defaults\n |          to the intersection of the columns in both DataFrames.\n |      left_on : label or list, or array-like\n |          Column or index level names to join on in the left DataFrame. Can also\n |          be an array or list of arrays of the length of the left DataFrame.\n |          These arrays are treated as if they are columns.\n |      right_on : label or list, or array-like\n |          Column or index level names to join on in the right DataFrame. Can also\n |          be an array or list of arrays of the length of the right DataFrame.\n |          These arrays are treated as if they are columns.\n |      left_index : bool, default False\n |          Use the index from the left DataFrame as the join key(s). If it is a\n |          MultiIndex, the number of keys in the other DataFrame (either the index\n |          or a number of columns) must match the number of levels.\n |      right_index : bool, default False\n |          Use the index from the right DataFrame as the join key. Same caveats as\n |          left_index.\n |      sort : bool, default False\n |          Sort the join keys lexicographically in the result DataFrame. If False,\n |          the order of the join keys depends on the join type (how keyword).\n |      suffixes : list-like, default is (\"_x\", \"_y\")\n |          A length-2 sequence where each element is optionally a string\n |          indicating the suffix to add to overlapping column names in\n |          `left` and `right` respectively. Pass a value of `None` instead\n |          of a string to indicate that the column name from `left` or\n |          `right` should be left as-is, with no suffix. At least one of the\n |          values must not be None.\n |      copy : bool, default True\n |          If False, avoid copy if possible.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      indicator : bool or str, default False\n |          If True, adds a column to the output DataFrame called \"_merge\" with\n |          information on the source of each row. The column can be given a different\n |          name by providing a string argument. The column will have a Categorical\n |          type with the value of \"left_only\" for observations whose merge key only\n |          appears in the left DataFrame, \"right_only\" for observations\n |          whose merge key only appears in the right DataFrame, and \"both\"\n |          if the observation's merge key is found in both DataFrames.\n |\n |      validate : str, optional\n |          If specified, checks if merge is of specified type.\n |\n |          * \"one_to_one\" or \"1:1\": check if merge keys are unique in both\n |            left and right datasets.\n |          * \"one_to_many\" or \"1:m\": check if merge keys are unique in left\n |            dataset.\n |          * \"many_to_one\" or \"m:1\": check if merge keys are unique in right\n |            dataset.\n |          * \"many_to_many\" or \"m:m\": allowed, but does not result in checks.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          A DataFrame of the two merged objects.\n |\n |      See Also\n |      --------\n |      merge_ordered : Merge with optional filling/interpolation.\n |      merge_asof : Merge on nearest keys.\n |      DataFrame.join : Similar method using indices.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df1 = pd.DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],\n |      ...                     'value': [1, 2, 3, 5]})\n |      &gt;&gt;&gt; df2 = pd.DataFrame({'rkey': ['foo', 'bar', 'baz', 'foo'],\n |      ...                     'value': [5, 6, 7, 8]})\n |      &gt;&gt;&gt; df1\n |          lkey value\n |      0   foo      1\n |      1   bar      2\n |      2   baz      3\n |      3   foo      5\n |      &gt;&gt;&gt; df2\n |          rkey value\n |      0   foo      5\n |      1   bar      6\n |      2   baz      7\n |      3   foo      8\n |\n |      Merge df1 and df2 on the lkey and rkey columns. The value columns have\n |      the default suffixes, _x and _y, appended.\n |\n |      &gt;&gt;&gt; df1.merge(df2, left_on='lkey', right_on='rkey')\n |        lkey  value_x rkey  value_y\n |      0  foo        1  foo        5\n |      1  foo        1  foo        8\n |      2  bar        2  bar        6\n |      3  baz        3  baz        7\n |      4  foo        5  foo        5\n |      5  foo        5  foo        8\n |\n |      Merge DataFrames df1 and df2 with specified left and right suffixes\n |      appended to any overlapping columns.\n |\n |      &gt;&gt;&gt; df1.merge(df2, left_on='lkey', right_on='rkey',\n |      ...           suffixes=('_left', '_right'))\n |        lkey  value_left rkey  value_right\n |      0  foo           1  foo            5\n |      1  foo           1  foo            8\n |      2  bar           2  bar            6\n |      3  baz           3  baz            7\n |      4  foo           5  foo            5\n |      5  foo           5  foo            8\n |\n |      Merge DataFrames df1 and df2, but raise an exception if the DataFrames have\n |      any overlapping columns.\n |\n |      &gt;&gt;&gt; df1.merge(df2, left_on='lkey', right_on='rkey', suffixes=(False, False))\n |      Traceback (most recent call last):\n |      ...\n |      ValueError: columns overlap but no suffix specified:\n |          Index(['value'], dtype='object')\n |\n |      &gt;&gt;&gt; df1 = pd.DataFrame({'a': ['foo', 'bar'], 'b': [1, 2]})\n |      &gt;&gt;&gt; df2 = pd.DataFrame({'a': ['foo', 'baz'], 'c': [3, 4]})\n |      &gt;&gt;&gt; df1\n |            a  b\n |      0   foo  1\n |      1   bar  2\n |      &gt;&gt;&gt; df2\n |            a  c\n |      0   foo  3\n |      1   baz  4\n |\n |      &gt;&gt;&gt; df1.merge(df2, how='inner', on='a')\n |            a  b  c\n |      0   foo  1  3\n |\n |      &gt;&gt;&gt; df1.merge(df2, how='left', on='a')\n |            a  b  c\n |      0   foo  1  3.0\n |      1   bar  2  NaN\n |\n |      &gt;&gt;&gt; df1 = pd.DataFrame({'left': ['foo', 'bar']})\n |      &gt;&gt;&gt; df2 = pd.DataFrame({'right': [7, 8]})\n |      &gt;&gt;&gt; df1\n |          left\n |      0   foo\n |      1   bar\n |      &gt;&gt;&gt; df2\n |          right\n |      0   7\n |      1   8\n |\n |      &gt;&gt;&gt; df1.merge(df2, how='cross')\n |         left  right\n |      0   foo      7\n |      1   foo      8\n |      2   bar      7\n |      3   bar      8\n |\n |  min(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)\n |      Return the minimum of the values over the requested axis.\n |\n |      If you want the *index* of the minimum, use ``idxmin``. This is the equivalent of the ``numpy.ndarray`` method ``argmin``.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0), columns (1)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          For DataFrames, specifying ``axis=None`` will apply the aggregation\n |          across both axes.\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      Series or scalar\n |\n |      See Also\n |      --------\n |      Series.sum : Return the sum.\n |      Series.min : Return the minimum.\n |      Series.max : Return the maximum.\n |      Series.idxmin : Return the index of the minimum.\n |      Series.idxmax : Return the index of the maximum.\n |      DataFrame.sum : Return the sum over the requested axis.\n |      DataFrame.min : Return the minimum over the requested axis.\n |      DataFrame.max : Return the maximum over the requested axis.\n |      DataFrame.idxmin : Return the index of the minimum over the requested axis.\n |      DataFrame.idxmax : Return the index of the maximum over the requested axis.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; idx = pd.MultiIndex.from_arrays([\n |      ...     ['warm', 'warm', 'cold', 'cold'],\n |      ...     ['dog', 'falcon', 'fish', 'spider']],\n |      ...     names=['blooded', 'animal'])\n |      &gt;&gt;&gt; s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n |      &gt;&gt;&gt; s\n |      blooded  animal\n |      warm     dog       4\n |               falcon    2\n |      cold     fish      0\n |               spider    8\n |      Name: legs, dtype: int64\n |\n |      &gt;&gt;&gt; s.min()\n |      0\n |\n |  mod(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |      Get Modulo of dataframe and other, element-wise (binary operator `mod`).\n |\n |      Equivalent to ``dataframe % other``, but with support to substitute a fill_value\n |      for missing data in one of the inputs. With reverse version, `rmod`.\n |\n |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\n |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}\n |          Whether to compare by the index (0 or 'index') or columns.\n |          (1 or 'columns'). For Series input, axis to match Series index on.\n |      level : int or label\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : float or None, default None\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful DataFrame alignment, with this value before computation.\n |          If data in both corresponding DataFrame locations is missing\n |          the result will be missing.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Result of the arithmetic operation.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add DataFrames.\n |      DataFrame.sub : Subtract DataFrames.\n |      DataFrame.mul : Multiply DataFrames.\n |      DataFrame.div : Divide DataFrames (float division).\n |      DataFrame.truediv : Divide DataFrames (float division).\n |      DataFrame.floordiv : Divide DataFrames (integer division).\n |      DataFrame.mod : Calculate modulo (remainder after division).\n |      DataFrame.pow : Calculate exponential power.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n |      ...                    'degrees': [360, 180, 360]},\n |      ...                   index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; df\n |                 angles  degrees\n |      circle          0      360\n |      triangle        3      180\n |      rectangle       4      360\n |\n |      Add a scalar with operator version which return the same\n |      results.\n |\n |      &gt;&gt;&gt; df + 1\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      &gt;&gt;&gt; df.add(1)\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      Divide by constant with reverse version.\n |\n |      &gt;&gt;&gt; df.div(10)\n |                 angles  degrees\n |      circle        0.0     36.0\n |      triangle      0.3     18.0\n |      rectangle     0.4     36.0\n |\n |      &gt;&gt;&gt; df.rdiv(10)\n |                   angles   degrees\n |      circle          inf  0.027778\n |      triangle   3.333333  0.055556\n |      rectangle  2.500000  0.027778\n |\n |      Subtract a list and Series by axis with operator version.\n |\n |      &gt;&gt;&gt; df - [1, 2]\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub([1, 2], axis='columns')\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n |      ...        axis='index')\n |                 angles  degrees\n |      circle         -1      359\n |      triangle        2      179\n |      rectangle       3      359\n |\n |      Multiply a dictionary by axis.\n |\n |      &gt;&gt;&gt; df.mul({'angles': 0, 'degrees': 2})\n |                  angles  degrees\n |      circle           0      720\n |      triangle         0      360\n |      rectangle        0      720\n |\n |      &gt;&gt;&gt; df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n |                  angles  degrees\n |      circle           0        0\n |      triangle         6      360\n |      rectangle       12     1080\n |\n |      Multiply a DataFrame of different shape with operator version.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'angles': [0, 3, 4]},\n |      ...                      index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; other\n |                 angles\n |      circle          0\n |      triangle        3\n |      rectangle       4\n |\n |      &gt;&gt;&gt; df * other\n |                 angles  degrees\n |      circle          0      NaN\n |      triangle        9      NaN\n |      rectangle      16      NaN\n |\n |      &gt;&gt;&gt; df.mul(other, fill_value=0)\n |                 angles  degrees\n |      circle          0      0.0\n |      triangle        9      0.0\n |      rectangle      16      0.0\n |\n |      Divide by a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},\n |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n |      ...                                    ['circle', 'triangle', 'rectangle',\n |      ...                                     'square', 'pentagon', 'hexagon']])\n |      &gt;&gt;&gt; df_multindex\n |                   angles  degrees\n |      A circle          0      360\n |        triangle        3      180\n |        rectangle       4      360\n |      B square          4      360\n |        pentagon        5      540\n |        hexagon         6      720\n |\n |      &gt;&gt;&gt; df.div(df_multindex, level=1, fill_value=0)\n |                   angles  degrees\n |      A circle        NaN      1.0\n |        triangle      1.0      1.0\n |        rectangle     1.0      1.0\n |      B square        0.0      0.0\n |        pentagon      0.0      0.0\n |        hexagon       0.0      0.0\n |\n |  mode(self, axis: 'Axis' = 0, numeric_only: 'bool' = False, dropna: 'bool' = True) -&gt; 'DataFrame'\n |      Get the mode(s) of each element along the selected axis.\n |\n |      The mode of a set of values is the value that appears most often.\n |      It can be multiple values.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis to iterate over while searching for the mode:\n |\n |          * 0 or 'index' : get mode of each column\n |          * 1 or 'columns' : get mode of each row.\n |\n |      numeric_only : bool, default False\n |          If True, only apply to numeric columns.\n |      dropna : bool, default True\n |          Don't consider counts of NaN/NaT.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          The modes of each column or row.\n |\n |      See Also\n |      --------\n |      Series.mode : Return the highest frequency value in a Series.\n |      Series.value_counts : Return the counts of values in a Series.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([('bird', 2, 2),\n |      ...                    ('mammal', 4, np.nan),\n |      ...                    ('arthropod', 8, 0),\n |      ...                    ('bird', 2, np.nan)],\n |      ...                   index=('falcon', 'horse', 'spider', 'ostrich'),\n |      ...                   columns=('species', 'legs', 'wings'))\n |      &gt;&gt;&gt; df\n |                 species  legs  wings\n |      falcon        bird     2    2.0\n |      horse       mammal     4    NaN\n |      spider   arthropod     8    0.0\n |      ostrich       bird     2    NaN\n |\n |      By default, missing values are not considered, and the mode of wings\n |      are both 0 and 2. Because the resulting DataFrame has two rows,\n |      the second row of ``species`` and ``legs`` contains ``NaN``.\n |\n |      &gt;&gt;&gt; df.mode()\n |        species  legs  wings\n |      0    bird   2.0    0.0\n |      1     NaN   NaN    2.0\n |\n |      Setting ``dropna=False`` ``NaN`` values are considered and they can be\n |      the mode (like for wings).\n |\n |      &gt;&gt;&gt; df.mode(dropna=False)\n |        species  legs  wings\n |      0    bird     2    NaN\n |\n |      Setting ``numeric_only=True``, only the mode of numeric columns is\n |      computed, and columns of other types are ignored.\n |\n |      &gt;&gt;&gt; df.mode(numeric_only=True)\n |         legs  wings\n |      0   2.0    0.0\n |      1   NaN    2.0\n |\n |      To compute the mode over columns and not rows, use the axis parameter:\n |\n |      &gt;&gt;&gt; df.mode(axis='columns', numeric_only=True)\n |                 0    1\n |      falcon   2.0  NaN\n |      horse    4.0  NaN\n |      spider   0.0  8.0\n |      ostrich  2.0  NaN\n |\n |  mul(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |      Get Multiplication of dataframe and other, element-wise (binary operator `mul`).\n |\n |      Equivalent to ``dataframe * other``, but with support to substitute a fill_value\n |      for missing data in one of the inputs. With reverse version, `rmul`.\n |\n |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\n |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}\n |          Whether to compare by the index (0 or 'index') or columns.\n |          (1 or 'columns'). For Series input, axis to match Series index on.\n |      level : int or label\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : float or None, default None\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful DataFrame alignment, with this value before computation.\n |          If data in both corresponding DataFrame locations is missing\n |          the result will be missing.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Result of the arithmetic operation.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add DataFrames.\n |      DataFrame.sub : Subtract DataFrames.\n |      DataFrame.mul : Multiply DataFrames.\n |      DataFrame.div : Divide DataFrames (float division).\n |      DataFrame.truediv : Divide DataFrames (float division).\n |      DataFrame.floordiv : Divide DataFrames (integer division).\n |      DataFrame.mod : Calculate modulo (remainder after division).\n |      DataFrame.pow : Calculate exponential power.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n |      ...                    'degrees': [360, 180, 360]},\n |      ...                   index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; df\n |                 angles  degrees\n |      circle          0      360\n |      triangle        3      180\n |      rectangle       4      360\n |\n |      Add a scalar with operator version which return the same\n |      results.\n |\n |      &gt;&gt;&gt; df + 1\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      &gt;&gt;&gt; df.add(1)\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      Divide by constant with reverse version.\n |\n |      &gt;&gt;&gt; df.div(10)\n |                 angles  degrees\n |      circle        0.0     36.0\n |      triangle      0.3     18.0\n |      rectangle     0.4     36.0\n |\n |      &gt;&gt;&gt; df.rdiv(10)\n |                   angles   degrees\n |      circle          inf  0.027778\n |      triangle   3.333333  0.055556\n |      rectangle  2.500000  0.027778\n |\n |      Subtract a list and Series by axis with operator version.\n |\n |      &gt;&gt;&gt; df - [1, 2]\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub([1, 2], axis='columns')\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n |      ...        axis='index')\n |                 angles  degrees\n |      circle         -1      359\n |      triangle        2      179\n |      rectangle       3      359\n |\n |      Multiply a dictionary by axis.\n |\n |      &gt;&gt;&gt; df.mul({'angles': 0, 'degrees': 2})\n |                  angles  degrees\n |      circle           0      720\n |      triangle         0      360\n |      rectangle        0      720\n |\n |      &gt;&gt;&gt; df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n |                  angles  degrees\n |      circle           0        0\n |      triangle         6      360\n |      rectangle       12     1080\n |\n |      Multiply a DataFrame of different shape with operator version.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'angles': [0, 3, 4]},\n |      ...                      index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; other\n |                 angles\n |      circle          0\n |      triangle        3\n |      rectangle       4\n |\n |      &gt;&gt;&gt; df * other\n |                 angles  degrees\n |      circle          0      NaN\n |      triangle        9      NaN\n |      rectangle      16      NaN\n |\n |      &gt;&gt;&gt; df.mul(other, fill_value=0)\n |                 angles  degrees\n |      circle          0      0.0\n |      triangle        9      0.0\n |      rectangle      16      0.0\n |\n |      Divide by a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},\n |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n |      ...                                    ['circle', 'triangle', 'rectangle',\n |      ...                                     'square', 'pentagon', 'hexagon']])\n |      &gt;&gt;&gt; df_multindex\n |                   angles  degrees\n |      A circle          0      360\n |        triangle        3      180\n |        rectangle       4      360\n |      B square          4      360\n |        pentagon        5      540\n |        hexagon         6      720\n |\n |      &gt;&gt;&gt; df.div(df_multindex, level=1, fill_value=0)\n |                   angles  degrees\n |      A circle        NaN      1.0\n |        triangle      1.0      1.0\n |        rectangle     1.0      1.0\n |      B square        0.0      0.0\n |        pentagon      0.0      0.0\n |        hexagon       0.0      0.0\n |\n |  multiply = mul(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |\n |  ne(self, other, axis: 'Axis' = 'columns', level=None) -&gt; 'DataFrame'\n |      Get Not equal to of dataframe and other, element-wise (binary operator `ne`).\n |\n |      Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison\n |      operators.\n |\n |      Equivalent to `==`, `!=`, `&lt;=`, `&lt;`, `&gt;=`, `&gt;` with support to choose axis\n |      (rows or columns) and level for comparison.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}, default 'columns'\n |          Whether to compare by the index (0 or 'index') or columns\n |          (1 or 'columns').\n |      level : int or label\n |          Broadcast across a level, matching Index values on the passed\n |          MultiIndex level.\n |\n |      Returns\n |      -------\n |      DataFrame of bool\n |          Result of the comparison.\n |\n |      See Also\n |      --------\n |      DataFrame.eq : Compare DataFrames for equality elementwise.\n |      DataFrame.ne : Compare DataFrames for inequality elementwise.\n |      DataFrame.le : Compare DataFrames for less than inequality\n |          or equality elementwise.\n |      DataFrame.lt : Compare DataFrames for strictly less than\n |          inequality elementwise.\n |      DataFrame.ge : Compare DataFrames for greater than inequality\n |          or equality elementwise.\n |      DataFrame.gt : Compare DataFrames for strictly greater than\n |          inequality elementwise.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |      `NaN` values are considered different (i.e. `NaN` != `NaN`).\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'cost': [250, 150, 100],\n |      ...                    'revenue': [100, 250, 300]},\n |      ...                   index=['A', 'B', 'C'])\n |      &gt;&gt;&gt; df\n |         cost  revenue\n |      A   250      100\n |      B   150      250\n |      C   100      300\n |\n |      Comparison with a scalar, using either the operator or method:\n |\n |      &gt;&gt;&gt; df == 100\n |          cost  revenue\n |      A  False     True\n |      B  False    False\n |      C   True    False\n |\n |      &gt;&gt;&gt; df.eq(100)\n |          cost  revenue\n |      A  False     True\n |      B  False    False\n |      C   True    False\n |\n |      When `other` is a :class:`Series`, the columns of a DataFrame are aligned\n |      with the index of `other` and broadcast:\n |\n |      &gt;&gt;&gt; df != pd.Series([100, 250], index=[\"cost\", \"revenue\"])\n |          cost  revenue\n |      A   True     True\n |      B   True    False\n |      C  False     True\n |\n |      Use the method to control the broadcast axis:\n |\n |      &gt;&gt;&gt; df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n |         cost  revenue\n |      A  True    False\n |      B  True     True\n |      C  True     True\n |      D  True     True\n |\n |      When comparing to an arbitrary sequence, the number of columns must\n |      match the number elements in `other`:\n |\n |      &gt;&gt;&gt; df == [250, 100]\n |          cost  revenue\n |      A   True     True\n |      B  False    False\n |      C  False    False\n |\n |      Use the method to control the axis:\n |\n |      &gt;&gt;&gt; df.eq([250, 250, 100], axis='index')\n |          cost  revenue\n |      A   True    False\n |      B  False     True\n |      C   True    False\n |\n |      Compare to a DataFrame of different shape.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'revenue': [300, 250, 100, 150]},\n |      ...                      index=['A', 'B', 'C', 'D'])\n |      &gt;&gt;&gt; other\n |         revenue\n |      A      300\n |      B      250\n |      C      100\n |      D      150\n |\n |      &gt;&gt;&gt; df.gt(other)\n |          cost  revenue\n |      A  False    False\n |      B  False    False\n |      C  False     True\n |      D  False    False\n |\n |      Compare to a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],\n |      ...                              'revenue': [100, 250, 300, 200, 175, 225]},\n |      ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],\n |      ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])\n |      &gt;&gt;&gt; df_multindex\n |            cost  revenue\n |      Q1 A   250      100\n |         B   150      250\n |         C   100      300\n |      Q2 A   150      200\n |         B   300      175\n |         C   220      225\n |\n |      &gt;&gt;&gt; df.le(df_multindex, level=1)\n |             cost  revenue\n |      Q1 A   True     True\n |         B   True     True\n |         C   True     True\n |      Q2 A  False     True\n |         B   True    False\n |         C   True    False\n |\n |  nlargest(self, n: 'int', columns: 'IndexLabel', keep: 'NsmallestNlargestKeep' = 'first') -&gt; 'DataFrame'\n |      Return the first `n` rows ordered by `columns` in descending order.\n |\n |      Return the first `n` rows with the largest values in `columns`, in\n |      descending order. The columns that are not specified are returned as\n |      well, but not used for ordering.\n |\n |      This method is equivalent to\n |      ``df.sort_values(columns, ascending=False).head(n)``, but more\n |      performant.\n |\n |      Parameters\n |      ----------\n |      n : int\n |          Number of rows to return.\n |      columns : label or list of labels\n |          Column label(s) to order by.\n |      keep : {'first', 'last', 'all'}, default 'first'\n |          Where there are duplicate values:\n |\n |          - ``first`` : prioritize the first occurrence(s)\n |          - ``last`` : prioritize the last occurrence(s)\n |          - ``all`` : keep all the ties of the smallest item even if it means\n |            selecting more than ``n`` items.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          The first `n` rows ordered by the given columns in descending\n |          order.\n |\n |      See Also\n |      --------\n |      DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n |          ascending order.\n |      DataFrame.sort_values : Sort DataFrame by the values.\n |      DataFrame.head : Return the first `n` rows without re-ordering.\n |\n |      Notes\n |      -----\n |      This function cannot be used with all column types. For example, when\n |      specifying columns with `object` or `category` dtypes, ``TypeError`` is\n |      raised.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n |      ...                                   434000, 434000, 337000, 11300,\n |      ...                                   11300, 11300],\n |      ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n |      ...                            17036, 182, 38, 311],\n |      ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n |      ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n |      ...                   index=[\"Italy\", \"France\", \"Malta\",\n |      ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n |      ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n |      &gt;&gt;&gt; df\n |                population      GDP alpha-2\n |      Italy       59000000  1937894      IT\n |      France      65000000  2583560      FR\n |      Malta         434000    12011      MT\n |      Maldives      434000     4520      MV\n |      Brunei        434000    12128      BN\n |      Iceland       337000    17036      IS\n |      Nauru          11300      182      NR\n |      Tuvalu         11300       38      TV\n |      Anguilla       11300      311      AI\n |\n |      In the following example, we will use ``nlargest`` to select the three\n |      rows having the largest values in column \"population\".\n |\n |      &gt;&gt;&gt; df.nlargest(3, 'population')\n |              population      GDP alpha-2\n |      France    65000000  2583560      FR\n |      Italy     59000000  1937894      IT\n |      Malta       434000    12011      MT\n |\n |      When using ``keep='last'``, ties are resolved in reverse order:\n |\n |      &gt;&gt;&gt; df.nlargest(3, 'population', keep='last')\n |              population      GDP alpha-2\n |      France    65000000  2583560      FR\n |      Italy     59000000  1937894      IT\n |      Brunei      434000    12128      BN\n |\n |      When using ``keep='all'``, the number of element kept can go beyond ``n``\n |      if there are duplicate values for the smallest element, all the\n |      ties are kept:\n |\n |      &gt;&gt;&gt; df.nlargest(3, 'population', keep='all')\n |                population      GDP alpha-2\n |      France      65000000  2583560      FR\n |      Italy       59000000  1937894      IT\n |      Malta         434000    12011      MT\n |      Maldives      434000     4520      MV\n |      Brunei        434000    12128      BN\n |\n |      However, ``nlargest`` does not keep ``n`` distinct largest elements:\n |\n |      &gt;&gt;&gt; df.nlargest(5, 'population', keep='all')\n |                population      GDP alpha-2\n |      France      65000000  2583560      FR\n |      Italy       59000000  1937894      IT\n |      Malta         434000    12011      MT\n |      Maldives      434000     4520      MV\n |      Brunei        434000    12128      BN\n |\n |      To order by the largest values in column \"population\" and then \"GDP\",\n |      we can specify multiple columns like in the next example.\n |\n |      &gt;&gt;&gt; df.nlargest(3, ['population', 'GDP'])\n |              population      GDP alpha-2\n |      France    65000000  2583560      FR\n |      Italy     59000000  1937894      IT\n |      Brunei      434000    12128      BN\n |\n |  notna(self) -&gt; 'DataFrame'\n |      Detect existing (non-missing) values.\n |\n |      Return a boolean same-sized object indicating if the values are not NA.\n |      Non-missing values get mapped to True. Characters such as empty\n |      strings ``''`` or :attr:`numpy.inf` are not considered NA values\n |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n |      NA values, such as None or :attr:`numpy.NaN`, get mapped to False\n |      values.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Mask of bool values for each element in DataFrame that\n |          indicates whether an element is not an NA value.\n |\n |      See Also\n |      --------\n |      DataFrame.notnull : Alias of notna.\n |      DataFrame.isna : Boolean inverse of notna.\n |      DataFrame.dropna : Omit axes labels with missing values.\n |      notna : Top-level notna.\n |\n |      Examples\n |      --------\n |      Show which entries in a DataFrame are not NA.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame(dict(age=[5, 6, np.nan],\n |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n |      ...                              pd.Timestamp('1940-04-25')],\n |      ...                        name=['Alfred', 'Batman', ''],\n |      ...                        toy=[None, 'Batmobile', 'Joker']))\n |      &gt;&gt;&gt; df\n |         age       born    name        toy\n |      0  5.0        NaT  Alfred       None\n |      1  6.0 1939-05-27  Batman  Batmobile\n |      2  NaN 1940-04-25              Joker\n |\n |      &gt;&gt;&gt; df.notna()\n |           age   born  name    toy\n |      0   True  False  True  False\n |      1   True   True  True   True\n |      2  False   True  True   True\n |\n |      Show which entries in a Series are not NA.\n |\n |      &gt;&gt;&gt; ser = pd.Series([5, 6, np.nan])\n |      &gt;&gt;&gt; ser\n |      0    5.0\n |      1    6.0\n |      2    NaN\n |      dtype: float64\n |\n |      &gt;&gt;&gt; ser.notna()\n |      0     True\n |      1     True\n |      2    False\n |      dtype: bool\n |\n |  notnull(self) -&gt; 'DataFrame'\n |      DataFrame.notnull is an alias for DataFrame.notna.\n |\n |      Detect existing (non-missing) values.\n |\n |      Return a boolean same-sized object indicating if the values are not NA.\n |      Non-missing values get mapped to True. Characters such as empty\n |      strings ``''`` or :attr:`numpy.inf` are not considered NA values\n |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n |      NA values, such as None or :attr:`numpy.NaN`, get mapped to False\n |      values.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Mask of bool values for each element in DataFrame that\n |          indicates whether an element is not an NA value.\n |\n |      See Also\n |      --------\n |      DataFrame.notnull : Alias of notna.\n |      DataFrame.isna : Boolean inverse of notna.\n |      DataFrame.dropna : Omit axes labels with missing values.\n |      notna : Top-level notna.\n |\n |      Examples\n |      --------\n |      Show which entries in a DataFrame are not NA.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame(dict(age=[5, 6, np.nan],\n |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n |      ...                              pd.Timestamp('1940-04-25')],\n |      ...                        name=['Alfred', 'Batman', ''],\n |      ...                        toy=[None, 'Batmobile', 'Joker']))\n |      &gt;&gt;&gt; df\n |         age       born    name        toy\n |      0  5.0        NaT  Alfred       None\n |      1  6.0 1939-05-27  Batman  Batmobile\n |      2  NaN 1940-04-25              Joker\n |\n |      &gt;&gt;&gt; df.notna()\n |           age   born  name    toy\n |      0   True  False  True  False\n |      1   True   True  True   True\n |      2  False   True  True   True\n |\n |      Show which entries in a Series are not NA.\n |\n |      &gt;&gt;&gt; ser = pd.Series([5, 6, np.nan])\n |      &gt;&gt;&gt; ser\n |      0    5.0\n |      1    6.0\n |      2    NaN\n |      dtype: float64\n |\n |      &gt;&gt;&gt; ser.notna()\n |      0     True\n |      1     True\n |      2    False\n |      dtype: bool\n |\n |  nsmallest(self, n: 'int', columns: 'IndexLabel', keep: 'NsmallestNlargestKeep' = 'first') -&gt; 'DataFrame'\n |      Return the first `n` rows ordered by `columns` in ascending order.\n |\n |      Return the first `n` rows with the smallest values in `columns`, in\n |      ascending order. The columns that are not specified are returned as\n |      well, but not used for ordering.\n |\n |      This method is equivalent to\n |      ``df.sort_values(columns, ascending=True).head(n)``, but more\n |      performant.\n |\n |      Parameters\n |      ----------\n |      n : int\n |          Number of items to retrieve.\n |      columns : list or str\n |          Column name or names to order by.\n |      keep : {'first', 'last', 'all'}, default 'first'\n |          Where there are duplicate values:\n |\n |          - ``first`` : take the first occurrence.\n |          - ``last`` : take the last occurrence.\n |          - ``all`` : keep all the ties of the largest item even if it means\n |            selecting more than ``n`` items.\n |\n |      Returns\n |      -------\n |      DataFrame\n |\n |      See Also\n |      --------\n |      DataFrame.nlargest : Return the first `n` rows ordered by `columns` in\n |          descending order.\n |      DataFrame.sort_values : Sort DataFrame by the values.\n |      DataFrame.head : Return the first `n` rows without re-ordering.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n |      ...                                   434000, 434000, 337000, 337000,\n |      ...                                   11300, 11300],\n |      ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n |      ...                            17036, 182, 38, 311],\n |      ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n |      ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n |      ...                   index=[\"Italy\", \"France\", \"Malta\",\n |      ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n |      ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n |      &gt;&gt;&gt; df\n |                population      GDP alpha-2\n |      Italy       59000000  1937894      IT\n |      France      65000000  2583560      FR\n |      Malta         434000    12011      MT\n |      Maldives      434000     4520      MV\n |      Brunei        434000    12128      BN\n |      Iceland       337000    17036      IS\n |      Nauru         337000      182      NR\n |      Tuvalu         11300       38      TV\n |      Anguilla       11300      311      AI\n |\n |      In the following example, we will use ``nsmallest`` to select the\n |      three rows having the smallest values in column \"population\".\n |\n |      &gt;&gt;&gt; df.nsmallest(3, 'population')\n |                population    GDP alpha-2\n |      Tuvalu         11300     38      TV\n |      Anguilla       11300    311      AI\n |      Iceland       337000  17036      IS\n |\n |      When using ``keep='last'``, ties are resolved in reverse order:\n |\n |      &gt;&gt;&gt; df.nsmallest(3, 'population', keep='last')\n |                population  GDP alpha-2\n |      Anguilla       11300  311      AI\n |      Tuvalu         11300   38      TV\n |      Nauru         337000  182      NR\n |\n |      When using ``keep='all'``, the number of element kept can go beyond ``n``\n |      if there are duplicate values for the largest element, all the\n |      ties are kept.\n |\n |      &gt;&gt;&gt; df.nsmallest(3, 'population', keep='all')\n |                population    GDP alpha-2\n |      Tuvalu         11300     38      TV\n |      Anguilla       11300    311      AI\n |      Iceland       337000  17036      IS\n |      Nauru         337000    182      NR\n |\n |      However, ``nsmallest`` does not keep ``n`` distinct\n |      smallest elements:\n |\n |      &gt;&gt;&gt; df.nsmallest(4, 'population', keep='all')\n |                population    GDP alpha-2\n |      Tuvalu         11300     38      TV\n |      Anguilla       11300    311      AI\n |      Iceland       337000  17036      IS\n |      Nauru         337000    182      NR\n |\n |      To order by the smallest values in column \"population\" and then \"GDP\", we can\n |      specify multiple columns like in the next example.\n |\n |      &gt;&gt;&gt; df.nsmallest(3, ['population', 'GDP'])\n |                population  GDP alpha-2\n |      Tuvalu         11300   38      TV\n |      Anguilla       11300  311      AI\n |      Nauru         337000  182      NR\n |\n |  nunique(self, axis: 'Axis' = 0, dropna: 'bool' = True) -&gt; 'Series'\n |      Count number of distinct elements in specified axis.\n |\n |      Return Series with number of distinct elements. Can ignore NaN\n |      values.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for\n |          column-wise.\n |      dropna : bool, default True\n |          Don't include NaN in the counts.\n |\n |      Returns\n |      -------\n |      Series\n |\n |      See Also\n |      --------\n |      Series.nunique: Method nunique for Series.\n |      DataFrame.count: Count non-NA cells for each column or row.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [4, 5, 6], 'B': [4, 1, 1]})\n |      &gt;&gt;&gt; df.nunique()\n |      A    3\n |      B    2\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df.nunique(axis=1)\n |      0    1\n |      1    2\n |      2    2\n |      dtype: int64\n |\n |  pivot(self, *, columns, index=&lt;no_default&gt;, values=&lt;no_default&gt;) -&gt; 'DataFrame'\n |      Return reshaped DataFrame organized by given index / column values.\n |\n |      Reshape data (produce a \"pivot\" table) based on column values. Uses\n |      unique values from specified `index` / `columns` to form axes of the\n |      resulting DataFrame. This function does not support data\n |      aggregation, multiple values will result in a MultiIndex in the\n |      columns. See the :ref:`User Guide &lt;reshaping&gt;` for more on reshaping.\n |\n |      Parameters\n |      ----------\n |      columns : str or object or a list of str\n |          Column to use to make new frame's columns.\n |      index : str or object or a list of str, optional\n |          Column to use to make new frame's index. If not given, uses existing index.\n |      values : str, object or a list of the previous, optional\n |          Column(s) to use for populating new frame's values. If not\n |          specified, all remaining columns will be used and the result will\n |          have hierarchically indexed columns.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Returns reshaped DataFrame.\n |\n |      Raises\n |      ------\n |      ValueError:\n |          When there are any `index`, `columns` combinations with multiple\n |          values. `DataFrame.pivot_table` when you need to aggregate.\n |\n |      See Also\n |      --------\n |      DataFrame.pivot_table : Generalization of pivot that can handle\n |          duplicate values for one index/column pair.\n |      DataFrame.unstack : Pivot based on the index values instead of a\n |          column.\n |      wide_to_long : Wide panel to long format. Less flexible but more\n |          user-friendly than melt.\n |\n |      Notes\n |      -----\n |      For finer-tuned control, see hierarchical indexing documentation along\n |      with the related stack/unstack methods.\n |\n |      Reference :ref:`the user guide &lt;reshaping.pivot&gt;` for more examples.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',\n |      ...                            'two'],\n |      ...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n |      ...                    'baz': [1, 2, 3, 4, 5, 6],\n |      ...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n |      &gt;&gt;&gt; df\n |          foo   bar  baz  zoo\n |      0   one   A    1    x\n |      1   one   B    2    y\n |      2   one   C    3    z\n |      3   two   A    4    q\n |      4   two   B    5    w\n |      5   two   C    6    t\n |\n |      &gt;&gt;&gt; df.pivot(index='foo', columns='bar', values='baz')\n |      bar  A   B   C\n |      foo\n |      one  1   2   3\n |      two  4   5   6\n |\n |      &gt;&gt;&gt; df.pivot(index='foo', columns='bar')['baz']\n |      bar  A   B   C\n |      foo\n |      one  1   2   3\n |      two  4   5   6\n |\n |      &gt;&gt;&gt; df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])\n |            baz       zoo\n |      bar   A  B  C   A  B  C\n |      foo\n |      one   1  2  3   x  y  z\n |      two   4  5  6   q  w  t\n |\n |      You could also assign a list of column names or a list of index names.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...        \"lev1\": [1, 1, 1, 2, 2, 2],\n |      ...        \"lev2\": [1, 1, 2, 1, 1, 2],\n |      ...        \"lev3\": [1, 2, 1, 2, 1, 2],\n |      ...        \"lev4\": [1, 2, 3, 4, 5, 6],\n |      ...        \"values\": [0, 1, 2, 3, 4, 5]})\n |      &gt;&gt;&gt; df\n |          lev1 lev2 lev3 lev4 values\n |      0   1    1    1    1    0\n |      1   1    1    2    2    1\n |      2   1    2    1    3    2\n |      3   2    1    2    4    3\n |      4   2    1    1    5    4\n |      5   2    2    2    6    5\n |\n |      &gt;&gt;&gt; df.pivot(index=\"lev1\", columns=[\"lev2\", \"lev3\"], values=\"values\")\n |      lev2    1         2\n |      lev3    1    2    1    2\n |      lev1\n |      1     0.0  1.0  2.0  NaN\n |      2     4.0  3.0  NaN  5.0\n |\n |      &gt;&gt;&gt; df.pivot(index=[\"lev1\", \"lev2\"], columns=[\"lev3\"], values=\"values\")\n |            lev3    1    2\n |      lev1  lev2\n |         1     1  0.0  1.0\n |               2  2.0  NaN\n |         2     1  4.0  3.0\n |               2  NaN  5.0\n |\n |      A ValueError is raised if there are any duplicates.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"foo\": ['one', 'one', 'two', 'two'],\n |      ...                    \"bar\": ['A', 'A', 'B', 'C'],\n |      ...                    \"baz\": [1, 2, 3, 4]})\n |      &gt;&gt;&gt; df\n |         foo bar  baz\n |      0  one   A    1\n |      1  one   A    2\n |      2  two   B    3\n |      3  two   C    4\n |\n |      Notice that the first two rows are the same for our `index`\n |      and `columns` arguments.\n |\n |      &gt;&gt;&gt; df.pivot(index='foo', columns='bar', values='baz')\n |      Traceback (most recent call last):\n |         ...\n |      ValueError: Index contains duplicate entries, cannot reshape\n |\n |  pivot_table(self, values=None, index=None, columns=None, aggfunc: 'AggFuncType' = 'mean', fill_value=None, margins: 'bool' = False, dropna: 'bool' = True, margins_name: 'Level' = 'All', observed: 'bool | lib.NoDefault' = &lt;no_default&gt;, sort: 'bool' = True) -&gt; 'DataFrame'\n |      Create a spreadsheet-style pivot table as a DataFrame.\n |\n |      The levels in the pivot table will be stored in MultiIndex objects\n |      (hierarchical indexes) on the index and columns of the result DataFrame.\n |\n |      Parameters\n |      ----------\n |      values : list-like or scalar, optional\n |          Column or columns to aggregate.\n |      index : column, Grouper, array, or list of the previous\n |          Keys to group by on the pivot table index. If a list is passed,\n |          it can contain any of the other types (except list). If an array is\n |          passed, it must be the same length as the data and will be used in\n |          the same manner as column values.\n |      columns : column, Grouper, array, or list of the previous\n |          Keys to group by on the pivot table column. If a list is passed,\n |          it can contain any of the other types (except list). If an array is\n |          passed, it must be the same length as the data and will be used in\n |          the same manner as column values.\n |      aggfunc : function, list of functions, dict, default \"mean\"\n |          If a list of functions is passed, the resulting pivot table will have\n |          hierarchical columns whose top level are the function names\n |          (inferred from the function objects themselves).\n |          If a dict is passed, the key is column to aggregate and the value is\n |          function or list of functions. If ``margin=True``, aggfunc will be\n |          used to calculate the partial aggregates.\n |      fill_value : scalar, default None\n |          Value to replace missing values with (in the resulting pivot table,\n |          after aggregation).\n |      margins : bool, default False\n |          If ``margins=True``, special ``All`` columns and rows\n |          will be added with partial group aggregates across the categories\n |          on the rows and columns.\n |      dropna : bool, default True\n |          Do not include columns whose entries are all NaN. If True,\n |          rows with a NaN value in any column will be omitted before\n |          computing margins.\n |      margins_name : str, default 'All'\n |          Name of the row / column that will contain the totals\n |          when margins is True.\n |      observed : bool, default False\n |          This only applies if any of the groupers are Categoricals.\n |          If True: only show observed values for categorical groupers.\n |          If False: show all values for categorical groupers.\n |\n |          .. deprecated:: 2.2.0\n |\n |              The default value of ``False`` is deprecated and will change to\n |              ``True`` in a future version of pandas.\n |\n |      sort : bool, default True\n |          Specifies if the result should be sorted.\n |\n |          .. versionadded:: 1.3.0\n |\n |      Returns\n |      -------\n |      DataFrame\n |          An Excel style pivot table.\n |\n |      See Also\n |      --------\n |      DataFrame.pivot : Pivot without aggregation that can handle\n |          non-numeric data.\n |      DataFrame.melt: Unpivot a DataFrame from wide to long format,\n |          optionally leaving identifiers set.\n |      wide_to_long : Wide panel to long format. Less flexible but more\n |          user-friendly than melt.\n |\n |      Notes\n |      -----\n |      Reference :ref:`the user guide &lt;reshaping.pivot&gt;` for more examples.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n |      ...                          \"bar\", \"bar\", \"bar\", \"bar\"],\n |      ...                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n |      ...                          \"one\", \"one\", \"two\", \"two\"],\n |      ...                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n |      ...                          \"small\", \"large\", \"small\", \"small\",\n |      ...                          \"large\"],\n |      ...                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n |      ...                    \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9]})\n |      &gt;&gt;&gt; df\n |           A    B      C  D  E\n |      0  foo  one  small  1  2\n |      1  foo  one  large  2  4\n |      2  foo  one  large  2  5\n |      3  foo  two  small  3  5\n |      4  foo  two  small  3  6\n |      5  bar  one  large  4  6\n |      6  bar  one  small  5  8\n |      7  bar  two  small  6  9\n |      8  bar  two  large  7  9\n |\n |      This first example aggregates values by taking the sum.\n |\n |      &gt;&gt;&gt; table = pd.pivot_table(df, values='D', index=['A', 'B'],\n |      ...                        columns=['C'], aggfunc=\"sum\")\n |      &gt;&gt;&gt; table\n |      C        large  small\n |      A   B\n |      bar one    4.0    5.0\n |          two    7.0    6.0\n |      foo one    4.0    1.0\n |          two    NaN    6.0\n |\n |      We can also fill missing values using the `fill_value` parameter.\n |\n |      &gt;&gt;&gt; table = pd.pivot_table(df, values='D', index=['A', 'B'],\n |      ...                        columns=['C'], aggfunc=\"sum\", fill_value=0)\n |      &gt;&gt;&gt; table\n |      C        large  small\n |      A   B\n |      bar one      4      5\n |          two      7      6\n |      foo one      4      1\n |          two      0      6\n |\n |      The next example aggregates by taking the mean across multiple columns.\n |\n |      &gt;&gt;&gt; table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n |      ...                        aggfunc={'D': \"mean\", 'E': \"mean\"})\n |      &gt;&gt;&gt; table\n |                      D         E\n |      A   C\n |      bar large  5.500000  7.500000\n |          small  5.500000  8.500000\n |      foo large  2.000000  4.500000\n |          small  2.333333  4.333333\n |\n |      We can also calculate multiple types of aggregations for any given\n |      value column.\n |\n |      &gt;&gt;&gt; table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n |      ...                        aggfunc={'D': \"mean\",\n |      ...                                 'E': [\"min\", \"max\", \"mean\"]})\n |      &gt;&gt;&gt; table\n |                        D   E\n |                     mean max      mean  min\n |      A   C\n |      bar large  5.500000   9  7.500000    6\n |          small  5.500000   9  8.500000    8\n |      foo large  2.000000   5  4.500000    4\n |          small  2.333333   6  4.333333    2\n |\n |  pop(self, item: 'Hashable') -&gt; 'Series'\n |      Return item and drop from frame. Raise KeyError if not found.\n |\n |      Parameters\n |      ----------\n |      item : label\n |          Label of column to be popped.\n |\n |      Returns\n |      -------\n |      Series\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([('falcon', 'bird', 389.0),\n |      ...                    ('parrot', 'bird', 24.0),\n |      ...                    ('lion', 'mammal', 80.5),\n |      ...                    ('monkey', 'mammal', np.nan)],\n |      ...                   columns=('name', 'class', 'max_speed'))\n |      &gt;&gt;&gt; df\n |           name   class  max_speed\n |      0  falcon    bird      389.0\n |      1  parrot    bird       24.0\n |      2    lion  mammal       80.5\n |      3  monkey  mammal        NaN\n |\n |      &gt;&gt;&gt; df.pop('class')\n |      0      bird\n |      1      bird\n |      2    mammal\n |      3    mammal\n |      Name: class, dtype: object\n |\n |      &gt;&gt;&gt; df\n |           name  max_speed\n |      0  falcon      389.0\n |      1  parrot       24.0\n |      2    lion       80.5\n |      3  monkey        NaN\n |\n |  pow(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |      Get Exponential power of dataframe and other, element-wise (binary operator `pow`).\n |\n |      Equivalent to ``dataframe ** other``, but with support to substitute a fill_value\n |      for missing data in one of the inputs. With reverse version, `rpow`.\n |\n |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\n |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}\n |          Whether to compare by the index (0 or 'index') or columns.\n |          (1 or 'columns'). For Series input, axis to match Series index on.\n |      level : int or label\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : float or None, default None\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful DataFrame alignment, with this value before computation.\n |          If data in both corresponding DataFrame locations is missing\n |          the result will be missing.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Result of the arithmetic operation.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add DataFrames.\n |      DataFrame.sub : Subtract DataFrames.\n |      DataFrame.mul : Multiply DataFrames.\n |      DataFrame.div : Divide DataFrames (float division).\n |      DataFrame.truediv : Divide DataFrames (float division).\n |      DataFrame.floordiv : Divide DataFrames (integer division).\n |      DataFrame.mod : Calculate modulo (remainder after division).\n |      DataFrame.pow : Calculate exponential power.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n |      ...                    'degrees': [360, 180, 360]},\n |      ...                   index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; df\n |                 angles  degrees\n |      circle          0      360\n |      triangle        3      180\n |      rectangle       4      360\n |\n |      Add a scalar with operator version which return the same\n |      results.\n |\n |      &gt;&gt;&gt; df + 1\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      &gt;&gt;&gt; df.add(1)\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      Divide by constant with reverse version.\n |\n |      &gt;&gt;&gt; df.div(10)\n |                 angles  degrees\n |      circle        0.0     36.0\n |      triangle      0.3     18.0\n |      rectangle     0.4     36.0\n |\n |      &gt;&gt;&gt; df.rdiv(10)\n |                   angles   degrees\n |      circle          inf  0.027778\n |      triangle   3.333333  0.055556\n |      rectangle  2.500000  0.027778\n |\n |      Subtract a list and Series by axis with operator version.\n |\n |      &gt;&gt;&gt; df - [1, 2]\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub([1, 2], axis='columns')\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n |      ...        axis='index')\n |                 angles  degrees\n |      circle         -1      359\n |      triangle        2      179\n |      rectangle       3      359\n |\n |      Multiply a dictionary by axis.\n |\n |      &gt;&gt;&gt; df.mul({'angles': 0, 'degrees': 2})\n |                  angles  degrees\n |      circle           0      720\n |      triangle         0      360\n |      rectangle        0      720\n |\n |      &gt;&gt;&gt; df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n |                  angles  degrees\n |      circle           0        0\n |      triangle         6      360\n |      rectangle       12     1080\n |\n |      Multiply a DataFrame of different shape with operator version.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'angles': [0, 3, 4]},\n |      ...                      index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; other\n |                 angles\n |      circle          0\n |      triangle        3\n |      rectangle       4\n |\n |      &gt;&gt;&gt; df * other\n |                 angles  degrees\n |      circle          0      NaN\n |      triangle        9      NaN\n |      rectangle      16      NaN\n |\n |      &gt;&gt;&gt; df.mul(other, fill_value=0)\n |                 angles  degrees\n |      circle          0      0.0\n |      triangle        9      0.0\n |      rectangle      16      0.0\n |\n |      Divide by a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},\n |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n |      ...                                    ['circle', 'triangle', 'rectangle',\n |      ...                                     'square', 'pentagon', 'hexagon']])\n |      &gt;&gt;&gt; df_multindex\n |                   angles  degrees\n |      A circle          0      360\n |        triangle        3      180\n |        rectangle       4      360\n |      B square          4      360\n |        pentagon        5      540\n |        hexagon         6      720\n |\n |      &gt;&gt;&gt; df.div(df_multindex, level=1, fill_value=0)\n |                   angles  degrees\n |      A circle        NaN      1.0\n |        triangle      1.0      1.0\n |        rectangle     1.0      1.0\n |      B square        0.0      0.0\n |        pentagon      0.0      0.0\n |        hexagon       0.0      0.0\n |\n |  prod(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)\n |      Return the product of the values over the requested axis.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0), columns (1)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          .. warning::\n |\n |              The behavior of DataFrame.prod with ``axis=None`` is deprecated,\n |              in a future version this will reduce over both axes and return a scalar\n |              To retain the old behavior, pass axis=0 (or do not pass axis).\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      min_count : int, default 0\n |          The required number of valid values to perform the operation. If fewer than\n |          ``min_count`` non-NA values are present the result will be NA.\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      Series or scalar\n |\n |      See Also\n |      --------\n |      Series.sum : Return the sum.\n |      Series.min : Return the minimum.\n |      Series.max : Return the maximum.\n |      Series.idxmin : Return the index of the minimum.\n |      Series.idxmax : Return the index of the maximum.\n |      DataFrame.sum : Return the sum over the requested axis.\n |      DataFrame.min : Return the minimum over the requested axis.\n |      DataFrame.max : Return the maximum over the requested axis.\n |      DataFrame.idxmin : Return the index of the minimum over the requested axis.\n |      DataFrame.idxmax : Return the index of the maximum over the requested axis.\n |\n |      Examples\n |      --------\n |      By default, the product of an empty or all-NA Series is ``1``\n |\n |      &gt;&gt;&gt; pd.Series([], dtype=\"float64\").prod()\n |      1.0\n |\n |      This can be controlled with the ``min_count`` parameter\n |\n |      &gt;&gt;&gt; pd.Series([], dtype=\"float64\").prod(min_count=1)\n |      nan\n |\n |      Thanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\n |      empty series identically.\n |\n |      &gt;&gt;&gt; pd.Series([np.nan]).prod()\n |      1.0\n |\n |      &gt;&gt;&gt; pd.Series([np.nan]).prod(min_count=1)\n |      nan\n |\n |  product = prod(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)\n |\n |  quantile(self, q: 'float | AnyArrayLike | Sequence[float]' = 0.5, axis: 'Axis' = 0, numeric_only: 'bool' = False, interpolation: 'QuantileInterpolation' = 'linear', method: \"Literal['single', 'table']\" = 'single') -&gt; 'Series | DataFrame'\n |      Return values at the given quantile over requested axis.\n |\n |      Parameters\n |      ----------\n |      q : float or array-like, default 0.5 (50% quantile)\n |          Value between 0 &lt;= q &lt;= 1, the quantile(s) to compute.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n |      numeric_only : bool, default False\n |          Include only `float`, `int` or `boolean` data.\n |\n |          .. versionchanged:: 2.0.0\n |              The default value of ``numeric_only`` is now ``False``.\n |\n |      interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n |          This optional parameter specifies the interpolation method to use,\n |          when the desired quantile lies between two data points `i` and `j`:\n |\n |          * linear: `i + (j - i) * fraction`, where `fraction` is the\n |            fractional part of the index surrounded by `i` and `j`.\n |          * lower: `i`.\n |          * higher: `j`.\n |          * nearest: `i` or `j` whichever is nearest.\n |          * midpoint: (`i` + `j`) / 2.\n |      method : {'single', 'table'}, default 'single'\n |          Whether to compute quantiles per-column ('single') or over all columns\n |          ('table'). When 'table', the only allowed interpolation methods are\n |          'nearest', 'lower', and 'higher'.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |\n |          If ``q`` is an array, a DataFrame will be returned where the\n |            index is ``q``, the columns are the columns of self, and the\n |            values are the quantiles.\n |          If ``q`` is a float, a Series will be returned where the\n |            index is the columns of self and the values are the quantiles.\n |\n |      See Also\n |      --------\n |      core.window.rolling.Rolling.quantile: Rolling quantile.\n |      numpy.percentile: Numpy function to compute the percentile.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n |      ...                   columns=['a', 'b'])\n |      &gt;&gt;&gt; df.quantile(.1)\n |      a    1.3\n |      b    3.7\n |      Name: 0.1, dtype: float64\n |      &gt;&gt;&gt; df.quantile([.1, .5])\n |             a     b\n |      0.1  1.3   3.7\n |      0.5  2.5  55.0\n |\n |      Specifying `method='table'` will compute the quantile over all columns.\n |\n |      &gt;&gt;&gt; df.quantile(.1, method=\"table\", interpolation=\"nearest\")\n |      a    1\n |      b    1\n |      Name: 0.1, dtype: int64\n |      &gt;&gt;&gt; df.quantile([.1, .5], method=\"table\", interpolation=\"nearest\")\n |           a    b\n |      0.1  1    1\n |      0.5  3  100\n |\n |      Specifying `numeric_only=False` will also compute the quantile of\n |      datetime and timedelta data.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2],\n |      ...                    'B': [pd.Timestamp('2010'),\n |      ...                          pd.Timestamp('2011')],\n |      ...                    'C': [pd.Timedelta('1 days'),\n |      ...                          pd.Timedelta('2 days')]})\n |      &gt;&gt;&gt; df.quantile(0.5, numeric_only=False)\n |      A                    1.5\n |      B    2010-07-02 12:00:00\n |      C        1 days 12:00:00\n |      Name: 0.5, dtype: object\n |\n |  query(self, expr: 'str', *, inplace: 'bool' = False, **kwargs) -&gt; 'DataFrame | None'\n |      Query the columns of a DataFrame with a boolean expression.\n |\n |      Parameters\n |      ----------\n |      expr : str\n |          The query string to evaluate.\n |\n |          You can refer to variables\n |          in the environment by prefixing them with an '@' character like\n |          ``@a + b``.\n |\n |          You can refer to column names that are not valid Python variable names\n |          by surrounding them in backticks. Thus, column names containing spaces\n |          or punctuations (besides underscores) or starting with digits must be\n |          surrounded by backticks. (For example, a column named \"Area (cm^2)\" would\n |          be referenced as ```Area (cm^2)```). Column names which are Python keywords\n |          (like \"list\", \"for\", \"import\", etc) cannot be used.\n |\n |          For example, if one of your columns is called ``a a`` and you want\n |          to sum it with ``b``, your query should be ```a a` + b``.\n |\n |      inplace : bool\n |          Whether to modify the DataFrame rather than creating a new one.\n |      **kwargs\n |          See the documentation for :func:`eval` for complete details\n |          on the keyword arguments accepted by :meth:`DataFrame.query`.\n |\n |      Returns\n |      -------\n |      DataFrame or None\n |          DataFrame resulting from the provided query expression or\n |          None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      eval : Evaluate a string describing operations on\n |          DataFrame columns.\n |      DataFrame.eval : Evaluate a string describing operations on\n |          DataFrame columns.\n |\n |      Notes\n |      -----\n |      The result of the evaluation of this expression is first passed to\n |      :attr:`DataFrame.loc` and if that fails because of a\n |      multidimensional key (e.g., a DataFrame) then the result will be passed\n |      to :meth:`DataFrame.__getitem__`.\n |\n |      This method uses the top-level :func:`eval` function to\n |      evaluate the passed query.\n |\n |      The :meth:`~pandas.DataFrame.query` method uses a slightly\n |      modified Python syntax by default. For example, the ``&`` and ``|``\n |      (bitwise) operators have the precedence of their boolean cousins,\n |      :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n |      however the semantics are different.\n |\n |      You can change the semantics of the expression by passing the keyword\n |      argument ``parser='python'``. This enforces the same semantics as\n |      evaluation in Python space. Likewise, you can pass ``engine='python'``\n |      to evaluate an expression using Python itself as a backend. This is not\n |      recommended as it is inefficient compared to using ``numexpr`` as the\n |      engine.\n |\n |      The :attr:`DataFrame.index` and\n |      :attr:`DataFrame.columns` attributes of the\n |      :class:`~pandas.DataFrame` instance are placed in the query namespace\n |      by default, which allows you to treat both the index and columns of the\n |      frame as a column in the frame.\n |      The identifier ``index`` is used for the frame index; you can also\n |      use the name of the index to identify it in a query. Please note that\n |      Python keywords may not be used as identifiers.\n |\n |      For further details and examples see the ``query`` documentation in\n |      :ref:`indexing &lt;indexing.query&gt;`.\n |\n |      *Backtick quoted variables*\n |\n |      Backtick quoted variables are parsed as literal Python code and\n |      are converted internally to a Python valid identifier.\n |      This can lead to the following problems.\n |\n |      During parsing a number of disallowed characters inside the backtick\n |      quoted string are replaced by strings that are allowed as a Python identifier.\n |      These characters include all operators in Python, the space character, the\n |      question mark, the exclamation mark, the dollar sign, and the euro sign.\n |      For other characters that fall outside the ASCII range (U+0001..U+007F)\n |      and those that are not further specified in PEP 3131,\n |      the query parser will raise an error.\n |      This excludes whitespace different than the space character,\n |      but also the hashtag (as it is used for comments) and the backtick\n |      itself (backtick can also not be escaped).\n |\n |      In a special case, quotes that make a pair around a backtick can\n |      confuse the parser.\n |      For example, ```it's` &gt; `that's``` will raise an error,\n |      as it forms a quoted string (``'s &gt; `that'``) with a backtick inside.\n |\n |      See also the Python documentation about lexical analysis\n |      (https://docs.python.org/3/reference/lexical_analysis.html)\n |      in combination with the source code in :mod:`pandas.core.computation.parsing`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': range(1, 6),\n |      ...                    'B': range(10, 0, -2),\n |      ...                    'C C': range(10, 5, -1)})\n |      &gt;&gt;&gt; df\n |         A   B  C C\n |      0  1  10   10\n |      1  2   8    9\n |      2  3   6    8\n |      3  4   4    7\n |      4  5   2    6\n |      &gt;&gt;&gt; df.query('A &gt; B')\n |         A  B  C C\n |      4  5  2    6\n |\n |      The previous expression is equivalent to\n |\n |      &gt;&gt;&gt; df[df.A &gt; df.B]\n |         A  B  C C\n |      4  5  2    6\n |\n |      For columns with spaces in their name, you can use backtick quoting.\n |\n |      &gt;&gt;&gt; df.query('B == `C C`')\n |         A   B  C C\n |      0  1  10   10\n |\n |      The previous expression is equivalent to\n |\n |      &gt;&gt;&gt; df[df.B == df['C C']]\n |         A   B  C C\n |      0  1  10   10\n |\n |  radd(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |      Get Addition of dataframe and other, element-wise (binary operator `radd`).\n |\n |      Equivalent to ``other + dataframe``, but with support to substitute a fill_value\n |      for missing data in one of the inputs. With reverse version, `add`.\n |\n |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\n |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}\n |          Whether to compare by the index (0 or 'index') or columns.\n |          (1 or 'columns'). For Series input, axis to match Series index on.\n |      level : int or label\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : float or None, default None\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful DataFrame alignment, with this value before computation.\n |          If data in both corresponding DataFrame locations is missing\n |          the result will be missing.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Result of the arithmetic operation.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add DataFrames.\n |      DataFrame.sub : Subtract DataFrames.\n |      DataFrame.mul : Multiply DataFrames.\n |      DataFrame.div : Divide DataFrames (float division).\n |      DataFrame.truediv : Divide DataFrames (float division).\n |      DataFrame.floordiv : Divide DataFrames (integer division).\n |      DataFrame.mod : Calculate modulo (remainder after division).\n |      DataFrame.pow : Calculate exponential power.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n |      ...                    'degrees': [360, 180, 360]},\n |      ...                   index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; df\n |                 angles  degrees\n |      circle          0      360\n |      triangle        3      180\n |      rectangle       4      360\n |\n |      Add a scalar with operator version which return the same\n |      results.\n |\n |      &gt;&gt;&gt; df + 1\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      &gt;&gt;&gt; df.add(1)\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      Divide by constant with reverse version.\n |\n |      &gt;&gt;&gt; df.div(10)\n |                 angles  degrees\n |      circle        0.0     36.0\n |      triangle      0.3     18.0\n |      rectangle     0.4     36.0\n |\n |      &gt;&gt;&gt; df.rdiv(10)\n |                   angles   degrees\n |      circle          inf  0.027778\n |      triangle   3.333333  0.055556\n |      rectangle  2.500000  0.027778\n |\n |      Subtract a list and Series by axis with operator version.\n |\n |      &gt;&gt;&gt; df - [1, 2]\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub([1, 2], axis='columns')\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n |      ...        axis='index')\n |                 angles  degrees\n |      circle         -1      359\n |      triangle        2      179\n |      rectangle       3      359\n |\n |      Multiply a dictionary by axis.\n |\n |      &gt;&gt;&gt; df.mul({'angles': 0, 'degrees': 2})\n |                  angles  degrees\n |      circle           0      720\n |      triangle         0      360\n |      rectangle        0      720\n |\n |      &gt;&gt;&gt; df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n |                  angles  degrees\n |      circle           0        0\n |      triangle         6      360\n |      rectangle       12     1080\n |\n |      Multiply a DataFrame of different shape with operator version.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'angles': [0, 3, 4]},\n |      ...                      index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; other\n |                 angles\n |      circle          0\n |      triangle        3\n |      rectangle       4\n |\n |      &gt;&gt;&gt; df * other\n |                 angles  degrees\n |      circle          0      NaN\n |      triangle        9      NaN\n |      rectangle      16      NaN\n |\n |      &gt;&gt;&gt; df.mul(other, fill_value=0)\n |                 angles  degrees\n |      circle          0      0.0\n |      triangle        9      0.0\n |      rectangle      16      0.0\n |\n |      Divide by a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},\n |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n |      ...                                    ['circle', 'triangle', 'rectangle',\n |      ...                                     'square', 'pentagon', 'hexagon']])\n |      &gt;&gt;&gt; df_multindex\n |                   angles  degrees\n |      A circle          0      360\n |        triangle        3      180\n |        rectangle       4      360\n |      B square          4      360\n |        pentagon        5      540\n |        hexagon         6      720\n |\n |      &gt;&gt;&gt; df.div(df_multindex, level=1, fill_value=0)\n |                   angles  degrees\n |      A circle        NaN      1.0\n |        triangle      1.0      1.0\n |        rectangle     1.0      1.0\n |      B square        0.0      0.0\n |        pentagon      0.0      0.0\n |        hexagon       0.0      0.0\n |\n |  rdiv = rtruediv(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |\n |  reindex(self, labels=None, *, index=None, columns=None, axis: 'Axis | None' = None, method: 'ReindexMethod | None' = None, copy: 'bool | None' = None, level: 'Level | None' = None, fill_value: 'Scalar | None' = nan, limit: 'int | None' = None, tolerance=None) -&gt; 'DataFrame'\n |      Conform DataFrame to new index with optional filling logic.\n |\n |      Places NA/NaN in locations having no value in the previous index. A new object\n |      is produced unless the new index is equivalent to the current one and\n |      ``copy=False``.\n |\n |      Parameters\n |      ----------\n |\n |      labels : array-like, optional\n |          New labels / index to conform the axis specified by 'axis' to.\n |      index : array-like, optional\n |          New labels for the index. Preferably an Index object to avoid\n |          duplicating data.\n |      columns : array-like, optional\n |          New labels for the columns. Preferably an Index object to avoid\n |          duplicating data.\n |      axis : int or str, optional\n |          Axis to target. Can be either the axis name ('index', 'columns')\n |          or number (0, 1).\n |      method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n |          Method to use for filling holes in reindexed DataFrame.\n |          Please note: this is only applicable to DataFrames/Series with a\n |          monotonically increasing/decreasing index.\n |\n |          * None (default): don't fill gaps\n |          * pad / ffill: Propagate last valid observation forward to next\n |            valid.\n |          * backfill / bfill: Use next valid observation to fill gap.\n |          * nearest: Use nearest valid observations to fill gap.\n |\n |      copy : bool, default True\n |          Return a new object, even if the passed indexes are the same.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      level : int or name\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : scalar, default np.nan\n |          Value to use for missing values. Defaults to NaN, but can be any\n |          \"compatible\" value.\n |      limit : int, default None\n |          Maximum number of consecutive elements to forward or backward fill.\n |      tolerance : optional\n |          Maximum distance between original and new labels for inexact\n |          matches. The values of the index at the matching locations most\n |          satisfy the equation ``abs(index[indexer] - target) &lt;= tolerance``.\n |\n |          Tolerance may be a scalar value, which applies the same tolerance\n |          to all values, or list-like, which applies variable tolerance per\n |          element. List-like includes list, tuple, array, Series, and must be\n |          the same size as the index and its dtype must exactly match the\n |          index's type.\n |\n |      Returns\n |      -------\n |      DataFrame with changed index.\n |\n |      See Also\n |      --------\n |      DataFrame.set_index : Set row labels.\n |      DataFrame.reset_index : Remove row labels or move them to new columns.\n |      DataFrame.reindex_like : Change to same indices as other DataFrame.\n |\n |      Examples\n |      --------\n |      ``DataFrame.reindex`` supports two calling conventions\n |\n |      * ``(index=index_labels, columns=column_labels, ...)``\n |      * ``(labels, axis={'index', 'columns'}, ...)``\n |\n |      We *highly* recommend using keyword arguments to clarify your\n |      intent.\n |\n |      Create a dataframe with some fictional data.\n |\n |      &gt;&gt;&gt; index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n |      &gt;&gt;&gt; df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],\n |      ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n |      ...                   index=index)\n |      &gt;&gt;&gt; df\n |                 http_status  response_time\n |      Firefox            200           0.04\n |      Chrome             200           0.02\n |      Safari             404           0.07\n |      IE10               404           0.08\n |      Konqueror          301           1.00\n |\n |      Create a new index and reindex the dataframe. By default\n |      values in the new index that do not have corresponding\n |      records in the dataframe are assigned ``NaN``.\n |\n |      &gt;&gt;&gt; new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n |      ...              'Chrome']\n |      &gt;&gt;&gt; df.reindex(new_index)\n |                     http_status  response_time\n |      Safari               404.0           0.07\n |      Iceweasel              NaN            NaN\n |      Comodo Dragon          NaN            NaN\n |      IE10                 404.0           0.08\n |      Chrome               200.0           0.02\n |\n |      We can fill in the missing values by passing a value to\n |      the keyword ``fill_value``. Because the index is not monotonically\n |      increasing or decreasing, we cannot use arguments to the keyword\n |      ``method`` to fill the ``NaN`` values.\n |\n |      &gt;&gt;&gt; df.reindex(new_index, fill_value=0)\n |                     http_status  response_time\n |      Safari                 404           0.07\n |      Iceweasel                0           0.00\n |      Comodo Dragon            0           0.00\n |      IE10                   404           0.08\n |      Chrome                 200           0.02\n |\n |      &gt;&gt;&gt; df.reindex(new_index, fill_value='missing')\n |                    http_status response_time\n |      Safari                404          0.07\n |      Iceweasel         missing       missing\n |      Comodo Dragon     missing       missing\n |      IE10                  404          0.08\n |      Chrome                200          0.02\n |\n |      We can also reindex the columns.\n |\n |      &gt;&gt;&gt; df.reindex(columns=['http_status', 'user_agent'])\n |                 http_status  user_agent\n |      Firefox            200         NaN\n |      Chrome             200         NaN\n |      Safari             404         NaN\n |      IE10               404         NaN\n |      Konqueror          301         NaN\n |\n |      Or we can use \"axis-style\" keyword arguments\n |\n |      &gt;&gt;&gt; df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n |                 http_status  user_agent\n |      Firefox            200         NaN\n |      Chrome             200         NaN\n |      Safari             404         NaN\n |      IE10               404         NaN\n |      Konqueror          301         NaN\n |\n |      To further illustrate the filling functionality in\n |      ``reindex``, we will create a dataframe with a\n |      monotonically increasing index (for example, a sequence\n |      of dates).\n |\n |      &gt;&gt;&gt; date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n |      &gt;&gt;&gt; df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n |      ...                    index=date_index)\n |      &gt;&gt;&gt; df2\n |                  prices\n |      2010-01-01   100.0\n |      2010-01-02   101.0\n |      2010-01-03     NaN\n |      2010-01-04   100.0\n |      2010-01-05    89.0\n |      2010-01-06    88.0\n |\n |      Suppose we decide to expand the dataframe to cover a wider\n |      date range.\n |\n |      &gt;&gt;&gt; date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n |      &gt;&gt;&gt; df2.reindex(date_index2)\n |                  prices\n |      2009-12-29     NaN\n |      2009-12-30     NaN\n |      2009-12-31     NaN\n |      2010-01-01   100.0\n |      2010-01-02   101.0\n |      2010-01-03     NaN\n |      2010-01-04   100.0\n |      2010-01-05    89.0\n |      2010-01-06    88.0\n |      2010-01-07     NaN\n |\n |      The index entries that did not have a value in the original data frame\n |      (for example, '2009-12-29') are by default filled with ``NaN``.\n |      If desired, we can fill in the missing values using one of several\n |      options.\n |\n |      For example, to back-propagate the last valid value to fill the ``NaN``\n |      values, pass ``bfill`` as an argument to the ``method`` keyword.\n |\n |      &gt;&gt;&gt; df2.reindex(date_index2, method='bfill')\n |                  prices\n |      2009-12-29   100.0\n |      2009-12-30   100.0\n |      2009-12-31   100.0\n |      2010-01-01   100.0\n |      2010-01-02   101.0\n |      2010-01-03     NaN\n |      2010-01-04   100.0\n |      2010-01-05    89.0\n |      2010-01-06    88.0\n |      2010-01-07     NaN\n |\n |      Please note that the ``NaN`` value present in the original dataframe\n |      (at index value 2010-01-03) will not be filled by any of the\n |      value propagation schemes. This is because filling while reindexing\n |      does not look at dataframe values, but only compares the original and\n |      desired indexes. If you do want to fill in the ``NaN`` values present\n |      in the original dataframe, use the ``fillna()`` method.\n |\n |      See the :ref:`user guide &lt;basics.reindexing&gt;` for more.\n |\n |  rename(self, mapper: 'Renamer | None' = None, *, index: 'Renamer | None' = None, columns: 'Renamer | None' = None, axis: 'Axis | None' = None, copy: 'bool | None' = None, inplace: 'bool' = False, level: 'Level | None' = None, errors: 'IgnoreRaise' = 'ignore') -&gt; 'DataFrame | None'\n |      Rename columns or index labels.\n |\n |      Function / dict values must be unique (1-to-1). Labels not contained in\n |      a dict / Series will be left as-is. Extra labels listed don't throw an\n |      error.\n |\n |      See the :ref:`user guide &lt;basics.rename&gt;` for more.\n |\n |      Parameters\n |      ----------\n |      mapper : dict-like or function\n |          Dict-like or function transformations to apply to\n |          that axis' values. Use either ``mapper`` and ``axis`` to\n |          specify the axis to target with ``mapper``, or ``index`` and\n |          ``columns``.\n |      index : dict-like or function\n |          Alternative to specifying axis (``mapper, axis=0``\n |          is equivalent to ``index=mapper``).\n |      columns : dict-like or function\n |          Alternative to specifying axis (``mapper, axis=1``\n |          is equivalent to ``columns=mapper``).\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Axis to target with ``mapper``. Can be either the axis name\n |          ('index', 'columns') or number (0, 1). The default is 'index'.\n |      copy : bool, default True\n |          Also copy underlying data.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      inplace : bool, default False\n |          Whether to modify the DataFrame rather than creating a new one.\n |          If True then value of copy is ignored.\n |      level : int or level name, default None\n |          In case of a MultiIndex, only rename labels in the specified\n |          level.\n |      errors : {'ignore', 'raise'}, default 'ignore'\n |          If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n |          or `columns` contains labels that are not present in the Index\n |          being transformed.\n |          If 'ignore', existing keys will be renamed and extra keys will be\n |          ignored.\n |\n |      Returns\n |      -------\n |      DataFrame or None\n |          DataFrame with the renamed axis labels or None if ``inplace=True``.\n |\n |      Raises\n |      ------\n |      KeyError\n |          If any of the labels is not found in the selected axis and\n |          \"errors='raise'\".\n |\n |      See Also\n |      --------\n |      DataFrame.rename_axis : Set the name of the axis.\n |\n |      Examples\n |      --------\n |      ``DataFrame.rename`` supports two calling conventions\n |\n |      * ``(index=index_mapper, columns=columns_mapper, ...)``\n |      * ``(mapper, axis={'index', 'columns'}, ...)``\n |\n |      We *highly* recommend using keyword arguments to clarify your\n |      intent.\n |\n |      Rename columns using a mapping:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n |      &gt;&gt;&gt; df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\n |         a  c\n |      0  1  4\n |      1  2  5\n |      2  3  6\n |\n |      Rename index using a mapping:\n |\n |      &gt;&gt;&gt; df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})\n |         A  B\n |      x  1  4\n |      y  2  5\n |      z  3  6\n |\n |      Cast index labels to a different type:\n |\n |      &gt;&gt;&gt; df.index\n |      RangeIndex(start=0, stop=3, step=1)\n |      &gt;&gt;&gt; df.rename(index=str).index\n |      Index(['0', '1', '2'], dtype='object')\n |\n |      &gt;&gt;&gt; df.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\")\n |      Traceback (most recent call last):\n |      KeyError: ['C'] not found in axis\n |\n |      Using axis-style parameters:\n |\n |      &gt;&gt;&gt; df.rename(str.lower, axis='columns')\n |         a  b\n |      0  1  4\n |      1  2  5\n |      2  3  6\n |\n |      &gt;&gt;&gt; df.rename({1: 2, 2: 4}, axis='index')\n |         A  B\n |      0  1  4\n |      2  2  5\n |      4  3  6\n |\n |  reorder_levels(self, order: 'Sequence[int | str]', axis: 'Axis' = 0) -&gt; 'DataFrame'\n |      Rearrange index levels using input order. May not drop or duplicate levels.\n |\n |      Parameters\n |      ----------\n |      order : list of int or list of str\n |          List representing new level order. Reference level by number\n |          (position) or by key (label).\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Where to reorder levels.\n |\n |      Returns\n |      -------\n |      DataFrame\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; data = {\n |      ...     \"class\": [\"Mammals\", \"Mammals\", \"Reptiles\"],\n |      ...     \"diet\": [\"Omnivore\", \"Carnivore\", \"Carnivore\"],\n |      ...     \"species\": [\"Humans\", \"Dogs\", \"Snakes\"],\n |      ... }\n |      &gt;&gt;&gt; df = pd.DataFrame(data, columns=[\"class\", \"diet\", \"species\"])\n |      &gt;&gt;&gt; df = df.set_index([\"class\", \"diet\"])\n |      &gt;&gt;&gt; df\n |                                        species\n |      class      diet\n |      Mammals    Omnivore                Humans\n |                 Carnivore                 Dogs\n |      Reptiles   Carnivore               Snakes\n |\n |      Let's reorder the levels of the index:\n |\n |      &gt;&gt;&gt; df.reorder_levels([\"diet\", \"class\"])\n |                                        species\n |      diet      class\n |      Omnivore  Mammals                  Humans\n |      Carnivore Mammals                    Dogs\n |                Reptiles                 Snakes\n |\n |  reset_index(self, level: 'IndexLabel | None' = None, *, drop: 'bool' = False, inplace: 'bool' = False, col_level: 'Hashable' = 0, col_fill: 'Hashable' = '', allow_duplicates: 'bool | lib.NoDefault' = &lt;no_default&gt;, names: 'Hashable | Sequence[Hashable] | None' = None) -&gt; 'DataFrame | None'\n |      Reset the index, or a level of it.\n |\n |      Reset the index of the DataFrame, and use the default one instead.\n |      If the DataFrame has a MultiIndex, this method can remove one or more\n |      levels.\n |\n |      Parameters\n |      ----------\n |      level : int, str, tuple, or list, default None\n |          Only remove the given levels from the index. Removes all levels by\n |          default.\n |      drop : bool, default False\n |          Do not try to insert index into dataframe columns. This resets\n |          the index to the default integer index.\n |      inplace : bool, default False\n |          Whether to modify the DataFrame rather than creating a new one.\n |      col_level : int or str, default 0\n |          If the columns have multiple levels, determines which level the\n |          labels are inserted into. By default it is inserted into the first\n |          level.\n |      col_fill : object, default ''\n |          If the columns have multiple levels, determines how the other\n |          levels are named. If None then the index name is repeated.\n |      allow_duplicates : bool, optional, default lib.no_default\n |          Allow duplicate column labels to be created.\n |\n |          .. versionadded:: 1.5.0\n |\n |      names : int, str or 1-dimensional list, default None\n |          Using the given string, rename the DataFrame column which contains the\n |          index data. If the DataFrame has a MultiIndex, this has to be a list or\n |          tuple with length equal to the number of levels.\n |\n |          .. versionadded:: 1.5.0\n |\n |      Returns\n |      -------\n |      DataFrame or None\n |          DataFrame with the new index or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      DataFrame.set_index : Opposite of reset_index.\n |      DataFrame.reindex : Change to new indices or expand indices.\n |      DataFrame.reindex_like : Change to same indices as other DataFrame.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([('bird', 389.0),\n |      ...                    ('bird', 24.0),\n |      ...                    ('mammal', 80.5),\n |      ...                    ('mammal', np.nan)],\n |      ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n |      ...                   columns=('class', 'max_speed'))\n |      &gt;&gt;&gt; df\n |               class  max_speed\n |      falcon    bird      389.0\n |      parrot    bird       24.0\n |      lion    mammal       80.5\n |      monkey  mammal        NaN\n |\n |      When we reset the index, the old index is added as a column, and a\n |      new sequential index is used:\n |\n |      &gt;&gt;&gt; df.reset_index()\n |          index   class  max_speed\n |      0  falcon    bird      389.0\n |      1  parrot    bird       24.0\n |      2    lion  mammal       80.5\n |      3  monkey  mammal        NaN\n |\n |      We can use the `drop` parameter to avoid the old index being added as\n |      a column:\n |\n |      &gt;&gt;&gt; df.reset_index(drop=True)\n |          class  max_speed\n |      0    bird      389.0\n |      1    bird       24.0\n |      2  mammal       80.5\n |      3  mammal        NaN\n |\n |      You can also use `reset_index` with `MultiIndex`.\n |\n |      &gt;&gt;&gt; index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n |      ...                                    ('bird', 'parrot'),\n |      ...                                    ('mammal', 'lion'),\n |      ...                                    ('mammal', 'monkey')],\n |      ...                                   names=['class', 'name'])\n |      &gt;&gt;&gt; columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n |      ...                                      ('species', 'type')])\n |      &gt;&gt;&gt; df = pd.DataFrame([(389.0, 'fly'),\n |      ...                    (24.0, 'fly'),\n |      ...                    (80.5, 'run'),\n |      ...                    (np.nan, 'jump')],\n |      ...                   index=index,\n |      ...                   columns=columns)\n |      &gt;&gt;&gt; df\n |                     speed species\n |                       max    type\n |      class  name\n |      bird   falcon  389.0     fly\n |             parrot   24.0     fly\n |      mammal lion     80.5     run\n |             monkey    NaN    jump\n |\n |      Using the `names` parameter, choose a name for the index column:\n |\n |      &gt;&gt;&gt; df.reset_index(names=['classes', 'names'])\n |        classes   names  speed species\n |                           max    type\n |      0    bird  falcon  389.0     fly\n |      1    bird  parrot   24.0     fly\n |      2  mammal    lion   80.5     run\n |      3  mammal  monkey    NaN    jump\n |\n |      If the index has multiple levels, we can reset a subset of them:\n |\n |      &gt;&gt;&gt; df.reset_index(level='class')\n |               class  speed species\n |                        max    type\n |      name\n |      falcon    bird  389.0     fly\n |      parrot    bird   24.0     fly\n |      lion    mammal   80.5     run\n |      monkey  mammal    NaN    jump\n |\n |      If we are not dropping the index, by default, it is placed in the top\n |      level. We can place it in another level:\n |\n |      &gt;&gt;&gt; df.reset_index(level='class', col_level=1)\n |                      speed species\n |               class    max    type\n |      name\n |      falcon    bird  389.0     fly\n |      parrot    bird   24.0     fly\n |      lion    mammal   80.5     run\n |      monkey  mammal    NaN    jump\n |\n |      When the index is inserted under another level, we can specify under\n |      which one with the parameter `col_fill`:\n |\n |      &gt;&gt;&gt; df.reset_index(level='class', col_level=1, col_fill='species')\n |                    species  speed species\n |                      class    max    type\n |      name\n |      falcon           bird  389.0     fly\n |      parrot           bird   24.0     fly\n |      lion           mammal   80.5     run\n |      monkey         mammal    NaN    jump\n |\n |      If we specify a nonexistent level for `col_fill`, it is created:\n |\n |      &gt;&gt;&gt; df.reset_index(level='class', col_level=1, col_fill='genus')\n |                      genus  speed species\n |                      class    max    type\n |      name\n |      falcon           bird  389.0     fly\n |      parrot           bird   24.0     fly\n |      lion           mammal   80.5     run\n |      monkey         mammal    NaN    jump\n |\n |  rfloordiv(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |      Get Integer division of dataframe and other, element-wise (binary operator `rfloordiv`).\n |\n |      Equivalent to ``other // dataframe``, but with support to substitute a fill_value\n |      for missing data in one of the inputs. With reverse version, `floordiv`.\n |\n |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\n |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}\n |          Whether to compare by the index (0 or 'index') or columns.\n |          (1 or 'columns'). For Series input, axis to match Series index on.\n |      level : int or label\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : float or None, default None\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful DataFrame alignment, with this value before computation.\n |          If data in both corresponding DataFrame locations is missing\n |          the result will be missing.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Result of the arithmetic operation.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add DataFrames.\n |      DataFrame.sub : Subtract DataFrames.\n |      DataFrame.mul : Multiply DataFrames.\n |      DataFrame.div : Divide DataFrames (float division).\n |      DataFrame.truediv : Divide DataFrames (float division).\n |      DataFrame.floordiv : Divide DataFrames (integer division).\n |      DataFrame.mod : Calculate modulo (remainder after division).\n |      DataFrame.pow : Calculate exponential power.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n |      ...                    'degrees': [360, 180, 360]},\n |      ...                   index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; df\n |                 angles  degrees\n |      circle          0      360\n |      triangle        3      180\n |      rectangle       4      360\n |\n |      Add a scalar with operator version which return the same\n |      results.\n |\n |      &gt;&gt;&gt; df + 1\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      &gt;&gt;&gt; df.add(1)\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      Divide by constant with reverse version.\n |\n |      &gt;&gt;&gt; df.div(10)\n |                 angles  degrees\n |      circle        0.0     36.0\n |      triangle      0.3     18.0\n |      rectangle     0.4     36.0\n |\n |      &gt;&gt;&gt; df.rdiv(10)\n |                   angles   degrees\n |      circle          inf  0.027778\n |      triangle   3.333333  0.055556\n |      rectangle  2.500000  0.027778\n |\n |      Subtract a list and Series by axis with operator version.\n |\n |      &gt;&gt;&gt; df - [1, 2]\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub([1, 2], axis='columns')\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n |      ...        axis='index')\n |                 angles  degrees\n |      circle         -1      359\n |      triangle        2      179\n |      rectangle       3      359\n |\n |      Multiply a dictionary by axis.\n |\n |      &gt;&gt;&gt; df.mul({'angles': 0, 'degrees': 2})\n |                  angles  degrees\n |      circle           0      720\n |      triangle         0      360\n |      rectangle        0      720\n |\n |      &gt;&gt;&gt; df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n |                  angles  degrees\n |      circle           0        0\n |      triangle         6      360\n |      rectangle       12     1080\n |\n |      Multiply a DataFrame of different shape with operator version.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'angles': [0, 3, 4]},\n |      ...                      index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; other\n |                 angles\n |      circle          0\n |      triangle        3\n |      rectangle       4\n |\n |      &gt;&gt;&gt; df * other\n |                 angles  degrees\n |      circle          0      NaN\n |      triangle        9      NaN\n |      rectangle      16      NaN\n |\n |      &gt;&gt;&gt; df.mul(other, fill_value=0)\n |                 angles  degrees\n |      circle          0      0.0\n |      triangle        9      0.0\n |      rectangle      16      0.0\n |\n |      Divide by a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},\n |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n |      ...                                    ['circle', 'triangle', 'rectangle',\n |      ...                                     'square', 'pentagon', 'hexagon']])\n |      &gt;&gt;&gt; df_multindex\n |                   angles  degrees\n |      A circle          0      360\n |        triangle        3      180\n |        rectangle       4      360\n |      B square          4      360\n |        pentagon        5      540\n |        hexagon         6      720\n |\n |      &gt;&gt;&gt; df.div(df_multindex, level=1, fill_value=0)\n |                   angles  degrees\n |      A circle        NaN      1.0\n |        triangle      1.0      1.0\n |        rectangle     1.0      1.0\n |      B square        0.0      0.0\n |        pentagon      0.0      0.0\n |        hexagon       0.0      0.0\n |\n |  rmod(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |      Get Modulo of dataframe and other, element-wise (binary operator `rmod`).\n |\n |      Equivalent to ``other % dataframe``, but with support to substitute a fill_value\n |      for missing data in one of the inputs. With reverse version, `mod`.\n |\n |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\n |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}\n |          Whether to compare by the index (0 or 'index') or columns.\n |          (1 or 'columns'). For Series input, axis to match Series index on.\n |      level : int or label\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : float or None, default None\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful DataFrame alignment, with this value before computation.\n |          If data in both corresponding DataFrame locations is missing\n |          the result will be missing.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Result of the arithmetic operation.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add DataFrames.\n |      DataFrame.sub : Subtract DataFrames.\n |      DataFrame.mul : Multiply DataFrames.\n |      DataFrame.div : Divide DataFrames (float division).\n |      DataFrame.truediv : Divide DataFrames (float division).\n |      DataFrame.floordiv : Divide DataFrames (integer division).\n |      DataFrame.mod : Calculate modulo (remainder after division).\n |      DataFrame.pow : Calculate exponential power.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n |      ...                    'degrees': [360, 180, 360]},\n |      ...                   index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; df\n |                 angles  degrees\n |      circle          0      360\n |      triangle        3      180\n |      rectangle       4      360\n |\n |      Add a scalar with operator version which return the same\n |      results.\n |\n |      &gt;&gt;&gt; df + 1\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      &gt;&gt;&gt; df.add(1)\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      Divide by constant with reverse version.\n |\n |      &gt;&gt;&gt; df.div(10)\n |                 angles  degrees\n |      circle        0.0     36.0\n |      triangle      0.3     18.0\n |      rectangle     0.4     36.0\n |\n |      &gt;&gt;&gt; df.rdiv(10)\n |                   angles   degrees\n |      circle          inf  0.027778\n |      triangle   3.333333  0.055556\n |      rectangle  2.500000  0.027778\n |\n |      Subtract a list and Series by axis with operator version.\n |\n |      &gt;&gt;&gt; df - [1, 2]\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub([1, 2], axis='columns')\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n |      ...        axis='index')\n |                 angles  degrees\n |      circle         -1      359\n |      triangle        2      179\n |      rectangle       3      359\n |\n |      Multiply a dictionary by axis.\n |\n |      &gt;&gt;&gt; df.mul({'angles': 0, 'degrees': 2})\n |                  angles  degrees\n |      circle           0      720\n |      triangle         0      360\n |      rectangle        0      720\n |\n |      &gt;&gt;&gt; df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n |                  angles  degrees\n |      circle           0        0\n |      triangle         6      360\n |      rectangle       12     1080\n |\n |      Multiply a DataFrame of different shape with operator version.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'angles': [0, 3, 4]},\n |      ...                      index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; other\n |                 angles\n |      circle          0\n |      triangle        3\n |      rectangle       4\n |\n |      &gt;&gt;&gt; df * other\n |                 angles  degrees\n |      circle          0      NaN\n |      triangle        9      NaN\n |      rectangle      16      NaN\n |\n |      &gt;&gt;&gt; df.mul(other, fill_value=0)\n |                 angles  degrees\n |      circle          0      0.0\n |      triangle        9      0.0\n |      rectangle      16      0.0\n |\n |      Divide by a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},\n |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n |      ...                                    ['circle', 'triangle', 'rectangle',\n |      ...                                     'square', 'pentagon', 'hexagon']])\n |      &gt;&gt;&gt; df_multindex\n |                   angles  degrees\n |      A circle          0      360\n |        triangle        3      180\n |        rectangle       4      360\n |      B square          4      360\n |        pentagon        5      540\n |        hexagon         6      720\n |\n |      &gt;&gt;&gt; df.div(df_multindex, level=1, fill_value=0)\n |                   angles  degrees\n |      A circle        NaN      1.0\n |        triangle      1.0      1.0\n |        rectangle     1.0      1.0\n |      B square        0.0      0.0\n |        pentagon      0.0      0.0\n |        hexagon       0.0      0.0\n |\n |  rmul(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |      Get Multiplication of dataframe and other, element-wise (binary operator `rmul`).\n |\n |      Equivalent to ``other * dataframe``, but with support to substitute a fill_value\n |      for missing data in one of the inputs. With reverse version, `mul`.\n |\n |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\n |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}\n |          Whether to compare by the index (0 or 'index') or columns.\n |          (1 or 'columns'). For Series input, axis to match Series index on.\n |      level : int or label\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : float or None, default None\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful DataFrame alignment, with this value before computation.\n |          If data in both corresponding DataFrame locations is missing\n |          the result will be missing.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Result of the arithmetic operation.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add DataFrames.\n |      DataFrame.sub : Subtract DataFrames.\n |      DataFrame.mul : Multiply DataFrames.\n |      DataFrame.div : Divide DataFrames (float division).\n |      DataFrame.truediv : Divide DataFrames (float division).\n |      DataFrame.floordiv : Divide DataFrames (integer division).\n |      DataFrame.mod : Calculate modulo (remainder after division).\n |      DataFrame.pow : Calculate exponential power.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n |      ...                    'degrees': [360, 180, 360]},\n |      ...                   index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; df\n |                 angles  degrees\n |      circle          0      360\n |      triangle        3      180\n |      rectangle       4      360\n |\n |      Add a scalar with operator version which return the same\n |      results.\n |\n |      &gt;&gt;&gt; df + 1\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      &gt;&gt;&gt; df.add(1)\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      Divide by constant with reverse version.\n |\n |      &gt;&gt;&gt; df.div(10)\n |                 angles  degrees\n |      circle        0.0     36.0\n |      triangle      0.3     18.0\n |      rectangle     0.4     36.0\n |\n |      &gt;&gt;&gt; df.rdiv(10)\n |                   angles   degrees\n |      circle          inf  0.027778\n |      triangle   3.333333  0.055556\n |      rectangle  2.500000  0.027778\n |\n |      Subtract a list and Series by axis with operator version.\n |\n |      &gt;&gt;&gt; df - [1, 2]\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub([1, 2], axis='columns')\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n |      ...        axis='index')\n |                 angles  degrees\n |      circle         -1      359\n |      triangle        2      179\n |      rectangle       3      359\n |\n |      Multiply a dictionary by axis.\n |\n |      &gt;&gt;&gt; df.mul({'angles': 0, 'degrees': 2})\n |                  angles  degrees\n |      circle           0      720\n |      triangle         0      360\n |      rectangle        0      720\n |\n |      &gt;&gt;&gt; df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n |                  angles  degrees\n |      circle           0        0\n |      triangle         6      360\n |      rectangle       12     1080\n |\n |      Multiply a DataFrame of different shape with operator version.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'angles': [0, 3, 4]},\n |      ...                      index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; other\n |                 angles\n |      circle          0\n |      triangle        3\n |      rectangle       4\n |\n |      &gt;&gt;&gt; df * other\n |                 angles  degrees\n |      circle          0      NaN\n |      triangle        9      NaN\n |      rectangle      16      NaN\n |\n |      &gt;&gt;&gt; df.mul(other, fill_value=0)\n |                 angles  degrees\n |      circle          0      0.0\n |      triangle        9      0.0\n |      rectangle      16      0.0\n |\n |      Divide by a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},\n |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n |      ...                                    ['circle', 'triangle', 'rectangle',\n |      ...                                     'square', 'pentagon', 'hexagon']])\n |      &gt;&gt;&gt; df_multindex\n |                   angles  degrees\n |      A circle          0      360\n |        triangle        3      180\n |        rectangle       4      360\n |      B square          4      360\n |        pentagon        5      540\n |        hexagon         6      720\n |\n |      &gt;&gt;&gt; df.div(df_multindex, level=1, fill_value=0)\n |                   angles  degrees\n |      A circle        NaN      1.0\n |        triangle      1.0      1.0\n |        rectangle     1.0      1.0\n |      B square        0.0      0.0\n |        pentagon      0.0      0.0\n |        hexagon       0.0      0.0\n |\n |  round(self, decimals: 'int | dict[IndexLabel, int] | Series' = 0, *args, **kwargs) -&gt; 'DataFrame'\n |      Round a DataFrame to a variable number of decimal places.\n |\n |      Parameters\n |      ----------\n |      decimals : int, dict, Series\n |          Number of decimal places to round each column to. If an int is\n |          given, round each column to the same number of places.\n |          Otherwise dict and Series round to variable numbers of places.\n |          Column names should be in the keys if `decimals` is a\n |          dict-like, or in the index if `decimals` is a Series. Any\n |          columns not included in `decimals` will be left as is. Elements\n |          of `decimals` which are not columns of the input will be\n |          ignored.\n |      *args\n |          Additional keywords have no effect but might be accepted for\n |          compatibility with numpy.\n |      **kwargs\n |          Additional keywords have no effect but might be accepted for\n |          compatibility with numpy.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          A DataFrame with the affected columns rounded to the specified\n |          number of decimal places.\n |\n |      See Also\n |      --------\n |      numpy.around : Round a numpy array to the given number of decimals.\n |      Series.round : Round a Series to the given number of decimals.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)],\n |      ...                   columns=['dogs', 'cats'])\n |      &gt;&gt;&gt; df\n |          dogs  cats\n |      0  0.21  0.32\n |      1  0.01  0.67\n |      2  0.66  0.03\n |      3  0.21  0.18\n |\n |      By providing an integer each column is rounded to the same number\n |      of decimal places\n |\n |      &gt;&gt;&gt; df.round(1)\n |          dogs  cats\n |      0   0.2   0.3\n |      1   0.0   0.7\n |      2   0.7   0.0\n |      3   0.2   0.2\n |\n |      With a dict, the number of places for specific columns can be\n |      specified with the column names as key and the number of decimal\n |      places as value\n |\n |      &gt;&gt;&gt; df.round({'dogs': 1, 'cats': 0})\n |          dogs  cats\n |      0   0.2   0.0\n |      1   0.0   1.0\n |      2   0.7   0.0\n |      3   0.2   0.0\n |\n |      Using a Series, the number of places for specific columns can be\n |      specified with the column names as index and the number of\n |      decimal places as value\n |\n |      &gt;&gt;&gt; decimals = pd.Series([0, 1], index=['cats', 'dogs'])\n |      &gt;&gt;&gt; df.round(decimals)\n |          dogs  cats\n |      0   0.2   0.0\n |      1   0.0   1.0\n |      2   0.7   0.0\n |      3   0.2   0.0\n |\n |  rpow(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |      Get Exponential power of dataframe and other, element-wise (binary operator `rpow`).\n |\n |      Equivalent to ``other ** dataframe``, but with support to substitute a fill_value\n |      for missing data in one of the inputs. With reverse version, `pow`.\n |\n |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\n |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}\n |          Whether to compare by the index (0 or 'index') or columns.\n |          (1 or 'columns'). For Series input, axis to match Series index on.\n |      level : int or label\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : float or None, default None\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful DataFrame alignment, with this value before computation.\n |          If data in both corresponding DataFrame locations is missing\n |          the result will be missing.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Result of the arithmetic operation.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add DataFrames.\n |      DataFrame.sub : Subtract DataFrames.\n |      DataFrame.mul : Multiply DataFrames.\n |      DataFrame.div : Divide DataFrames (float division).\n |      DataFrame.truediv : Divide DataFrames (float division).\n |      DataFrame.floordiv : Divide DataFrames (integer division).\n |      DataFrame.mod : Calculate modulo (remainder after division).\n |      DataFrame.pow : Calculate exponential power.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n |      ...                    'degrees': [360, 180, 360]},\n |      ...                   index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; df\n |                 angles  degrees\n |      circle          0      360\n |      triangle        3      180\n |      rectangle       4      360\n |\n |      Add a scalar with operator version which return the same\n |      results.\n |\n |      &gt;&gt;&gt; df + 1\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      &gt;&gt;&gt; df.add(1)\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      Divide by constant with reverse version.\n |\n |      &gt;&gt;&gt; df.div(10)\n |                 angles  degrees\n |      circle        0.0     36.0\n |      triangle      0.3     18.0\n |      rectangle     0.4     36.0\n |\n |      &gt;&gt;&gt; df.rdiv(10)\n |                   angles   degrees\n |      circle          inf  0.027778\n |      triangle   3.333333  0.055556\n |      rectangle  2.500000  0.027778\n |\n |      Subtract a list and Series by axis with operator version.\n |\n |      &gt;&gt;&gt; df - [1, 2]\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub([1, 2], axis='columns')\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n |      ...        axis='index')\n |                 angles  degrees\n |      circle         -1      359\n |      triangle        2      179\n |      rectangle       3      359\n |\n |      Multiply a dictionary by axis.\n |\n |      &gt;&gt;&gt; df.mul({'angles': 0, 'degrees': 2})\n |                  angles  degrees\n |      circle           0      720\n |      triangle         0      360\n |      rectangle        0      720\n |\n |      &gt;&gt;&gt; df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n |                  angles  degrees\n |      circle           0        0\n |      triangle         6      360\n |      rectangle       12     1080\n |\n |      Multiply a DataFrame of different shape with operator version.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'angles': [0, 3, 4]},\n |      ...                      index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; other\n |                 angles\n |      circle          0\n |      triangle        3\n |      rectangle       4\n |\n |      &gt;&gt;&gt; df * other\n |                 angles  degrees\n |      circle          0      NaN\n |      triangle        9      NaN\n |      rectangle      16      NaN\n |\n |      &gt;&gt;&gt; df.mul(other, fill_value=0)\n |                 angles  degrees\n |      circle          0      0.0\n |      triangle        9      0.0\n |      rectangle      16      0.0\n |\n |      Divide by a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},\n |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n |      ...                                    ['circle', 'triangle', 'rectangle',\n |      ...                                     'square', 'pentagon', 'hexagon']])\n |      &gt;&gt;&gt; df_multindex\n |                   angles  degrees\n |      A circle          0      360\n |        triangle        3      180\n |        rectangle       4      360\n |      B square          4      360\n |        pentagon        5      540\n |        hexagon         6      720\n |\n |      &gt;&gt;&gt; df.div(df_multindex, level=1, fill_value=0)\n |                   angles  degrees\n |      A circle        NaN      1.0\n |        triangle      1.0      1.0\n |        rectangle     1.0      1.0\n |      B square        0.0      0.0\n |        pentagon      0.0      0.0\n |        hexagon       0.0      0.0\n |\n |  rsub(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |      Get Subtraction of dataframe and other, element-wise (binary operator `rsub`).\n |\n |      Equivalent to ``other - dataframe``, but with support to substitute a fill_value\n |      for missing data in one of the inputs. With reverse version, `sub`.\n |\n |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\n |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}\n |          Whether to compare by the index (0 or 'index') or columns.\n |          (1 or 'columns'). For Series input, axis to match Series index on.\n |      level : int or label\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : float or None, default None\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful DataFrame alignment, with this value before computation.\n |          If data in both corresponding DataFrame locations is missing\n |          the result will be missing.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Result of the arithmetic operation.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add DataFrames.\n |      DataFrame.sub : Subtract DataFrames.\n |      DataFrame.mul : Multiply DataFrames.\n |      DataFrame.div : Divide DataFrames (float division).\n |      DataFrame.truediv : Divide DataFrames (float division).\n |      DataFrame.floordiv : Divide DataFrames (integer division).\n |      DataFrame.mod : Calculate modulo (remainder after division).\n |      DataFrame.pow : Calculate exponential power.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n |      ...                    'degrees': [360, 180, 360]},\n |      ...                   index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; df\n |                 angles  degrees\n |      circle          0      360\n |      triangle        3      180\n |      rectangle       4      360\n |\n |      Add a scalar with operator version which return the same\n |      results.\n |\n |      &gt;&gt;&gt; df + 1\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      &gt;&gt;&gt; df.add(1)\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      Divide by constant with reverse version.\n |\n |      &gt;&gt;&gt; df.div(10)\n |                 angles  degrees\n |      circle        0.0     36.0\n |      triangle      0.3     18.0\n |      rectangle     0.4     36.0\n |\n |      &gt;&gt;&gt; df.rdiv(10)\n |                   angles   degrees\n |      circle          inf  0.027778\n |      triangle   3.333333  0.055556\n |      rectangle  2.500000  0.027778\n |\n |      Subtract a list and Series by axis with operator version.\n |\n |      &gt;&gt;&gt; df - [1, 2]\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub([1, 2], axis='columns')\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n |      ...        axis='index')\n |                 angles  degrees\n |      circle         -1      359\n |      triangle        2      179\n |      rectangle       3      359\n |\n |      Multiply a dictionary by axis.\n |\n |      &gt;&gt;&gt; df.mul({'angles': 0, 'degrees': 2})\n |                  angles  degrees\n |      circle           0      720\n |      triangle         0      360\n |      rectangle        0      720\n |\n |      &gt;&gt;&gt; df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n |                  angles  degrees\n |      circle           0        0\n |      triangle         6      360\n |      rectangle       12     1080\n |\n |      Multiply a DataFrame of different shape with operator version.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'angles': [0, 3, 4]},\n |      ...                      index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; other\n |                 angles\n |      circle          0\n |      triangle        3\n |      rectangle       4\n |\n |      &gt;&gt;&gt; df * other\n |                 angles  degrees\n |      circle          0      NaN\n |      triangle        9      NaN\n |      rectangle      16      NaN\n |\n |      &gt;&gt;&gt; df.mul(other, fill_value=0)\n |                 angles  degrees\n |      circle          0      0.0\n |      triangle        9      0.0\n |      rectangle      16      0.0\n |\n |      Divide by a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},\n |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n |      ...                                    ['circle', 'triangle', 'rectangle',\n |      ...                                     'square', 'pentagon', 'hexagon']])\n |      &gt;&gt;&gt; df_multindex\n |                   angles  degrees\n |      A circle          0      360\n |        triangle        3      180\n |        rectangle       4      360\n |      B square          4      360\n |        pentagon        5      540\n |        hexagon         6      720\n |\n |      &gt;&gt;&gt; df.div(df_multindex, level=1, fill_value=0)\n |                   angles  degrees\n |      A circle        NaN      1.0\n |        triangle      1.0      1.0\n |        rectangle     1.0      1.0\n |      B square        0.0      0.0\n |        pentagon      0.0      0.0\n |        hexagon       0.0      0.0\n |\n |  rtruediv(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |      Get Floating division of dataframe and other, element-wise (binary operator `rtruediv`).\n |\n |      Equivalent to ``other / dataframe``, but with support to substitute a fill_value\n |      for missing data in one of the inputs. With reverse version, `truediv`.\n |\n |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\n |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}\n |          Whether to compare by the index (0 or 'index') or columns.\n |          (1 or 'columns'). For Series input, axis to match Series index on.\n |      level : int or label\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : float or None, default None\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful DataFrame alignment, with this value before computation.\n |          If data in both corresponding DataFrame locations is missing\n |          the result will be missing.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Result of the arithmetic operation.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add DataFrames.\n |      DataFrame.sub : Subtract DataFrames.\n |      DataFrame.mul : Multiply DataFrames.\n |      DataFrame.div : Divide DataFrames (float division).\n |      DataFrame.truediv : Divide DataFrames (float division).\n |      DataFrame.floordiv : Divide DataFrames (integer division).\n |      DataFrame.mod : Calculate modulo (remainder after division).\n |      DataFrame.pow : Calculate exponential power.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n |      ...                    'degrees': [360, 180, 360]},\n |      ...                   index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; df\n |                 angles  degrees\n |      circle          0      360\n |      triangle        3      180\n |      rectangle       4      360\n |\n |      Add a scalar with operator version which return the same\n |      results.\n |\n |      &gt;&gt;&gt; df + 1\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      &gt;&gt;&gt; df.add(1)\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      Divide by constant with reverse version.\n |\n |      &gt;&gt;&gt; df.div(10)\n |                 angles  degrees\n |      circle        0.0     36.0\n |      triangle      0.3     18.0\n |      rectangle     0.4     36.0\n |\n |      &gt;&gt;&gt; df.rdiv(10)\n |                   angles   degrees\n |      circle          inf  0.027778\n |      triangle   3.333333  0.055556\n |      rectangle  2.500000  0.027778\n |\n |      Subtract a list and Series by axis with operator version.\n |\n |      &gt;&gt;&gt; df - [1, 2]\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub([1, 2], axis='columns')\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n |      ...        axis='index')\n |                 angles  degrees\n |      circle         -1      359\n |      triangle        2      179\n |      rectangle       3      359\n |\n |      Multiply a dictionary by axis.\n |\n |      &gt;&gt;&gt; df.mul({'angles': 0, 'degrees': 2})\n |                  angles  degrees\n |      circle           0      720\n |      triangle         0      360\n |      rectangle        0      720\n |\n |      &gt;&gt;&gt; df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n |                  angles  degrees\n |      circle           0        0\n |      triangle         6      360\n |      rectangle       12     1080\n |\n |      Multiply a DataFrame of different shape with operator version.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'angles': [0, 3, 4]},\n |      ...                      index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; other\n |                 angles\n |      circle          0\n |      triangle        3\n |      rectangle       4\n |\n |      &gt;&gt;&gt; df * other\n |                 angles  degrees\n |      circle          0      NaN\n |      triangle        9      NaN\n |      rectangle      16      NaN\n |\n |      &gt;&gt;&gt; df.mul(other, fill_value=0)\n |                 angles  degrees\n |      circle          0      0.0\n |      triangle        9      0.0\n |      rectangle      16      0.0\n |\n |      Divide by a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},\n |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n |      ...                                    ['circle', 'triangle', 'rectangle',\n |      ...                                     'square', 'pentagon', 'hexagon']])\n |      &gt;&gt;&gt; df_multindex\n |                   angles  degrees\n |      A circle          0      360\n |        triangle        3      180\n |        rectangle       4      360\n |      B square          4      360\n |        pentagon        5      540\n |        hexagon         6      720\n |\n |      &gt;&gt;&gt; df.div(df_multindex, level=1, fill_value=0)\n |                   angles  degrees\n |      A circle        NaN      1.0\n |        triangle      1.0      1.0\n |        rectangle     1.0      1.0\n |      B square        0.0      0.0\n |        pentagon      0.0      0.0\n |        hexagon       0.0      0.0\n |\n |  select_dtypes(self, include=None, exclude=None) -&gt; 'Self'\n |      Return a subset of the DataFrame's columns based on the column dtypes.\n |\n |      Parameters\n |      ----------\n |      include, exclude : scalar or list-like\n |          A selection of dtypes or strings to be included/excluded. At least\n |          one of these parameters must be supplied.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          The subset of the frame including the dtypes in ``include`` and\n |          excluding the dtypes in ``exclude``.\n |\n |      Raises\n |      ------\n |      ValueError\n |          * If both of ``include`` and ``exclude`` are empty\n |          * If ``include`` and ``exclude`` have overlapping elements\n |          * If any kind of string dtype is passed in.\n |\n |      See Also\n |      --------\n |      DataFrame.dtypes: Return Series with the data type of each column.\n |\n |      Notes\n |      -----\n |      * To select all *numeric* types, use ``np.number`` or ``'number'``\n |      * To select strings you must use the ``object`` dtype, but note that\n |        this will return *all* object dtype columns\n |      * See the `numpy dtype hierarchy\n |        &lt;https://numpy.org/doc/stable/reference/arrays.scalars.html&gt;`__\n |      * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n |        ``'datetime64'``\n |      * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n |        ``'timedelta64'``\n |      * To select Pandas categorical dtypes, use ``'category'``\n |      * To select Pandas datetimetz dtypes, use ``'datetimetz'``\n |        or ``'datetime64[ns, tz]'``\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2] * 3,\n |      ...                    'b': [True, False] * 3,\n |      ...                    'c': [1.0, 2.0] * 3})\n |      &gt;&gt;&gt; df\n |              a      b  c\n |      0       1   True  1.0\n |      1       2  False  2.0\n |      2       1   True  1.0\n |      3       2  False  2.0\n |      4       1   True  1.0\n |      5       2  False  2.0\n |\n |      &gt;&gt;&gt; df.select_dtypes(include='bool')\n |         b\n |      0  True\n |      1  False\n |      2  True\n |      3  False\n |      4  True\n |      5  False\n |\n |      &gt;&gt;&gt; df.select_dtypes(include=['float64'])\n |         c\n |      0  1.0\n |      1  2.0\n |      2  1.0\n |      3  2.0\n |      4  1.0\n |      5  2.0\n |\n |      &gt;&gt;&gt; df.select_dtypes(exclude=['int64'])\n |             b    c\n |      0   True  1.0\n |      1  False  2.0\n |      2   True  1.0\n |      3  False  2.0\n |      4   True  1.0\n |      5  False  2.0\n |\n |  sem(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)\n |      Return unbiased standard error of the mean over requested axis.\n |\n |      Normalized by N-1 by default. This can be changed using the ddof argument\n |\n |      Parameters\n |      ----------\n |      axis : {index (0), columns (1)}\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          .. warning::\n |\n |              The behavior of DataFrame.sem with ``axis=None`` is deprecated,\n |              in a future version this will reduce over both axes and return a scalar\n |              To retain the old behavior, pass axis=0 (or do not pass axis).\n |\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      ddof : int, default 1\n |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n |          where N represents the number of elements.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      Returns\n |      -------\n |      Series or DataFrame (if level specified)\n |\n |                  Examples\n |                  --------\n |                  &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |                  &gt;&gt;&gt; s.sem().round(6)\n |                  0.57735\n |\n |                  With a DataFrame\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n |                  &gt;&gt;&gt; df\n |                         a   b\n |                  tiger  1   2\n |                  zebra  2   3\n |                  &gt;&gt;&gt; df.sem()\n |                  a   0.5\n |                  b   0.5\n |                  dtype: float64\n |\n |                  Using axis=1\n |\n |                  &gt;&gt;&gt; df.sem(axis=1)\n |                  tiger   0.5\n |                  zebra   0.5\n |                  dtype: float64\n |\n |                  In this case, `numeric_only` should be set to `True`\n |                  to avoid getting an error.\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n |                  ...                   index=['tiger', 'zebra'])\n |                  &gt;&gt;&gt; df.sem(numeric_only=True)\n |                  a   0.5\n |                  dtype: float64\n |\n |  set_axis(self, labels, *, axis: 'Axis' = 0, copy: 'bool | None' = None) -&gt; 'DataFrame'\n |      Assign desired index to given axis.\n |\n |      Indexes for column or row labels can be changed by assigning\n |      a list-like or Index.\n |\n |      Parameters\n |      ----------\n |      labels : list-like, Index\n |          The values for the new index.\n |\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis to update. The value 0 identifies the rows. For `Series`\n |          this parameter is unused and defaults to 0.\n |\n |      copy : bool, default True\n |          Whether to make a copy of the underlying data.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Returns\n |      -------\n |      DataFrame\n |          An object of type DataFrame.\n |\n |      See Also\n |      --------\n |      DataFrame.rename_axis : Alter the name of the index or columns.\n |\n |              Examples\n |              --------\n |              &gt;&gt;&gt; df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n |\n |              Change the row labels.\n |\n |              &gt;&gt;&gt; df.set_axis(['a', 'b', 'c'], axis='index')\n |                 A  B\n |              a  1  4\n |              b  2  5\n |              c  3  6\n |\n |              Change the column labels.\n |\n |              &gt;&gt;&gt; df.set_axis(['I', 'II'], axis='columns')\n |                 I  II\n |              0  1   4\n |              1  2   5\n |              2  3   6\n |\n |  set_index(self, keys, *, drop: 'bool' = True, append: 'bool' = False, inplace: 'bool' = False, verify_integrity: 'bool' = False) -&gt; 'DataFrame | None'\n |      Set the DataFrame index using existing columns.\n |\n |      Set the DataFrame index (row labels) using one or more existing\n |      columns or arrays (of the correct length). The index can replace the\n |      existing index or expand on it.\n |\n |      Parameters\n |      ----------\n |      keys : label or array-like or list of labels/arrays\n |          This parameter can be either a single column key, a single array of\n |          the same length as the calling DataFrame, or a list containing an\n |          arbitrary combination of column keys and arrays. Here, \"array\"\n |          encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and\n |          instances of :class:`~collections.abc.Iterator`.\n |      drop : bool, default True\n |          Delete columns to be used as the new index.\n |      append : bool, default False\n |          Whether to append columns to existing index.\n |      inplace : bool, default False\n |          Whether to modify the DataFrame rather than creating a new one.\n |      verify_integrity : bool, default False\n |          Check the new index for duplicates. Otherwise defer the check until\n |          necessary. Setting to False will improve the performance of this\n |          method.\n |\n |      Returns\n |      -------\n |      DataFrame or None\n |          Changed row labels or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      DataFrame.reset_index : Opposite of set_index.\n |      DataFrame.reindex : Change to new indices or expand indices.\n |      DataFrame.reindex_like : Change to same indices as other DataFrame.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'month': [1, 4, 7, 10],\n |      ...                    'year': [2012, 2014, 2013, 2014],\n |      ...                    'sale': [55, 40, 84, 31]})\n |      &gt;&gt;&gt; df\n |         month  year  sale\n |      0      1  2012    55\n |      1      4  2014    40\n |      2      7  2013    84\n |      3     10  2014    31\n |\n |      Set the index to become the 'month' column:\n |\n |      &gt;&gt;&gt; df.set_index('month')\n |             year  sale\n |      month\n |      1      2012    55\n |      4      2014    40\n |      7      2013    84\n |      10     2014    31\n |\n |      Create a MultiIndex using columns 'year' and 'month':\n |\n |      &gt;&gt;&gt; df.set_index(['year', 'month'])\n |                  sale\n |      year  month\n |      2012  1     55\n |      2014  4     40\n |      2013  7     84\n |      2014  10    31\n |\n |      Create a MultiIndex using an Index and a column:\n |\n |      &gt;&gt;&gt; df.set_index([pd.Index([1, 2, 3, 4]), 'year'])\n |               month  sale\n |         year\n |      1  2012  1      55\n |      2  2014  4      40\n |      3  2013  7      84\n |      4  2014  10     31\n |\n |      Create a MultiIndex using two Series:\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4])\n |      &gt;&gt;&gt; df.set_index([s, s**2])\n |            month  year  sale\n |      1 1       1  2012    55\n |      2 4       4  2014    40\n |      3 9       7  2013    84\n |      4 16     10  2014    31\n |\n |  shift(self, periods: 'int | Sequence[int]' = 1, freq: 'Frequency | None' = None, axis: 'Axis' = 0, fill_value: 'Hashable' = &lt;no_default&gt;, suffix: 'str | None' = None) -&gt; 'DataFrame'\n |      Shift index by desired number of periods with an optional time `freq`.\n |\n |      When `freq` is not passed, shift the index without realigning the data.\n |      If `freq` is passed (in this case, the index must be date or datetime,\n |      or it will raise a `NotImplementedError`), the index will be\n |      increased using the periods and the `freq`. `freq` can be inferred\n |      when specified as \"infer\" as long as either freq or inferred_freq\n |      attribute is set in the index.\n |\n |      Parameters\n |      ----------\n |      periods : int or Sequence\n |          Number of periods to shift. Can be positive or negative.\n |          If an iterable of ints, the data will be shifted once by each int.\n |          This is equivalent to shifting by one value at a time and\n |          concatenating all resulting frames. The resulting columns will have\n |          the shift suffixed to their column names. For multiple periods,\n |          axis must not be 1.\n |      freq : DateOffset, tseries.offsets, timedelta, or str, optional\n |          Offset to use from the tseries module or time rule (e.g. 'EOM').\n |          If `freq` is specified then the index values are shifted but the\n |          data is not realigned. That is, use `freq` if you would like to\n |          extend the index when shifting and preserve the original data.\n |          If `freq` is specified as \"infer\" then it will be inferred from\n |          the freq or inferred_freq attributes of the index. If neither of\n |          those attributes exist, a ValueError is thrown.\n |      axis : {0 or 'index', 1 or 'columns', None}, default None\n |          Shift direction. For `Series` this parameter is unused and defaults to 0.\n |      fill_value : object, optional\n |          The scalar value to use for newly introduced missing values.\n |          the default depends on the dtype of `self`.\n |          For numeric data, ``np.nan`` is used.\n |          For datetime, timedelta, or period data, etc. :attr:`NaT` is used.\n |          For extension dtypes, ``self.dtype.na_value`` is used.\n |      suffix : str, optional\n |          If str and periods is an iterable, this is added after the column\n |          name and before the shift value for each shifted column name.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Copy of input object, shifted.\n |\n |      See Also\n |      --------\n |      Index.shift : Shift values of Index.\n |      DatetimeIndex.shift : Shift values of DatetimeIndex.\n |      PeriodIndex.shift : Shift values of PeriodIndex.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({\"Col1\": [10, 20, 15, 30, 45],\n |      ...                    \"Col2\": [13, 23, 18, 33, 48],\n |      ...                    \"Col3\": [17, 27, 22, 37, 52]},\n |      ...                   index=pd.date_range(\"2020-01-01\", \"2020-01-05\"))\n |      &gt;&gt;&gt; df\n |                  Col1  Col2  Col3\n |      2020-01-01    10    13    17\n |      2020-01-02    20    23    27\n |      2020-01-03    15    18    22\n |      2020-01-04    30    33    37\n |      2020-01-05    45    48    52\n |\n |      &gt;&gt;&gt; df.shift(periods=3)\n |                  Col1  Col2  Col3\n |      2020-01-01   NaN   NaN   NaN\n |      2020-01-02   NaN   NaN   NaN\n |      2020-01-03   NaN   NaN   NaN\n |      2020-01-04  10.0  13.0  17.0\n |      2020-01-05  20.0  23.0  27.0\n |\n |      &gt;&gt;&gt; df.shift(periods=1, axis=\"columns\")\n |                  Col1  Col2  Col3\n |      2020-01-01   NaN    10    13\n |      2020-01-02   NaN    20    23\n |      2020-01-03   NaN    15    18\n |      2020-01-04   NaN    30    33\n |      2020-01-05   NaN    45    48\n |\n |      &gt;&gt;&gt; df.shift(periods=3, fill_value=0)\n |                  Col1  Col2  Col3\n |      2020-01-01     0     0     0\n |      2020-01-02     0     0     0\n |      2020-01-03     0     0     0\n |      2020-01-04    10    13    17\n |      2020-01-05    20    23    27\n |\n |      &gt;&gt;&gt; df.shift(periods=3, freq=\"D\")\n |                  Col1  Col2  Col3\n |      2020-01-04    10    13    17\n |      2020-01-05    20    23    27\n |      2020-01-06    15    18    22\n |      2020-01-07    30    33    37\n |      2020-01-08    45    48    52\n |\n |      &gt;&gt;&gt; df.shift(periods=3, freq=\"infer\")\n |                  Col1  Col2  Col3\n |      2020-01-04    10    13    17\n |      2020-01-05    20    23    27\n |      2020-01-06    15    18    22\n |      2020-01-07    30    33    37\n |      2020-01-08    45    48    52\n |\n |      &gt;&gt;&gt; df['Col1'].shift(periods=[0, 1, 2])\n |                  Col1_0  Col1_1  Col1_2\n |      2020-01-01      10     NaN     NaN\n |      2020-01-02      20    10.0     NaN\n |      2020-01-03      15    20.0    10.0\n |      2020-01-04      30    15.0    20.0\n |      2020-01-05      45    30.0    15.0\n |\n |  skew(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)\n |      Return unbiased skew over requested axis.\n |\n |      Normalized by N-1.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0), columns (1)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          For DataFrames, specifying ``axis=None`` will apply the aggregation\n |          across both axes.\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      Series or scalar\n |\n |                  Examples\n |                  --------\n |                  &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |                  &gt;&gt;&gt; s.skew()\n |                  0.0\n |\n |                  With a DataFrame\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2, 3], 'b': [2, 3, 4], 'c': [1, 3, 5]},\n |                  ...                   index=['tiger', 'zebra', 'cow'])\n |                  &gt;&gt;&gt; df\n |                          a   b   c\n |                  tiger   1   2   1\n |                  zebra   2   3   3\n |                  cow     3   4   5\n |                  &gt;&gt;&gt; df.skew()\n |                  a   0.0\n |                  b   0.0\n |                  c   0.0\n |                  dtype: float64\n |\n |                  Using axis=1\n |\n |                  &gt;&gt;&gt; df.skew(axis=1)\n |                  tiger   1.732051\n |                  zebra  -1.732051\n |                  cow     0.000000\n |                  dtype: float64\n |\n |                  In this case, `numeric_only` should be set to `True` to avoid\n |                  getting an error.\n |\n |                  &gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2, 3], 'b': ['T', 'Z', 'X']},\n |                  ...                   index=['tiger', 'zebra', 'cow'])\n |                  &gt;&gt;&gt; df.skew(numeric_only=True)\n |                  a   0.0\n |                  dtype: float64\n |\n |  sort_index(self, *, axis: 'Axis' = 0, level: 'IndexLabel | None' = None, ascending: 'bool | Sequence[bool]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'NaPosition' = 'last', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc | None' = None) -&gt; 'DataFrame | None'\n |      Sort object by labels (along an axis).\n |\n |      Returns a new DataFrame sorted by label if `inplace` argument is\n |      ``False``, otherwise updates the original DataFrame and returns None.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis along which to sort.  The value 0 identifies the rows,\n |          and 1 identifies the columns.\n |      level : int or level name or list of ints or list of level names\n |          If not None, sort on values in specified index level(s).\n |      ascending : bool or list-like of bools, default True\n |          Sort ascending vs. descending. When the index is a MultiIndex the\n |          sort direction can be controlled for each level individually.\n |      inplace : bool, default False\n |          Whether to modify the DataFrame rather than creating a new one.\n |      kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'\n |          Choice of sorting algorithm. See also :func:`numpy.sort` for more\n |          information. `mergesort` and `stable` are the only stable algorithms. For\n |          DataFrames, this option is only applied when sorting on a single\n |          column or label.\n |      na_position : {'first', 'last'}, default 'last'\n |          Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.\n |          Not implemented for MultiIndex.\n |      sort_remaining : bool, default True\n |          If True and sorting by level and index is multilevel, sort by other\n |          levels too (in order) after sorting by specified level.\n |      ignore_index : bool, default False\n |          If True, the resulting axis will be labeled 0, 1, …, n - 1.\n |      key : callable, optional\n |          If not None, apply the key function to the index values\n |          before sorting. This is similar to the `key` argument in the\n |          builtin :meth:`sorted` function, with the notable difference that\n |          this `key` function should be *vectorized*. It should expect an\n |          ``Index`` and return an ``Index`` of the same shape. For MultiIndex\n |          inputs, the key is applied *per level*.\n |\n |      Returns\n |      -------\n |      DataFrame or None\n |          The original DataFrame sorted by the labels or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      Series.sort_index : Sort Series by the index.\n |      DataFrame.sort_values : Sort DataFrame by the value.\n |      Series.sort_values : Sort Series by the value.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([1, 2, 3, 4, 5], index=[100, 29, 234, 1, 150],\n |      ...                   columns=['A'])\n |      &gt;&gt;&gt; df.sort_index()\n |           A\n |      1    4\n |      29   2\n |      100  1\n |      150  5\n |      234  3\n |\n |      By default, it sorts in ascending order, to sort in descending order,\n |      use ``ascending=False``\n |\n |      &gt;&gt;&gt; df.sort_index(ascending=False)\n |           A\n |      234  3\n |      150  5\n |      100  1\n |      29   2\n |      1    4\n |\n |      A key function can be specified which is applied to the index before\n |      sorting. For a ``MultiIndex`` this is applied to each level separately.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"a\": [1, 2, 3, 4]}, index=['A', 'b', 'C', 'd'])\n |      &gt;&gt;&gt; df.sort_index(key=lambda x: x.str.lower())\n |         a\n |      A  1\n |      b  2\n |      C  3\n |      d  4\n |\n |  sort_values(self, by: 'IndexLabel', *, axis: 'Axis' = 0, ascending: 'bool | list[bool] | tuple[bool, ...]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'str' = 'last', ignore_index: 'bool' = False, key: 'ValueKeyFunc | None' = None) -&gt; 'DataFrame | None'\n |      Sort by the values along either axis.\n |\n |      Parameters\n |      ----------\n |      by : str or list of str\n |          Name or list of names to sort by.\n |\n |          - if `axis` is 0 or `'index'` then `by` may contain index\n |            levels and/or column labels.\n |          - if `axis` is 1 or `'columns'` then `by` may contain column\n |            levels and/or index labels.\n |      axis : \"{0 or 'index', 1 or 'columns'}\", default 0\n |           Axis to be sorted.\n |      ascending : bool or list of bool, default True\n |           Sort ascending vs. descending. Specify list for multiple sort\n |           orders.  If this is a list of bools, must match the length of\n |           the by.\n |      inplace : bool, default False\n |           If True, perform operation in-place.\n |      kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'\n |           Choice of sorting algorithm. See also :func:`numpy.sort` for more\n |           information. `mergesort` and `stable` are the only stable algorithms. For\n |           DataFrames, this option is only applied when sorting on a single\n |           column or label.\n |      na_position : {'first', 'last'}, default 'last'\n |           Puts NaNs at the beginning if `first`; `last` puts NaNs at the\n |           end.\n |      ignore_index : bool, default False\n |           If True, the resulting axis will be labeled 0, 1, …, n - 1.\n |      key : callable, optional\n |          Apply the key function to the values\n |          before sorting. This is similar to the `key` argument in the\n |          builtin :meth:`sorted` function, with the notable difference that\n |          this `key` function should be *vectorized*. It should expect a\n |          ``Series`` and return a Series with the same shape as the input.\n |          It will be applied to each column in `by` independently.\n |\n |      Returns\n |      -------\n |      DataFrame or None\n |          DataFrame with sorted values or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      DataFrame.sort_index : Sort a DataFrame by the index.\n |      Series.sort_values : Similar method for a Series.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n |      ...     'col2': [2, 1, 9, 8, 7, 4],\n |      ...     'col3': [0, 1, 9, 4, 2, 3],\n |      ...     'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n |      ... })\n |      &gt;&gt;&gt; df\n |        col1  col2  col3 col4\n |      0    A     2     0    a\n |      1    A     1     1    B\n |      2    B     9     9    c\n |      3  NaN     8     4    D\n |      4    D     7     2    e\n |      5    C     4     3    F\n |\n |      Sort by col1\n |\n |      &gt;&gt;&gt; df.sort_values(by=['col1'])\n |        col1  col2  col3 col4\n |      0    A     2     0    a\n |      1    A     1     1    B\n |      2    B     9     9    c\n |      5    C     4     3    F\n |      4    D     7     2    e\n |      3  NaN     8     4    D\n |\n |      Sort by multiple columns\n |\n |      &gt;&gt;&gt; df.sort_values(by=['col1', 'col2'])\n |        col1  col2  col3 col4\n |      1    A     1     1    B\n |      0    A     2     0    a\n |      2    B     9     9    c\n |      5    C     4     3    F\n |      4    D     7     2    e\n |      3  NaN     8     4    D\n |\n |      Sort Descending\n |\n |      &gt;&gt;&gt; df.sort_values(by='col1', ascending=False)\n |        col1  col2  col3 col4\n |      4    D     7     2    e\n |      5    C     4     3    F\n |      2    B     9     9    c\n |      0    A     2     0    a\n |      1    A     1     1    B\n |      3  NaN     8     4    D\n |\n |      Putting NAs first\n |\n |      &gt;&gt;&gt; df.sort_values(by='col1', ascending=False, na_position='first')\n |        col1  col2  col3 col4\n |      3  NaN     8     4    D\n |      4    D     7     2    e\n |      5    C     4     3    F\n |      2    B     9     9    c\n |      0    A     2     0    a\n |      1    A     1     1    B\n |\n |      Sorting with a key function\n |\n |      &gt;&gt;&gt; df.sort_values(by='col4', key=lambda col: col.str.lower())\n |         col1  col2  col3 col4\n |      0    A     2     0    a\n |      1    A     1     1    B\n |      2    B     9     9    c\n |      3  NaN     8     4    D\n |      4    D     7     2    e\n |      5    C     4     3    F\n |\n |      Natural sort with the key argument,\n |      using the `natsort &lt;https://github.com/SethMMorton/natsort&gt;` package.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...    \"time\": ['0hr', '128hr', '72hr', '48hr', '96hr'],\n |      ...    \"value\": [10, 20, 30, 40, 50]\n |      ... })\n |      &gt;&gt;&gt; df\n |          time  value\n |      0    0hr     10\n |      1  128hr     20\n |      2   72hr     30\n |      3   48hr     40\n |      4   96hr     50\n |      &gt;&gt;&gt; from natsort import index_natsorted\n |      &gt;&gt;&gt; df.sort_values(\n |      ...     by=\"time\",\n |      ...     key=lambda x: np.argsort(index_natsorted(df[\"time\"]))\n |      ... )\n |          time  value\n |      0    0hr     10\n |      3   48hr     40\n |      2   72hr     30\n |      4   96hr     50\n |      1  128hr     20\n |\n |  stack(self, level: 'IndexLabel' = -1, dropna: 'bool | lib.NoDefault' = &lt;no_default&gt;, sort: 'bool | lib.NoDefault' = &lt;no_default&gt;, future_stack: 'bool' = False)\n |      Stack the prescribed level(s) from columns to index.\n |\n |      Return a reshaped DataFrame or Series having a multi-level\n |      index with one or more new inner-most levels compared to the current\n |      DataFrame. The new inner-most levels are created by pivoting the\n |      columns of the current dataframe:\n |\n |        - if the columns have a single level, the output is a Series;\n |        - if the columns have multiple levels, the new index\n |          level(s) is (are) taken from the prescribed level(s) and\n |          the output is a DataFrame.\n |\n |      Parameters\n |      ----------\n |      level : int, str, list, default -1\n |          Level(s) to stack from the column axis onto the index\n |          axis, defined as one index or label, or a list of indices\n |          or labels.\n |      dropna : bool, default True\n |          Whether to drop rows in the resulting Frame/Series with\n |          missing values. Stacking a column level onto the index\n |          axis can create combinations of index and column values\n |          that are missing from the original dataframe. See Examples\n |          section.\n |      sort : bool, default True\n |          Whether to sort the levels of the resulting MultiIndex.\n |      future_stack : bool, default False\n |          Whether to use the new implementation that will replace the current\n |          implementation in pandas 3.0. When True, dropna and sort have no impact\n |          on the result and must remain unspecified. See :ref:`pandas 2.1.0 Release\n |          notes &lt;whatsnew_210.enhancements.new_stack&gt;` for more details.\n |\n |      Returns\n |      -------\n |      DataFrame or Series\n |          Stacked dataframe or series.\n |\n |      See Also\n |      --------\n |      DataFrame.unstack : Unstack prescribed level(s) from index axis\n |           onto column axis.\n |      DataFrame.pivot : Reshape dataframe from long format to wide\n |           format.\n |      DataFrame.pivot_table : Create a spreadsheet-style pivot table\n |           as a DataFrame.\n |\n |      Notes\n |      -----\n |      The function is named by analogy with a collection of books\n |      being reorganized from being side by side on a horizontal\n |      position (the columns of the dataframe) to being stacked\n |      vertically on top of each other (in the index of the\n |      dataframe).\n |\n |      Reference :ref:`the user guide &lt;reshaping.stacking&gt;` for more examples.\n |\n |      Examples\n |      --------\n |      **Single level columns**\n |\n |      &gt;&gt;&gt; df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n |      ...                                     index=['cat', 'dog'],\n |      ...                                     columns=['weight', 'height'])\n |\n |      Stacking a dataframe with a single level column axis returns a Series:\n |\n |      &gt;&gt;&gt; df_single_level_cols\n |           weight height\n |      cat       0      1\n |      dog       2      3\n |      &gt;&gt;&gt; df_single_level_cols.stack(future_stack=True)\n |      cat  weight    0\n |           height    1\n |      dog  weight    2\n |           height    3\n |      dtype: int64\n |\n |      **Multi level columns: simple case**\n |\n |      &gt;&gt;&gt; multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n |      ...                                        ('weight', 'pounds')])\n |      &gt;&gt;&gt; df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n |      ...                                     index=['cat', 'dog'],\n |      ...                                     columns=multicol1)\n |\n |      Stacking a dataframe with a multi-level column axis:\n |\n |      &gt;&gt;&gt; df_multi_level_cols1\n |           weight\n |               kg    pounds\n |      cat       1        2\n |      dog       2        4\n |      &gt;&gt;&gt; df_multi_level_cols1.stack(future_stack=True)\n |                  weight\n |      cat kg           1\n |          pounds       2\n |      dog kg           2\n |          pounds       4\n |\n |      **Missing values**\n |\n |      &gt;&gt;&gt; multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n |      ...                                        ('height', 'm')])\n |      &gt;&gt;&gt; df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n |      ...                                     index=['cat', 'dog'],\n |      ...                                     columns=multicol2)\n |\n |      It is common to have missing values when stacking a dataframe\n |      with multi-level columns, as the stacked dataframe typically\n |      has more values than the original dataframe. Missing values\n |      are filled with NaNs:\n |\n |      &gt;&gt;&gt; df_multi_level_cols2\n |          weight height\n |              kg      m\n |      cat    1.0    2.0\n |      dog    3.0    4.0\n |      &gt;&gt;&gt; df_multi_level_cols2.stack(future_stack=True)\n |              weight  height\n |      cat kg     1.0     NaN\n |          m      NaN     2.0\n |      dog kg     3.0     NaN\n |          m      NaN     4.0\n |\n |      **Prescribing the level(s) to be stacked**\n |\n |      The first parameter controls which level or levels are stacked:\n |\n |      &gt;&gt;&gt; df_multi_level_cols2.stack(0, future_stack=True)\n |                   kg    m\n |      cat weight  1.0  NaN\n |          height  NaN  2.0\n |      dog weight  3.0  NaN\n |          height  NaN  4.0\n |      &gt;&gt;&gt; df_multi_level_cols2.stack([0, 1], future_stack=True)\n |      cat  weight  kg    1.0\n |           height  m     2.0\n |      dog  weight  kg    3.0\n |           height  m     4.0\n |      dtype: float64\n |\n |  std(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)\n |      Return sample standard deviation over requested axis.\n |\n |      Normalized by N-1 by default. This can be changed using the ddof argument.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0), columns (1)}\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          .. warning::\n |\n |              The behavior of DataFrame.std with ``axis=None`` is deprecated,\n |              in a future version this will reduce over both axes and return a scalar\n |              To retain the old behavior, pass axis=0 (or do not pass axis).\n |\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      ddof : int, default 1\n |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n |          where N represents the number of elements.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      Returns\n |      -------\n |      Series or DataFrame (if level specified)\n |\n |      Notes\n |      -----\n |      To have the same behaviour as `numpy.std`, use `ddof=0` (instead of the\n |      default `ddof=1`)\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'person_id': [0, 1, 2, 3],\n |      ...                    'age': [21, 25, 62, 43],\n |      ...                    'height': [1.61, 1.87, 1.49, 2.01]}\n |      ...                   ).set_index('person_id')\n |      &gt;&gt;&gt; df\n |                 age  height\n |      person_id\n |      0           21    1.61\n |      1           25    1.87\n |      2           62    1.49\n |      3           43    2.01\n |\n |      The standard deviation of the columns can be found as follows:\n |\n |      &gt;&gt;&gt; df.std()\n |      age       18.786076\n |      height     0.237417\n |      dtype: float64\n |\n |      Alternatively, `ddof=0` can be set to normalize by N instead of N-1:\n |\n |      &gt;&gt;&gt; df.std(ddof=0)\n |      age       16.269219\n |      height     0.205609\n |      dtype: float64\n |\n |  sub(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |      Get Subtraction of dataframe and other, element-wise (binary operator `sub`).\n |\n |      Equivalent to ``dataframe - other``, but with support to substitute a fill_value\n |      for missing data in one of the inputs. With reverse version, `rsub`.\n |\n |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\n |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}\n |          Whether to compare by the index (0 or 'index') or columns.\n |          (1 or 'columns'). For Series input, axis to match Series index on.\n |      level : int or label\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : float or None, default None\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful DataFrame alignment, with this value before computation.\n |          If data in both corresponding DataFrame locations is missing\n |          the result will be missing.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Result of the arithmetic operation.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add DataFrames.\n |      DataFrame.sub : Subtract DataFrames.\n |      DataFrame.mul : Multiply DataFrames.\n |      DataFrame.div : Divide DataFrames (float division).\n |      DataFrame.truediv : Divide DataFrames (float division).\n |      DataFrame.floordiv : Divide DataFrames (integer division).\n |      DataFrame.mod : Calculate modulo (remainder after division).\n |      DataFrame.pow : Calculate exponential power.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n |      ...                    'degrees': [360, 180, 360]},\n |      ...                   index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; df\n |                 angles  degrees\n |      circle          0      360\n |      triangle        3      180\n |      rectangle       4      360\n |\n |      Add a scalar with operator version which return the same\n |      results.\n |\n |      &gt;&gt;&gt; df + 1\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      &gt;&gt;&gt; df.add(1)\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      Divide by constant with reverse version.\n |\n |      &gt;&gt;&gt; df.div(10)\n |                 angles  degrees\n |      circle        0.0     36.0\n |      triangle      0.3     18.0\n |      rectangle     0.4     36.0\n |\n |      &gt;&gt;&gt; df.rdiv(10)\n |                   angles   degrees\n |      circle          inf  0.027778\n |      triangle   3.333333  0.055556\n |      rectangle  2.500000  0.027778\n |\n |      Subtract a list and Series by axis with operator version.\n |\n |      &gt;&gt;&gt; df - [1, 2]\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub([1, 2], axis='columns')\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n |      ...        axis='index')\n |                 angles  degrees\n |      circle         -1      359\n |      triangle        2      179\n |      rectangle       3      359\n |\n |      Multiply a dictionary by axis.\n |\n |      &gt;&gt;&gt; df.mul({'angles': 0, 'degrees': 2})\n |                  angles  degrees\n |      circle           0      720\n |      triangle         0      360\n |      rectangle        0      720\n |\n |      &gt;&gt;&gt; df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n |                  angles  degrees\n |      circle           0        0\n |      triangle         6      360\n |      rectangle       12     1080\n |\n |      Multiply a DataFrame of different shape with operator version.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'angles': [0, 3, 4]},\n |      ...                      index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; other\n |                 angles\n |      circle          0\n |      triangle        3\n |      rectangle       4\n |\n |      &gt;&gt;&gt; df * other\n |                 angles  degrees\n |      circle          0      NaN\n |      triangle        9      NaN\n |      rectangle      16      NaN\n |\n |      &gt;&gt;&gt; df.mul(other, fill_value=0)\n |                 angles  degrees\n |      circle          0      0.0\n |      triangle        9      0.0\n |      rectangle      16      0.0\n |\n |      Divide by a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},\n |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n |      ...                                    ['circle', 'triangle', 'rectangle',\n |      ...                                     'square', 'pentagon', 'hexagon']])\n |      &gt;&gt;&gt; df_multindex\n |                   angles  degrees\n |      A circle          0      360\n |        triangle        3      180\n |        rectangle       4      360\n |      B square          4      360\n |        pentagon        5      540\n |        hexagon         6      720\n |\n |      &gt;&gt;&gt; df.div(df_multindex, level=1, fill_value=0)\n |                   angles  degrees\n |      A circle        NaN      1.0\n |        triangle      1.0      1.0\n |        rectangle     1.0      1.0\n |      B square        0.0      0.0\n |        pentagon      0.0      0.0\n |        hexagon       0.0      0.0\n |\n |  subtract = sub(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |\n |  sum(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)\n |      Return the sum of the values over the requested axis.\n |\n |      This is equivalent to the method ``numpy.sum``.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0), columns (1)}\n |          Axis for the function to be applied on.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          .. warning::\n |\n |              The behavior of DataFrame.sum with ``axis=None`` is deprecated,\n |              in a future version this will reduce over both axes and return a scalar\n |              To retain the old behavior, pass axis=0 (or do not pass axis).\n |\n |          .. versionadded:: 2.0.0\n |\n |      skipna : bool, default True\n |          Exclude NA/null values when computing the result.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      min_count : int, default 0\n |          The required number of valid values to perform the operation. If fewer than\n |          ``min_count`` non-NA values are present the result will be NA.\n |      **kwargs\n |          Additional keyword arguments to be passed to the function.\n |\n |      Returns\n |      -------\n |      Series or scalar\n |\n |      See Also\n |      --------\n |      Series.sum : Return the sum.\n |      Series.min : Return the minimum.\n |      Series.max : Return the maximum.\n |      Series.idxmin : Return the index of the minimum.\n |      Series.idxmax : Return the index of the maximum.\n |      DataFrame.sum : Return the sum over the requested axis.\n |      DataFrame.min : Return the minimum over the requested axis.\n |      DataFrame.max : Return the maximum over the requested axis.\n |      DataFrame.idxmin : Return the index of the minimum over the requested axis.\n |      DataFrame.idxmax : Return the index of the maximum over the requested axis.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; idx = pd.MultiIndex.from_arrays([\n |      ...     ['warm', 'warm', 'cold', 'cold'],\n |      ...     ['dog', 'falcon', 'fish', 'spider']],\n |      ...     names=['blooded', 'animal'])\n |      &gt;&gt;&gt; s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n |      &gt;&gt;&gt; s\n |      blooded  animal\n |      warm     dog       4\n |               falcon    2\n |      cold     fish      0\n |               spider    8\n |      Name: legs, dtype: int64\n |\n |      &gt;&gt;&gt; s.sum()\n |      14\n |\n |      By default, the sum of an empty or all-NA Series is ``0``.\n |\n |      &gt;&gt;&gt; pd.Series([], dtype=\"float64\").sum()  # min_count=0 is the default\n |      0.0\n |\n |      This can be controlled with the ``min_count`` parameter. For example, if\n |      you'd like the sum of an empty series to be NaN, pass ``min_count=1``.\n |\n |      &gt;&gt;&gt; pd.Series([], dtype=\"float64\").sum(min_count=1)\n |      nan\n |\n |      Thanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\n |      empty series identically.\n |\n |      &gt;&gt;&gt; pd.Series([np.nan]).sum()\n |      0.0\n |\n |      &gt;&gt;&gt; pd.Series([np.nan]).sum(min_count=1)\n |      nan\n |\n |  swaplevel(self, i: 'Axis' = -2, j: 'Axis' = -1, axis: 'Axis' = 0) -&gt; 'DataFrame'\n |      Swap levels i and j in a :class:`MultiIndex`.\n |\n |      Default is to swap the two innermost levels of the index.\n |\n |      Parameters\n |      ----------\n |      i, j : int or str\n |          Levels of the indices to be swapped. Can pass level name as string.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |                  The axis to swap levels on. 0 or 'index' for row-wise, 1 or\n |                  'columns' for column-wise.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          DataFrame with levels swapped in MultiIndex.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(\n |      ...     {\"Grade\": [\"A\", \"B\", \"A\", \"C\"]},\n |      ...     index=[\n |      ...         [\"Final exam\", \"Final exam\", \"Coursework\", \"Coursework\"],\n |      ...         [\"History\", \"Geography\", \"History\", \"Geography\"],\n |      ...         [\"January\", \"February\", \"March\", \"April\"],\n |      ...     ],\n |      ... )\n |      &gt;&gt;&gt; df\n |                                          Grade\n |      Final exam  History     January      A\n |                  Geography   February     B\n |      Coursework  History     March        A\n |                  Geography   April        C\n |\n |      In the following example, we will swap the levels of the indices.\n |      Here, we will swap the levels column-wise, but levels can be swapped row-wise\n |      in a similar manner. Note that column-wise is the default behaviour.\n |      By not supplying any arguments for i and j, we swap the last and second to\n |      last indices.\n |\n |      &gt;&gt;&gt; df.swaplevel()\n |                                          Grade\n |      Final exam  January     History         A\n |                  February    Geography       B\n |      Coursework  March       History         A\n |                  April       Geography       C\n |\n |      By supplying one argument, we can choose which index to swap the last\n |      index with. We can for example swap the first index with the last one as\n |      follows.\n |\n |      &gt;&gt;&gt; df.swaplevel(0)\n |                                          Grade\n |      January     History     Final exam      A\n |      February    Geography   Final exam      B\n |      March       History     Coursework      A\n |      April       Geography   Coursework      C\n |\n |      We can also define explicitly which indices we want to swap by supplying values\n |      for both i and j. Here, we for example swap the first and second indices.\n |\n |      &gt;&gt;&gt; df.swaplevel(0, 1)\n |                                          Grade\n |      History     Final exam  January         A\n |      Geography   Final exam  February        B\n |      History     Coursework  March           A\n |      Geography   Coursework  April           C\n |\n |  to_dict(self, orient: \"Literal['dict', 'list', 'series', 'split', 'tight', 'records', 'index']\" = 'dict', *, into: 'type[MutableMappingT] | MutableMappingT' = &lt;class 'dict'&gt;, index: 'bool' = True) -&gt; 'MutableMappingT | list[MutableMappingT]'\n |      Convert the DataFrame to a dictionary.\n |\n |      The type of the key-value pairs can be customized with the parameters\n |      (see below).\n |\n |      Parameters\n |      ----------\n |      orient : str {'dict', 'list', 'series', 'split', 'tight', 'records', 'index'}\n |          Determines the type of the values of the dictionary.\n |\n |          - 'dict' (default) : dict like {column -&gt; {index -&gt; value}}\n |          - 'list' : dict like {column -&gt; [values]}\n |          - 'series' : dict like {column -&gt; Series(values)}\n |          - 'split' : dict like\n |            {'index' -&gt; [index], 'columns' -&gt; [columns], 'data' -&gt; [values]}\n |          - 'tight' : dict like\n |            {'index' -&gt; [index], 'columns' -&gt; [columns], 'data' -&gt; [values],\n |            'index_names' -&gt; [index.names], 'column_names' -&gt; [column.names]}\n |          - 'records' : list like\n |            [{column -&gt; value}, ... , {column -&gt; value}]\n |          - 'index' : dict like {index -&gt; {column -&gt; value}}\n |\n |          .. versionadded:: 1.4.0\n |              'tight' as an allowed value for the ``orient`` argument\n |\n |      into : class, default dict\n |          The collections.abc.MutableMapping subclass used for all Mappings\n |          in the return value.  Can be the actual class or an empty\n |          instance of the mapping type you want.  If you want a\n |          collections.defaultdict, you must pass it initialized.\n |\n |      index : bool, default True\n |          Whether to include the index item (and index_names item if `orient`\n |          is 'tight') in the returned dictionary. Can only be ``False``\n |          when `orient` is 'split' or 'tight'.\n |\n |          .. versionadded:: 2.0.0\n |\n |      Returns\n |      -------\n |      dict, list or collections.abc.MutableMapping\n |          Return a collections.abc.MutableMapping object representing the\n |          DataFrame. The resulting transformation depends on the `orient`\n |          parameter.\n |\n |      See Also\n |      --------\n |      DataFrame.from_dict: Create a DataFrame from a dictionary.\n |      DataFrame.to_json: Convert a DataFrame to JSON format.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'col1': [1, 2],\n |      ...                    'col2': [0.5, 0.75]},\n |      ...                   index=['row1', 'row2'])\n |      &gt;&gt;&gt; df\n |            col1  col2\n |      row1     1  0.50\n |      row2     2  0.75\n |      &gt;&gt;&gt; df.to_dict()\n |      {'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}\n |\n |      You can specify the return orientation.\n |\n |      &gt;&gt;&gt; df.to_dict('series')\n |      {'col1': row1    1\n |               row2    2\n |      Name: col1, dtype: int64,\n |      'col2': row1    0.50\n |              row2    0.75\n |      Name: col2, dtype: float64}\n |\n |      &gt;&gt;&gt; df.to_dict('split')\n |      {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],\n |       'data': [[1, 0.5], [2, 0.75]]}\n |\n |      &gt;&gt;&gt; df.to_dict('records')\n |      [{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}]\n |\n |      &gt;&gt;&gt; df.to_dict('index')\n |      {'row1': {'col1': 1, 'col2': 0.5}, 'row2': {'col1': 2, 'col2': 0.75}}\n |\n |      &gt;&gt;&gt; df.to_dict('tight')\n |      {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],\n |       'data': [[1, 0.5], [2, 0.75]], 'index_names': [None], 'column_names': [None]}\n |\n |      You can also specify the mapping type.\n |\n |      &gt;&gt;&gt; from collections import OrderedDict, defaultdict\n |      &gt;&gt;&gt; df.to_dict(into=OrderedDict)\n |      OrderedDict([('col1', OrderedDict([('row1', 1), ('row2', 2)])),\n |                   ('col2', OrderedDict([('row1', 0.5), ('row2', 0.75)]))])\n |\n |      If you want a `defaultdict`, you need to initialize it:\n |\n |      &gt;&gt;&gt; dd = defaultdict(list)\n |      &gt;&gt;&gt; df.to_dict('records', into=dd)\n |      [defaultdict(&lt;class 'list'&gt;, {'col1': 1, 'col2': 0.5}),\n |       defaultdict(&lt;class 'list'&gt;, {'col1': 2, 'col2': 0.75})]\n |\n |  to_feather(self, path: 'FilePath | WriteBuffer[bytes]', **kwargs) -&gt; 'None'\n |      Write a DataFrame to the binary Feather format.\n |\n |      Parameters\n |      ----------\n |      path : str, path object, file-like object\n |          String, path object (implementing ``os.PathLike[str]``), or file-like\n |          object implementing a binary ``write()`` function. If a string or a path,\n |          it will be used as Root Directory path when writing a partitioned dataset.\n |      **kwargs :\n |          Additional keywords passed to :func:`pyarrow.feather.write_feather`.\n |          This includes the `compression`, `compression_level`, `chunksize`\n |          and `version` keywords.\n |\n |      Notes\n |      -----\n |      This function writes the dataframe as a `feather file\n |      &lt;https://arrow.apache.org/docs/python/feather.html&gt;`_. Requires a default\n |      index. For saving the DataFrame with your custom index use a method that\n |      supports custom indices e.g. `to_parquet`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([[1, 2, 3], [4, 5, 6]])\n |      &gt;&gt;&gt; df.to_feather(\"file.feather\")  # doctest: +SKIP\n |\n |  to_gbq(self, destination_table: 'str', *, project_id: 'str | None' = None, chunksize: 'int | None' = None, reauth: 'bool' = False, if_exists: 'ToGbqIfexist' = 'fail', auth_local_webserver: 'bool' = True, table_schema: 'list[dict[str, str]] | None' = None, location: 'str | None' = None, progress_bar: 'bool' = True, credentials=None) -&gt; 'None'\n |      Write a DataFrame to a Google BigQuery table.\n |\n |      .. deprecated:: 2.2.0\n |\n |         Please use ``pandas_gbq.to_gbq`` instead.\n |\n |      This function requires the `pandas-gbq package\n |      &lt;https://pandas-gbq.readthedocs.io&gt;`__.\n |\n |      See the `How to authenticate with Google BigQuery\n |      &lt;https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html&gt;`__\n |      guide for authentication instructions.\n |\n |      Parameters\n |      ----------\n |      destination_table : str\n |          Name of table to be written, in the form ``dataset.tablename``.\n |      project_id : str, optional\n |          Google BigQuery Account project ID. Optional when available from\n |          the environment.\n |      chunksize : int, optional\n |          Number of rows to be inserted in each chunk from the dataframe.\n |          Set to ``None`` to load the whole dataframe at once.\n |      reauth : bool, default False\n |          Force Google BigQuery to re-authenticate the user. This is useful\n |          if multiple accounts are used.\n |      if_exists : str, default 'fail'\n |          Behavior when the destination table exists. Value can be one of:\n |\n |          ``'fail'``\n |              If table exists raise pandas_gbq.gbq.TableCreationError.\n |          ``'replace'``\n |              If table exists, drop it, recreate it, and insert data.\n |          ``'append'``\n |              If table exists, insert data. Create if does not exist.\n |      auth_local_webserver : bool, default True\n |          Use the `local webserver flow`_ instead of the `console flow`_\n |          when getting user credentials.\n |\n |          .. _local webserver flow:\n |              https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n |          .. _console flow:\n |              https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n |\n |          *New in version 0.2.0 of pandas-gbq*.\n |\n |          .. versionchanged:: 1.5.0\n |             Default value is changed to ``True``. Google has deprecated the\n |             ``auth_local_webserver = False`` `\"out of band\" (copy-paste)\n |             flow\n |             &lt;https://developers.googleblog.com/2022/02/making-oauth-flows-safer.html?m=1#disallowed-oob&gt;`_.\n |      table_schema : list of dicts, optional\n |          List of BigQuery table fields to which according DataFrame\n |          columns conform to, e.g. ``[{'name': 'col1', 'type':\n |          'STRING'},...]``. If schema is not provided, it will be\n |          generated according to dtypes of DataFrame columns. See\n |          BigQuery API documentation on available names of a field.\n |\n |          *New in version 0.3.1 of pandas-gbq*.\n |      location : str, optional\n |          Location where the load job should run. See the `BigQuery locations\n |          documentation\n |          &lt;https://cloud.google.com/bigquery/docs/dataset-locations&gt;`__ for a\n |          list of available locations. The location must match that of the\n |          target dataset.\n |\n |          *New in version 0.5.0 of pandas-gbq*.\n |      progress_bar : bool, default True\n |          Use the library `tqdm` to show the progress bar for the upload,\n |          chunk by chunk.\n |\n |          *New in version 0.5.0 of pandas-gbq*.\n |      credentials : google.auth.credentials.Credentials, optional\n |          Credentials for accessing Google APIs. Use this parameter to\n |          override default credentials, such as to use Compute Engine\n |          :class:`google.auth.compute_engine.Credentials` or Service\n |          Account :class:`google.oauth2.service_account.Credentials`\n |          directly.\n |\n |          *New in version 0.8.0 of pandas-gbq*.\n |\n |      See Also\n |      --------\n |      pandas_gbq.to_gbq : This function in the pandas-gbq library.\n |      read_gbq : Read a DataFrame from Google BigQuery.\n |\n |      Examples\n |      --------\n |      Example taken from `Google BigQuery documentation\n |      &lt;https://cloud.google.com/bigquery/docs/samples/bigquery-pandas-gbq-to-gbq-simple&gt;`_\n |\n |      &gt;&gt;&gt; project_id = \"my-project\"\n |      &gt;&gt;&gt; table_id = 'my_dataset.my_table'\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...                   \"my_string\": [\"a\", \"b\", \"c\"],\n |      ...                   \"my_int64\": [1, 2, 3],\n |      ...                   \"my_float64\": [4.0, 5.0, 6.0],\n |      ...                   \"my_bool1\": [True, False, True],\n |      ...                   \"my_bool2\": [False, True, False],\n |      ...                   \"my_dates\": pd.date_range(\"now\", periods=3),\n |      ...                   }\n |      ...                   )\n |\n |      &gt;&gt;&gt; df.to_gbq(table_id, project_id=project_id)  # doctest: +SKIP\n |\n |  to_html(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Axes | None' = None, col_space: 'ColspaceArgType | None' = None, header: 'bool' = True, index: 'bool' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool | None' = None, index_names: 'bool' = True, justify: 'str | None' = None, max_rows: 'int | None' = None, max_cols: 'int | None' = None, show_dimensions: 'bool | str' = False, decimal: 'str' = '.', bold_rows: 'bool' = True, classes: 'str | list | tuple | None' = None, escape: 'bool' = True, notebook: 'bool' = False, border: 'int | bool | None' = None, table_id: 'str | None' = None, render_links: 'bool' = False, encoding: 'str | None' = None) -&gt; 'str | None'\n |      Render a DataFrame as an HTML table.\n |\n |      Parameters\n |      ----------\n |      buf : str, Path or StringIO-like, optional, default None\n |          Buffer to write to. If None, the output is returned as a string.\n |      columns : array-like, optional, default None\n |          The subset of columns to write. Writes all columns by default.\n |      col_space : str or int, list or dict of int or str, optional\n |          The minimum width of each column in CSS length units.  An int is assumed to be px units..\n |      header : bool, optional\n |          Whether to print column labels, default True.\n |      index : bool, optional, default True\n |          Whether to print index (row) labels.\n |      na_rep : str, optional, default 'NaN'\n |          String representation of ``NaN`` to use.\n |      formatters : list, tuple or dict of one-param. functions, optional\n |          Formatter functions to apply to columns' elements by position or\n |          name.\n |          The result of each function must be a unicode string.\n |          List/tuple must be of length equal to the number of columns.\n |      float_format : one-parameter function, optional, default None\n |          Formatter function to apply to columns' elements if they are\n |          floats. This function must return a unicode string and will be\n |          applied only to the non-``NaN`` elements, with ``NaN`` being\n |          handled by ``na_rep``.\n |      sparsify : bool, optional, default True\n |          Set to False for a DataFrame with a hierarchical index to print\n |          every multiindex key at each row.\n |      index_names : bool, optional, default True\n |          Prints the names of the indexes.\n |      justify : str, default None\n |          How to justify the column labels. If None uses the option from\n |          the print configuration (controlled by set_option), 'right' out\n |          of the box. Valid values are\n |\n |          * left\n |          * right\n |          * center\n |          * justify\n |          * justify-all\n |          * start\n |          * end\n |          * inherit\n |          * match-parent\n |          * initial\n |          * unset.\n |      max_rows : int, optional\n |          Maximum number of rows to display in the console.\n |      max_cols : int, optional\n |          Maximum number of columns to display in the console.\n |      show_dimensions : bool, default False\n |          Display DataFrame dimensions (number of rows by number of columns).\n |      decimal : str, default '.'\n |          Character recognized as decimal separator, e.g. ',' in Europe.\n |\n |      bold_rows : bool, default True\n |          Make the row labels bold in the output.\n |      classes : str or list or tuple, default None\n |          CSS class(es) to apply to the resulting html table.\n |      escape : bool, default True\n |          Convert the characters &lt;, &gt;, and & to HTML-safe sequences.\n |      notebook : {True, False}, default False\n |          Whether the generated HTML is for IPython Notebook.\n |      border : int\n |          A ``border=border`` attribute is included in the opening\n |          `&lt;table&gt;` tag. Default ``pd.options.display.html.border``.\n |      table_id : str, optional\n |          A css id is included in the opening `&lt;table&gt;` tag if specified.\n |      render_links : bool, default False\n |          Convert URLs to HTML links.\n |      encoding : str, default \"utf-8\"\n |          Set character encoding.\n |\n |      Returns\n |      -------\n |      str or None\n |          If buf is None, returns the result as a string. Otherwise returns\n |          None.\n |\n |      See Also\n |      --------\n |      to_string : Convert DataFrame to a string.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(data={'col1': [1, 2], 'col2': [4, 3]})\n |      &gt;&gt;&gt; html_string = '''&lt;table border=\"1\" class=\"dataframe\"&gt;\n |      ...   &lt;thead&gt;\n |      ...     &lt;tr style=\"text-align: right;\"&gt;\n |      ...       &lt;th&gt;&lt;/th&gt;\n |      ...       &lt;th&gt;col1&lt;/th&gt;\n |      ...       &lt;th&gt;col2&lt;/th&gt;\n |      ...     &lt;/tr&gt;\n |      ...   &lt;/thead&gt;\n |      ...   &lt;tbody&gt;\n |      ...     &lt;tr&gt;\n |      ...       &lt;th&gt;0&lt;/th&gt;\n |      ...       &lt;td&gt;1&lt;/td&gt;\n |      ...       &lt;td&gt;4&lt;/td&gt;\n |      ...     &lt;/tr&gt;\n |      ...     &lt;tr&gt;\n |      ...       &lt;th&gt;1&lt;/th&gt;\n |      ...       &lt;td&gt;2&lt;/td&gt;\n |      ...       &lt;td&gt;3&lt;/td&gt;\n |      ...     &lt;/tr&gt;\n |      ...   &lt;/tbody&gt;\n |      ... &lt;/table&gt;'''\n |      &gt;&gt;&gt; assert html_string == df.to_html()\n |\n |  to_markdown(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, mode: 'str' = 'wt', index: 'bool' = True, storage_options: 'StorageOptions | None' = None, **kwargs) -&gt; 'str | None'\n |      Print DataFrame in Markdown-friendly format.\n |\n |      Parameters\n |      ----------\n |      buf : str, Path or StringIO-like, optional, default None\n |          Buffer to write to. If None, the output is returned as a string.\n |      mode : str, optional\n |          Mode in which file is opened, \"wt\" by default.\n |      index : bool, optional, default True\n |          Add index (row) labels.\n |\n |      storage_options : dict, optional\n |          Extra options that make sense for a particular storage connection, e.g.\n |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n |          are forwarded to ``urllib.request.Request`` as header options. For other\n |          URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n |          details, and for more examples on storage options refer `here\n |          &lt;https://pandas.pydata.org/docs/user_guide/io.html?\n |          highlight=storage_options#reading-writing-remote-files&gt;`_.\n |\n |      **kwargs\n |          These parameters will be passed to `tabulate                 &lt;https://pypi.org/project/tabulate&gt;`_.\n |\n |      Returns\n |      -------\n |      str\n |          DataFrame in Markdown-friendly format.\n |\n |      Notes\n |      -----\n |      Requires the `tabulate &lt;https://pypi.org/project/tabulate&gt;`_ package.\n |\n |      Examples\n |              --------\n |              &gt;&gt;&gt; df = pd.DataFrame(\n |              ...     data={\"animal_1\": [\"elk\", \"pig\"], \"animal_2\": [\"dog\", \"quetzal\"]}\n |              ... )\n |              &gt;&gt;&gt; print(df.to_markdown())\n |              |    | animal_1   | animal_2   |\n |              |---:|:-----------|:-----------|\n |              |  0 | elk        | dog        |\n |              |  1 | pig        | quetzal    |\n |\n |              Output markdown with a tabulate option.\n |\n |              &gt;&gt;&gt; print(df.to_markdown(tablefmt=\"grid\"))\n |              +----+------------+------------+\n |              |    | animal_1   | animal_2   |\n |              +====+============+============+\n |              |  0 | elk        | dog        |\n |              +----+------------+------------+\n |              |  1 | pig        | quetzal    |\n |              +----+------------+------------+\n |\n |  to_numpy(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool' = False, na_value: 'object' = &lt;no_default&gt;) -&gt; 'np.ndarray'\n |      Convert the DataFrame to a NumPy array.\n |\n |      By default, the dtype of the returned array will be the common NumPy\n |      dtype of all types in the DataFrame. For example, if the dtypes are\n |      ``float16`` and ``float32``, the results dtype will be ``float32``.\n |      This may require copying data and coercing values, which may be\n |      expensive.\n |\n |      Parameters\n |      ----------\n |      dtype : str or numpy.dtype, optional\n |          The dtype to pass to :meth:`numpy.asarray`.\n |      copy : bool, default False\n |          Whether to ensure that the returned value is not a view on\n |          another array. Note that ``copy=False`` does not *ensure* that\n |          ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n |          a copy is made, even if not strictly necessary.\n |      na_value : Any, optional\n |          The value to use for missing values. The default value depends\n |          on `dtype` and the dtypes of the DataFrame columns.\n |\n |      Returns\n |      -------\n |      numpy.ndarray\n |\n |      See Also\n |      --------\n |      Series.to_numpy : Similar method for Series.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]}).to_numpy()\n |      array([[1, 3],\n |             [2, 4]])\n |\n |      With heterogeneous data, the lowest common type will have to\n |      be used.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.5]})\n |      &gt;&gt;&gt; df.to_numpy()\n |      array([[1. , 3. ],\n |             [2. , 4.5]])\n |\n |      For a mix of numeric and non-numeric types, the output array will\n |      have object dtype.\n |\n |      &gt;&gt;&gt; df['C'] = pd.date_range('2000', periods=2)\n |      &gt;&gt;&gt; df.to_numpy()\n |      array([[1, 3.0, Timestamp('2000-01-01 00:00:00')],\n |             [2, 4.5, Timestamp('2000-01-02 00:00:00')]], dtype=object)\n |\n |  to_orc(self, path: 'FilePath | WriteBuffer[bytes] | None' = None, *, engine: \"Literal['pyarrow']\" = 'pyarrow', index: 'bool | None' = None, engine_kwargs: 'dict[str, Any] | None' = None) -&gt; 'bytes | None'\n |      Write a DataFrame to the ORC format.\n |\n |      .. versionadded:: 1.5.0\n |\n |      Parameters\n |      ----------\n |      path : str, file-like object or None, default None\n |          If a string, it will be used as Root Directory path\n |          when writing a partitioned dataset. By file-like object,\n |          we refer to objects with a write() method, such as a file handle\n |          (e.g. via builtin open function). If path is None,\n |          a bytes object is returned.\n |      engine : {'pyarrow'}, default 'pyarrow'\n |          ORC library to use.\n |      index : bool, optional\n |          If ``True``, include the dataframe's index(es) in the file output.\n |          If ``False``, they will not be written to the file.\n |          If ``None``, similar to ``infer`` the dataframe's index(es)\n |          will be saved. However, instead of being saved as values,\n |          the RangeIndex will be stored as a range in the metadata so it\n |          doesn't require much space and is faster. Other indexes will\n |          be included as columns in the file output.\n |      engine_kwargs : dict[str, Any] or None, default None\n |          Additional keyword arguments passed to :func:`pyarrow.orc.write_table`.\n |\n |      Returns\n |      -------\n |      bytes if no path argument is provided else None\n |\n |      Raises\n |      ------\n |      NotImplementedError\n |          Dtype of one or more columns is category, unsigned integers, interval,\n |          period or sparse.\n |      ValueError\n |          engine is not pyarrow.\n |\n |      See Also\n |      --------\n |      read_orc : Read a ORC file.\n |      DataFrame.to_parquet : Write a parquet file.\n |      DataFrame.to_csv : Write a csv file.\n |      DataFrame.to_sql : Write to a sql table.\n |      DataFrame.to_hdf : Write to hdf.\n |\n |      Notes\n |      -----\n |      * Before using this function you should read the :ref:`user guide about\n |        ORC &lt;io.orc&gt;` and :ref:`install optional dependencies &lt;install.warn_orc&gt;`.\n |      * This function requires `pyarrow &lt;https://arrow.apache.org/docs/python/&gt;`_\n |        library.\n |      * For supported dtypes please refer to `supported ORC features in Arrow\n |        &lt;https://arrow.apache.org/docs/cpp/orc.html#data-types&gt;`__.\n |      * Currently timezones in datetime columns are not preserved when a\n |        dataframe is converted into ORC files.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(data={'col1': [1, 2], 'col2': [4, 3]})\n |      &gt;&gt;&gt; df.to_orc('df.orc')  # doctest: +SKIP\n |      &gt;&gt;&gt; pd.read_orc('df.orc')  # doctest: +SKIP\n |         col1  col2\n |      0     1     4\n |      1     2     3\n |\n |      If you want to get a buffer to the orc content you can write it to io.BytesIO\n |\n |      &gt;&gt;&gt; import io\n |      &gt;&gt;&gt; b = io.BytesIO(df.to_orc())  # doctest: +SKIP\n |      &gt;&gt;&gt; b.seek(0)  # doctest: +SKIP\n |      0\n |      &gt;&gt;&gt; content = b.read()  # doctest: +SKIP\n |\n |  to_parquet(self, path: 'FilePath | WriteBuffer[bytes] | None' = None, *, engine: \"Literal['auto', 'pyarrow', 'fastparquet']\" = 'auto', compression: 'str | None' = 'snappy', index: 'bool | None' = None, partition_cols: 'list[str] | None' = None, storage_options: 'StorageOptions | None' = None, **kwargs) -&gt; 'bytes | None'\n |      Write a DataFrame to the binary parquet format.\n |\n |      This function writes the dataframe as a `parquet file\n |      &lt;https://parquet.apache.org/&gt;`_. You can choose different parquet\n |      backends, and have the option of compression. See\n |      :ref:`the user guide &lt;io.parquet&gt;` for more details.\n |\n |      Parameters\n |      ----------\n |      path : str, path object, file-like object, or None, default None\n |          String, path object (implementing ``os.PathLike[str]``), or file-like\n |          object implementing a binary ``write()`` function. If None, the result is\n |          returned as bytes. If a string or path, it will be used as Root Directory\n |          path when writing a partitioned dataset.\n |      engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n |          Parquet library to use. If 'auto', then the option\n |          ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n |          behavior is to try 'pyarrow', falling back to 'fastparquet' if\n |          'pyarrow' is unavailable.\n |      compression : str or None, default 'snappy'\n |          Name of the compression to use. Use ``None`` for no compression.\n |          Supported options: 'snappy', 'gzip', 'brotli', 'lz4', 'zstd'.\n |      index : bool, default None\n |          If ``True``, include the dataframe's index(es) in the file output.\n |          If ``False``, they will not be written to the file.\n |          If ``None``, similar to ``True`` the dataframe's index(es)\n |          will be saved. However, instead of being saved as values,\n |          the RangeIndex will be stored as a range in the metadata so it\n |          doesn't require much space and is faster. Other indexes will\n |          be included as columns in the file output.\n |      partition_cols : list, optional, default None\n |          Column names by which to partition the dataset.\n |          Columns are partitioned in the order they are given.\n |          Must be None if path is not a string.\n |      storage_options : dict, optional\n |          Extra options that make sense for a particular storage connection, e.g.\n |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n |          are forwarded to ``urllib.request.Request`` as header options. For other\n |          URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n |          details, and for more examples on storage options refer `here\n |          &lt;https://pandas.pydata.org/docs/user_guide/io.html?\n |          highlight=storage_options#reading-writing-remote-files&gt;`_.\n |\n |      **kwargs\n |          Additional arguments passed to the parquet library. See\n |          :ref:`pandas io &lt;io.parquet&gt;` for more details.\n |\n |      Returns\n |      -------\n |      bytes if no path argument is provided else None\n |\n |      See Also\n |      --------\n |      read_parquet : Read a parquet file.\n |      DataFrame.to_orc : Write an orc file.\n |      DataFrame.to_csv : Write a csv file.\n |      DataFrame.to_sql : Write to a sql table.\n |      DataFrame.to_hdf : Write to hdf.\n |\n |      Notes\n |      -----\n |      This function requires either the `fastparquet\n |      &lt;https://pypi.org/project/fastparquet&gt;`_ or `pyarrow\n |      &lt;https://arrow.apache.org/docs/python/&gt;`_ library.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n |      &gt;&gt;&gt; df.to_parquet('df.parquet.gzip',\n |      ...               compression='gzip')  # doctest: +SKIP\n |      &gt;&gt;&gt; pd.read_parquet('df.parquet.gzip')  # doctest: +SKIP\n |         col1  col2\n |      0     1     3\n |      1     2     4\n |\n |      If you want to get a buffer to the parquet content you can use a io.BytesIO\n |      object, as long as you don't use partition_cols, which creates multiple files.\n |\n |      &gt;&gt;&gt; import io\n |      &gt;&gt;&gt; f = io.BytesIO()\n |      &gt;&gt;&gt; df.to_parquet(f)\n |      &gt;&gt;&gt; f.seek(0)\n |      0\n |      &gt;&gt;&gt; content = f.read()\n |\n |  to_period(self, freq: 'Frequency | None' = None, axis: 'Axis' = 0, copy: 'bool | None' = None) -&gt; 'DataFrame'\n |      Convert DataFrame from DatetimeIndex to PeriodIndex.\n |\n |      Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n |      frequency (inferred from index if not passed).\n |\n |      Parameters\n |      ----------\n |      freq : str, default\n |          Frequency of the PeriodIndex.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis to convert (the index by default).\n |      copy : bool, default True\n |          If False then underlying input data is not copied.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Returns\n |      -------\n |      DataFrame\n |          The DataFrame has a PeriodIndex.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; idx = pd.to_datetime(\n |      ...     [\n |      ...         \"2001-03-31 00:00:00\",\n |      ...         \"2002-05-31 00:00:00\",\n |      ...         \"2003-08-31 00:00:00\",\n |      ...     ]\n |      ... )\n |\n |      &gt;&gt;&gt; idx\n |      DatetimeIndex(['2001-03-31', '2002-05-31', '2003-08-31'],\n |      dtype='datetime64[ns]', freq=None)\n |\n |      &gt;&gt;&gt; idx.to_period(\"M\")\n |      PeriodIndex(['2001-03', '2002-05', '2003-08'], dtype='period[M]')\n |\n |      For the yearly frequency\n |\n |      &gt;&gt;&gt; idx.to_period(\"Y\")\n |      PeriodIndex(['2001', '2002', '2003'], dtype='period[Y-DEC]')\n |\n |  to_records(self, index: 'bool' = True, column_dtypes=None, index_dtypes=None) -&gt; 'np.rec.recarray'\n |      Convert DataFrame to a NumPy record array.\n |\n |      Index will be included as the first field of the record array if\n |      requested.\n |\n |      Parameters\n |      ----------\n |      index : bool, default True\n |          Include index in resulting record array, stored in 'index'\n |          field or using the index label, if set.\n |      column_dtypes : str, type, dict, default None\n |          If a string or type, the data type to store all columns. If\n |          a dictionary, a mapping of column names and indices (zero-indexed)\n |          to specific data types.\n |      index_dtypes : str, type, dict, default None\n |          If a string or type, the data type to store all index levels. If\n |          a dictionary, a mapping of index level names and indices\n |          (zero-indexed) to specific data types.\n |\n |          This mapping is applied only if `index=True`.\n |\n |      Returns\n |      -------\n |      numpy.rec.recarray\n |          NumPy ndarray with the DataFrame labels as fields and each row\n |          of the DataFrame as entries.\n |\n |      See Also\n |      --------\n |      DataFrame.from_records: Convert structured or record ndarray\n |          to DataFrame.\n |      numpy.rec.recarray: An ndarray that allows field access using\n |          attributes, analogous to typed columns in a\n |          spreadsheet.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n |      ...                   index=['a', 'b'])\n |      &gt;&gt;&gt; df\n |         A     B\n |      a  1  0.50\n |      b  2  0.75\n |      &gt;&gt;&gt; df.to_records()\n |      rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n |                dtype=[('index', 'O'), ('A', '&lt;i8'), ('B', '&lt;f8')])\n |\n |      If the DataFrame index has no label then the recarray field name\n |      is set to 'index'. If the index has a label then this is used as the\n |      field name:\n |\n |      &gt;&gt;&gt; df.index = df.index.rename(\"I\")\n |      &gt;&gt;&gt; df.to_records()\n |      rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n |                dtype=[('I', 'O'), ('A', '&lt;i8'), ('B', '&lt;f8')])\n |\n |      The index can be excluded from the record array:\n |\n |      &gt;&gt;&gt; df.to_records(index=False)\n |      rec.array([(1, 0.5 ), (2, 0.75)],\n |                dtype=[('A', '&lt;i8'), ('B', '&lt;f8')])\n |\n |      Data types can be specified for the columns:\n |\n |      &gt;&gt;&gt; df.to_records(column_dtypes={\"A\": \"int32\"})\n |      rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n |                dtype=[('I', 'O'), ('A', '&lt;i4'), ('B', '&lt;f8')])\n |\n |      As well as for the index:\n |\n |      &gt;&gt;&gt; df.to_records(index_dtypes=\"&lt;S2\")\n |      rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n |                dtype=[('I', 'S2'), ('A', '&lt;i8'), ('B', '&lt;f8')])\n |\n |      &gt;&gt;&gt; index_dtypes = f\"&lt;S{df.index.str.len().max()}\"\n |      &gt;&gt;&gt; df.to_records(index_dtypes=index_dtypes)\n |      rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n |                dtype=[('I', 'S1'), ('A', '&lt;i8'), ('B', '&lt;f8')])\n |\n |  to_stata(self, path: 'FilePath | WriteBuffer[bytes]', *, convert_dates: 'dict[Hashable, str] | None' = None, write_index: 'bool' = True, byteorder: 'ToStataByteorder | None' = None, time_stamp: 'datetime.datetime | None' = None, data_label: 'str | None' = None, variable_labels: 'dict[Hashable, str] | None' = None, version: 'int | None' = 114, convert_strl: 'Sequence[Hashable] | None' = None, compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions | None' = None, value_labels: 'dict[Hashable, dict[float, str]] | None' = None) -&gt; 'None'\n |      Export DataFrame object to Stata dta format.\n |\n |      Writes the DataFrame to a Stata dataset file.\n |      \"dta\" files contain a Stata dataset.\n |\n |      Parameters\n |      ----------\n |      path : str, path object, or buffer\n |          String, path object (implementing ``os.PathLike[str]``), or file-like\n |          object implementing a binary ``write()`` function.\n |\n |      convert_dates : dict\n |          Dictionary mapping columns containing datetime types to stata\n |          internal format to use when writing the dates. Options are 'tc',\n |          'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n |          or a name. Datetime columns that do not have a conversion type\n |          specified will be converted to 'tc'. Raises NotImplementedError if\n |          a datetime column has timezone information.\n |      write_index : bool\n |          Write the index to Stata dataset.\n |      byteorder : str\n |          Can be \"&gt;\", \"&lt;\", \"little\", or \"big\". default is `sys.byteorder`.\n |      time_stamp : datetime\n |          A datetime to use as file creation date.  Default is the current\n |          time.\n |      data_label : str, optional\n |          A label for the data set.  Must be 80 characters or smaller.\n |      variable_labels : dict\n |          Dictionary containing columns as keys and variable labels as\n |          values. Each label must be 80 characters or smaller.\n |      version : {114, 117, 118, 119, None}, default 114\n |          Version to use in the output dta file. Set to None to let pandas\n |          decide between 118 or 119 formats depending on the number of\n |          columns in the frame. Version 114 can be read by Stata 10 and\n |          later. Version 117 can be read by Stata 13 or later. Version 118\n |          is supported in Stata 14 and later. Version 119 is supported in\n |          Stata 15 and later. Version 114 limits string variables to 244\n |          characters or fewer while versions 117 and later allow strings\n |          with lengths up to 2,000,000 characters. Versions 118 and 119\n |          support Unicode characters, and version 119 supports more than\n |          32,767 variables.\n |\n |          Version 119 should usually only be used when the number of\n |          variables exceeds the capacity of dta format 118. Exporting\n |          smaller datasets in format 119 may have unintended consequences,\n |          and, as of November 2020, Stata SE cannot read version 119 files.\n |\n |      convert_strl : list, optional\n |          List of column names to convert to string columns to Stata StrL\n |          format. Only available if version is 117.  Storing strings in the\n |          StrL format can produce smaller dta files if strings have more than\n |          8 characters and values are repeated.\n |      compression : str or dict, default 'infer'\n |          For on-the-fly compression of the output data. If 'infer' and 'path' is\n |          path-like, then detect compression from the following extensions: '.gz',\n |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n |          (otherwise no compression).\n |          Set to ``None`` for no compression.\n |          Can also be a dict with key ``'method'`` set\n |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n |          other key-value pairs are forwarded to\n |          ``zipfile.ZipFile``, ``gzip.GzipFile``,\n |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n |          ``tarfile.TarFile``, respectively.\n |          As an example, the following could be passed for faster compression and to create\n |          a reproducible gzip archive:\n |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n |\n |          .. versionadded:: 1.5.0\n |              Added support for `.tar` files.\n |\n |          .. versionchanged:: 1.4.0 Zstandard support.\n |\n |      storage_options : dict, optional\n |          Extra options that make sense for a particular storage connection, e.g.\n |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n |          are forwarded to ``urllib.request.Request`` as header options. For other\n |          URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n |          details, and for more examples on storage options refer `here\n |          &lt;https://pandas.pydata.org/docs/user_guide/io.html?\n |          highlight=storage_options#reading-writing-remote-files&gt;`_.\n |\n |      value_labels : dict of dicts\n |          Dictionary containing columns as keys and dictionaries of column value\n |          to labels as values. Labels for a single variable must be 32,000\n |          characters or smaller.\n |\n |          .. versionadded:: 1.4.0\n |\n |      Raises\n |      ------\n |      NotImplementedError\n |          * If datetimes contain timezone information\n |          * Column dtype is not representable in Stata\n |      ValueError\n |          * Columns listed in convert_dates are neither datetime64[ns]\n |            or datetime.datetime\n |          * Column listed in convert_dates is not in DataFrame\n |          * Categorical label contains more than 32,000 characters\n |\n |      See Also\n |      --------\n |      read_stata : Import Stata data files.\n |      io.stata.StataWriter : Low-level writer for Stata data files.\n |      io.stata.StataWriter117 : Low-level writer for version 117 files.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'animal': ['falcon', 'parrot', 'falcon',\n |      ...                               'parrot'],\n |      ...                    'speed': [350, 18, 361, 15]})\n |      &gt;&gt;&gt; df.to_stata('animals.dta')  # doctest: +SKIP\n |\n |  to_string(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Axes | None' = None, col_space: 'int | list[int] | dict[Hashable, int] | None' = None, header: 'bool | SequenceNotStr[str]' = True, index: 'bool' = True, na_rep: 'str' = 'NaN', formatters: 'fmt.FormattersType | None' = None, float_format: 'fmt.FloatFormatType | None' = None, sparsify: 'bool | None' = None, index_names: 'bool' = True, justify: 'str | None' = None, max_rows: 'int | None' = None, max_cols: 'int | None' = None, show_dimensions: 'bool' = False, decimal: 'str' = '.', line_width: 'int | None' = None, min_rows: 'int | None' = None, max_colwidth: 'int | None' = None, encoding: 'str | None' = None) -&gt; 'str | None'\n |      Render a DataFrame to a console-friendly tabular output.\n |\n |      Parameters\n |      ----------\n |      buf : str, Path or StringIO-like, optional, default None\n |          Buffer to write to. If None, the output is returned as a string.\n |      columns : array-like, optional, default None\n |          The subset of columns to write. Writes all columns by default.\n |      col_space : int, list or dict of int, optional\n |          The minimum width of each column. If a list of ints is given every integers corresponds with one column. If a dict is given, the key references the column, while the value defines the space to use..\n |      header : bool or list of str, optional\n |          Write out the column names. If a list of columns is given, it is assumed to be aliases for the column names.\n |      index : bool, optional, default True\n |          Whether to print index (row) labels.\n |      na_rep : str, optional, default 'NaN'\n |          String representation of ``NaN`` to use.\n |      formatters : list, tuple or dict of one-param. functions, optional\n |          Formatter functions to apply to columns' elements by position or\n |          name.\n |          The result of each function must be a unicode string.\n |          List/tuple must be of length equal to the number of columns.\n |      float_format : one-parameter function, optional, default None\n |          Formatter function to apply to columns' elements if they are\n |          floats. This function must return a unicode string and will be\n |          applied only to the non-``NaN`` elements, with ``NaN`` being\n |          handled by ``na_rep``.\n |      sparsify : bool, optional, default True\n |          Set to False for a DataFrame with a hierarchical index to print\n |          every multiindex key at each row.\n |      index_names : bool, optional, default True\n |          Prints the names of the indexes.\n |      justify : str, default None\n |          How to justify the column labels. If None uses the option from\n |          the print configuration (controlled by set_option), 'right' out\n |          of the box. Valid values are\n |\n |          * left\n |          * right\n |          * center\n |          * justify\n |          * justify-all\n |          * start\n |          * end\n |          * inherit\n |          * match-parent\n |          * initial\n |          * unset.\n |      max_rows : int, optional\n |          Maximum number of rows to display in the console.\n |      max_cols : int, optional\n |          Maximum number of columns to display in the console.\n |      show_dimensions : bool, default False\n |          Display DataFrame dimensions (number of rows by number of columns).\n |      decimal : str, default '.'\n |          Character recognized as decimal separator, e.g. ',' in Europe.\n |\n |      line_width : int, optional\n |          Width to wrap a line in characters.\n |      min_rows : int, optional\n |          The number of rows to display in the console in a truncated repr\n |          (when number of rows is above `max_rows`).\n |      max_colwidth : int, optional\n |          Max width to truncate each column in characters. By default, no limit.\n |      encoding : str, default \"utf-8\"\n |          Set character encoding.\n |\n |      Returns\n |      -------\n |      str or None\n |          If buf is None, returns the result as a string. Otherwise returns\n |          None.\n |\n |      See Also\n |      --------\n |      to_html : Convert DataFrame to HTML.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}\n |      &gt;&gt;&gt; df = pd.DataFrame(d)\n |      &gt;&gt;&gt; print(df.to_string())\n |         col1  col2\n |      0     1     4\n |      1     2     5\n |      2     3     6\n |\n |  to_timestamp(self, freq: 'Frequency | None' = None, how: 'ToTimestampHow' = 'start', axis: 'Axis' = 0, copy: 'bool | None' = None) -&gt; 'DataFrame'\n |      Cast to DatetimeIndex of timestamps, at *beginning* of period.\n |\n |      Parameters\n |      ----------\n |      freq : str, default frequency of PeriodIndex\n |          Desired frequency.\n |      how : {'s', 'e', 'start', 'end'}\n |          Convention for converting period to timestamp; start of period\n |          vs. end.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis to convert (the index by default).\n |      copy : bool, default True\n |          If False then underlying input data is not copied.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Returns\n |      -------\n |      DataFrame\n |          The DataFrame has a DatetimeIndex.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; idx = pd.PeriodIndex(['2023', '2024'], freq='Y')\n |      &gt;&gt;&gt; d = {'col1': [1, 2], 'col2': [3, 4]}\n |      &gt;&gt;&gt; df1 = pd.DataFrame(data=d, index=idx)\n |      &gt;&gt;&gt; df1\n |            col1   col2\n |      2023     1      3\n |      2024     2      4\n |\n |      The resulting timestamps will be at the beginning of the year in this case\n |\n |      &gt;&gt;&gt; df1 = df1.to_timestamp()\n |      &gt;&gt;&gt; df1\n |                  col1   col2\n |      2023-01-01     1      3\n |      2024-01-01     2      4\n |      &gt;&gt;&gt; df1.index\n |      DatetimeIndex(['2023-01-01', '2024-01-01'], dtype='datetime64[ns]', freq=None)\n |\n |      Using `freq` which is the offset that the Timestamps will have\n |\n |      &gt;&gt;&gt; df2 = pd.DataFrame(data=d, index=idx)\n |      &gt;&gt;&gt; df2 = df2.to_timestamp(freq='M')\n |      &gt;&gt;&gt; df2\n |                  col1   col2\n |      2023-01-31     1      3\n |      2024-01-31     2      4\n |      &gt;&gt;&gt; df2.index\n |      DatetimeIndex(['2023-01-31', '2024-01-31'], dtype='datetime64[ns]', freq=None)\n |\n |  to_xml(self, path_or_buffer: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, index: 'bool' = True, root_name: 'str | None' = 'data', row_name: 'str | None' = 'row', na_rep: 'str | None' = None, attr_cols: 'list[str] | None' = None, elem_cols: 'list[str] | None' = None, namespaces: 'dict[str | None, str] | None' = None, prefix: 'str | None' = None, encoding: 'str' = 'utf-8', xml_declaration: 'bool | None' = True, pretty_print: 'bool | None' = True, parser: 'XMLParsers | None' = 'lxml', stylesheet: 'FilePath | ReadBuffer[str] | ReadBuffer[bytes] | None' = None, compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions | None' = None) -&gt; 'str | None'\n |      Render a DataFrame to an XML document.\n |\n |      .. versionadded:: 1.3.0\n |\n |      Parameters\n |      ----------\n |      path_or_buffer : str, path object, file-like object, or None, default None\n |          String, path object (implementing ``os.PathLike[str]``), or file-like\n |          object implementing a ``write()`` function. If None, the result is returned\n |          as a string.\n |      index : bool, default True\n |          Whether to include index in XML document.\n |      root_name : str, default 'data'\n |          The name of root element in XML document.\n |      row_name : str, default 'row'\n |          The name of row element in XML document.\n |      na_rep : str, optional\n |          Missing data representation.\n |      attr_cols : list-like, optional\n |          List of columns to write as attributes in row element.\n |          Hierarchical columns will be flattened with underscore\n |          delimiting the different levels.\n |      elem_cols : list-like, optional\n |          List of columns to write as children in row element. By default,\n |          all columns output as children of row element. Hierarchical\n |          columns will be flattened with underscore delimiting the\n |          different levels.\n |      namespaces : dict, optional\n |          All namespaces to be defined in root element. Keys of dict\n |          should be prefix names and values of dict corresponding URIs.\n |          Default namespaces should be given empty string key. For\n |          example, ::\n |\n |              namespaces = {\"\": \"https://example.com\"}\n |\n |      prefix : str, optional\n |          Namespace prefix to be used for every element and/or attribute\n |          in document. This should be one of the keys in ``namespaces``\n |          dict.\n |      encoding : str, default 'utf-8'\n |          Encoding of the resulting document.\n |      xml_declaration : bool, default True\n |          Whether to include the XML declaration at start of document.\n |      pretty_print : bool, default True\n |          Whether output should be pretty printed with indentation and\n |          line breaks.\n |      parser : {'lxml','etree'}, default 'lxml'\n |          Parser module to use for building of tree. Only 'lxml' and\n |          'etree' are supported. With 'lxml', the ability to use XSLT\n |          stylesheet is supported.\n |      stylesheet : str, path object or file-like object, optional\n |          A URL, file-like object, or a raw string containing an XSLT\n |          script used to transform the raw XML output. Script should use\n |          layout of elements and attributes from original output. This\n |          argument requires ``lxml`` to be installed. Only XSLT 1.0\n |          scripts and not later versions is currently supported.\n |      compression : str or dict, default 'infer'\n |          For on-the-fly compression of the output data. If 'infer' and 'path_or_buffer' is\n |          path-like, then detect compression from the following extensions: '.gz',\n |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n |          (otherwise no compression).\n |          Set to ``None`` for no compression.\n |          Can also be a dict with key ``'method'`` set\n |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n |          other key-value pairs are forwarded to\n |          ``zipfile.ZipFile``, ``gzip.GzipFile``,\n |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n |          ``tarfile.TarFile``, respectively.\n |          As an example, the following could be passed for faster compression and to create\n |          a reproducible gzip archive:\n |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n |\n |          .. versionadded:: 1.5.0\n |              Added support for `.tar` files.\n |\n |          .. versionchanged:: 1.4.0 Zstandard support.\n |\n |      storage_options : dict, optional\n |          Extra options that make sense for a particular storage connection, e.g.\n |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n |          are forwarded to ``urllib.request.Request`` as header options. For other\n |          URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n |          details, and for more examples on storage options refer `here\n |          &lt;https://pandas.pydata.org/docs/user_guide/io.html?\n |          highlight=storage_options#reading-writing-remote-files&gt;`_.\n |\n |      Returns\n |      -------\n |      None or str\n |          If ``io`` is None, returns the resulting XML format as a\n |          string. Otherwise returns None.\n |\n |      See Also\n |      --------\n |      to_json : Convert the pandas object to a JSON string.\n |      to_html : Convert DataFrame to a html.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'shape': ['square', 'circle', 'triangle'],\n |      ...                    'degrees': [360, 360, 180],\n |      ...                    'sides': [4, np.nan, 3]})\n |\n |      &gt;&gt;&gt; df.to_xml()  # doctest: +SKIP\n |      &lt;?xml version='1.0' encoding='utf-8'?&gt;\n |      &lt;data&gt;\n |        &lt;row&gt;\n |          &lt;index&gt;0&lt;/index&gt;\n |          &lt;shape&gt;square&lt;/shape&gt;\n |          &lt;degrees&gt;360&lt;/degrees&gt;\n |          &lt;sides&gt;4.0&lt;/sides&gt;\n |        &lt;/row&gt;\n |        &lt;row&gt;\n |          &lt;index&gt;1&lt;/index&gt;\n |          &lt;shape&gt;circle&lt;/shape&gt;\n |          &lt;degrees&gt;360&lt;/degrees&gt;\n |          &lt;sides/&gt;\n |        &lt;/row&gt;\n |        &lt;row&gt;\n |          &lt;index&gt;2&lt;/index&gt;\n |          &lt;shape&gt;triangle&lt;/shape&gt;\n |          &lt;degrees&gt;180&lt;/degrees&gt;\n |          &lt;sides&gt;3.0&lt;/sides&gt;\n |        &lt;/row&gt;\n |      &lt;/data&gt;\n |\n |      &gt;&gt;&gt; df.to_xml(attr_cols=[\n |      ...           'index', 'shape', 'degrees', 'sides'\n |      ...           ])  # doctest: +SKIP\n |      &lt;?xml version='1.0' encoding='utf-8'?&gt;\n |      &lt;data&gt;\n |        &lt;row index=\"0\" shape=\"square\" degrees=\"360\" sides=\"4.0\"/&gt;\n |        &lt;row index=\"1\" shape=\"circle\" degrees=\"360\"/&gt;\n |        &lt;row index=\"2\" shape=\"triangle\" degrees=\"180\" sides=\"3.0\"/&gt;\n |      &lt;/data&gt;\n |\n |      &gt;&gt;&gt; df.to_xml(namespaces={\"doc\": \"https://example.com\"},\n |      ...           prefix=\"doc\")  # doctest: +SKIP\n |      &lt;?xml version='1.0' encoding='utf-8'?&gt;\n |      &lt;doc:data xmlns:doc=\"https://example.com\"&gt;\n |        &lt;doc:row&gt;\n |          &lt;doc:index&gt;0&lt;/doc:index&gt;\n |          &lt;doc:shape&gt;square&lt;/doc:shape&gt;\n |          &lt;doc:degrees&gt;360&lt;/doc:degrees&gt;\n |          &lt;doc:sides&gt;4.0&lt;/doc:sides&gt;\n |        &lt;/doc:row&gt;\n |        &lt;doc:row&gt;\n |          &lt;doc:index&gt;1&lt;/doc:index&gt;\n |          &lt;doc:shape&gt;circle&lt;/doc:shape&gt;\n |          &lt;doc:degrees&gt;360&lt;/doc:degrees&gt;\n |          &lt;doc:sides/&gt;\n |        &lt;/doc:row&gt;\n |        &lt;doc:row&gt;\n |          &lt;doc:index&gt;2&lt;/doc:index&gt;\n |          &lt;doc:shape&gt;triangle&lt;/doc:shape&gt;\n |          &lt;doc:degrees&gt;180&lt;/doc:degrees&gt;\n |          &lt;doc:sides&gt;3.0&lt;/doc:sides&gt;\n |        &lt;/doc:row&gt;\n |      &lt;/doc:data&gt;\n |\n |  transform(self, func: 'AggFuncType', axis: 'Axis' = 0, *args, **kwargs) -&gt; 'DataFrame'\n |      Call ``func`` on self producing a DataFrame with the same axis shape as self.\n |\n |      Parameters\n |      ----------\n |      func : function, str, list-like or dict-like\n |          Function to use for transforming the data. If a function, must either\n |          work when passed a DataFrame or when passed to DataFrame.apply. If func\n |          is both list-like and dict-like, dict-like behavior takes precedence.\n |\n |          Accepted combinations are:\n |\n |          - function\n |          - string function name\n |          - list-like of functions and/or function names, e.g. ``[np.exp, 'sqrt']``\n |          - dict-like of axis labels -&gt; functions, function names or list-like of such.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |              If 0 or 'index': apply function to each column.\n |              If 1 or 'columns': apply function to each row.\n |      *args\n |          Positional arguments to pass to `func`.\n |      **kwargs\n |          Keyword arguments to pass to `func`.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          A DataFrame that must have the same length as self.\n |\n |      Raises\n |      ------\n |      ValueError : If the returned DataFrame has a different length than self.\n |\n |      See Also\n |      --------\n |      DataFrame.agg : Only perform aggregating type operations.\n |      DataFrame.apply : Invoke function on a DataFrame.\n |\n |      Notes\n |      -----\n |      Functions that mutate the passed object can produce unexpected\n |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\n |      for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': range(3), 'B': range(1, 4)})\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  0  1\n |      1  1  2\n |      2  2  3\n |      &gt;&gt;&gt; df.transform(lambda x: x + 1)\n |         A  B\n |      0  1  2\n |      1  2  3\n |      2  3  4\n |\n |      Even though the resulting DataFrame must have the same length as the\n |      input DataFrame, it is possible to provide several input functions:\n |\n |      &gt;&gt;&gt; s = pd.Series(range(3))\n |      &gt;&gt;&gt; s\n |      0    0\n |      1    1\n |      2    2\n |      dtype: int64\n |      &gt;&gt;&gt; s.transform([np.sqrt, np.exp])\n |             sqrt        exp\n |      0  0.000000   1.000000\n |      1  1.000000   2.718282\n |      2  1.414214   7.389056\n |\n |      You can call transform on a GroupBy object:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     \"Date\": [\n |      ...         \"2015-05-08\", \"2015-05-07\", \"2015-05-06\", \"2015-05-05\",\n |      ...         \"2015-05-08\", \"2015-05-07\", \"2015-05-06\", \"2015-05-05\"],\n |      ...     \"Data\": [5, 8, 6, 1, 50, 100, 60, 120],\n |      ... })\n |      &gt;&gt;&gt; df\n |               Date  Data\n |      0  2015-05-08     5\n |      1  2015-05-07     8\n |      2  2015-05-06     6\n |      3  2015-05-05     1\n |      4  2015-05-08    50\n |      5  2015-05-07   100\n |      6  2015-05-06    60\n |      7  2015-05-05   120\n |      &gt;&gt;&gt; df.groupby('Date')['Data'].transform('sum')\n |      0     55\n |      1    108\n |      2     66\n |      3    121\n |      4     55\n |      5    108\n |      6     66\n |      7    121\n |      Name: Data, dtype: int64\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     \"c\": [1, 1, 1, 2, 2, 2, 2],\n |      ...     \"type\": [\"m\", \"n\", \"o\", \"m\", \"m\", \"n\", \"n\"]\n |      ... })\n |      &gt;&gt;&gt; df\n |         c type\n |      0  1    m\n |      1  1    n\n |      2  1    o\n |      3  2    m\n |      4  2    m\n |      5  2    n\n |      6  2    n\n |      &gt;&gt;&gt; df['size'] = df.groupby('c')['type'].transform(len)\n |      &gt;&gt;&gt; df\n |         c type size\n |      0  1    m    3\n |      1  1    n    3\n |      2  1    o    3\n |      3  2    m    4\n |      4  2    m    4\n |      5  2    n    4\n |      6  2    n    4\n |\n |  transpose(self, *args, copy: 'bool' = False) -&gt; 'DataFrame'\n |      Transpose index and columns.\n |\n |      Reflect the DataFrame over its main diagonal by writing rows as columns\n |      and vice-versa. The property :attr:`.T` is an accessor to the method\n |      :meth:`transpose`.\n |\n |      Parameters\n |      ----------\n |      *args : tuple, optional\n |          Accepted for compatibility with NumPy.\n |      copy : bool, default False\n |          Whether to copy the data after transposing, even for DataFrames\n |          with a single dtype.\n |\n |          Note that a copy is always required for mixed dtype DataFrames,\n |          or for DataFrames with any extension types.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Returns\n |      -------\n |      DataFrame\n |          The transposed DataFrame.\n |\n |      See Also\n |      --------\n |      numpy.transpose : Permute the dimensions of a given array.\n |\n |      Notes\n |      -----\n |      Transposing a DataFrame with mixed dtypes will result in a homogeneous\n |      DataFrame with the `object` dtype. In such a case, a copy of the data\n |      is always made.\n |\n |      Examples\n |      --------\n |      **Square DataFrame with homogeneous dtype**\n |\n |      &gt;&gt;&gt; d1 = {'col1': [1, 2], 'col2': [3, 4]}\n |      &gt;&gt;&gt; df1 = pd.DataFrame(data=d1)\n |      &gt;&gt;&gt; df1\n |         col1  col2\n |      0     1     3\n |      1     2     4\n |\n |      &gt;&gt;&gt; df1_transposed = df1.T  # or df1.transpose()\n |      &gt;&gt;&gt; df1_transposed\n |            0  1\n |      col1  1  2\n |      col2  3  4\n |\n |      When the dtype is homogeneous in the original DataFrame, we get a\n |      transposed DataFrame with the same dtype:\n |\n |      &gt;&gt;&gt; df1.dtypes\n |      col1    int64\n |      col2    int64\n |      dtype: object\n |      &gt;&gt;&gt; df1_transposed.dtypes\n |      0    int64\n |      1    int64\n |      dtype: object\n |\n |      **Non-square DataFrame with mixed dtypes**\n |\n |      &gt;&gt;&gt; d2 = {'name': ['Alice', 'Bob'],\n |      ...       'score': [9.5, 8],\n |      ...       'employed': [False, True],\n |      ...       'kids': [0, 0]}\n |      &gt;&gt;&gt; df2 = pd.DataFrame(data=d2)\n |      &gt;&gt;&gt; df2\n |          name  score  employed  kids\n |      0  Alice    9.5     False     0\n |      1    Bob    8.0      True     0\n |\n |      &gt;&gt;&gt; df2_transposed = df2.T  # or df2.transpose()\n |      &gt;&gt;&gt; df2_transposed\n |                    0     1\n |      name      Alice   Bob\n |      score       9.5   8.0\n |      employed  False  True\n |      kids          0     0\n |\n |      When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n |      the `object` dtype:\n |\n |      &gt;&gt;&gt; df2.dtypes\n |      name         object\n |      score       float64\n |      employed       bool\n |      kids          int64\n |      dtype: object\n |      &gt;&gt;&gt; df2_transposed.dtypes\n |      0    object\n |      1    object\n |      dtype: object\n |\n |  truediv(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -&gt; 'DataFrame'\n |      Get Floating division of dataframe and other, element-wise (binary operator `truediv`).\n |\n |      Equivalent to ``dataframe / other``, but with support to substitute a fill_value\n |      for missing data in one of the inputs. With reverse version, `rtruediv`.\n |\n |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to\n |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Any single or multiple element data structure, or list-like object.\n |      axis : {0 or 'index', 1 or 'columns'}\n |          Whether to compare by the index (0 or 'index') or columns.\n |          (1 or 'columns'). For Series input, axis to match Series index on.\n |      level : int or label\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      fill_value : float or None, default None\n |          Fill existing missing (NaN) values, and any new element needed for\n |          successful DataFrame alignment, with this value before computation.\n |          If data in both corresponding DataFrame locations is missing\n |          the result will be missing.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          Result of the arithmetic operation.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add DataFrames.\n |      DataFrame.sub : Subtract DataFrames.\n |      DataFrame.mul : Multiply DataFrames.\n |      DataFrame.div : Divide DataFrames (float division).\n |      DataFrame.truediv : Divide DataFrames (float division).\n |      DataFrame.floordiv : Divide DataFrames (integer division).\n |      DataFrame.mod : Calculate modulo (remainder after division).\n |      DataFrame.pow : Calculate exponential power.\n |\n |      Notes\n |      -----\n |      Mismatched indices will be unioned together.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n |      ...                    'degrees': [360, 180, 360]},\n |      ...                   index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; df\n |                 angles  degrees\n |      circle          0      360\n |      triangle        3      180\n |      rectangle       4      360\n |\n |      Add a scalar with operator version which return the same\n |      results.\n |\n |      &gt;&gt;&gt; df + 1\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      &gt;&gt;&gt; df.add(1)\n |                 angles  degrees\n |      circle          1      361\n |      triangle        4      181\n |      rectangle       5      361\n |\n |      Divide by constant with reverse version.\n |\n |      &gt;&gt;&gt; df.div(10)\n |                 angles  degrees\n |      circle        0.0     36.0\n |      triangle      0.3     18.0\n |      rectangle     0.4     36.0\n |\n |      &gt;&gt;&gt; df.rdiv(10)\n |                   angles   degrees\n |      circle          inf  0.027778\n |      triangle   3.333333  0.055556\n |      rectangle  2.500000  0.027778\n |\n |      Subtract a list and Series by axis with operator version.\n |\n |      &gt;&gt;&gt; df - [1, 2]\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub([1, 2], axis='columns')\n |                 angles  degrees\n |      circle         -1      358\n |      triangle        2      178\n |      rectangle       3      358\n |\n |      &gt;&gt;&gt; df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),\n |      ...        axis='index')\n |                 angles  degrees\n |      circle         -1      359\n |      triangle        2      179\n |      rectangle       3      359\n |\n |      Multiply a dictionary by axis.\n |\n |      &gt;&gt;&gt; df.mul({'angles': 0, 'degrees': 2})\n |                  angles  degrees\n |      circle           0      720\n |      triangle         0      360\n |      rectangle        0      720\n |\n |      &gt;&gt;&gt; df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')\n |                  angles  degrees\n |      circle           0        0\n |      triangle         6      360\n |      rectangle       12     1080\n |\n |      Multiply a DataFrame of different shape with operator version.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'angles': [0, 3, 4]},\n |      ...                      index=['circle', 'triangle', 'rectangle'])\n |      &gt;&gt;&gt; other\n |                 angles\n |      circle          0\n |      triangle        3\n |      rectangle       4\n |\n |      &gt;&gt;&gt; df * other\n |                 angles  degrees\n |      circle          0      NaN\n |      triangle        9      NaN\n |      rectangle      16      NaN\n |\n |      &gt;&gt;&gt; df.mul(other, fill_value=0)\n |                 angles  degrees\n |      circle          0      0.0\n |      triangle        9      0.0\n |      rectangle      16      0.0\n |\n |      Divide by a MultiIndex by level.\n |\n |      &gt;&gt;&gt; df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],\n |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},\n |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],\n |      ...                                    ['circle', 'triangle', 'rectangle',\n |      ...                                     'square', 'pentagon', 'hexagon']])\n |      &gt;&gt;&gt; df_multindex\n |                   angles  degrees\n |      A circle          0      360\n |        triangle        3      180\n |        rectangle       4      360\n |      B square          4      360\n |        pentagon        5      540\n |        hexagon         6      720\n |\n |      &gt;&gt;&gt; df.div(df_multindex, level=1, fill_value=0)\n |                   angles  degrees\n |      A circle        NaN      1.0\n |        triangle      1.0      1.0\n |        rectangle     1.0      1.0\n |      B square        0.0      0.0\n |        pentagon      0.0      0.0\n |        hexagon       0.0      0.0\n |\n |  unstack(self, level: 'IndexLabel' = -1, fill_value=None, sort: 'bool' = True)\n |      Pivot a level of the (necessarily hierarchical) index labels.\n |\n |      Returns a DataFrame having a new level of column labels whose inner-most level\n |      consists of the pivoted index labels.\n |\n |      If the index is not a MultiIndex, the output will be a Series\n |      (the analogue of stack when the columns are not a MultiIndex).\n |\n |      Parameters\n |      ----------\n |      level : int, str, or list of these, default -1 (last level)\n |          Level(s) of index to unstack, can pass level name.\n |      fill_value : int, str or dict\n |          Replace NaN with this value if the unstack produces missing values.\n |      sort : bool, default True\n |          Sort the level(s) in the resulting MultiIndex columns.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |\n |      See Also\n |      --------\n |      DataFrame.pivot : Pivot a table based on column values.\n |      DataFrame.stack : Pivot a level of the column labels (inverse operation\n |          from `unstack`).\n |\n |      Notes\n |      -----\n |      Reference :ref:`the user guide &lt;reshaping.stacking&gt;` for more examples.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n |      ...                                    ('two', 'a'), ('two', 'b')])\n |      &gt;&gt;&gt; s = pd.Series(np.arange(1.0, 5.0), index=index)\n |      &gt;&gt;&gt; s\n |      one  a   1.0\n |           b   2.0\n |      two  a   3.0\n |           b   4.0\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s.unstack(level=-1)\n |           a   b\n |      one  1.0  2.0\n |      two  3.0  4.0\n |\n |      &gt;&gt;&gt; s.unstack(level=0)\n |         one  two\n |      a  1.0   3.0\n |      b  2.0   4.0\n |\n |      &gt;&gt;&gt; df = s.unstack(level=0)\n |      &gt;&gt;&gt; df.unstack()\n |      one  a  1.0\n |           b  2.0\n |      two  a  3.0\n |           b  4.0\n |      dtype: float64\n |\n |  update(self, other, join: 'UpdateJoin' = 'left', overwrite: 'bool' = True, filter_func=None, errors: 'IgnoreRaise' = 'ignore') -&gt; 'None'\n |      Modify in place using non-NA values from another DataFrame.\n |\n |      Aligns on indices. There is no return value.\n |\n |      Parameters\n |      ----------\n |      other : DataFrame, or object coercible into a DataFrame\n |          Should have at least one matching index/column label\n |          with the original DataFrame. If a Series is passed,\n |          its name attribute must be set, and that will be\n |          used as the column name to align with the original DataFrame.\n |      join : {'left'}, default 'left'\n |          Only left join is implemented, keeping the index and columns of the\n |          original object.\n |      overwrite : bool, default True\n |          How to handle non-NA values for overlapping keys:\n |\n |          * True: overwrite original DataFrame's values\n |            with values from `other`.\n |          * False: only update values that are NA in\n |            the original DataFrame.\n |\n |      filter_func : callable(1d-array) -&gt; bool 1d-array, optional\n |          Can choose to replace values other than NA. Return True for values\n |          that should be updated.\n |      errors : {'raise', 'ignore'}, default 'ignore'\n |          If 'raise', will raise a ValueError if the DataFrame and `other`\n |          both contain non-NA data in the same place.\n |\n |      Returns\n |      -------\n |      None\n |          This method directly changes calling object.\n |\n |      Raises\n |      ------\n |      ValueError\n |          * When `errors='raise'` and there's overlapping non-NA data.\n |          * When `errors` is not either `'ignore'` or `'raise'`\n |      NotImplementedError\n |          * If `join != 'left'`\n |\n |      See Also\n |      --------\n |      dict.update : Similar method for dictionaries.\n |      DataFrame.merge : For column(s)-on-column(s) operations.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2, 3],\n |      ...                    'B': [400, 500, 600]})\n |      &gt;&gt;&gt; new_df = pd.DataFrame({'B': [4, 5, 6],\n |      ...                        'C': [7, 8, 9]})\n |      &gt;&gt;&gt; df.update(new_df)\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  1  4\n |      1  2  5\n |      2  3  6\n |\n |      The DataFrame's length does not increase as a result of the update,\n |      only values at matching index/column labels are updated.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': ['a', 'b', 'c'],\n |      ...                    'B': ['x', 'y', 'z']})\n |      &gt;&gt;&gt; new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n |      &gt;&gt;&gt; df.update(new_df)\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  a  d\n |      1  b  e\n |      2  c  f\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': ['a', 'b', 'c'],\n |      ...                    'B': ['x', 'y', 'z']})\n |      &gt;&gt;&gt; new_df = pd.DataFrame({'B': ['d', 'f']}, index=[0, 2])\n |      &gt;&gt;&gt; df.update(new_df)\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  a  d\n |      1  b  y\n |      2  c  f\n |\n |      For Series, its name attribute must be set.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': ['a', 'b', 'c'],\n |      ...                    'B': ['x', 'y', 'z']})\n |      &gt;&gt;&gt; new_column = pd.Series(['d', 'e', 'f'], name='B')\n |      &gt;&gt;&gt; df.update(new_column)\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  a  d\n |      1  b  e\n |      2  c  f\n |\n |      If `other` contains NaNs the corresponding values are not updated\n |      in the original dataframe.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2, 3],\n |      ...                    'B': [400., 500., 600.]})\n |      &gt;&gt;&gt; new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n |      &gt;&gt;&gt; df.update(new_df)\n |      &gt;&gt;&gt; df\n |         A      B\n |      0  1    4.0\n |      1  2  500.0\n |      2  3    6.0\n |\n |  value_counts(self, subset: 'IndexLabel | None' = None, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, dropna: 'bool' = True) -&gt; 'Series'\n |      Return a Series containing the frequency of each distinct row in the Dataframe.\n |\n |      Parameters\n |      ----------\n |      subset : label or list of labels, optional\n |          Columns to use when counting unique combinations.\n |      normalize : bool, default False\n |          Return proportions rather than frequencies.\n |      sort : bool, default True\n |          Sort by frequencies when True. Sort by DataFrame column values when False.\n |      ascending : bool, default False\n |          Sort in ascending order.\n |      dropna : bool, default True\n |          Don't include counts of rows that contain NA values.\n |\n |          .. versionadded:: 1.3.0\n |\n |      Returns\n |      -------\n |      Series\n |\n |      See Also\n |      --------\n |      Series.value_counts: Equivalent method on Series.\n |\n |      Notes\n |      -----\n |      The returned Series will have a MultiIndex with one level per input\n |      column but an Index (non-multi) for a single label. By default, rows\n |      that contain any NA values are omitted from the result. By default,\n |      the resulting Series will be in descending order so that the first\n |      element is the most frequently-occurring row.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'num_legs': [2, 4, 4, 6],\n |      ...                    'num_wings': [2, 0, 0, 0]},\n |      ...                   index=['falcon', 'dog', 'cat', 'ant'])\n |      &gt;&gt;&gt; df\n |              num_legs  num_wings\n |      falcon         2          2\n |      dog            4          0\n |      cat            4          0\n |      ant            6          0\n |\n |      &gt;&gt;&gt; df.value_counts()\n |      num_legs  num_wings\n |      4         0            2\n |      2         2            1\n |      6         0            1\n |      Name: count, dtype: int64\n |\n |      &gt;&gt;&gt; df.value_counts(sort=False)\n |      num_legs  num_wings\n |      2         2            1\n |      4         0            2\n |      6         0            1\n |      Name: count, dtype: int64\n |\n |      &gt;&gt;&gt; df.value_counts(ascending=True)\n |      num_legs  num_wings\n |      2         2            1\n |      6         0            1\n |      4         0            2\n |      Name: count, dtype: int64\n |\n |      &gt;&gt;&gt; df.value_counts(normalize=True)\n |      num_legs  num_wings\n |      4         0            0.50\n |      2         2            0.25\n |      6         0            0.25\n |      Name: proportion, dtype: float64\n |\n |      With `dropna` set to `False` we can also count rows with NA values.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'first_name': ['John', 'Anne', 'John', 'Beth'],\n |      ...                    'middle_name': ['Smith', pd.NA, pd.NA, 'Louise']})\n |      &gt;&gt;&gt; df\n |        first_name middle_name\n |      0       John       Smith\n |      1       Anne        &lt;NA&gt;\n |      2       John        &lt;NA&gt;\n |      3       Beth      Louise\n |\n |      &gt;&gt;&gt; df.value_counts()\n |      first_name  middle_name\n |      Beth        Louise         1\n |      John        Smith          1\n |      Name: count, dtype: int64\n |\n |      &gt;&gt;&gt; df.value_counts(dropna=False)\n |      first_name  middle_name\n |      Anne        NaN            1\n |      Beth        Louise         1\n |      John        Smith          1\n |                  NaN            1\n |      Name: count, dtype: int64\n |\n |      &gt;&gt;&gt; df.value_counts(\"first_name\")\n |      first_name\n |      John    2\n |      Anne    1\n |      Beth    1\n |      Name: count, dtype: int64\n |\n |  var(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)\n |      Return unbiased variance over requested axis.\n |\n |      Normalized by N-1 by default. This can be changed using the ddof argument.\n |\n |      Parameters\n |      ----------\n |      axis : {index (0), columns (1)}\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          .. warning::\n |\n |              The behavior of DataFrame.var with ``axis=None`` is deprecated,\n |              in a future version this will reduce over both axes and return a scalar\n |              To retain the old behavior, pass axis=0 (or do not pass axis).\n |\n |      skipna : bool, default True\n |          Exclude NA/null values. If an entire row/column is NA, the result\n |          will be NA.\n |      ddof : int, default 1\n |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n |          where N represents the number of elements.\n |      numeric_only : bool, default False\n |          Include only float, int, boolean columns. Not implemented for Series.\n |\n |      Returns\n |      -------\n |      Series or DataFrame (if level specified)\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'person_id': [0, 1, 2, 3],\n |      ...                    'age': [21, 25, 62, 43],\n |      ...                    'height': [1.61, 1.87, 1.49, 2.01]}\n |      ...                   ).set_index('person_id')\n |      &gt;&gt;&gt; df\n |                 age  height\n |      person_id\n |      0           21    1.61\n |      1           25    1.87\n |      2           62    1.49\n |      3           43    2.01\n |\n |      &gt;&gt;&gt; df.var()\n |      age       352.916667\n |      height      0.056367\n |      dtype: float64\n |\n |      Alternatively, ``ddof=0`` can be set to normalize by N instead of N-1:\n |\n |      &gt;&gt;&gt; df.var(ddof=0)\n |      age       264.687500\n |      height      0.042275\n |      dtype: float64\n |\n |  ----------------------------------------------------------------------\n |  Class methods defined here:\n |\n |  from_dict(data: 'dict', orient: 'FromDictOrient' = 'columns', dtype: 'Dtype | None' = None, columns: 'Axes | None' = None) -&gt; 'DataFrame'\n |      Construct DataFrame from dict of array-like or dicts.\n |\n |      Creates DataFrame object from dictionary by columns or by index\n |      allowing dtype specification.\n |\n |      Parameters\n |      ----------\n |      data : dict\n |          Of the form {field : array-like} or {field : dict}.\n |      orient : {'columns', 'index', 'tight'}, default 'columns'\n |          The \"orientation\" of the data. If the keys of the passed dict\n |          should be the columns of the resulting DataFrame, pass 'columns'\n |          (default). Otherwise if the keys should be rows, pass 'index'.\n |          If 'tight', assume a dict with keys ['index', 'columns', 'data',\n |          'index_names', 'column_names'].\n |\n |          .. versionadded:: 1.4.0\n |             'tight' as an allowed value for the ``orient`` argument\n |\n |      dtype : dtype, default None\n |          Data type to force after DataFrame construction, otherwise infer.\n |      columns : list, default None\n |          Column labels to use when ``orient='index'``. Raises a ValueError\n |          if used with ``orient='columns'`` or ``orient='tight'``.\n |\n |      Returns\n |      -------\n |      DataFrame\n |\n |      See Also\n |      --------\n |      DataFrame.from_records : DataFrame from structured ndarray, sequence\n |          of tuples or dicts, or DataFrame.\n |      DataFrame : DataFrame object creation using constructor.\n |      DataFrame.to_dict : Convert the DataFrame to a dictionary.\n |\n |      Examples\n |      --------\n |      By default the keys of the dict become the DataFrame columns:\n |\n |      &gt;&gt;&gt; data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n |      &gt;&gt;&gt; pd.DataFrame.from_dict(data)\n |         col_1 col_2\n |      0      3     a\n |      1      2     b\n |      2      1     c\n |      3      0     d\n |\n |      Specify ``orient='index'`` to create the DataFrame using dictionary\n |      keys as rows:\n |\n |      &gt;&gt;&gt; data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n |      &gt;&gt;&gt; pd.DataFrame.from_dict(data, orient='index')\n |             0  1  2  3\n |      row_1  3  2  1  0\n |      row_2  a  b  c  d\n |\n |      When using the 'index' orientation, the column names can be\n |      specified manually:\n |\n |      &gt;&gt;&gt; pd.DataFrame.from_dict(data, orient='index',\n |      ...                        columns=['A', 'B', 'C', 'D'])\n |             A  B  C  D\n |      row_1  3  2  1  0\n |      row_2  a  b  c  d\n |\n |      Specify ``orient='tight'`` to create the DataFrame using a 'tight'\n |      format:\n |\n |      &gt;&gt;&gt; data = {'index': [('a', 'b'), ('a', 'c')],\n |      ...         'columns': [('x', 1), ('y', 2)],\n |      ...         'data': [[1, 3], [2, 4]],\n |      ...         'index_names': ['n1', 'n2'],\n |      ...         'column_names': ['z1', 'z2']}\n |      &gt;&gt;&gt; pd.DataFrame.from_dict(data, orient='tight')\n |      z1     x  y\n |      z2     1  2\n |      n1 n2\n |      a  b   1  3\n |         c   2  4\n |\n |  from_records(data, index=None, exclude=None, columns=None, coerce_float: 'bool' = False, nrows: 'int | None' = None) -&gt; 'DataFrame'\n |      Convert structured or record ndarray to DataFrame.\n |\n |      Creates a DataFrame object from a structured ndarray, sequence of\n |      tuples or dicts, or DataFrame.\n |\n |      Parameters\n |      ----------\n |      data : structured ndarray, sequence of tuples or dicts, or DataFrame\n |          Structured input data.\n |\n |          .. deprecated:: 2.1.0\n |              Passing a DataFrame is deprecated.\n |      index : str, list of fields, array-like\n |          Field of array to use as the index, alternately a specific set of\n |          input labels to use.\n |      exclude : sequence, default None\n |          Columns or fields to exclude.\n |      columns : sequence, default None\n |          Column names to use. If the passed data do not have names\n |          associated with them, this argument provides names for the\n |          columns. Otherwise this argument indicates the order of the columns\n |          in the result (any names not found in the data will become all-NA\n |          columns).\n |      coerce_float : bool, default False\n |          Attempt to convert values of non-string, non-numeric objects (like\n |          decimal.Decimal) to floating point, useful for SQL result sets.\n |      nrows : int, default None\n |          Number of rows to read if data is an iterator.\n |\n |      Returns\n |      -------\n |      DataFrame\n |\n |      See Also\n |      --------\n |      DataFrame.from_dict : DataFrame from dict of array-like or dicts.\n |      DataFrame : DataFrame object creation using constructor.\n |\n |      Examples\n |      --------\n |      Data can be provided as a structured ndarray:\n |\n |      &gt;&gt;&gt; data = np.array([(3, 'a'), (2, 'b'), (1, 'c'), (0, 'd')],\n |      ...                 dtype=[('col_1', 'i4'), ('col_2', 'U1')])\n |      &gt;&gt;&gt; pd.DataFrame.from_records(data)\n |         col_1 col_2\n |      0      3     a\n |      1      2     b\n |      2      1     c\n |      3      0     d\n |\n |      Data can be provided as a list of dicts:\n |\n |      &gt;&gt;&gt; data = [{'col_1': 3, 'col_2': 'a'},\n |      ...         {'col_1': 2, 'col_2': 'b'},\n |      ...         {'col_1': 1, 'col_2': 'c'},\n |      ...         {'col_1': 0, 'col_2': 'd'}]\n |      &gt;&gt;&gt; pd.DataFrame.from_records(data)\n |         col_1 col_2\n |      0      3     a\n |      1      2     b\n |      2      1     c\n |      3      0     d\n |\n |      Data can be provided as a list of tuples with corresponding columns:\n |\n |      &gt;&gt;&gt; data = [(3, 'a'), (2, 'b'), (1, 'c'), (0, 'd')]\n |      &gt;&gt;&gt; pd.DataFrame.from_records(data, columns=['col_1', 'col_2'])\n |         col_1 col_2\n |      0      3     a\n |      1      2     b\n |      2      1     c\n |      3      0     d\n |\n |  ----------------------------------------------------------------------\n |  Readonly properties defined here:\n |\n |  T\n |      The transpose of the DataFrame.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          The transposed DataFrame.\n |\n |      See Also\n |      --------\n |      DataFrame.transpose : Transpose index and columns.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n |      &gt;&gt;&gt; df\n |         col1  col2\n |      0     1     3\n |      1     2     4\n |\n |      &gt;&gt;&gt; df.T\n |            0  1\n |      col1  1  2\n |      col2  3  4\n |\n |  axes\n |      Return a list representing the axes of the DataFrame.\n |\n |      It has the row axis labels and column axis labels as the only members.\n |      They are returned in that order.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n |      &gt;&gt;&gt; df.axes\n |      [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\n |      dtype='object')]\n |\n |  shape\n |      Return a tuple representing the dimensionality of the DataFrame.\n |\n |      See Also\n |      --------\n |      ndarray.shape : Tuple of array dimensions.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n |      &gt;&gt;&gt; df.shape\n |      (2, 2)\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n |      ...                    'col3': [5, 6]})\n |      &gt;&gt;&gt; df.shape\n |      (2, 3)\n |\n |  style\n |      Returns a Styler object.\n |\n |      Contains methods for building a styled HTML representation of the DataFrame.\n |\n |      See Also\n |      --------\n |      io.formats.style.Styler : Helps style a DataFrame or Series according to the\n |          data with HTML and CSS.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2, 3]})\n |      &gt;&gt;&gt; df.style  # doctest: +SKIP\n |\n |      Please see\n |      `Table Visualization &lt;../../user_guide/style.ipynb&gt;`_ for more examples.\n |\n |  values\n |      Return a Numpy representation of the DataFrame.\n |\n |      .. warning::\n |\n |         We recommend using :meth:`DataFrame.to_numpy` instead.\n |\n |      Only the values in the DataFrame will be returned, the axes labels\n |      will be removed.\n |\n |      Returns\n |      -------\n |      numpy.ndarray\n |          The values of the DataFrame.\n |\n |      See Also\n |      --------\n |      DataFrame.to_numpy : Recommended alternative to this method.\n |      DataFrame.index : Retrieve the index labels.\n |      DataFrame.columns : Retrieving the column names.\n |\n |      Notes\n |      -----\n |      The dtype will be a lower-common-denominator dtype (implicit\n |      upcasting); that is to say if the dtypes (even of numeric types)\n |      are mixed, the one that accommodates all will be chosen. Use this\n |      with care if you are not dealing with the blocks.\n |\n |      e.g. If the dtypes are float16 and float32, dtype will be upcast to\n |      float32.  If dtypes are int32 and uint8, dtype will be upcast to\n |      int32. By :func:`numpy.find_common_type` convention, mixing int64\n |      and uint64 will result in a float64 dtype.\n |\n |      Examples\n |      --------\n |      A DataFrame where all columns are the same type (e.g., int64) results\n |      in an array of the same type.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'age':    [ 3,  29],\n |      ...                    'height': [94, 170],\n |      ...                    'weight': [31, 115]})\n |      &gt;&gt;&gt; df\n |         age  height  weight\n |      0    3      94      31\n |      1   29     170     115\n |      &gt;&gt;&gt; df.dtypes\n |      age       int64\n |      height    int64\n |      weight    int64\n |      dtype: object\n |      &gt;&gt;&gt; df.values\n |      array([[  3,  94,  31],\n |             [ 29, 170, 115]])\n |\n |      A DataFrame with mixed type columns(e.g., str/object, int64, float32)\n |      results in an ndarray of the broadest type that accommodates these\n |      mixed types (e.g., object).\n |\n |      &gt;&gt;&gt; df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n |      ...                     ('lion',     80.5, 1),\n |      ...                     ('monkey', np.nan, None)],\n |      ...                   columns=('name', 'max_speed', 'rank'))\n |      &gt;&gt;&gt; df2.dtypes\n |      name          object\n |      max_speed    float64\n |      rank          object\n |      dtype: object\n |      &gt;&gt;&gt; df2.values\n |      array([['parrot', 24.0, 'second'],\n |             ['lion', 80.5, 1],\n |             ['monkey', nan, None]], dtype=object)\n |\n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |\n |  columns\n |      The column labels of the DataFrame.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\n |      &gt;&gt;&gt; df\n |           A  B\n |      0    1  3\n |      1    2  4\n |      &gt;&gt;&gt; df.columns\n |      Index(['A', 'B'], dtype='object')\n |\n |  index\n |      The index (row labels) of the DataFrame.\n |\n |      The index of a DataFrame is a series of labels that identify each row.\n |      The labels can be integers, strings, or any other hashable type. The index\n |      is used for label-based access and alignment, and can be accessed or\n |      modified using this attribute.\n |\n |      Returns\n |      -------\n |      pandas.Index\n |          The index labels of the DataFrame.\n |\n |      See Also\n |      --------\n |      DataFrame.columns : The column labels of the DataFrame.\n |      DataFrame.to_numpy : Convert the DataFrame to a NumPy array.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'Name': ['Alice', 'Bob', 'Aritra'],\n |      ...                    'Age': [25, 30, 35],\n |      ...                    'Location': ['Seattle', 'New York', 'Kona']},\n |      ...                   index=([10, 20, 30]))\n |      &gt;&gt;&gt; df.index\n |      Index([10, 20, 30], dtype='int64')\n |\n |      In this example, we create a DataFrame with 3 rows and 3 columns,\n |      including Name, Age, and Location information. We set the index labels to\n |      be the integers 10, 20, and 30. We then access the `index` attribute of the\n |      DataFrame, which returns an `Index` object containing the index labels.\n |\n |      &gt;&gt;&gt; df.index = [100, 200, 300]\n |      &gt;&gt;&gt; df\n |          Name  Age Location\n |      100  Alice   25  Seattle\n |      200    Bob   30 New York\n |      300  Aritra  35    Kona\n |\n |      In this example, we modify the index labels of the DataFrame by assigning\n |      a new list of labels to the `index` attribute. The DataFrame is then\n |      updated with the new labels, and the output shows the modified DataFrame.\n |\n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |\n |  __annotations__ = {'_AXIS_ORDERS': \"list[Literal['index', 'columns']]\"...\n |\n |  __pandas_priority__ = 4000\n |\n |  plot = &lt;class 'pandas.plotting._core.PlotAccessor'&gt;\n |      Make plots of Series or DataFrame.\n |\n |      Uses the backend specified by the\n |      option ``plotting.backend``. By default, matplotlib is used.\n |\n |      Parameters\n |      ----------\n |      data : Series or DataFrame\n |          The object for which the method is called.\n |      x : label or position, default None\n |          Only used if data is a DataFrame.\n |      y : label, position or list of label, positions, default None\n |          Allows plotting of one column versus another. Only used if data is a\n |          DataFrame.\n |      kind : str\n |          The kind of plot to produce:\n |\n |          - 'line' : line plot (default)\n |          - 'bar' : vertical bar plot\n |          - 'barh' : horizontal bar plot\n |          - 'hist' : histogram\n |          - 'box' : boxplot\n |          - 'kde' : Kernel Density Estimation plot\n |          - 'density' : same as 'kde'\n |          - 'area' : area plot\n |          - 'pie' : pie plot\n |          - 'scatter' : scatter plot (DataFrame only)\n |          - 'hexbin' : hexbin plot (DataFrame only)\n |      ax : matplotlib axes object, default None\n |          An axes of the current figure.\n |      subplots : bool or sequence of iterables, default False\n |          Whether to group columns into subplots:\n |\n |          - ``False`` : No subplots will be used\n |          - ``True`` : Make separate subplots for each column.\n |          - sequence of iterables of column labels: Create a subplot for each\n |            group of columns. For example `[('a', 'c'), ('b', 'd')]` will\n |            create 2 subplots: one with columns 'a' and 'c', and one\n |            with columns 'b' and 'd'. Remaining columns that aren't specified\n |            will be plotted in additional subplots (one per column).\n |\n |            .. versionadded:: 1.5.0\n |\n |      sharex : bool, default True if ax is None else False\n |          In case ``subplots=True``, share x axis and set some x axis labels\n |          to invisible; defaults to True if ax is None otherwise False if\n |          an ax is passed in; Be aware, that passing in both an ax and\n |          ``sharex=True`` will alter all x axis labels for all axis in a figure.\n |      sharey : bool, default False\n |          In case ``subplots=True``, share y axis and set some y axis labels to invisible.\n |      layout : tuple, optional\n |          (rows, columns) for the layout of subplots.\n |      figsize : a tuple (width, height) in inches\n |          Size of a figure object.\n |      use_index : bool, default True\n |          Use index as ticks for x axis.\n |      title : str or list\n |          Title to use for the plot. If a string is passed, print the string\n |          at the top of the figure. If a list is passed and `subplots` is\n |          True, print each item in the list above the corresponding subplot.\n |      grid : bool, default None (matlab style default)\n |          Axis grid lines.\n |      legend : bool or {'reverse'}\n |          Place legend on axis subplots.\n |      style : list or dict\n |          The matplotlib line style per column.\n |      logx : bool or 'sym', default False\n |          Use log scaling or symlog scaling on x axis.\n |\n |      logy : bool or 'sym' default False\n |          Use log scaling or symlog scaling on y axis.\n |\n |      loglog : bool or 'sym', default False\n |          Use log scaling or symlog scaling on both x and y axes.\n |\n |      xticks : sequence\n |          Values to use for the xticks.\n |      yticks : sequence\n |          Values to use for the yticks.\n |      xlim : 2-tuple/list\n |          Set the x limits of the current axes.\n |      ylim : 2-tuple/list\n |          Set the y limits of the current axes.\n |      xlabel : label, optional\n |          Name to use for the xlabel on x-axis. Default uses index name as xlabel, or the\n |          x-column name for planar plots.\n |\n |          .. versionchanged:: 2.0.0\n |\n |              Now applicable to histograms.\n |\n |      ylabel : label, optional\n |          Name to use for the ylabel on y-axis. Default will show no ylabel, or the\n |          y-column name for planar plots.\n |\n |          .. versionchanged:: 2.0.0\n |\n |              Now applicable to histograms.\n |\n |      rot : float, default None\n |          Rotation for ticks (xticks for vertical, yticks for horizontal\n |          plots).\n |      fontsize : float, default None\n |          Font size for xticks and yticks.\n |      colormap : str or matplotlib colormap object, default None\n |          Colormap to select colors from. If string, load colormap with that\n |          name from matplotlib.\n |      colorbar : bool, optional\n |          If True, plot colorbar (only relevant for 'scatter' and 'hexbin'\n |          plots).\n |      position : float\n |          Specify relative alignments for bar plot layout.\n |          From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5\n |          (center).\n |      table : bool, Series or DataFrame, default False\n |          If True, draw a table using the data in the DataFrame and the data\n |          will be transposed to meet matplotlib's default layout.\n |          If a Series or DataFrame is passed, use passed data to draw a\n |          table.\n |      yerr : DataFrame, Series, array-like, dict and str\n |          See :ref:`Plotting with Error Bars &lt;visualization.errorbars&gt;` for\n |          detail.\n |      xerr : DataFrame, Series, array-like, dict and str\n |          Equivalent to yerr.\n |      stacked : bool, default False in line and bar plots, and True in area plot\n |          If True, create stacked plot.\n |      secondary_y : bool or sequence, default False\n |          Whether to plot on the secondary y-axis if a list/tuple, which\n |          columns to plot on secondary y-axis.\n |      mark_right : bool, default True\n |          When using a secondary_y axis, automatically mark the column\n |          labels with \"(right)\" in the legend.\n |      include_bool : bool, default is False\n |          If True, boolean values can be plotted.\n |      backend : str, default None\n |          Backend to use instead of the backend specified in the option\n |          ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to\n |          specify the ``plotting.backend`` for the whole session, set\n |          ``pd.options.plotting.backend``.\n |      **kwargs\n |          Options to pass to matplotlib plotting method.\n |\n |      Returns\n |      -------\n |      :class:`matplotlib.axes.Axes` or numpy.ndarray of them\n |          If the backend is not the default matplotlib one, the return value\n |          will be the object returned by the backend.\n |\n |      Notes\n |      -----\n |      - See matplotlib documentation online for more on this subject\n |      - If `kind` = 'bar' or 'barh', you can specify relative alignments\n |        for bar plot layout by `position` keyword.\n |        From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5\n |        (center)\n |\n |      Examples\n |      --------\n |      For Series:\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; ser = pd.Series([1, 2, 3, 3])\n |          &gt;&gt;&gt; plot = ser.plot(kind='hist', title=\"My plot\")\n |\n |      For DataFrame:\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; df = pd.DataFrame({'length': [1.5, 0.5, 1.2, 0.9, 3],\n |          ...                   'width': [0.7, 0.2, 0.15, 0.2, 1.1]},\n |          ...                   index=['pig', 'rabbit', 'duck', 'chicken', 'horse'])\n |          &gt;&gt;&gt; plot = df.plot(title=\"DataFrame Plot\")\n |\n |      For SeriesGroupBy:\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; lst = [-1, -2, -3, 1, 2, 3]\n |          &gt;&gt;&gt; ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)\n |          &gt;&gt;&gt; plot = ser.groupby(lambda x: x &gt; 0).plot(title=\"SeriesGroupBy Plot\")\n |\n |      For DataFrameGroupBy:\n |\n |      .. plot::\n |          :context: close-figs\n |\n |          &gt;&gt;&gt; df = pd.DataFrame({\"col1\" : [1, 2, 3, 4],\n |          ...                   \"col2\" : [\"A\", \"B\", \"A\", \"B\"]})\n |          &gt;&gt;&gt; plot = df.groupby(\"col2\").plot(kind=\"bar\", title=\"DataFrameGroupBy Plot\")\n |\n |\n |  sparse = &lt;class 'pandas.core.arrays.sparse.accessor.SparseFrameAccesso...\n |      DataFrame accessor for sparse data.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({\"a\": [1, 2, 0, 0],\n |      ...                   \"b\": [3, 0, 0, 4]}, dtype=\"Sparse[int]\")\n |      &gt;&gt;&gt; df.sparse.density\n |      0.5\n |\n |\n |  ----------------------------------------------------------------------\n |  Methods inherited from pandas.core.generic.NDFrame:\n |\n |  __abs__(self) -&gt; 'Self'\n |\n |  __array__(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool_t | None' = None) -&gt; 'np.ndarray'\n |\n |  __array_ufunc__(self, ufunc: 'np.ufunc', method: 'str', *inputs: 'Any', **kwargs: 'Any')\n |\n |  __bool__ = __nonzero__(self) -&gt; 'NoReturn'\n |\n |  __contains__(self, key) -&gt; 'bool_t'\n |      True if the key is in the info axis\n |\n |  __copy__(self, deep: 'bool_t' = True) -&gt; 'Self'\n |\n |  __deepcopy__(self, memo=None) -&gt; 'Self'\n |      Parameters\n |      ----------\n |      memo, default None\n |          Standard signature. Unused\n |\n |  __delitem__(self, key) -&gt; 'None'\n |      Delete item\n |\n |  __finalize__(self, other, method: 'str | None' = None, **kwargs) -&gt; 'Self'\n |      Propagate metadata from other to self.\n |\n |      Parameters\n |      ----------\n |      other : the object from which to get the attributes that we are going\n |          to propagate\n |      method : str, optional\n |          A passed method name providing context on where ``__finalize__``\n |          was called.\n |\n |          .. warning::\n |\n |             The value passed as `method` are not currently considered\n |             stable across pandas releases.\n |\n |  __getattr__(self, name: 'str')\n |      After regular attribute access, try looking up the name\n |      This allows simpler access to columns for interactive use.\n |\n |  __getstate__(self) -&gt; 'dict[str, Any]'\n |      Helper for pickle.\n |\n |  __iadd__(self, other) -&gt; 'Self'\n |\n |  __iand__(self, other) -&gt; 'Self'\n |\n |  __ifloordiv__(self, other) -&gt; 'Self'\n |\n |  __imod__(self, other) -&gt; 'Self'\n |\n |  __imul__(self, other) -&gt; 'Self'\n |\n |  __invert__(self) -&gt; 'Self'\n |\n |  __ior__(self, other) -&gt; 'Self'\n |\n |  __ipow__(self, other) -&gt; 'Self'\n |\n |  __isub__(self, other) -&gt; 'Self'\n |\n |  __iter__(self) -&gt; 'Iterator'\n |      Iterate over info axis.\n |\n |      Returns\n |      -------\n |      iterator\n |          Info axis as iterator.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n |      &gt;&gt;&gt; for x in df:\n |      ...     print(x)\n |      A\n |      B\n |\n |  __itruediv__(self, other) -&gt; 'Self'\n |\n |  __ixor__(self, other) -&gt; 'Self'\n |\n |  __neg__(self) -&gt; 'Self'\n |\n |  __nonzero__(self) -&gt; 'NoReturn'\n |\n |  __pos__(self) -&gt; 'Self'\n |\n |  __round__(self, decimals: 'int' = 0) -&gt; 'Self'\n |\n |  __setattr__(self, name: 'str', value) -&gt; 'None'\n |      After regular attribute access, try setting the name\n |      This allows simpler access to columns for interactive use.\n |\n |  __setstate__(self, state) -&gt; 'None'\n |\n |  abs(self) -&gt; 'Self'\n |      Return a Series/DataFrame with absolute numeric value of each element.\n |\n |      This function only applies to elements that are all numeric.\n |\n |      Returns\n |      -------\n |      abs\n |          Series/DataFrame containing the absolute value of each element.\n |\n |      See Also\n |      --------\n |      numpy.absolute : Calculate the absolute value element-wise.\n |\n |      Notes\n |      -----\n |      For ``complex`` inputs, ``1.2 + 1j``, the absolute value is\n |      :math:`\\sqrt{ a^2 + b^2 }`.\n |\n |      Examples\n |      --------\n |      Absolute numeric values in a Series.\n |\n |      &gt;&gt;&gt; s = pd.Series([-1.10, 2, -3.33, 4])\n |      &gt;&gt;&gt; s.abs()\n |      0    1.10\n |      1    2.00\n |      2    3.33\n |      3    4.00\n |      dtype: float64\n |\n |      Absolute numeric values in a Series with complex numbers.\n |\n |      &gt;&gt;&gt; s = pd.Series([1.2 + 1j])\n |      &gt;&gt;&gt; s.abs()\n |      0    1.56205\n |      dtype: float64\n |\n |      Absolute numeric values in a Series with a Timedelta element.\n |\n |      &gt;&gt;&gt; s = pd.Series([pd.Timedelta('1 days')])\n |      &gt;&gt;&gt; s.abs()\n |      0   1 days\n |      dtype: timedelta64[ns]\n |\n |      Select rows with data closest to certain value using argsort (from\n |      `StackOverflow &lt;https://stackoverflow.com/a/17758115&gt;`__).\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     'a': [4, 5, 6, 7],\n |      ...     'b': [10, 20, 30, 40],\n |      ...     'c': [100, 50, -30, -50]\n |      ... })\n |      &gt;&gt;&gt; df\n |           a    b    c\n |      0    4   10  100\n |      1    5   20   50\n |      2    6   30  -30\n |      3    7   40  -50\n |      &gt;&gt;&gt; df.loc[(df.c - 43).abs().argsort()]\n |           a    b    c\n |      1    5   20   50\n |      0    4   10  100\n |      2    6   30  -30\n |      3    7   40  -50\n |\n |  add_prefix(self, prefix: 'str', axis: 'Axis | None' = None) -&gt; 'Self'\n |      Prefix labels with string `prefix`.\n |\n |      For Series, the row labels are prefixed.\n |      For DataFrame, the column labels are prefixed.\n |\n |      Parameters\n |      ----------\n |      prefix : str\n |          The string to add before each label.\n |      axis : {0 or 'index', 1 or 'columns', None}, default None\n |          Axis to add prefix on\n |\n |          .. versionadded:: 2.0.0\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          New Series or DataFrame with updated labels.\n |\n |      See Also\n |      --------\n |      Series.add_suffix: Suffix row labels with string `suffix`.\n |      DataFrame.add_suffix: Suffix column labels with string `suffix`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4])\n |      &gt;&gt;&gt; s\n |      0    1\n |      1    2\n |      2    3\n |      3    4\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s.add_prefix('item_')\n |      item_0    1\n |      item_1    2\n |      item_2    3\n |      item_3    4\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  1  3\n |      1  2  4\n |      2  3  5\n |      3  4  6\n |\n |      &gt;&gt;&gt; df.add_prefix('col_')\n |           col_A  col_B\n |      0       1       3\n |      1       2       4\n |      2       3       5\n |      3       4       6\n |\n |  add_suffix(self, suffix: 'str', axis: 'Axis | None' = None) -&gt; 'Self'\n |      Suffix labels with string `suffix`.\n |\n |      For Series, the row labels are suffixed.\n |      For DataFrame, the column labels are suffixed.\n |\n |      Parameters\n |      ----------\n |      suffix : str\n |          The string to add after each label.\n |      axis : {0 or 'index', 1 or 'columns', None}, default None\n |          Axis to add suffix on\n |\n |          .. versionadded:: 2.0.0\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          New Series or DataFrame with updated labels.\n |\n |      See Also\n |      --------\n |      Series.add_prefix: Prefix row labels with string `prefix`.\n |      DataFrame.add_prefix: Prefix column labels with string `prefix`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4])\n |      &gt;&gt;&gt; s\n |      0    1\n |      1    2\n |      2    3\n |      3    4\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s.add_suffix('_item')\n |      0_item    1\n |      1_item    2\n |      2_item    3\n |      3_item    4\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  1  3\n |      1  2  4\n |      2  3  5\n |      3  4  6\n |\n |      &gt;&gt;&gt; df.add_suffix('_col')\n |           A_col  B_col\n |      0       1       3\n |      1       2       4\n |      2       3       5\n |      3       4       6\n |\n |  align(self, other: 'NDFrameT', join: 'AlignJoin' = 'outer', axis: 'Axis | None' = None, level: 'Level | None' = None, copy: 'bool_t | None' = None, fill_value: 'Hashable | None' = None, method: 'FillnaOptions | None | lib.NoDefault' = &lt;no_default&gt;, limit: 'int | None | lib.NoDefault' = &lt;no_default&gt;, fill_axis: 'Axis | lib.NoDefault' = &lt;no_default&gt;, broadcast_axis: 'Axis | None | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'tuple[Self, NDFrameT]'\n |      Align two objects on their axes with the specified join method.\n |\n |      Join method is specified for each axis Index.\n |\n |      Parameters\n |      ----------\n |      other : DataFrame or Series\n |      join : {'outer', 'inner', 'left', 'right'}, default 'outer'\n |          Type of alignment to be performed.\n |\n |          * left: use only keys from left frame, preserve key order.\n |          * right: use only keys from right frame, preserve key order.\n |          * outer: use union of keys from both frames, sort keys lexicographically.\n |          * inner: use intersection of keys from both frames,\n |            preserve the order of the left keys.\n |\n |      axis : allowed axis of the other object, default None\n |          Align on index (0), columns (1), or both (None).\n |      level : int or level name, default None\n |          Broadcast across a level, matching Index values on the\n |          passed MultiIndex level.\n |      copy : bool, default True\n |          Always returns new objects. If copy=False and no reindexing is\n |          required then original objects are returned.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      fill_value : scalar, default np.nan\n |          Value to use for missing values. Defaults to NaN, but can be any\n |          \"compatible\" value.\n |      method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n |          Method to use for filling holes in reindexed Series:\n |\n |          - pad / ffill: propagate last valid observation forward to next valid.\n |          - backfill / bfill: use NEXT valid observation to fill gap.\n |\n |          .. deprecated:: 2.1\n |\n |      limit : int, default None\n |          If method is specified, this is the maximum number of consecutive\n |          NaN values to forward/backward fill. In other words, if there is\n |          a gap with more than this number of consecutive NaNs, it will only\n |          be partially filled. If method is not specified, this is the\n |          maximum number of entries along the entire axis where NaNs will be\n |          filled. Must be greater than 0 if not None.\n |\n |          .. deprecated:: 2.1\n |\n |      fill_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default 0\n |          Filling axis, method and limit.\n |\n |          .. deprecated:: 2.1\n |\n |      broadcast_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default None\n |          Broadcast values along this axis, if aligning two objects of\n |          different dimensions.\n |\n |          .. deprecated:: 2.1\n |\n |      Returns\n |      -------\n |      tuple of (Series/DataFrame, type of other)\n |          Aligned objects.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(\n |      ...     [[1, 2, 3, 4], [6, 7, 8, 9]], columns=[\"D\", \"B\", \"E\", \"A\"], index=[1, 2]\n |      ... )\n |      &gt;&gt;&gt; other = pd.DataFrame(\n |      ...     [[10, 20, 30, 40], [60, 70, 80, 90], [600, 700, 800, 900]],\n |      ...     columns=[\"A\", \"B\", \"C\", \"D\"],\n |      ...     index=[2, 3, 4],\n |      ... )\n |      &gt;&gt;&gt; df\n |         D  B  E  A\n |      1  1  2  3  4\n |      2  6  7  8  9\n |      &gt;&gt;&gt; other\n |          A    B    C    D\n |      2   10   20   30   40\n |      3   60   70   80   90\n |      4  600  700  800  900\n |\n |      Align on columns:\n |\n |      &gt;&gt;&gt; left, right = df.align(other, join=\"outer\", axis=1)\n |      &gt;&gt;&gt; left\n |         A  B   C  D  E\n |      1  4  2 NaN  1  3\n |      2  9  7 NaN  6  8\n |      &gt;&gt;&gt; right\n |          A    B    C    D   E\n |      2   10   20   30   40 NaN\n |      3   60   70   80   90 NaN\n |      4  600  700  800  900 NaN\n |\n |      We can also align on the index:\n |\n |      &gt;&gt;&gt; left, right = df.align(other, join=\"outer\", axis=0)\n |      &gt;&gt;&gt; left\n |          D    B    E    A\n |      1  1.0  2.0  3.0  4.0\n |      2  6.0  7.0  8.0  9.0\n |      3  NaN  NaN  NaN  NaN\n |      4  NaN  NaN  NaN  NaN\n |      &gt;&gt;&gt; right\n |          A      B      C      D\n |      1    NaN    NaN    NaN    NaN\n |      2   10.0   20.0   30.0   40.0\n |      3   60.0   70.0   80.0   90.0\n |      4  600.0  700.0  800.0  900.0\n |\n |      Finally, the default `axis=None` will align on both index and columns:\n |\n |      &gt;&gt;&gt; left, right = df.align(other, join=\"outer\", axis=None)\n |      &gt;&gt;&gt; left\n |           A    B   C    D    E\n |      1  4.0  2.0 NaN  1.0  3.0\n |      2  9.0  7.0 NaN  6.0  8.0\n |      3  NaN  NaN NaN  NaN  NaN\n |      4  NaN  NaN NaN  NaN  NaN\n |      &gt;&gt;&gt; right\n |             A      B      C      D   E\n |      1    NaN    NaN    NaN    NaN NaN\n |      2   10.0   20.0   30.0   40.0 NaN\n |      3   60.0   70.0   80.0   90.0 NaN\n |      4  600.0  700.0  800.0  900.0 NaN\n |\n |  asfreq(self, freq: 'Frequency', method: 'FillnaOptions | None' = None, how: \"Literal['start', 'end'] | None\" = None, normalize: 'bool_t' = False, fill_value: 'Hashable | None' = None) -&gt; 'Self'\n |      Convert time series to specified frequency.\n |\n |      Returns the original data conformed to a new index with the specified\n |      frequency.\n |\n |      If the index of this Series/DataFrame is a :class:`~pandas.PeriodIndex`, the new index\n |      is the result of transforming the original index with\n |      :meth:`PeriodIndex.asfreq &lt;pandas.PeriodIndex.asfreq&gt;` (so the original index\n |      will map one-to-one to the new index).\n |\n |      Otherwise, the new index will be equivalent to ``pd.date_range(start, end,\n |      freq=freq)`` where ``start`` and ``end`` are, respectively, the first and\n |      last entries in the original index (see :func:`pandas.date_range`). The\n |      values corresponding to any timesteps in the new index which were not present\n |      in the original index will be null (``NaN``), unless a method for filling\n |      such unknowns is provided (see the ``method`` parameter below).\n |\n |      The :meth:`resample` method is more appropriate if an operation on each group of\n |      timesteps (such as an aggregate) is necessary to represent the data at the new\n |      frequency.\n |\n |      Parameters\n |      ----------\n |      freq : DateOffset or str\n |          Frequency DateOffset or string.\n |      method : {'backfill'/'bfill', 'pad'/'ffill'}, default None\n |          Method to use for filling holes in reindexed Series (note this\n |          does not fill NaNs that already were present):\n |\n |          * 'pad' / 'ffill': propagate last valid observation forward to next\n |            valid\n |          * 'backfill' / 'bfill': use NEXT valid observation to fill.\n |      how : {'start', 'end'}, default end\n |          For PeriodIndex only (see PeriodIndex.asfreq).\n |      normalize : bool, default False\n |          Whether to reset output index to midnight.\n |      fill_value : scalar, optional\n |          Value to use for missing values, applied during upsampling (note\n |          this does not fill NaNs that already were present).\n |\n |      Returns\n |      -------\n |      Series/DataFrame\n |          Series/DataFrame object reindexed to the specified frequency.\n |\n |      See Also\n |      --------\n |      reindex : Conform DataFrame to new index with optional filling logic.\n |\n |      Notes\n |      -----\n |      To learn more about the frequency strings, please see `this link\n |      &lt;https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases&gt;`__.\n |\n |      Examples\n |      --------\n |      Start by creating a series with 4 one minute timestamps.\n |\n |      &gt;&gt;&gt; index = pd.date_range('1/1/2000', periods=4, freq='min')\n |      &gt;&gt;&gt; series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n |      &gt;&gt;&gt; df = pd.DataFrame({'s': series})\n |      &gt;&gt;&gt; df\n |                             s\n |      2000-01-01 00:00:00    0.0\n |      2000-01-01 00:01:00    NaN\n |      2000-01-01 00:02:00    2.0\n |      2000-01-01 00:03:00    3.0\n |\n |      Upsample the series into 30 second bins.\n |\n |      &gt;&gt;&gt; df.asfreq(freq='30s')\n |                             s\n |      2000-01-01 00:00:00    0.0\n |      2000-01-01 00:00:30    NaN\n |      2000-01-01 00:01:00    NaN\n |      2000-01-01 00:01:30    NaN\n |      2000-01-01 00:02:00    2.0\n |      2000-01-01 00:02:30    NaN\n |      2000-01-01 00:03:00    3.0\n |\n |      Upsample again, providing a ``fill value``.\n |\n |      &gt;&gt;&gt; df.asfreq(freq='30s', fill_value=9.0)\n |                             s\n |      2000-01-01 00:00:00    0.0\n |      2000-01-01 00:00:30    9.0\n |      2000-01-01 00:01:00    NaN\n |      2000-01-01 00:01:30    9.0\n |      2000-01-01 00:02:00    2.0\n |      2000-01-01 00:02:30    9.0\n |      2000-01-01 00:03:00    3.0\n |\n |      Upsample again, providing a ``method``.\n |\n |      &gt;&gt;&gt; df.asfreq(freq='30s', method='bfill')\n |                             s\n |      2000-01-01 00:00:00    0.0\n |      2000-01-01 00:00:30    NaN\n |      2000-01-01 00:01:00    NaN\n |      2000-01-01 00:01:30    2.0\n |      2000-01-01 00:02:00    2.0\n |      2000-01-01 00:02:30    3.0\n |      2000-01-01 00:03:00    3.0\n |\n |  asof(self, where, subset=None)\n |      Return the last row(s) without any NaNs before `where`.\n |\n |      The last row (for each element in `where`, if list) without any\n |      NaN is taken.\n |      In case of a :class:`~pandas.DataFrame`, the last row without NaN\n |      considering only the subset of columns (if not `None`)\n |\n |      If there is no good value, NaN is returned for a Series or\n |      a Series of NaN values for a DataFrame\n |\n |      Parameters\n |      ----------\n |      where : date or array-like of dates\n |          Date(s) before which the last row(s) are returned.\n |      subset : str or array-like of str, default `None`\n |          For DataFrame, if not `None`, only use these columns to\n |          check for NaNs.\n |\n |      Returns\n |      -------\n |      scalar, Series, or DataFrame\n |\n |          The return can be:\n |\n |          * scalar : when `self` is a Series and `where` is a scalar\n |          * Series: when `self` is a Series and `where` is an array-like,\n |            or when `self` is a DataFrame and `where` is a scalar\n |          * DataFrame : when `self` is a DataFrame and `where` is an\n |            array-like\n |\n |      See Also\n |      --------\n |      merge_asof : Perform an asof merge. Similar to left join.\n |\n |      Notes\n |      -----\n |      Dates are assumed to be sorted. Raises if this is not the case.\n |\n |      Examples\n |      --------\n |      A Series and a scalar `where`.\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n |      &gt;&gt;&gt; s\n |      10    1.0\n |      20    2.0\n |      30    NaN\n |      40    4.0\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s.asof(20)\n |      2.0\n |\n |      For a sequence `where`, a Series is returned. The first value is\n |      NaN, because the first element of `where` is before the first\n |      index value.\n |\n |      &gt;&gt;&gt; s.asof([5, 20])\n |      5     NaN\n |      20    2.0\n |      dtype: float64\n |\n |      Missing values are not considered. The following is ``2.0``, not\n |      NaN, even though NaN is at the index location for ``30``.\n |\n |      &gt;&gt;&gt; s.asof(30)\n |      2.0\n |\n |      Take all columns into consideration\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'a': [10., 20., 30., 40., 50.],\n |      ...                    'b': [None, None, None, None, 500]},\n |      ...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',\n |      ...                                           '2018-02-27 09:02:00',\n |      ...                                           '2018-02-27 09:03:00',\n |      ...                                           '2018-02-27 09:04:00',\n |      ...                                           '2018-02-27 09:05:00']))\n |      &gt;&gt;&gt; df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n |      ...                           '2018-02-27 09:04:30']))\n |                            a   b\n |      2018-02-27 09:03:30 NaN NaN\n |      2018-02-27 09:04:30 NaN NaN\n |\n |      Take a single column into consideration\n |\n |      &gt;&gt;&gt; df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n |      ...                           '2018-02-27 09:04:30']),\n |      ...         subset=['a'])\n |                              a   b\n |      2018-02-27 09:03:30  30.0 NaN\n |      2018-02-27 09:04:30  40.0 NaN\n |\n |  astype(self, dtype, copy: 'bool_t | None' = None, errors: 'IgnoreRaise' = 'raise') -&gt; 'Self'\n |      Cast a pandas object to a specified dtype ``dtype``.\n |\n |      Parameters\n |      ----------\n |      dtype : str, data type, Series or Mapping of column name -&gt; data type\n |          Use a str, numpy.dtype, pandas.ExtensionDtype or Python type to\n |          cast entire pandas object to the same type. Alternatively, use a\n |          mapping, e.g. {col: dtype, ...}, where col is a column label and dtype is\n |          a numpy.dtype or Python type to cast one or more of the DataFrame's\n |          columns to column-specific types.\n |      copy : bool, default True\n |          Return a copy when ``copy=True`` (be very careful setting\n |          ``copy=False`` as changes to values then may propagate to other\n |          pandas objects).\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      errors : {'raise', 'ignore'}, default 'raise'\n |          Control raising of exceptions on invalid data for provided dtype.\n |\n |          - ``raise`` : allow exceptions to be raised\n |          - ``ignore`` : suppress exceptions. On error return original object.\n |\n |      Returns\n |      -------\n |      same type as caller\n |\n |      See Also\n |      --------\n |      to_datetime : Convert argument to datetime.\n |      to_timedelta : Convert argument to timedelta.\n |      to_numeric : Convert argument to a numeric type.\n |      numpy.ndarray.astype : Cast a numpy array to a specified type.\n |\n |      Notes\n |      -----\n |      .. versionchanged:: 2.0.0\n |\n |          Using ``astype`` to convert from timezone-naive dtype to\n |          timezone-aware dtype will raise an exception.\n |          Use :meth:`Series.dt.tz_localize` instead.\n |\n |      Examples\n |      --------\n |      Create a DataFrame:\n |\n |      &gt;&gt;&gt; d = {'col1': [1, 2], 'col2': [3, 4]}\n |      &gt;&gt;&gt; df = pd.DataFrame(data=d)\n |      &gt;&gt;&gt; df.dtypes\n |      col1    int64\n |      col2    int64\n |      dtype: object\n |\n |      Cast all columns to int32:\n |\n |      &gt;&gt;&gt; df.astype('int32').dtypes\n |      col1    int32\n |      col2    int32\n |      dtype: object\n |\n |      Cast col1 to int32 using a dictionary:\n |\n |      &gt;&gt;&gt; df.astype({'col1': 'int32'}).dtypes\n |      col1    int32\n |      col2    int64\n |      dtype: object\n |\n |      Create a series:\n |\n |      &gt;&gt;&gt; ser = pd.Series([1, 2], dtype='int32')\n |      &gt;&gt;&gt; ser\n |      0    1\n |      1    2\n |      dtype: int32\n |      &gt;&gt;&gt; ser.astype('int64')\n |      0    1\n |      1    2\n |      dtype: int64\n |\n |      Convert to categorical type:\n |\n |      &gt;&gt;&gt; ser.astype('category')\n |      0    1\n |      1    2\n |      dtype: category\n |      Categories (2, int32): [1, 2]\n |\n |      Convert to ordered categorical type with custom ordering:\n |\n |      &gt;&gt;&gt; from pandas.api.types import CategoricalDtype\n |      &gt;&gt;&gt; cat_dtype = CategoricalDtype(\n |      ...     categories=[2, 1], ordered=True)\n |      &gt;&gt;&gt; ser.astype(cat_dtype)\n |      0    1\n |      1    2\n |      dtype: category\n |      Categories (2, int64): [2 &lt; 1]\n |\n |      Create a series of dates:\n |\n |      &gt;&gt;&gt; ser_date = pd.Series(pd.date_range('20200101', periods=3))\n |      &gt;&gt;&gt; ser_date\n |      0   2020-01-01\n |      1   2020-01-02\n |      2   2020-01-03\n |      dtype: datetime64[ns]\n |\n |  at_time(self, time, asof: 'bool_t' = False, axis: 'Axis | None' = None) -&gt; 'Self'\n |      Select values at particular time of day (e.g., 9:30AM).\n |\n |      Parameters\n |      ----------\n |      time : datetime.time or str\n |          The values to select.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |\n |      Raises\n |      ------\n |      TypeError\n |          If the index is not  a :class:`DatetimeIndex`\n |\n |      See Also\n |      --------\n |      between_time : Select values between particular times of the day.\n |      first : Select initial periods of time series based on a date offset.\n |      last : Select final periods of time series based on a date offset.\n |      DatetimeIndex.indexer_at_time : Get just the index locations for\n |          values at particular time of the day.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; i = pd.date_range('2018-04-09', periods=4, freq='12h')\n |      &gt;&gt;&gt; ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n |      &gt;&gt;&gt; ts\n |                           A\n |      2018-04-09 00:00:00  1\n |      2018-04-09 12:00:00  2\n |      2018-04-10 00:00:00  3\n |      2018-04-10 12:00:00  4\n |\n |      &gt;&gt;&gt; ts.at_time('12:00')\n |                           A\n |      2018-04-09 12:00:00  2\n |      2018-04-10 12:00:00  4\n |\n |  backfill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'Self | None'\n |      Fill NA/NaN values by using the next valid observation to fill the gap.\n |\n |      .. deprecated:: 2.0\n |\n |          Series/DataFrame.backfill is deprecated. Use Series/DataFrame.bfill instead.\n |\n |      Returns\n |      -------\n |      Series/DataFrame or None\n |          Object with missing values filled or None if ``inplace=True``.\n |\n |      Examples\n |      --------\n |      Please see examples for :meth:`DataFrame.bfill` or :meth:`Series.bfill`.\n |\n |  between_time(self, start_time, end_time, inclusive: 'IntervalClosedType' = 'both', axis: 'Axis | None' = None) -&gt; 'Self'\n |      Select values between particular times of the day (e.g., 9:00-9:30 AM).\n |\n |      By setting ``start_time`` to be later than ``end_time``,\n |      you can get the times that are *not* between the two times.\n |\n |      Parameters\n |      ----------\n |      start_time : datetime.time or str\n |          Initial time as a time filter limit.\n |      end_time : datetime.time or str\n |          End time as a time filter limit.\n |      inclusive : {\"both\", \"neither\", \"left\", \"right\"}, default \"both\"\n |          Include boundaries; whether to set each bound as closed or open.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Determine range time on index or columns value.\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Data from the original object filtered to the specified dates range.\n |\n |      Raises\n |      ------\n |      TypeError\n |          If the index is not  a :class:`DatetimeIndex`\n |\n |      See Also\n |      --------\n |      at_time : Select values at a particular time of the day.\n |      first : Select initial periods of time series based on a date offset.\n |      last : Select final periods of time series based on a date offset.\n |      DatetimeIndex.indexer_between_time : Get just the index locations for\n |          values between particular times of the day.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; i = pd.date_range('2018-04-09', periods=4, freq='1D20min')\n |      &gt;&gt;&gt; ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n |      &gt;&gt;&gt; ts\n |                           A\n |      2018-04-09 00:00:00  1\n |      2018-04-10 00:20:00  2\n |      2018-04-11 00:40:00  3\n |      2018-04-12 01:00:00  4\n |\n |      &gt;&gt;&gt; ts.between_time('0:15', '0:45')\n |                           A\n |      2018-04-10 00:20:00  2\n |      2018-04-11 00:40:00  3\n |\n |      You get the times that are *not* between two times by setting\n |      ``start_time`` later than ``end_time``:\n |\n |      &gt;&gt;&gt; ts.between_time('0:45', '0:15')\n |                           A\n |      2018-04-09 00:00:00  1\n |      2018-04-12 01:00:00  4\n |\n |  bfill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: \"Literal['inside', 'outside'] | None\" = None, downcast: 'dict | None | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'Self | None'\n |      Fill NA/NaN values by using the next valid observation to fill the gap.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame\n |          Axis along which to fill missing values. For `Series`\n |          this parameter is unused and defaults to 0.\n |      inplace : bool, default False\n |          If True, fill in-place. Note: this will modify any\n |          other views on this object (e.g., a no-copy slice for a column in a\n |          DataFrame).\n |      limit : int, default None\n |          If method is specified, this is the maximum number of consecutive\n |          NaN values to forward/backward fill. In other words, if there is\n |          a gap with more than this number of consecutive NaNs, it will only\n |          be partially filled. If method is not specified, this is the\n |          maximum number of entries along the entire axis where NaNs will be\n |          filled. Must be greater than 0 if not None.\n |      limit_area : {`None`, 'inside', 'outside'}, default None\n |          If limit is specified, consecutive NaNs will be filled with this\n |          restriction.\n |\n |          * ``None``: No fill restriction.\n |          * 'inside': Only fill NaNs surrounded by valid values\n |            (interpolate).\n |          * 'outside': Only fill NaNs outside valid values (extrapolate).\n |\n |          .. versionadded:: 2.2.0\n |\n |      downcast : dict, default is None\n |          A dict of item-&gt;dtype of what to downcast if possible,\n |          or the string 'infer' which will try to downcast to an appropriate\n |          equal type (e.g. float64 to int64 if possible).\n |\n |          .. deprecated:: 2.2.0\n |\n |      Returns\n |      -------\n |      Series/DataFrame or None\n |          Object with missing values filled or None if ``inplace=True``.\n |\n |      Examples\n |      --------\n |      For Series:\n |\n |      &gt;&gt;&gt; s = pd.Series([1, None, None, 2])\n |      &gt;&gt;&gt; s.bfill()\n |      0    1.0\n |      1    2.0\n |      2    2.0\n |      3    2.0\n |      dtype: float64\n |      &gt;&gt;&gt; s.bfill(limit=1)\n |      0    1.0\n |      1    NaN\n |      2    2.0\n |      3    2.0\n |      dtype: float64\n |\n |      With DataFrame:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, None, None, 4], 'B': [None, 5, None, 7]})\n |      &gt;&gt;&gt; df\n |            A     B\n |      0   1.0   NaN\n |      1   NaN   5.0\n |      2   NaN   NaN\n |      3   4.0   7.0\n |      &gt;&gt;&gt; df.bfill()\n |            A     B\n |      0   1.0   5.0\n |      1   4.0   5.0\n |      2   4.0   7.0\n |      3   4.0   7.0\n |      &gt;&gt;&gt; df.bfill(limit=1)\n |            A     B\n |      0   1.0   5.0\n |      1   NaN   5.0\n |      2   4.0   7.0\n |      3   4.0   7.0\n |\n |  bool(self) -&gt; 'bool_t'\n |      Return the bool of a single element Series or DataFrame.\n |\n |      .. deprecated:: 2.1.0\n |\n |         bool is deprecated and will be removed in future version of pandas.\n |         For ``Series`` use ``pandas.Series.item``.\n |\n |      This must be a boolean scalar value, either True or False. It will raise a\n |      ValueError if the Series or DataFrame does not have exactly 1 element, or that\n |      element is not boolean (integer values 0 and 1 will also raise an exception).\n |\n |      Returns\n |      -------\n |      bool\n |          The value in the Series or DataFrame.\n |\n |      See Also\n |      --------\n |      Series.astype : Change the data type of a Series, including to boolean.\n |      DataFrame.astype : Change the data type of a DataFrame, including to boolean.\n |      numpy.bool_ : NumPy boolean data type, used by pandas for boolean values.\n |\n |      Examples\n |      --------\n |      The method will only work for single element objects with a boolean value:\n |\n |      &gt;&gt;&gt; pd.Series([True]).bool()  # doctest: +SKIP\n |      True\n |      &gt;&gt;&gt; pd.Series([False]).bool()  # doctest: +SKIP\n |      False\n |\n |      &gt;&gt;&gt; pd.DataFrame({'col': [True]}).bool()  # doctest: +SKIP\n |      True\n |      &gt;&gt;&gt; pd.DataFrame({'col': [False]}).bool()  # doctest: +SKIP\n |      False\n |\n |      This is an alternative method and will only work\n |      for single element objects with a boolean value:\n |\n |      &gt;&gt;&gt; pd.Series([True]).item()  # doctest: +SKIP\n |      True\n |      &gt;&gt;&gt; pd.Series([False]).item()  # doctest: +SKIP\n |      False\n |\n |  clip(self, lower=None, upper=None, *, axis: 'Axis | None' = None, inplace: 'bool_t' = False, **kwargs) -&gt; 'Self | None'\n |      Trim values at input threshold(s).\n |\n |      Assigns values outside boundary to boundary values. Thresholds\n |      can be singular values or array like, and in the latter case\n |      the clipping is performed element-wise in the specified axis.\n |\n |      Parameters\n |      ----------\n |      lower : float or array-like, default None\n |          Minimum threshold value. All values below this\n |          threshold will be set to it. A missing\n |          threshold (e.g `NA`) will not clip the value.\n |      upper : float or array-like, default None\n |          Maximum threshold value. All values above this\n |          threshold will be set to it. A missing\n |          threshold (e.g `NA`) will not clip the value.\n |      axis : {{0 or 'index', 1 or 'columns', None}}, default None\n |          Align object with lower and upper along the given axis.\n |          For `Series` this parameter is unused and defaults to `None`.\n |      inplace : bool, default False\n |          Whether to perform the operation in place on the data.\n |      *args, **kwargs\n |          Additional keywords have no effect but might be accepted\n |          for compatibility with numpy.\n |\n |      Returns\n |      -------\n |      Series or DataFrame or None\n |          Same type as calling object with the values outside the\n |          clip boundaries replaced or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      Series.clip : Trim values at input threshold in series.\n |      DataFrame.clip : Trim values at input threshold in dataframe.\n |      numpy.clip : Clip (limit) the values in an array.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}\n |      &gt;&gt;&gt; df = pd.DataFrame(data)\n |      &gt;&gt;&gt; df\n |         col_0  col_1\n |      0      9     -2\n |      1     -3     -7\n |      2      0      6\n |      3     -1      8\n |      4      5     -5\n |\n |      Clips per column using lower and upper thresholds:\n |\n |      &gt;&gt;&gt; df.clip(-4, 6)\n |         col_0  col_1\n |      0      6     -2\n |      1     -3     -4\n |      2      0      6\n |      3     -1      6\n |      4      5     -4\n |\n |      Clips using specific lower and upper thresholds per column:\n |\n |      &gt;&gt;&gt; df.clip([-2, -1], [4, 5])\n |          col_0  col_1\n |      0      4     -1\n |      1     -2     -1\n |      2      0      5\n |      3     -1      5\n |      4      4     -1\n |\n |      Clips using specific lower and upper thresholds per column element:\n |\n |      &gt;&gt;&gt; t = pd.Series([2, -4, -1, 6, 3])\n |      &gt;&gt;&gt; t\n |      0    2\n |      1   -4\n |      2   -1\n |      3    6\n |      4    3\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df.clip(t, t + 4, axis=0)\n |         col_0  col_1\n |      0      6      2\n |      1     -3     -4\n |      2      0      3\n |      3      6      8\n |      4      5      3\n |\n |      Clips using specific lower threshold per column element, with missing values:\n |\n |      &gt;&gt;&gt; t = pd.Series([2, -4, np.nan, 6, 3])\n |      &gt;&gt;&gt; t\n |      0    2.0\n |      1   -4.0\n |      2    NaN\n |      3    6.0\n |      4    3.0\n |      dtype: float64\n |\n |      &gt;&gt;&gt; df.clip(t, axis=0)\n |      col_0  col_1\n |      0      9      2\n |      1     -3     -4\n |      2      0      6\n |      3      6      8\n |      4      5      3\n |\n |  convert_dtypes(self, infer_objects: 'bool_t' = True, convert_string: 'bool_t' = True, convert_integer: 'bool_t' = True, convert_boolean: 'bool_t' = True, convert_floating: 'bool_t' = True, dtype_backend: 'DtypeBackend' = 'numpy_nullable') -&gt; 'Self'\n |      Convert columns to the best possible dtypes using dtypes supporting ``pd.NA``.\n |\n |      Parameters\n |      ----------\n |      infer_objects : bool, default True\n |          Whether object dtypes should be converted to the best possible types.\n |      convert_string : bool, default True\n |          Whether object dtypes should be converted to ``StringDtype()``.\n |      convert_integer : bool, default True\n |          Whether, if possible, conversion can be done to integer extension types.\n |      convert_boolean : bool, defaults True\n |          Whether object dtypes should be converted to ``BooleanDtypes()``.\n |      convert_floating : bool, defaults True\n |          Whether, if possible, conversion can be done to floating extension types.\n |          If `convert_integer` is also True, preference will be give to integer\n |          dtypes if the floats can be faithfully casted to integers.\n |      dtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n |          Back-end data type applied to the resultant :class:`DataFrame`\n |          (still experimental). Behaviour is as follows:\n |\n |          * ``\"numpy_nullable\"``: returns nullable-dtype-backed :class:`DataFrame`\n |            (default).\n |          * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n |            DataFrame.\n |\n |          .. versionadded:: 2.0\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Copy of input object with new dtype.\n |\n |      See Also\n |      --------\n |      infer_objects : Infer dtypes of objects.\n |      to_datetime : Convert argument to datetime.\n |      to_timedelta : Convert argument to timedelta.\n |      to_numeric : Convert argument to a numeric type.\n |\n |      Notes\n |      -----\n |      By default, ``convert_dtypes`` will attempt to convert a Series (or each\n |      Series in a DataFrame) to dtypes that support ``pd.NA``. By using the options\n |      ``convert_string``, ``convert_integer``, ``convert_boolean`` and\n |      ``convert_floating``, it is possible to turn off individual conversions\n |      to ``StringDtype``, the integer extension types, ``BooleanDtype``\n |      or floating extension types, respectively.\n |\n |      For object-dtyped columns, if ``infer_objects`` is ``True``, use the inference\n |      rules as during normal Series/DataFrame construction.  Then, if possible,\n |      convert to ``StringDtype``, ``BooleanDtype`` or an appropriate integer\n |      or floating extension type, otherwise leave as ``object``.\n |\n |      If the dtype is integer, convert to an appropriate integer extension type.\n |\n |      If the dtype is numeric, and consists of all integers, convert to an\n |      appropriate integer extension type. Otherwise, convert to an\n |      appropriate floating extension type.\n |\n |      In the future, as new dtypes are added that support ``pd.NA``, the results\n |      of this method will change to support those new dtypes.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(\n |      ...     {\n |      ...         \"a\": pd.Series([1, 2, 3], dtype=np.dtype(\"int32\")),\n |      ...         \"b\": pd.Series([\"x\", \"y\", \"z\"], dtype=np.dtype(\"O\")),\n |      ...         \"c\": pd.Series([True, False, np.nan], dtype=np.dtype(\"O\")),\n |      ...         \"d\": pd.Series([\"h\", \"i\", np.nan], dtype=np.dtype(\"O\")),\n |      ...         \"e\": pd.Series([10, np.nan, 20], dtype=np.dtype(\"float\")),\n |      ...         \"f\": pd.Series([np.nan, 100.5, 200], dtype=np.dtype(\"float\")),\n |      ...     }\n |      ... )\n |\n |      Start with a DataFrame with default dtypes.\n |\n |      &gt;&gt;&gt; df\n |         a  b      c    d     e      f\n |      0  1  x   True    h  10.0    NaN\n |      1  2  y  False    i   NaN  100.5\n |      2  3  z    NaN  NaN  20.0  200.0\n |\n |      &gt;&gt;&gt; df.dtypes\n |      a      int32\n |      b     object\n |      c     object\n |      d     object\n |      e    float64\n |      f    float64\n |      dtype: object\n |\n |      Convert the DataFrame to use best possible dtypes.\n |\n |      &gt;&gt;&gt; dfn = df.convert_dtypes()\n |      &gt;&gt;&gt; dfn\n |         a  b      c     d     e      f\n |      0  1  x   True     h    10   &lt;NA&gt;\n |      1  2  y  False     i  &lt;NA&gt;  100.5\n |      2  3  z   &lt;NA&gt;  &lt;NA&gt;    20  200.0\n |\n |      &gt;&gt;&gt; dfn.dtypes\n |      a             Int32\n |      b    string[python]\n |      c           boolean\n |      d    string[python]\n |      e             Int64\n |      f           Float64\n |      dtype: object\n |\n |      Start with a Series of strings and missing data represented by ``np.nan``.\n |\n |      &gt;&gt;&gt; s = pd.Series([\"a\", \"b\", np.nan])\n |      &gt;&gt;&gt; s\n |      0      a\n |      1      b\n |      2    NaN\n |      dtype: object\n |\n |      Obtain a Series with dtype ``StringDtype``.\n |\n |      &gt;&gt;&gt; s.convert_dtypes()\n |      0       a\n |      1       b\n |      2    &lt;NA&gt;\n |      dtype: string\n |\n |  copy(self, deep: 'bool_t | None' = True) -&gt; 'Self'\n |      Make a copy of this object's indices and data.\n |\n |      When ``deep=True`` (default), a new object will be created with a\n |      copy of the calling object's data and indices. Modifications to\n |      the data or indices of the copy will not be reflected in the\n |      original object (see notes below).\n |\n |      When ``deep=False``, a new object will be created without copying\n |      the calling object's data or index (only references to the data\n |      and index are copied). Any changes to the data of the original\n |      will be reflected in the shallow copy (and vice versa).\n |\n |      .. note::\n |          The ``deep=False`` behaviour as described above will change\n |          in pandas 3.0. `Copy-on-Write\n |          &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |          will be enabled by default, which means that the \"shallow\" copy\n |          is that is returned with ``deep=False`` will still avoid making\n |          an eager copy, but changes to the data of the original will *no*\n |          longer be reflected in the shallow copy (or vice versa). Instead,\n |          it makes use of a lazy (deferred) copy mechanism that will copy\n |          the data only when any changes to the original or shallow copy is\n |          made.\n |\n |          You can already get the future behavior and improvements through\n |          enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Parameters\n |      ----------\n |      deep : bool, default True\n |          Make a deep copy, including a copy of the data and the indices.\n |          With ``deep=False`` neither the indices nor the data are copied.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Object type matches caller.\n |\n |      Notes\n |      -----\n |      When ``deep=True``, data is copied but actual Python objects\n |      will not be copied recursively, only the reference to the object.\n |      This is in contrast to `copy.deepcopy` in the Standard Library,\n |      which recursively copies object data (see examples below).\n |\n |      While ``Index`` objects are copied when ``deep=True``, the underlying\n |      numpy array is not copied for performance reasons. Since ``Index`` is\n |      immutable, the underlying data can be safely shared and a copy\n |      is not needed.\n |\n |      Since pandas is not thread safe, see the\n |      :ref:`gotchas &lt;gotchas.thread-safety&gt;` when copying in a threading\n |      environment.\n |\n |      When ``copy_on_write`` in pandas config is set to ``True``, the\n |      ``copy_on_write`` config takes effect even when ``deep=False``.\n |      This means that any changes to the copied data would make a new copy\n |      of the data upon write (and vice versa). Changes made to either the\n |      original or copied variable would not be reflected in the counterpart.\n |      See :ref:`Copy_on_Write &lt;copy_on_write&gt;` for more information.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series([1, 2], index=[\"a\", \"b\"])\n |      &gt;&gt;&gt; s\n |      a    1\n |      b    2\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s_copy = s.copy()\n |      &gt;&gt;&gt; s_copy\n |      a    1\n |      b    2\n |      dtype: int64\n |\n |      **Shallow copy versus default (deep) copy:**\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2], index=[\"a\", \"b\"])\n |      &gt;&gt;&gt; deep = s.copy()\n |      &gt;&gt;&gt; shallow = s.copy(deep=False)\n |\n |      Shallow copy shares data and index with original.\n |\n |      &gt;&gt;&gt; s is shallow\n |      False\n |      &gt;&gt;&gt; s.values is shallow.values and s.index is shallow.index\n |      True\n |\n |      Deep copy has own copy of data and index.\n |\n |      &gt;&gt;&gt; s is deep\n |      False\n |      &gt;&gt;&gt; s.values is deep.values or s.index is deep.index\n |      False\n |\n |      Updates to the data shared by shallow copy and original is reflected\n |      in both (NOTE: this will no longer be true for pandas &gt;= 3.0);\n |      deep copy remains unchanged.\n |\n |      &gt;&gt;&gt; s.iloc[0] = 3\n |      &gt;&gt;&gt; shallow.iloc[1] = 4\n |      &gt;&gt;&gt; s\n |      a    3\n |      b    4\n |      dtype: int64\n |      &gt;&gt;&gt; shallow\n |      a    3\n |      b    4\n |      dtype: int64\n |      &gt;&gt;&gt; deep\n |      a    1\n |      b    2\n |      dtype: int64\n |\n |      Note that when copying an object containing Python objects, a deep copy\n |      will copy the data, but will not do so recursively. Updating a nested\n |      data object will be reflected in the deep copy.\n |\n |      &gt;&gt;&gt; s = pd.Series([[1, 2], [3, 4]])\n |      &gt;&gt;&gt; deep = s.copy()\n |      &gt;&gt;&gt; s[0][0] = 10\n |      &gt;&gt;&gt; s\n |      0    [10, 2]\n |      1     [3, 4]\n |      dtype: object\n |      &gt;&gt;&gt; deep\n |      0    [10, 2]\n |      1     [3, 4]\n |      dtype: object\n |\n |      **Copy-on-Write is set to true**, the shallow copy is not modified\n |      when the original data is changed:\n |\n |      &gt;&gt;&gt; with pd.option_context(\"mode.copy_on_write\", True):\n |      ...     s = pd.Series([1, 2], index=[\"a\", \"b\"])\n |      ...     copy = s.copy(deep=False)\n |      ...     s.iloc[0] = 100\n |      ...     s\n |      a    100\n |      b      2\n |      dtype: int64\n |      &gt;&gt;&gt; copy\n |      a    1\n |      b    2\n |      dtype: int64\n |\n |  describe(self, percentiles=None, include=None, exclude=None) -&gt; 'Self'\n |      Generate descriptive statistics.\n |\n |      Descriptive statistics include those that summarize the central\n |      tendency, dispersion and shape of a\n |      dataset's distribution, excluding ``NaN`` values.\n |\n |      Analyzes both numeric and object series, as well\n |      as ``DataFrame`` column sets of mixed data types. The output\n |      will vary depending on what is provided. Refer to the notes\n |      below for more detail.\n |\n |      Parameters\n |      ----------\n |      percentiles : list-like of numbers, optional\n |          The percentiles to include in the output. All should\n |          fall between 0 and 1. The default is\n |          ``[.25, .5, .75]``, which returns the 25th, 50th, and\n |          75th percentiles.\n |      include : 'all', list-like of dtypes or None (default), optional\n |          A white list of data types to include in the result. Ignored\n |          for ``Series``. Here are the options:\n |\n |          - 'all' : All columns of the input will be included in the output.\n |          - A list-like of dtypes : Limits the results to the\n |            provided data types.\n |            To limit the result to numeric types submit\n |            ``numpy.number``. To limit it instead to object columns submit\n |            the ``numpy.object`` data type. Strings\n |            can also be used in the style of\n |            ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n |            select pandas categorical columns, use ``'category'``\n |          - None (default) : The result will include all numeric columns.\n |      exclude : list-like of dtypes or None (default), optional,\n |          A black list of data types to omit from the result. Ignored\n |          for ``Series``. Here are the options:\n |\n |          - A list-like of dtypes : Excludes the provided data types\n |            from the result. To exclude numeric types submit\n |            ``numpy.number``. To exclude object columns submit the data\n |            type ``numpy.object``. Strings can also be used in the style of\n |            ``select_dtypes`` (e.g. ``df.describe(exclude=['O'])``). To\n |            exclude pandas categorical columns, use ``'category'``\n |          - None (default) : The result will exclude nothing.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Summary statistics of the Series or Dataframe provided.\n |\n |      See Also\n |      --------\n |      DataFrame.count: Count number of non-NA/null observations.\n |      DataFrame.max: Maximum of the values in the object.\n |      DataFrame.min: Minimum of the values in the object.\n |      DataFrame.mean: Mean of the values.\n |      DataFrame.std: Standard deviation of the observations.\n |      DataFrame.select_dtypes: Subset of a DataFrame including/excluding\n |          columns based on their dtype.\n |\n |      Notes\n |      -----\n |      For numeric data, the result's index will include ``count``,\n |      ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\n |      upper percentiles. By default the lower percentile is ``25`` and the\n |      upper percentile is ``75``. The ``50`` percentile is the\n |      same as the median.\n |\n |      For object data (e.g. strings or timestamps), the result's index\n |      will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\n |      is the most common value. The ``freq`` is the most common value's\n |      frequency. Timestamps also include the ``first`` and ``last`` items.\n |\n |      If multiple object values have the highest count, then the\n |      ``count`` and ``top`` results will be arbitrarily chosen from\n |      among those with the highest count.\n |\n |      For mixed data types provided via a ``DataFrame``, the default is to\n |      return only an analysis of numeric columns. If the dataframe consists\n |      only of object and categorical data without any numeric columns, the\n |      default is to return an analysis of both the object and categorical\n |      columns. If ``include='all'`` is provided as an option, the result\n |      will include a union of attributes of each type.\n |\n |      The `include` and `exclude` parameters can be used to limit\n |      which columns in a ``DataFrame`` are analyzed for the output.\n |      The parameters are ignored when analyzing a ``Series``.\n |\n |      Examples\n |      --------\n |      Describing a numeric ``Series``.\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; s.describe()\n |      count    3.0\n |      mean     2.0\n |      std      1.0\n |      min      1.0\n |      25%      1.5\n |      50%      2.0\n |      75%      2.5\n |      max      3.0\n |      dtype: float64\n |\n |      Describing a categorical ``Series``.\n |\n |      &gt;&gt;&gt; s = pd.Series(['a', 'a', 'b', 'c'])\n |      &gt;&gt;&gt; s.describe()\n |      count     4\n |      unique    3\n |      top       a\n |      freq      2\n |      dtype: object\n |\n |      Describing a timestamp ``Series``.\n |\n |      &gt;&gt;&gt; s = pd.Series([\n |      ...     np.datetime64(\"2000-01-01\"),\n |      ...     np.datetime64(\"2010-01-01\"),\n |      ...     np.datetime64(\"2010-01-01\")\n |      ... ])\n |      &gt;&gt;&gt; s.describe()\n |      count                      3\n |      mean     2006-09-01 08:00:00\n |      min      2000-01-01 00:00:00\n |      25%      2004-12-31 12:00:00\n |      50%      2010-01-01 00:00:00\n |      75%      2010-01-01 00:00:00\n |      max      2010-01-01 00:00:00\n |      dtype: object\n |\n |      Describing a ``DataFrame``. By default only numeric fields\n |      are returned.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'categorical': pd.Categorical(['d', 'e', 'f']),\n |      ...                    'numeric': [1, 2, 3],\n |      ...                    'object': ['a', 'b', 'c']\n |      ...                    })\n |      &gt;&gt;&gt; df.describe()\n |             numeric\n |      count      3.0\n |      mean       2.0\n |      std        1.0\n |      min        1.0\n |      25%        1.5\n |      50%        2.0\n |      75%        2.5\n |      max        3.0\n |\n |      Describing all columns of a ``DataFrame`` regardless of data type.\n |\n |      &gt;&gt;&gt; df.describe(include='all')  # doctest: +SKIP\n |             categorical  numeric object\n |      count            3      3.0      3\n |      unique           3      NaN      3\n |      top              f      NaN      a\n |      freq             1      NaN      1\n |      mean           NaN      2.0    NaN\n |      std            NaN      1.0    NaN\n |      min            NaN      1.0    NaN\n |      25%            NaN      1.5    NaN\n |      50%            NaN      2.0    NaN\n |      75%            NaN      2.5    NaN\n |      max            NaN      3.0    NaN\n |\n |      Describing a column from a ``DataFrame`` by accessing it as\n |      an attribute.\n |\n |      &gt;&gt;&gt; df.numeric.describe()\n |      count    3.0\n |      mean     2.0\n |      std      1.0\n |      min      1.0\n |      25%      1.5\n |      50%      2.0\n |      75%      2.5\n |      max      3.0\n |      Name: numeric, dtype: float64\n |\n |      Including only numeric columns in a ``DataFrame`` description.\n |\n |      &gt;&gt;&gt; df.describe(include=[np.number])\n |             numeric\n |      count      3.0\n |      mean       2.0\n |      std        1.0\n |      min        1.0\n |      25%        1.5\n |      50%        2.0\n |      75%        2.5\n |      max        3.0\n |\n |      Including only string columns in a ``DataFrame`` description.\n |\n |      &gt;&gt;&gt; df.describe(include=[object])  # doctest: +SKIP\n |             object\n |      count       3\n |      unique      3\n |      top         a\n |      freq        1\n |\n |      Including only categorical columns from a ``DataFrame`` description.\n |\n |      &gt;&gt;&gt; df.describe(include=['category'])\n |             categorical\n |      count            3\n |      unique           3\n |      top              d\n |      freq             1\n |\n |      Excluding numeric columns from a ``DataFrame`` description.\n |\n |      &gt;&gt;&gt; df.describe(exclude=[np.number])  # doctest: +SKIP\n |             categorical object\n |      count            3      3\n |      unique           3      3\n |      top              f      a\n |      freq             1      1\n |\n |      Excluding object columns from a ``DataFrame`` description.\n |\n |      &gt;&gt;&gt; df.describe(exclude=[object])  # doctest: +SKIP\n |             categorical  numeric\n |      count            3      3.0\n |      unique           3      NaN\n |      top              f      NaN\n |      freq             1      NaN\n |      mean           NaN      2.0\n |      std            NaN      1.0\n |      min            NaN      1.0\n |      25%            NaN      1.5\n |      50%            NaN      2.0\n |      75%            NaN      2.5\n |      max            NaN      3.0\n |\n |  droplevel(self, level: 'IndexLabel', axis: 'Axis' = 0) -&gt; 'Self'\n |      Return Series/DataFrame with requested index / column level(s) removed.\n |\n |      Parameters\n |      ----------\n |      level : int, str, or list-like\n |          If a string is given, must be the name of a level\n |          If list-like, elements must be names or positional indexes\n |          of levels.\n |\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Axis along which the level(s) is removed:\n |\n |          * 0 or 'index': remove level(s) in column.\n |          * 1 or 'columns': remove level(s) in row.\n |\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |      Returns\n |      -------\n |      Series/DataFrame\n |          Series/DataFrame with requested index / column level(s) removed.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([\n |      ...     [1, 2, 3, 4],\n |      ...     [5, 6, 7, 8],\n |      ...     [9, 10, 11, 12]\n |      ... ]).set_index([0, 1]).rename_axis(['a', 'b'])\n |\n |      &gt;&gt;&gt; df.columns = pd.MultiIndex.from_tuples([\n |      ...     ('c', 'e'), ('d', 'f')\n |      ... ], names=['level_1', 'level_2'])\n |\n |      &gt;&gt;&gt; df\n |      level_1   c   d\n |      level_2   e   f\n |      a b\n |      1 2      3   4\n |      5 6      7   8\n |      9 10    11  12\n |\n |      &gt;&gt;&gt; df.droplevel('a')\n |      level_1   c   d\n |      level_2   e   f\n |      b\n |      2        3   4\n |      6        7   8\n |      10      11  12\n |\n |      &gt;&gt;&gt; df.droplevel('level_2', axis=1)\n |      level_1   c   d\n |      a b\n |      1 2      3   4\n |      5 6      7   8\n |      9 10    11  12\n |\n |  equals(self, other: 'object') -&gt; 'bool_t'\n |      Test whether two objects contain the same elements.\n |\n |      This function allows two Series or DataFrames to be compared against\n |      each other to see if they have the same shape and elements. NaNs in\n |      the same location are considered equal.\n |\n |      The row/column index do not need to have the same type, as long\n |      as the values are considered equal. Corresponding columns and\n |      index must be of the same dtype.\n |\n |      Parameters\n |      ----------\n |      other : Series or DataFrame\n |          The other Series or DataFrame to be compared with the first.\n |\n |      Returns\n |      -------\n |      bool\n |          True if all elements are the same in both objects, False\n |          otherwise.\n |\n |      See Also\n |      --------\n |      Series.eq : Compare two Series objects of the same length\n |          and return a Series where each element is True if the element\n |          in each Series is equal, False otherwise.\n |      DataFrame.eq : Compare two DataFrame objects of the same shape and\n |          return a DataFrame where each element is True if the respective\n |          element in each DataFrame is equal, False otherwise.\n |      testing.assert_series_equal : Raises an AssertionError if left and\n |          right are not equal. Provides an easy interface to ignore\n |          inequality in dtypes, indexes and precision among others.\n |      testing.assert_frame_equal : Like assert_series_equal, but targets\n |          DataFrames.\n |      numpy.array_equal : Return True if two arrays have the same shape\n |          and elements, False otherwise.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({1: [10], 2: [20]})\n |      &gt;&gt;&gt; df\n |          1   2\n |      0  10  20\n |\n |      DataFrames df and exactly_equal have the same types and values for\n |      their elements and column labels, which will return True.\n |\n |      &gt;&gt;&gt; exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n |      &gt;&gt;&gt; exactly_equal\n |          1   2\n |      0  10  20\n |      &gt;&gt;&gt; df.equals(exactly_equal)\n |      True\n |\n |      DataFrames df and different_column_type have the same element\n |      types and values, but have different types for the column labels,\n |      which will still return True.\n |\n |      &gt;&gt;&gt; different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n |      &gt;&gt;&gt; different_column_type\n |         1.0  2.0\n |      0   10   20\n |      &gt;&gt;&gt; df.equals(different_column_type)\n |      True\n |\n |      DataFrames df and different_data_type have different types for the\n |      same values for their elements, and will return False even though\n |      their column labels are the same values and types.\n |\n |      &gt;&gt;&gt; different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n |      &gt;&gt;&gt; different_data_type\n |            1     2\n |      0  10.0  20.0\n |      &gt;&gt;&gt; df.equals(different_data_type)\n |      False\n |\n |  ewm(self, com: 'float | None' = None, span: 'float | None' = None, halflife: 'float | TimedeltaConvertibleTypes | None' = None, alpha: 'float | None' = None, min_periods: 'int | None' = 0, adjust: 'bool_t' = True, ignore_na: 'bool_t' = False, axis: 'Axis | lib.NoDefault' = &lt;no_default&gt;, times: 'np.ndarray | DataFrame | Series | None' = None, method: \"Literal['single', 'table']\" = 'single') -&gt; 'ExponentialMovingWindow'\n |      Provide exponentially weighted (EW) calculations.\n |\n |      Exactly one of ``com``, ``span``, ``halflife``, or ``alpha`` must be\n |      provided if ``times`` is not provided. If ``times`` is provided,\n |      ``halflife`` and one of ``com``, ``span`` or ``alpha`` may be provided.\n |\n |      Parameters\n |      ----------\n |      com : float, optional\n |          Specify decay in terms of center of mass\n |\n |          :math:`\\alpha = 1 / (1 + com)`, for :math:`com \\geq 0`.\n |\n |      span : float, optional\n |          Specify decay in terms of span\n |\n |          :math:`\\alpha = 2 / (span + 1)`, for :math:`span \\geq 1`.\n |\n |      halflife : float, str, timedelta, optional\n |          Specify decay in terms of half-life\n |\n |          :math:`\\alpha = 1 - \\exp\\left(-\\ln(2) / halflife\\right)`, for\n |          :math:`halflife &gt; 0`.\n |\n |          If ``times`` is specified, a timedelta convertible unit over which an\n |          observation decays to half its value. Only applicable to ``mean()``,\n |          and halflife value will not apply to the other functions.\n |\n |      alpha : float, optional\n |          Specify smoothing factor :math:`\\alpha` directly\n |\n |          :math:`0 &lt; \\alpha \\leq 1`.\n |\n |      min_periods : int, default 0\n |          Minimum number of observations in window required to have a value;\n |          otherwise, result is ``np.nan``.\n |\n |      adjust : bool, default True\n |          Divide by decaying adjustment factor in beginning periods to account\n |          for imbalance in relative weightings (viewing EWMA as a moving average).\n |\n |          - When ``adjust=True`` (default), the EW function is calculated using weights\n |            :math:`w_i = (1 - \\alpha)^i`. For example, the EW moving average of the series\n |            [:math:`x_0, x_1, ..., x_t`] would be:\n |\n |          .. math::\n |              y_t = \\frac{x_t + (1 - \\alpha)x_{t-1} + (1 - \\alpha)^2 x_{t-2} + ... + (1 -\n |              \\alpha)^t x_0}{1 + (1 - \\alpha) + (1 - \\alpha)^2 + ... + (1 - \\alpha)^t}\n |\n |          - When ``adjust=False``, the exponentially weighted function is calculated\n |            recursively:\n |\n |          .. math::\n |              \\begin{split}\n |                  y_0 &= x_0\\\\\n |                  y_t &= (1 - \\alpha) y_{t-1} + \\alpha x_t,\n |              \\end{split}\n |      ignore_na : bool, default False\n |          Ignore missing values when calculating weights.\n |\n |          - When ``ignore_na=False`` (default), weights are based on absolute positions.\n |            For example, the weights of :math:`x_0` and :math:`x_2` used in calculating\n |            the final weighted average of [:math:`x_0`, None, :math:`x_2`] are\n |            :math:`(1-\\alpha)^2` and :math:`1` if ``adjust=True``, and\n |            :math:`(1-\\alpha)^2` and :math:`\\alpha` if ``adjust=False``.\n |\n |          - When ``ignore_na=True``, weights are based\n |            on relative positions. For example, the weights of :math:`x_0` and :math:`x_2`\n |            used in calculating the final weighted average of\n |            [:math:`x_0`, None, :math:`x_2`] are :math:`1-\\alpha` and :math:`1` if\n |            ``adjust=True``, and :math:`1-\\alpha` and :math:`\\alpha` if ``adjust=False``.\n |\n |      axis : {0, 1}, default 0\n |          If ``0`` or ``'index'``, calculate across the rows.\n |\n |          If ``1`` or ``'columns'``, calculate across the columns.\n |\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |      times : np.ndarray, Series, default None\n |\n |          Only applicable to ``mean()``.\n |\n |          Times corresponding to the observations. Must be monotonically increasing and\n |          ``datetime64[ns]`` dtype.\n |\n |          If 1-D array like, a sequence with the same shape as the observations.\n |\n |      method : str {'single', 'table'}, default 'single'\n |          .. versionadded:: 1.4.0\n |\n |          Execute the rolling operation per single column or row (``'single'``)\n |          or over the entire object (``'table'``).\n |\n |          This argument is only implemented when specifying ``engine='numba'``\n |          in the method call.\n |\n |          Only applicable to ``mean()``\n |\n |      Returns\n |      -------\n |      pandas.api.typing.ExponentialMovingWindow\n |\n |      See Also\n |      --------\n |      rolling : Provides rolling window calculations.\n |      expanding : Provides expanding transformations.\n |\n |      Notes\n |      -----\n |      See :ref:`Windowing Operations &lt;window.exponentially_weighted&gt;`\n |      for further usage details and examples.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n |      &gt;&gt;&gt; df\n |           B\n |      0  0.0\n |      1  1.0\n |      2  2.0\n |      3  NaN\n |      4  4.0\n |\n |      &gt;&gt;&gt; df.ewm(com=0.5).mean()\n |                B\n |      0  0.000000\n |      1  0.750000\n |      2  1.615385\n |      3  1.615385\n |      4  3.670213\n |      &gt;&gt;&gt; df.ewm(alpha=2 / 3).mean()\n |                B\n |      0  0.000000\n |      1  0.750000\n |      2  1.615385\n |      3  1.615385\n |      4  3.670213\n |\n |      **adjust**\n |\n |      &gt;&gt;&gt; df.ewm(com=0.5, adjust=True).mean()\n |                B\n |      0  0.000000\n |      1  0.750000\n |      2  1.615385\n |      3  1.615385\n |      4  3.670213\n |      &gt;&gt;&gt; df.ewm(com=0.5, adjust=False).mean()\n |                B\n |      0  0.000000\n |      1  0.666667\n |      2  1.555556\n |      3  1.555556\n |      4  3.650794\n |\n |      **ignore_na**\n |\n |      &gt;&gt;&gt; df.ewm(com=0.5, ignore_na=True).mean()\n |                B\n |      0  0.000000\n |      1  0.750000\n |      2  1.615385\n |      3  1.615385\n |      4  3.225000\n |      &gt;&gt;&gt; df.ewm(com=0.5, ignore_na=False).mean()\n |                B\n |      0  0.000000\n |      1  0.750000\n |      2  1.615385\n |      3  1.615385\n |      4  3.670213\n |\n |      **times**\n |\n |      Exponentially weighted mean with weights calculated with a timedelta ``halflife``\n |      relative to ``times``.\n |\n |      &gt;&gt;&gt; times = ['2020-01-01', '2020-01-03', '2020-01-10', '2020-01-15', '2020-01-17']\n |      &gt;&gt;&gt; df.ewm(halflife='4 days', times=pd.DatetimeIndex(times)).mean()\n |                B\n |      0  0.000000\n |      1  0.585786\n |      2  1.523889\n |      3  1.523889\n |      4  3.233686\n |\n |  expanding(self, min_periods: 'int' = 1, axis: 'Axis | lib.NoDefault' = &lt;no_default&gt;, method: \"Literal['single', 'table']\" = 'single') -&gt; 'Expanding'\n |      Provide expanding window calculations.\n |\n |      Parameters\n |      ----------\n |      min_periods : int, default 1\n |          Minimum number of observations in window required to have a value;\n |          otherwise, result is ``np.nan``.\n |\n |      axis : int or str, default 0\n |          If ``0`` or ``'index'``, roll across the rows.\n |\n |          If ``1`` or ``'columns'``, roll across the columns.\n |\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |      method : str {'single', 'table'}, default 'single'\n |          Execute the rolling operation per single column or row (``'single'``)\n |          or over the entire object (``'table'``).\n |\n |          This argument is only implemented when specifying ``engine='numba'``\n |          in the method call.\n |\n |          .. versionadded:: 1.3.0\n |\n |      Returns\n |      -------\n |      pandas.api.typing.Expanding\n |\n |      See Also\n |      --------\n |      rolling : Provides rolling window calculations.\n |      ewm : Provides exponential weighted functions.\n |\n |      Notes\n |      -----\n |      See :ref:`Windowing Operations &lt;window.expanding&gt;` for further usage details\n |      and examples.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({\"B\": [0, 1, 2, np.nan, 4]})\n |      &gt;&gt;&gt; df\n |           B\n |      0  0.0\n |      1  1.0\n |      2  2.0\n |      3  NaN\n |      4  4.0\n |\n |      **min_periods**\n |\n |      Expanding sum with 1 vs 3 observations needed to calculate a value.\n |\n |      &gt;&gt;&gt; df.expanding(1).sum()\n |           B\n |      0  0.0\n |      1  1.0\n |      2  3.0\n |      3  3.0\n |      4  7.0\n |      &gt;&gt;&gt; df.expanding(3).sum()\n |           B\n |      0  NaN\n |      1  NaN\n |      2  3.0\n |      3  3.0\n |      4  7.0\n |\n |  ffill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: \"Literal['inside', 'outside'] | None\" = None, downcast: 'dict | None | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'Self | None'\n |      Fill NA/NaN values by propagating the last valid observation to next valid.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame\n |          Axis along which to fill missing values. For `Series`\n |          this parameter is unused and defaults to 0.\n |      inplace : bool, default False\n |          If True, fill in-place. Note: this will modify any\n |          other views on this object (e.g., a no-copy slice for a column in a\n |          DataFrame).\n |      limit : int, default None\n |          If method is specified, this is the maximum number of consecutive\n |          NaN values to forward/backward fill. In other words, if there is\n |          a gap with more than this number of consecutive NaNs, it will only\n |          be partially filled. If method is not specified, this is the\n |          maximum number of entries along the entire axis where NaNs will be\n |          filled. Must be greater than 0 if not None.\n |      limit_area : {`None`, 'inside', 'outside'}, default None\n |          If limit is specified, consecutive NaNs will be filled with this\n |          restriction.\n |\n |          * ``None``: No fill restriction.\n |          * 'inside': Only fill NaNs surrounded by valid values\n |            (interpolate).\n |          * 'outside': Only fill NaNs outside valid values (extrapolate).\n |\n |          .. versionadded:: 2.2.0\n |\n |      downcast : dict, default is None\n |          A dict of item-&gt;dtype of what to downcast if possible,\n |          or the string 'infer' which will try to downcast to an appropriate\n |          equal type (e.g. float64 to int64 if possible).\n |\n |          .. deprecated:: 2.2.0\n |\n |      Returns\n |      -------\n |      Series/DataFrame or None\n |          Object with missing values filled or None if ``inplace=True``.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n |      ...                    [3, 4, np.nan, 1],\n |      ...                    [np.nan, np.nan, np.nan, np.nan],\n |      ...                    [np.nan, 3, np.nan, 4]],\n |      ...                   columns=list(\"ABCD\"))\n |      &gt;&gt;&gt; df\n |           A    B   C    D\n |      0  NaN  2.0 NaN  0.0\n |      1  3.0  4.0 NaN  1.0\n |      2  NaN  NaN NaN  NaN\n |      3  NaN  3.0 NaN  4.0\n |\n |      &gt;&gt;&gt; df.ffill()\n |           A    B   C    D\n |      0  NaN  2.0 NaN  0.0\n |      1  3.0  4.0 NaN  1.0\n |      2  3.0  4.0 NaN  1.0\n |      3  3.0  3.0 NaN  4.0\n |\n |      &gt;&gt;&gt; ser = pd.Series([1, np.nan, 2, 3])\n |      &gt;&gt;&gt; ser.ffill()\n |      0   1.0\n |      1   1.0\n |      2   2.0\n |      3   3.0\n |      dtype: float64\n |\n |  fillna(self, value: 'Hashable | Mapping | Series | DataFrame | None' = None, *, method: 'FillnaOptions | None' = None, axis: 'Axis | None' = None, inplace: 'bool_t' = False, limit: 'int | None' = None, downcast: 'dict | None | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'Self | None'\n |      Fill NA/NaN values using the specified method.\n |\n |      Parameters\n |      ----------\n |      value : scalar, dict, Series, or DataFrame\n |          Value to use to fill holes (e.g. 0), alternately a\n |          dict/Series/DataFrame of values specifying which value to use for\n |          each index (for a Series) or column (for a DataFrame).  Values not\n |          in the dict/Series/DataFrame will not be filled. This value cannot\n |          be a list.\n |      method : {'backfill', 'bfill', 'ffill', None}, default None\n |          Method to use for filling holes in reindexed Series:\n |\n |          * ffill: propagate last valid observation forward to next valid.\n |          * backfill / bfill: use next valid observation to fill gap.\n |\n |          .. deprecated:: 2.1.0\n |              Use ffill or bfill instead.\n |\n |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame\n |          Axis along which to fill missing values. For `Series`\n |          this parameter is unused and defaults to 0.\n |      inplace : bool, default False\n |          If True, fill in-place. Note: this will modify any\n |          other views on this object (e.g., a no-copy slice for a column in a\n |          DataFrame).\n |      limit : int, default None\n |          If method is specified, this is the maximum number of consecutive\n |          NaN values to forward/backward fill. In other words, if there is\n |          a gap with more than this number of consecutive NaNs, it will only\n |          be partially filled. If method is not specified, this is the\n |          maximum number of entries along the entire axis where NaNs will be\n |          filled. Must be greater than 0 if not None.\n |      downcast : dict, default is None\n |          A dict of item-&gt;dtype of what to downcast if possible,\n |          or the string 'infer' which will try to downcast to an appropriate\n |          equal type (e.g. float64 to int64 if possible).\n |\n |          .. deprecated:: 2.2.0\n |\n |      Returns\n |      -------\n |      Series/DataFrame or None\n |          Object with missing values filled or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      ffill : Fill values by propagating the last valid observation to next valid.\n |      bfill : Fill values by using the next valid observation to fill the gap.\n |      interpolate : Fill NaN values using interpolation.\n |      reindex : Conform object to new index.\n |      asfreq : Convert TimeSeries to specified frequency.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n |      ...                    [3, 4, np.nan, 1],\n |      ...                    [np.nan, np.nan, np.nan, np.nan],\n |      ...                    [np.nan, 3, np.nan, 4]],\n |      ...                   columns=list(\"ABCD\"))\n |      &gt;&gt;&gt; df\n |           A    B   C    D\n |      0  NaN  2.0 NaN  0.0\n |      1  3.0  4.0 NaN  1.0\n |      2  NaN  NaN NaN  NaN\n |      3  NaN  3.0 NaN  4.0\n |\n |      Replace all NaN elements with 0s.\n |\n |      &gt;&gt;&gt; df.fillna(0)\n |           A    B    C    D\n |      0  0.0  2.0  0.0  0.0\n |      1  3.0  4.0  0.0  1.0\n |      2  0.0  0.0  0.0  0.0\n |      3  0.0  3.0  0.0  4.0\n |\n |      Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n |      2, and 3 respectively.\n |\n |      &gt;&gt;&gt; values = {\"A\": 0, \"B\": 1, \"C\": 2, \"D\": 3}\n |      &gt;&gt;&gt; df.fillna(value=values)\n |           A    B    C    D\n |      0  0.0  2.0  2.0  0.0\n |      1  3.0  4.0  2.0  1.0\n |      2  0.0  1.0  2.0  3.0\n |      3  0.0  3.0  2.0  4.0\n |\n |      Only replace the first NaN element.\n |\n |      &gt;&gt;&gt; df.fillna(value=values, limit=1)\n |           A    B    C    D\n |      0  0.0  2.0  2.0  0.0\n |      1  3.0  4.0  NaN  1.0\n |      2  NaN  1.0  NaN  3.0\n |      3  NaN  3.0  NaN  4.0\n |\n |      When filling using a DataFrame, replacement happens along\n |      the same column names and same indices\n |\n |      &gt;&gt;&gt; df2 = pd.DataFrame(np.zeros((4, 4)), columns=list(\"ABCE\"))\n |      &gt;&gt;&gt; df.fillna(df2)\n |           A    B    C    D\n |      0  0.0  2.0  0.0  0.0\n |      1  3.0  4.0  0.0  1.0\n |      2  0.0  0.0  0.0  NaN\n |      3  0.0  3.0  0.0  4.0\n |\n |      Note that column D is not affected since it is not present in df2.\n |\n |  filter(self, items=None, like: 'str | None' = None, regex: 'str | None' = None, axis: 'Axis | None' = None) -&gt; 'Self'\n |      Subset the dataframe rows or columns according to the specified index labels.\n |\n |      Note that this routine does not filter a dataframe on its\n |      contents. The filter is applied to the labels of the index.\n |\n |      Parameters\n |      ----------\n |      items : list-like\n |          Keep labels from axis which are in items.\n |      like : str\n |          Keep labels from axis for which \"like in label == True\".\n |      regex : str (regular expression)\n |          Keep labels from axis for which re.search(regex, label) == True.\n |      axis : {0 or 'index', 1 or 'columns', None}, default None\n |          The axis to filter on, expressed either as an index (int)\n |          or axis name (str). By default this is the info axis, 'columns' for\n |          DataFrame. For `Series` this parameter is unused and defaults to `None`.\n |\n |      Returns\n |      -------\n |      same type as input object\n |\n |      See Also\n |      --------\n |      DataFrame.loc : Access a group of rows and columns\n |          by label(s) or a boolean array.\n |\n |      Notes\n |      -----\n |      The ``items``, ``like``, and ``regex`` parameters are\n |      enforced to be mutually exclusive.\n |\n |      ``axis`` defaults to the info axis that is used when indexing\n |      with ``[]``.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),\n |      ...                   index=['mouse', 'rabbit'],\n |      ...                   columns=['one', 'two', 'three'])\n |      &gt;&gt;&gt; df\n |              one  two  three\n |      mouse     1    2      3\n |      rabbit    4    5      6\n |\n |      &gt;&gt;&gt; # select columns by name\n |      &gt;&gt;&gt; df.filter(items=['one', 'three'])\n |               one  three\n |      mouse     1      3\n |      rabbit    4      6\n |\n |      &gt;&gt;&gt; # select columns by regular expression\n |      &gt;&gt;&gt; df.filter(regex='e$', axis=1)\n |               one  three\n |      mouse     1      3\n |      rabbit    4      6\n |\n |      &gt;&gt;&gt; # select rows containing 'bbi'\n |      &gt;&gt;&gt; df.filter(like='bbi', axis=0)\n |               one  two  three\n |      rabbit    4    5      6\n |\n |  first(self, offset) -&gt; 'Self'\n |      Select initial periods of time series data based on a date offset.\n |\n |      .. deprecated:: 2.1\n |          :meth:`.first` is deprecated and will be removed in a future version.\n |          Please create a mask and filter using `.loc` instead.\n |\n |      For a DataFrame with a sorted DatetimeIndex, this function can\n |      select the first few rows based on a date offset.\n |\n |      Parameters\n |      ----------\n |      offset : str, DateOffset or dateutil.relativedelta\n |          The offset length of the data that will be selected. For instance,\n |          '1ME' will display all the rows having their index within the first month.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          A subset of the caller.\n |\n |      Raises\n |      ------\n |      TypeError\n |          If the index is not  a :class:`DatetimeIndex`\n |\n |      See Also\n |      --------\n |      last : Select final periods of time series based on a date offset.\n |      at_time : Select values at a particular time of the day.\n |      between_time : Select values between particular times of the day.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; i = pd.date_range('2018-04-09', periods=4, freq='2D')\n |      &gt;&gt;&gt; ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n |      &gt;&gt;&gt; ts\n |                  A\n |      2018-04-09  1\n |      2018-04-11  2\n |      2018-04-13  3\n |      2018-04-15  4\n |\n |      Get the rows for the first 3 days:\n |\n |      &gt;&gt;&gt; ts.first('3D')\n |                  A\n |      2018-04-09  1\n |      2018-04-11  2\n |\n |      Notice the data for 3 first calendar days were returned, not the first\n |      3 days observed in the dataset, and therefore data for 2018-04-13 was\n |      not returned.\n |\n |  first_valid_index(self) -&gt; 'Hashable | None'\n |      Return index for first non-NA value or None, if no non-NA value is found.\n |\n |      Returns\n |      -------\n |      type of index\n |\n |      Examples\n |      --------\n |      For Series:\n |\n |      &gt;&gt;&gt; s = pd.Series([None, 3, 4])\n |      &gt;&gt;&gt; s.first_valid_index()\n |      1\n |      &gt;&gt;&gt; s.last_valid_index()\n |      2\n |\n |      &gt;&gt;&gt; s = pd.Series([None, None])\n |      &gt;&gt;&gt; print(s.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(s.last_valid_index())\n |      None\n |\n |      If all elements in Series are NA/null, returns None.\n |\n |      &gt;&gt;&gt; s = pd.Series()\n |      &gt;&gt;&gt; print(s.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(s.last_valid_index())\n |      None\n |\n |      If Series is empty, returns None.\n |\n |      For DataFrame:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})\n |      &gt;&gt;&gt; df\n |           A      B\n |      0  NaN    NaN\n |      1  NaN    3.0\n |      2  2.0    4.0\n |      &gt;&gt;&gt; df.first_valid_index()\n |      1\n |      &gt;&gt;&gt; df.last_valid_index()\n |      2\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})\n |      &gt;&gt;&gt; df\n |           A      B\n |      0  None   None\n |      1  None   None\n |      2  None   None\n |      &gt;&gt;&gt; print(df.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(df.last_valid_index())\n |      None\n |\n |      If all elements in DataFrame are NA/null, returns None.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame()\n |      &gt;&gt;&gt; df\n |      Empty DataFrame\n |      Columns: []\n |      Index: []\n |      &gt;&gt;&gt; print(df.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(df.last_valid_index())\n |      None\n |\n |      If DataFrame is empty, returns None.\n |\n |  get(self, key, default=None)\n |      Get item from object for given key (ex: DataFrame column).\n |\n |      Returns default value if not found.\n |\n |      Parameters\n |      ----------\n |      key : object\n |\n |      Returns\n |      -------\n |      same type as items contained in object\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(\n |      ...     [\n |      ...         [24.3, 75.7, \"high\"],\n |      ...         [31, 87.8, \"high\"],\n |      ...         [22, 71.6, \"medium\"],\n |      ...         [35, 95, \"medium\"],\n |      ...     ],\n |      ...     columns=[\"temp_celsius\", \"temp_fahrenheit\", \"windspeed\"],\n |      ...     index=pd.date_range(start=\"2014-02-12\", end=\"2014-02-15\", freq=\"D\"),\n |      ... )\n |\n |      &gt;&gt;&gt; df\n |                  temp_celsius  temp_fahrenheit windspeed\n |      2014-02-12          24.3             75.7      high\n |      2014-02-13          31.0             87.8      high\n |      2014-02-14          22.0             71.6    medium\n |      2014-02-15          35.0             95.0    medium\n |\n |      &gt;&gt;&gt; df.get([\"temp_celsius\", \"windspeed\"])\n |                  temp_celsius windspeed\n |      2014-02-12          24.3      high\n |      2014-02-13          31.0      high\n |      2014-02-14          22.0    medium\n |      2014-02-15          35.0    medium\n |\n |      &gt;&gt;&gt; ser = df['windspeed']\n |      &gt;&gt;&gt; ser.get('2014-02-13')\n |      'high'\n |\n |      If the key isn't found, the default value will be used.\n |\n |      &gt;&gt;&gt; df.get([\"temp_celsius\", \"temp_kelvin\"], default=\"default_value\")\n |      'default_value'\n |\n |      &gt;&gt;&gt; ser.get('2014-02-10', '[unknown]')\n |      '[unknown]'\n |\n |  head(self, n: 'int' = 5) -&gt; 'Self'\n |      Return the first `n` rows.\n |\n |      This function returns the first `n` rows for the object based\n |      on position. It is useful for quickly testing if your object\n |      has the right type of data in it.\n |\n |      For negative values of `n`, this function returns all rows except\n |      the last `|n|` rows, equivalent to ``df[:n]``.\n |\n |      If n is larger than the number of rows, this function returns all rows.\n |\n |      Parameters\n |      ----------\n |      n : int, default 5\n |          Number of rows to select.\n |\n |      Returns\n |      -------\n |      same type as caller\n |          The first `n` rows of the caller object.\n |\n |      See Also\n |      --------\n |      DataFrame.tail: Returns the last `n` rows.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n |      ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n |      &gt;&gt;&gt; df\n |            animal\n |      0  alligator\n |      1        bee\n |      2     falcon\n |      3       lion\n |      4     monkey\n |      5     parrot\n |      6      shark\n |      7      whale\n |      8      zebra\n |\n |      Viewing the first 5 lines\n |\n |      &gt;&gt;&gt; df.head()\n |            animal\n |      0  alligator\n |      1        bee\n |      2     falcon\n |      3       lion\n |      4     monkey\n |\n |      Viewing the first `n` lines (three in this case)\n |\n |      &gt;&gt;&gt; df.head(3)\n |            animal\n |      0  alligator\n |      1        bee\n |      2     falcon\n |\n |      For negative values of `n`\n |\n |      &gt;&gt;&gt; df.head(-3)\n |            animal\n |      0  alligator\n |      1        bee\n |      2     falcon\n |      3       lion\n |      4     monkey\n |      5     parrot\n |\n |  infer_objects(self, copy: 'bool_t | None' = None) -&gt; 'Self'\n |      Attempt to infer better dtypes for object columns.\n |\n |      Attempts soft conversion of object-dtyped\n |      columns, leaving non-object and unconvertible\n |      columns unchanged. The inference rules are the\n |      same as during normal Series/DataFrame construction.\n |\n |      Parameters\n |      ----------\n |      copy : bool, default True\n |          Whether to make a copy for non-object or non-inferable columns\n |          or Series.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Returns\n |      -------\n |      same type as input object\n |\n |      See Also\n |      --------\n |      to_datetime : Convert argument to datetime.\n |      to_timedelta : Convert argument to timedelta.\n |      to_numeric : Convert argument to numeric type.\n |      convert_dtypes : Convert argument to best possible dtype.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n |      &gt;&gt;&gt; df = df.iloc[1:]\n |      &gt;&gt;&gt; df\n |         A\n |      1  1\n |      2  2\n |      3  3\n |\n |      &gt;&gt;&gt; df.dtypes\n |      A    object\n |      dtype: object\n |\n |      &gt;&gt;&gt; df.infer_objects().dtypes\n |      A    int64\n |      dtype: object\n |\n |  interpolate(self, method: 'InterpolateOptions' = 'linear', *, axis: 'Axis' = 0, limit: 'int | None' = None, inplace: 'bool_t' = False, limit_direction: \"Literal['forward', 'backward', 'both'] | None\" = None, limit_area: \"Literal['inside', 'outside'] | None\" = None, downcast: \"Literal['infer'] | None | lib.NoDefault\" = &lt;no_default&gt;, **kwargs) -&gt; 'Self | None'\n |      Fill NaN values using an interpolation method.\n |\n |      Please note that only ``method='linear'`` is supported for\n |      DataFrame/Series with a MultiIndex.\n |\n |      Parameters\n |      ----------\n |      method : str, default 'linear'\n |          Interpolation technique to use. One of:\n |\n |          * 'linear': Ignore the index and treat the values as equally\n |            spaced. This is the only method supported on MultiIndexes.\n |          * 'time': Works on daily and higher resolution data to interpolate\n |            given length of interval.\n |          * 'index', 'values': use the actual numerical values of the index.\n |          * 'pad': Fill in NaNs using existing values.\n |          * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',\n |            'barycentric', 'polynomial': Passed to\n |            `scipy.interpolate.interp1d`, whereas 'spline' is passed to\n |            `scipy.interpolate.UnivariateSpline`. These methods use the numerical\n |            values of the index.  Both 'polynomial' and 'spline' require that\n |            you also specify an `order` (int), e.g.\n |            ``df.interpolate(method='polynomial', order=5)``. Note that,\n |            `slinear` method in Pandas refers to the Scipy first order `spline`\n |            instead of Pandas first order `spline`.\n |          * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima',\n |            'cubicspline': Wrappers around the SciPy interpolation methods of\n |            similar names. See `Notes`.\n |          * 'from_derivatives': Refers to\n |            `scipy.interpolate.BPoly.from_derivatives`.\n |\n |      axis : {{0 or 'index', 1 or 'columns', None}}, default None\n |          Axis to interpolate along. For `Series` this parameter is unused\n |          and defaults to 0.\n |      limit : int, optional\n |          Maximum number of consecutive NaNs to fill. Must be greater than\n |          0.\n |      inplace : bool, default False\n |          Update the data in place if possible.\n |      limit_direction : {{'forward', 'backward', 'both'}}, Optional\n |          Consecutive NaNs will be filled in this direction.\n |\n |          If limit is specified:\n |              * If 'method' is 'pad' or 'ffill', 'limit_direction' must be 'forward'.\n |              * If 'method' is 'backfill' or 'bfill', 'limit_direction' must be\n |                'backwards'.\n |\n |          If 'limit' is not specified:\n |              * If 'method' is 'backfill' or 'bfill', the default is 'backward'\n |              * else the default is 'forward'\n |\n |          raises ValueError if `limit_direction` is 'forward' or 'both' and\n |              method is 'backfill' or 'bfill'.\n |          raises ValueError if `limit_direction` is 'backward' or 'both' and\n |              method is 'pad' or 'ffill'.\n |\n |      limit_area : {{`None`, 'inside', 'outside'}}, default None\n |          If limit is specified, consecutive NaNs will be filled with this\n |          restriction.\n |\n |          * ``None``: No fill restriction.\n |          * 'inside': Only fill NaNs surrounded by valid values\n |            (interpolate).\n |          * 'outside': Only fill NaNs outside valid values (extrapolate).\n |\n |      downcast : optional, 'infer' or None, defaults to None\n |          Downcast dtypes if possible.\n |\n |          .. deprecated:: 2.1.0\n |\n |      ``**kwargs`` : optional\n |          Keyword arguments to pass on to the interpolating function.\n |\n |      Returns\n |      -------\n |      Series or DataFrame or None\n |          Returns the same object type as the caller, interpolated at\n |          some or all ``NaN`` values or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      fillna : Fill missing values using different methods.\n |      scipy.interpolate.Akima1DInterpolator : Piecewise cubic polynomials\n |          (Akima interpolator).\n |      scipy.interpolate.BPoly.from_derivatives : Piecewise polynomial in the\n |          Bernstein basis.\n |      scipy.interpolate.interp1d : Interpolate a 1-D function.\n |      scipy.interpolate.KroghInterpolator : Interpolate polynomial (Krogh\n |          interpolator).\n |      scipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic\n |          interpolation.\n |      scipy.interpolate.CubicSpline : Cubic spline data interpolator.\n |\n |      Notes\n |      -----\n |      The 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\n |      methods are wrappers around the respective SciPy implementations of\n |      similar names. These use the actual numerical values of the index.\n |      For more information on their behavior, see the\n |      `SciPy documentation\n |      &lt;https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation&gt;`__.\n |\n |      Examples\n |      --------\n |      Filling in ``NaN`` in a :class:`~pandas.Series` via linear\n |      interpolation.\n |\n |      &gt;&gt;&gt; s = pd.Series([0, 1, np.nan, 3])\n |      &gt;&gt;&gt; s\n |      0    0.0\n |      1    1.0\n |      2    NaN\n |      3    3.0\n |      dtype: float64\n |      &gt;&gt;&gt; s.interpolate()\n |      0    0.0\n |      1    1.0\n |      2    2.0\n |      3    3.0\n |      dtype: float64\n |\n |      Filling in ``NaN`` in a Series via polynomial interpolation or splines:\n |      Both 'polynomial' and 'spline' methods require that you also specify\n |      an ``order`` (int).\n |\n |      &gt;&gt;&gt; s = pd.Series([0, 2, np.nan, 8])\n |      &gt;&gt;&gt; s.interpolate(method='polynomial', order=2)\n |      0    0.000000\n |      1    2.000000\n |      2    4.666667\n |      3    8.000000\n |      dtype: float64\n |\n |      Fill the DataFrame forward (that is, going down) along each column\n |      using linear interpolation.\n |\n |      Note how the last entry in column 'a' is interpolated differently,\n |      because there is no entry after it to use for interpolation.\n |      Note how the first entry in column 'b' remains ``NaN``, because there\n |      is no entry before it to use for interpolation.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([(0.0, np.nan, -1.0, 1.0),\n |      ...                    (np.nan, 2.0, np.nan, np.nan),\n |      ...                    (2.0, 3.0, np.nan, 9.0),\n |      ...                    (np.nan, 4.0, -4.0, 16.0)],\n |      ...                   columns=list('abcd'))\n |      &gt;&gt;&gt; df\n |           a    b    c     d\n |      0  0.0  NaN -1.0   1.0\n |      1  NaN  2.0  NaN   NaN\n |      2  2.0  3.0  NaN   9.0\n |      3  NaN  4.0 -4.0  16.0\n |      &gt;&gt;&gt; df.interpolate(method='linear', limit_direction='forward', axis=0)\n |           a    b    c     d\n |      0  0.0  NaN -1.0   1.0\n |      1  1.0  2.0 -2.0   5.0\n |      2  2.0  3.0 -3.0   9.0\n |      3  2.0  4.0 -4.0  16.0\n |\n |      Using polynomial interpolation.\n |\n |      &gt;&gt;&gt; df['d'].interpolate(method='polynomial', order=2)\n |      0     1.0\n |      1     4.0\n |      2     9.0\n |      3    16.0\n |      Name: d, dtype: float64\n |\n |  keys(self) -&gt; 'Index'\n |      Get the 'info axis' (see Indexing for more).\n |\n |      This is index for Series, columns for DataFrame.\n |\n |      Returns\n |      -------\n |      Index\n |          Info axis.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; d = pd.DataFrame(data={'A': [1, 2, 3], 'B': [0, 4, 8]},\n |      ...                  index=['a', 'b', 'c'])\n |      &gt;&gt;&gt; d\n |         A  B\n |      a  1  0\n |      b  2  4\n |      c  3  8\n |      &gt;&gt;&gt; d.keys()\n |      Index(['A', 'B'], dtype='object')\n |\n |  last(self, offset) -&gt; 'Self'\n |      Select final periods of time series data based on a date offset.\n |\n |      .. deprecated:: 2.1\n |          :meth:`.last` is deprecated and will be removed in a future version.\n |          Please create a mask and filter using `.loc` instead.\n |\n |      For a DataFrame with a sorted DatetimeIndex, this function\n |      selects the last few rows based on a date offset.\n |\n |      Parameters\n |      ----------\n |      offset : str, DateOffset, dateutil.relativedelta\n |          The offset length of the data that will be selected. For instance,\n |          '3D' will display all the rows having their index within the last 3 days.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          A subset of the caller.\n |\n |      Raises\n |      ------\n |      TypeError\n |          If the index is not  a :class:`DatetimeIndex`\n |\n |      See Also\n |      --------\n |      first : Select initial periods of time series based on a date offset.\n |      at_time : Select values at a particular time of the day.\n |      between_time : Select values between particular times of the day.\n |\n |      Notes\n |      -----\n |      .. deprecated:: 2.1.0\n |          Please create a mask and filter using `.loc` instead\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; i = pd.date_range('2018-04-09', periods=4, freq='2D')\n |      &gt;&gt;&gt; ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n |      &gt;&gt;&gt; ts\n |                  A\n |      2018-04-09  1\n |      2018-04-11  2\n |      2018-04-13  3\n |      2018-04-15  4\n |\n |      Get the rows for the last 3 days:\n |\n |      &gt;&gt;&gt; ts.last('3D')  # doctest: +SKIP\n |                  A\n |      2018-04-13  3\n |      2018-04-15  4\n |\n |      Notice the data for 3 last calendar days were returned, not the last\n |      3 observed days in the dataset, and therefore data for 2018-04-11 was\n |      not returned.\n |\n |  last_valid_index(self) -&gt; 'Hashable | None'\n |      Return index for last non-NA value or None, if no non-NA value is found.\n |\n |      Returns\n |      -------\n |      type of index\n |\n |      Examples\n |      --------\n |      For Series:\n |\n |      &gt;&gt;&gt; s = pd.Series([None, 3, 4])\n |      &gt;&gt;&gt; s.first_valid_index()\n |      1\n |      &gt;&gt;&gt; s.last_valid_index()\n |      2\n |\n |      &gt;&gt;&gt; s = pd.Series([None, None])\n |      &gt;&gt;&gt; print(s.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(s.last_valid_index())\n |      None\n |\n |      If all elements in Series are NA/null, returns None.\n |\n |      &gt;&gt;&gt; s = pd.Series()\n |      &gt;&gt;&gt; print(s.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(s.last_valid_index())\n |      None\n |\n |      If Series is empty, returns None.\n |\n |      For DataFrame:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})\n |      &gt;&gt;&gt; df\n |           A      B\n |      0  NaN    NaN\n |      1  NaN    3.0\n |      2  2.0    4.0\n |      &gt;&gt;&gt; df.first_valid_index()\n |      1\n |      &gt;&gt;&gt; df.last_valid_index()\n |      2\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})\n |      &gt;&gt;&gt; df\n |           A      B\n |      0  None   None\n |      1  None   None\n |      2  None   None\n |      &gt;&gt;&gt; print(df.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(df.last_valid_index())\n |      None\n |\n |      If all elements in DataFrame are NA/null, returns None.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame()\n |      &gt;&gt;&gt; df\n |      Empty DataFrame\n |      Columns: []\n |      Index: []\n |      &gt;&gt;&gt; print(df.first_valid_index())\n |      None\n |      &gt;&gt;&gt; print(df.last_valid_index())\n |      None\n |\n |      If DataFrame is empty, returns None.\n |\n |  mask(self, cond, other=&lt;no_default&gt;, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -&gt; 'Self | None'\n |      Replace values where the condition is True.\n |\n |      Parameters\n |      ----------\n |      cond : bool Series/DataFrame, array-like, or callable\n |          Where `cond` is False, keep the original value. Where\n |          True, replace with corresponding value from `other`.\n |          If `cond` is callable, it is computed on the Series/DataFrame and\n |          should return boolean Series/DataFrame or array. The callable must\n |          not change input Series/DataFrame (though pandas doesn't check it).\n |      other : scalar, Series/DataFrame, or callable\n |          Entries where `cond` is True are replaced with\n |          corresponding value from `other`.\n |          If other is callable, it is computed on the Series/DataFrame and\n |          should return scalar or Series/DataFrame. The callable must not\n |          change input Series/DataFrame (though pandas doesn't check it).\n |          If not specified, entries will be filled with the corresponding\n |          NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension\n |          dtypes).\n |      inplace : bool, default False\n |          Whether to perform the operation in place on the data.\n |      axis : int, default None\n |          Alignment axis if needed. For `Series` this parameter is\n |          unused and defaults to 0.\n |      level : int, default None\n |          Alignment level if needed.\n |\n |      Returns\n |      -------\n |      Same type as caller or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      :func:`DataFrame.where` : Return an object of same shape as\n |          self.\n |\n |      Notes\n |      -----\n |      The mask method is an application of the if-then idiom. For each\n |      element in the calling DataFrame, if ``cond`` is ``False`` the\n |      element is used; otherwise the corresponding element from the DataFrame\n |      ``other`` is used. If the axis of ``other`` does not align with axis of\n |      ``cond`` Series/DataFrame, the misaligned index positions will be filled with\n |      True.\n |\n |      The signature for :func:`DataFrame.where` differs from\n |      :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n |      ``np.where(m, df1, df2)``.\n |\n |      For further details and examples see the ``mask`` documentation in\n |      :ref:`indexing &lt;indexing.where_mask&gt;`.\n |\n |      The dtype of the object takes precedence. The fill value is casted to\n |      the object's dtype, if this can be done losslessly.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(range(5))\n |      &gt;&gt;&gt; s.where(s &gt; 0)\n |      0    NaN\n |      1    1.0\n |      2    2.0\n |      3    3.0\n |      4    4.0\n |      dtype: float64\n |      &gt;&gt;&gt; s.mask(s &gt; 0)\n |      0    0.0\n |      1    NaN\n |      2    NaN\n |      3    NaN\n |      4    NaN\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s = pd.Series(range(5))\n |      &gt;&gt;&gt; t = pd.Series([True, False])\n |      &gt;&gt;&gt; s.where(t, 99)\n |      0     0\n |      1    99\n |      2    99\n |      3    99\n |      4    99\n |      dtype: int64\n |      &gt;&gt;&gt; s.mask(t, 99)\n |      0    99\n |      1     1\n |      2    99\n |      3    99\n |      4    99\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s.where(s &gt; 1, 10)\n |      0    10\n |      1    10\n |      2    2\n |      3    3\n |      4    4\n |      dtype: int64\n |      &gt;&gt;&gt; s.mask(s &gt; 1, 10)\n |      0     0\n |      1     1\n |      2    10\n |      3    10\n |      4    10\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  0  1\n |      1  2  3\n |      2  4  5\n |      3  6  7\n |      4  8  9\n |      &gt;&gt;&gt; m = df % 3 == 0\n |      &gt;&gt;&gt; df.where(m, -df)\n |         A  B\n |      0  0 -1\n |      1 -2  3\n |      2 -4 -5\n |      3  6 -7\n |      4 -8  9\n |      &gt;&gt;&gt; df.where(m, -df) == np.where(m, df, -df)\n |            A     B\n |      0  True  True\n |      1  True  True\n |      2  True  True\n |      3  True  True\n |      4  True  True\n |      &gt;&gt;&gt; df.where(m, -df) == df.mask(~m, -df)\n |            A     B\n |      0  True  True\n |      1  True  True\n |      2  True  True\n |      3  True  True\n |      4  True  True\n |\n |  pad(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = &lt;no_default&gt;) -&gt; 'Self | None'\n |      Fill NA/NaN values by propagating the last valid observation to next valid.\n |\n |      .. deprecated:: 2.0\n |\n |          Series/DataFrame.pad is deprecated. Use Series/DataFrame.ffill instead.\n |\n |      Returns\n |      -------\n |      Series/DataFrame or None\n |          Object with missing values filled or None if ``inplace=True``.\n |\n |      Examples\n |      --------\n |      Please see examples for :meth:`DataFrame.ffill` or :meth:`Series.ffill`.\n |\n |  pct_change(self, periods: 'int' = 1, fill_method: 'FillnaOptions | None | lib.NoDefault' = &lt;no_default&gt;, limit: 'int | None | lib.NoDefault' = &lt;no_default&gt;, freq=None, **kwargs) -&gt; 'Self'\n |      Fractional change between the current and a prior element.\n |\n |      Computes the fractional change from the immediately previous row by\n |      default. This is useful in comparing the fraction of change in a time\n |      series of elements.\n |\n |      .. note::\n |\n |          Despite the name of this method, it calculates fractional change\n |          (also known as per unit change or relative change) and not\n |          percentage change. If you need the percentage change, multiply\n |          these values by 100.\n |\n |      Parameters\n |      ----------\n |      periods : int, default 1\n |          Periods to shift for forming percent change.\n |      fill_method : {'backfill', 'bfill', 'pad', 'ffill', None}, default 'pad'\n |          How to handle NAs **before** computing percent changes.\n |\n |          .. deprecated:: 2.1\n |              All options of `fill_method` are deprecated except `fill_method=None`.\n |\n |      limit : int, default None\n |          The number of consecutive NAs to fill before stopping.\n |\n |          .. deprecated:: 2.1\n |\n |      freq : DateOffset, timedelta, or str, optional\n |          Increment to use from time series API (e.g. 'ME' or BDay()).\n |      **kwargs\n |          Additional keyword arguments are passed into\n |          `DataFrame.shift` or `Series.shift`.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          The same type as the calling object.\n |\n |      See Also\n |      --------\n |      Series.diff : Compute the difference of two elements in a Series.\n |      DataFrame.diff : Compute the difference of two elements in a DataFrame.\n |      Series.shift : Shift the index by some number of periods.\n |      DataFrame.shift : Shift the index by some number of periods.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      &gt;&gt;&gt; s = pd.Series([90, 91, 85])\n |      &gt;&gt;&gt; s\n |      0    90\n |      1    91\n |      2    85\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s.pct_change()\n |      0         NaN\n |      1    0.011111\n |      2   -0.065934\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s.pct_change(periods=2)\n |      0         NaN\n |      1         NaN\n |      2   -0.055556\n |      dtype: float64\n |\n |      See the percentage change in a Series where filling NAs with last\n |      valid observation forward to next valid.\n |\n |      &gt;&gt;&gt; s = pd.Series([90, 91, None, 85])\n |      &gt;&gt;&gt; s\n |      0    90.0\n |      1    91.0\n |      2     NaN\n |      3    85.0\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s.ffill().pct_change()\n |      0         NaN\n |      1    0.011111\n |      2    0.000000\n |      3   -0.065934\n |      dtype: float64\n |\n |      **DataFrame**\n |\n |      Percentage change in French franc, Deutsche Mark, and Italian lira from\n |      1980-01-01 to 1980-03-01.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     'FR': [4.0405, 4.0963, 4.3149],\n |      ...     'GR': [1.7246, 1.7482, 1.8519],\n |      ...     'IT': [804.74, 810.01, 860.13]},\n |      ...     index=['1980-01-01', '1980-02-01', '1980-03-01'])\n |      &gt;&gt;&gt; df\n |                      FR      GR      IT\n |      1980-01-01  4.0405  1.7246  804.74\n |      1980-02-01  4.0963  1.7482  810.01\n |      1980-03-01  4.3149  1.8519  860.13\n |\n |      &gt;&gt;&gt; df.pct_change()\n |                        FR        GR        IT\n |      1980-01-01       NaN       NaN       NaN\n |      1980-02-01  0.013810  0.013684  0.006549\n |      1980-03-01  0.053365  0.059318  0.061876\n |\n |      Percentage of change in GOOG and APPL stock volume. Shows computing\n |      the percentage change between columns.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     '2016': [1769950, 30586265],\n |      ...     '2015': [1500923, 40912316],\n |      ...     '2014': [1371819, 41403351]},\n |      ...     index=['GOOG', 'APPL'])\n |      &gt;&gt;&gt; df\n |                2016      2015      2014\n |      GOOG   1769950   1500923   1371819\n |      APPL  30586265  40912316  41403351\n |\n |      &gt;&gt;&gt; df.pct_change(axis='columns', periods=-1)\n |                2016      2015  2014\n |      GOOG  0.179241  0.094112   NaN\n |      APPL -0.252395 -0.011860   NaN\n |\n |  pipe(self, func: 'Callable[..., T] | tuple[Callable[..., T], str]', *args, **kwargs) -&gt; 'T'\n |      Apply chainable functions that expect Series or DataFrames.\n |\n |      Parameters\n |      ----------\n |      func : function\n |          Function to apply to the Series/DataFrame.\n |          ``args``, and ``kwargs`` are passed into ``func``.\n |          Alternatively a ``(callable, data_keyword)`` tuple where\n |          ``data_keyword`` is a string indicating the keyword of\n |          ``callable`` that expects the Series/DataFrame.\n |      *args : iterable, optional\n |          Positional arguments passed into ``func``.\n |      **kwargs : mapping, optional\n |          A dictionary of keyword arguments passed into ``func``.\n |\n |      Returns\n |      -------\n |      the return type of ``func``.\n |\n |      See Also\n |      --------\n |      DataFrame.apply : Apply a function along input axis of DataFrame.\n |      DataFrame.map : Apply a function elementwise on a whole DataFrame.\n |      Series.map : Apply a mapping correspondence on a\n |          :class:`~pandas.Series`.\n |\n |      Notes\n |      -----\n |      Use ``.pipe`` when chaining together functions that expect\n |      Series, DataFrames or GroupBy objects.\n |\n |      Examples\n |      --------\n |      Constructing a income DataFrame from a dictionary.\n |\n |      &gt;&gt;&gt; data = [[8000, 1000], [9500, np.nan], [5000, 2000]]\n |      &gt;&gt;&gt; df = pd.DataFrame(data, columns=['Salary', 'Others'])\n |      &gt;&gt;&gt; df\n |         Salary  Others\n |      0    8000  1000.0\n |      1    9500     NaN\n |      2    5000  2000.0\n |\n |      Functions that perform tax reductions on an income DataFrame.\n |\n |      &gt;&gt;&gt; def subtract_federal_tax(df):\n |      ...     return df * 0.9\n |      &gt;&gt;&gt; def subtract_state_tax(df, rate):\n |      ...     return df * (1 - rate)\n |      &gt;&gt;&gt; def subtract_national_insurance(df, rate, rate_increase):\n |      ...     new_rate = rate + rate_increase\n |      ...     return df * (1 - new_rate)\n |\n |      Instead of writing\n |\n |      &gt;&gt;&gt; subtract_national_insurance(\n |      ...     subtract_state_tax(subtract_federal_tax(df), rate=0.12),\n |      ...     rate=0.05,\n |      ...     rate_increase=0.02)  # doctest: +SKIP\n |\n |      You can write\n |\n |      &gt;&gt;&gt; (\n |      ...     df.pipe(subtract_federal_tax)\n |      ...     .pipe(subtract_state_tax, rate=0.12)\n |      ...     .pipe(subtract_national_insurance, rate=0.05, rate_increase=0.02)\n |      ... )\n |          Salary   Others\n |      0  5892.48   736.56\n |      1  6997.32      NaN\n |      2  3682.80  1473.12\n |\n |      If you have a function that takes the data as (say) the second\n |      argument, pass a tuple indicating which keyword expects the\n |      data. For example, suppose ``national_insurance`` takes its data as ``df``\n |      in the second argument:\n |\n |      &gt;&gt;&gt; def subtract_national_insurance(rate, df, rate_increase):\n |      ...     new_rate = rate + rate_increase\n |      ...     return df * (1 - new_rate)\n |      &gt;&gt;&gt; (\n |      ...     df.pipe(subtract_federal_tax)\n |      ...     .pipe(subtract_state_tax, rate=0.12)\n |      ...     .pipe(\n |      ...         (subtract_national_insurance, 'df'),\n |      ...         rate=0.05,\n |      ...         rate_increase=0.02\n |      ...     )\n |      ... )\n |          Salary   Others\n |      0  5892.48   736.56\n |      1  6997.32      NaN\n |      2  3682.80  1473.12\n |\n |  rank(self, axis: 'Axis' = 0, method: \"Literal['average', 'min', 'max', 'first', 'dense']\" = 'average', numeric_only: 'bool_t' = False, na_option: \"Literal['keep', 'top', 'bottom']\" = 'keep', ascending: 'bool_t' = True, pct: 'bool_t' = False) -&gt; 'Self'\n |      Compute numerical data ranks (1 through n) along axis.\n |\n |      By default, equal values are assigned a rank that is the average of the\n |      ranks of those values.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Index to direct ranking.\n |          For `Series` this parameter is unused and defaults to 0.\n |      method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n |          How to rank the group of records that have the same value (i.e. ties):\n |\n |          * average: average rank of the group\n |          * min: lowest rank in the group\n |          * max: highest rank in the group\n |          * first: ranks assigned in order they appear in the array\n |          * dense: like 'min', but rank always increases by 1 between groups.\n |\n |      numeric_only : bool, default False\n |          For DataFrame objects, rank only numeric columns if set to True.\n |\n |          .. versionchanged:: 2.0.0\n |              The default value of ``numeric_only`` is now ``False``.\n |\n |      na_option : {'keep', 'top', 'bottom'}, default 'keep'\n |          How to rank NaN values:\n |\n |          * keep: assign NaN rank to NaN values\n |          * top: assign lowest rank to NaN values\n |          * bottom: assign highest rank to NaN values\n |\n |      ascending : bool, default True\n |          Whether or not the elements should be ranked in ascending order.\n |      pct : bool, default False\n |          Whether or not to display the returned rankings in percentile\n |          form.\n |\n |      Returns\n |      -------\n |      same type as caller\n |          Return a Series or DataFrame with data ranks as values.\n |\n |      See Also\n |      --------\n |      core.groupby.DataFrameGroupBy.rank : Rank of values within each group.\n |      core.groupby.SeriesGroupBy.rank : Rank of values within each group.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',\n |      ...                                    'spider', 'snake'],\n |      ...                         'Number_legs': [4, 2, 4, 8, np.nan]})\n |      &gt;&gt;&gt; df\n |          Animal  Number_legs\n |      0      cat          4.0\n |      1  penguin          2.0\n |      2      dog          4.0\n |      3   spider          8.0\n |      4    snake          NaN\n |\n |      Ties are assigned the mean of the ranks (by default) for the group.\n |\n |      &gt;&gt;&gt; s = pd.Series(range(5), index=list(\"abcde\"))\n |      &gt;&gt;&gt; s[\"d\"] = s[\"b\"]\n |      &gt;&gt;&gt; s.rank()\n |      a    1.0\n |      b    2.5\n |      c    4.0\n |      d    2.5\n |      e    5.0\n |      dtype: float64\n |\n |      The following example shows how the method behaves with the above\n |      parameters:\n |\n |      * default_rank: this is the default behaviour obtained without using\n |        any parameter.\n |      * max_rank: setting ``method = 'max'`` the records that have the\n |        same values are ranked using the highest rank (e.g.: since 'cat'\n |        and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)\n |      * NA_bottom: choosing ``na_option = 'bottom'``, if there are records\n |        with NaN values they are placed at the bottom of the ranking.\n |      * pct_rank: when setting ``pct = True``, the ranking is expressed as\n |        percentile rank.\n |\n |      &gt;&gt;&gt; df['default_rank'] = df['Number_legs'].rank()\n |      &gt;&gt;&gt; df['max_rank'] = df['Number_legs'].rank(method='max')\n |      &gt;&gt;&gt; df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\n |      &gt;&gt;&gt; df['pct_rank'] = df['Number_legs'].rank(pct=True)\n |      &gt;&gt;&gt; df\n |          Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank\n |      0      cat          4.0           2.5       3.0        2.5     0.625\n |      1  penguin          2.0           1.0       1.0        1.0     0.250\n |      2      dog          4.0           2.5       3.0        2.5     0.625\n |      3   spider          8.0           4.0       4.0        4.0     1.000\n |      4    snake          NaN           NaN       NaN        5.0       NaN\n |\n |  reindex_like(self, other, method: \"Literal['backfill', 'bfill', 'pad', 'ffill', 'nearest'] | None\" = None, copy: 'bool_t | None' = None, limit: 'int | None' = None, tolerance=None) -&gt; 'Self'\n |      Return an object with matching indices as other object.\n |\n |      Conform the object to the same index on all axes. Optional\n |      filling logic, placing NaN in locations having no value\n |      in the previous index. A new object is produced unless the\n |      new index is equivalent to the current one and copy=False.\n |\n |      Parameters\n |      ----------\n |      other : Object of the same data type\n |          Its row and column indices are used to define the new indices\n |          of this object.\n |      method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n |          Method to use for filling holes in reindexed DataFrame.\n |          Please note: this is only applicable to DataFrames/Series with a\n |          monotonically increasing/decreasing index.\n |\n |          * None (default): don't fill gaps\n |          * pad / ffill: propagate last valid observation forward to next\n |            valid\n |          * backfill / bfill: use next valid observation to fill gap\n |          * nearest: use nearest valid observations to fill gap.\n |\n |      copy : bool, default True\n |          Return a new object, even if the passed indexes are the same.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      limit : int, default None\n |          Maximum number of consecutive labels to fill for inexact matches.\n |      tolerance : optional\n |          Maximum distance between original and new labels for inexact\n |          matches. The values of the index at the matching locations must\n |          satisfy the equation ``abs(index[indexer] - target) &lt;= tolerance``.\n |\n |          Tolerance may be a scalar value, which applies the same tolerance\n |          to all values, or list-like, which applies variable tolerance per\n |          element. List-like includes list, tuple, array, Series, and must be\n |          the same size as the index and its dtype must exactly match the\n |          index's type.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Same type as caller, but with changed indices on each axis.\n |\n |      See Also\n |      --------\n |      DataFrame.set_index : Set row labels.\n |      DataFrame.reset_index : Remove row labels or move them to new columns.\n |      DataFrame.reindex : Change to new indices or expand indices.\n |\n |      Notes\n |      -----\n |      Same as calling\n |      ``.reindex(index=other.index, columns=other.columns,...)``.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n |      ...                     [31, 87.8, 'high'],\n |      ...                     [22, 71.6, 'medium'],\n |      ...                     [35, 95, 'medium']],\n |      ...                    columns=['temp_celsius', 'temp_fahrenheit',\n |      ...                             'windspeed'],\n |      ...                    index=pd.date_range(start='2014-02-12',\n |      ...                                        end='2014-02-15', freq='D'))\n |\n |      &gt;&gt;&gt; df1\n |                  temp_celsius  temp_fahrenheit windspeed\n |      2014-02-12          24.3             75.7      high\n |      2014-02-13          31.0             87.8      high\n |      2014-02-14          22.0             71.6    medium\n |      2014-02-15          35.0             95.0    medium\n |\n |      &gt;&gt;&gt; df2 = pd.DataFrame([[28, 'low'],\n |      ...                     [30, 'low'],\n |      ...                     [35.1, 'medium']],\n |      ...                    columns=['temp_celsius', 'windspeed'],\n |      ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n |      ...                                            '2014-02-15']))\n |\n |      &gt;&gt;&gt; df2\n |                  temp_celsius windspeed\n |      2014-02-12          28.0       low\n |      2014-02-13          30.0       low\n |      2014-02-15          35.1    medium\n |\n |      &gt;&gt;&gt; df2.reindex_like(df1)\n |                  temp_celsius  temp_fahrenheit windspeed\n |      2014-02-12          28.0              NaN       low\n |      2014-02-13          30.0              NaN       low\n |      2014-02-14           NaN              NaN       NaN\n |      2014-02-15          35.1              NaN    medium\n |\n |  rename_axis(self, mapper: 'IndexLabel | lib.NoDefault' = &lt;no_default&gt;, *, index=&lt;no_default&gt;, columns=&lt;no_default&gt;, axis: 'Axis' = 0, copy: 'bool_t | None' = None, inplace: 'bool_t' = False) -&gt; 'Self | None'\n |      Set the name of the axis for the index or columns.\n |\n |      Parameters\n |      ----------\n |      mapper : scalar, list-like, optional\n |          Value to set the axis name attribute.\n |      index, columns : scalar, list-like, dict-like or function, optional\n |          A scalar, list-like, dict-like or functions transformations to\n |          apply to that axis' values.\n |          Note that the ``columns`` parameter is not allowed if the\n |          object is a Series. This parameter only apply for DataFrame\n |          type objects.\n |\n |          Use either ``mapper`` and ``axis`` to\n |          specify the axis to target with ``mapper``, or ``index``\n |          and/or ``columns``.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis to rename. For `Series` this parameter is unused and defaults to 0.\n |      copy : bool, default None\n |          Also copy underlying data.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      inplace : bool, default False\n |          Modifies the object directly, instead of creating a new Series\n |          or DataFrame.\n |\n |      Returns\n |      -------\n |      Series, DataFrame, or None\n |          The same type as the caller or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      Series.rename : Alter Series index labels or name.\n |      DataFrame.rename : Alter DataFrame index labels or name.\n |      Index.rename : Set new names on index.\n |\n |      Notes\n |      -----\n |      ``DataFrame.rename_axis`` supports two calling conventions\n |\n |      * ``(index=index_mapper, columns=columns_mapper, ...)``\n |      * ``(mapper, axis={'index', 'columns'}, ...)``\n |\n |      The first calling convention will only modify the names of\n |      the index and/or the names of the Index object that is the columns.\n |      In this case, the parameter ``copy`` is ignored.\n |\n |      The second calling convention will modify the names of the\n |      corresponding index if mapper is a list or a scalar.\n |      However, if mapper is dict-like or a function, it will use the\n |      deprecated behavior of modifying the axis *labels*.\n |\n |      We *highly* recommend using keyword arguments to clarify your\n |      intent.\n |\n |      Examples\n |      --------\n |      **Series**\n |\n |      &gt;&gt;&gt; s = pd.Series([\"dog\", \"cat\", \"monkey\"])\n |      &gt;&gt;&gt; s\n |      0       dog\n |      1       cat\n |      2    monkey\n |      dtype: object\n |      &gt;&gt;&gt; s.rename_axis(\"animal\")\n |      animal\n |      0    dog\n |      1    cat\n |      2    monkey\n |      dtype: object\n |\n |      **DataFrame**\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"num_legs\": [4, 4, 2],\n |      ...                    \"num_arms\": [0, 0, 2]},\n |      ...                   [\"dog\", \"cat\", \"monkey\"])\n |      &gt;&gt;&gt; df\n |              num_legs  num_arms\n |      dog            4         0\n |      cat            4         0\n |      monkey         2         2\n |      &gt;&gt;&gt; df = df.rename_axis(\"animal\")\n |      &gt;&gt;&gt; df\n |              num_legs  num_arms\n |      animal\n |      dog            4         0\n |      cat            4         0\n |      monkey         2         2\n |      &gt;&gt;&gt; df = df.rename_axis(\"limbs\", axis=\"columns\")\n |      &gt;&gt;&gt; df\n |      limbs   num_legs  num_arms\n |      animal\n |      dog            4         0\n |      cat            4         0\n |      monkey         2         2\n |\n |      **MultiIndex**\n |\n |      &gt;&gt;&gt; df.index = pd.MultiIndex.from_product([['mammal'],\n |      ...                                        ['dog', 'cat', 'monkey']],\n |      ...                                       names=['type', 'name'])\n |      &gt;&gt;&gt; df\n |      limbs          num_legs  num_arms\n |      type   name\n |      mammal dog            4         0\n |             cat            4         0\n |             monkey         2         2\n |\n |      &gt;&gt;&gt; df.rename_axis(index={'type': 'class'})\n |      limbs          num_legs  num_arms\n |      class  name\n |      mammal dog            4         0\n |             cat            4         0\n |             monkey         2         2\n |\n |      &gt;&gt;&gt; df.rename_axis(columns=str.upper)\n |      LIMBS          num_legs  num_arms\n |      type   name\n |      mammal dog            4         0\n |             cat            4         0\n |             monkey         2         2\n |\n |  replace(self, to_replace=None, value=&lt;no_default&gt;, *, inplace: 'bool_t' = False, limit: 'int | None' = None, regex: 'bool_t' = False, method: \"Literal['pad', 'ffill', 'bfill'] | lib.NoDefault\" = &lt;no_default&gt;) -&gt; 'Self | None'\n |      Replace values given in `to_replace` with `value`.\n |\n |      Values of the Series/DataFrame are replaced with other values dynamically.\n |      This differs from updating with ``.loc`` or ``.iloc``, which require\n |      you to specify a location to update with some value.\n |\n |      Parameters\n |      ----------\n |      to_replace : str, regex, list, dict, Series, int, float, or None\n |          How to find the values that will be replaced.\n |\n |          * numeric, str or regex:\n |\n |              - numeric: numeric values equal to `to_replace` will be\n |                replaced with `value`\n |              - str: string exactly matching `to_replace` will be replaced\n |                with `value`\n |              - regex: regexs matching `to_replace` will be replaced with\n |                `value`\n |\n |          * list of str, regex, or numeric:\n |\n |              - First, if `to_replace` and `value` are both lists, they\n |                **must** be the same length.\n |              - Second, if ``regex=True`` then all of the strings in **both**\n |                lists will be interpreted as regexs otherwise they will match\n |                directly. This doesn't matter much for `value` since there\n |                are only a few possible substitution regexes you can use.\n |              - str, regex and numeric rules apply as above.\n |\n |          * dict:\n |\n |              - Dicts can be used to specify different replacement values\n |                for different existing values. For example,\n |                ``{'a': 'b', 'y': 'z'}`` replaces the value 'a' with 'b' and\n |                'y' with 'z'. To use a dict in this way, the optional `value`\n |                parameter should not be given.\n |              - For a DataFrame a dict can specify that different values\n |                should be replaced in different columns. For example,\n |                ``{'a': 1, 'b': 'z'}`` looks for the value 1 in column 'a'\n |                and the value 'z' in column 'b' and replaces these values\n |                with whatever is specified in `value`. The `value` parameter\n |                should not be ``None`` in this case. You can treat this as a\n |                special case of passing two lists except that you are\n |                specifying the column to search in.\n |              - For a DataFrame nested dictionaries, e.g.,\n |                ``{'a': {'b': np.nan}}``, are read as follows: look in column\n |                'a' for the value 'b' and replace it with NaN. The optional `value`\n |                parameter should not be specified to use a nested dict in this\n |                way. You can nest regular expressions as well. Note that\n |                column names (the top-level dictionary keys in a nested\n |                dictionary) **cannot** be regular expressions.\n |\n |          * None:\n |\n |              - This means that the `regex` argument must be a string,\n |                compiled regular expression, or list, dict, ndarray or\n |                Series of such elements. If `value` is also ``None`` then\n |                this **must** be a nested dictionary or Series.\n |\n |          See the examples section for examples of each of these.\n |      value : scalar, dict, list, str, regex, default None\n |          Value to replace any values matching `to_replace` with.\n |          For a DataFrame a dict of values can be used to specify which\n |          value to use for each column (columns not in the dict will not be\n |          filled). Regular expressions, strings and lists or dicts of such\n |          objects are also allowed.\n |\n |      inplace : bool, default False\n |          If True, performs operation inplace and returns None.\n |      limit : int, default None\n |          Maximum size gap to forward or backward fill.\n |\n |          .. deprecated:: 2.1.0\n |      regex : bool or same types as `to_replace`, default False\n |          Whether to interpret `to_replace` and/or `value` as regular\n |          expressions. Alternatively, this could be a regular expression or a\n |          list, dict, or array of regular expressions in which case\n |          `to_replace` must be ``None``.\n |      method : {'pad', 'ffill', 'bfill'}\n |          The method to use when for replacement, when `to_replace` is a\n |          scalar, list or tuple and `value` is ``None``.\n |\n |          .. deprecated:: 2.1.0\n |\n |      Returns\n |      -------\n |      Series/DataFrame\n |          Object after replacement.\n |\n |      Raises\n |      ------\n |      AssertionError\n |          * If `regex` is not a ``bool`` and `to_replace` is not\n |            ``None``.\n |\n |      TypeError\n |          * If `to_replace` is not a scalar, array-like, ``dict``, or ``None``\n |          * If `to_replace` is a ``dict`` and `value` is not a ``list``,\n |            ``dict``, ``ndarray``, or ``Series``\n |          * If `to_replace` is ``None`` and `regex` is not compilable\n |            into a regular expression or is a list, dict, ndarray, or\n |            Series.\n |          * When replacing multiple ``bool`` or ``datetime64`` objects and\n |            the arguments to `to_replace` does not match the type of the\n |            value being replaced\n |\n |      ValueError\n |          * If a ``list`` or an ``ndarray`` is passed to `to_replace` and\n |            `value` but they are not the same length.\n |\n |      See Also\n |      --------\n |      Series.fillna : Fill NA values.\n |      DataFrame.fillna : Fill NA values.\n |      Series.where : Replace values based on boolean condition.\n |      DataFrame.where : Replace values based on boolean condition.\n |      DataFrame.map: Apply a function to a Dataframe elementwise.\n |      Series.map: Map values of Series according to an input mapping or function.\n |      Series.str.replace : Simple string replacement.\n |\n |      Notes\n |      -----\n |      * Regex substitution is performed under the hood with ``re.sub``. The\n |        rules for substitution for ``re.sub`` are the same.\n |      * Regular expressions will only substitute on strings, meaning you\n |        cannot provide, for example, a regular expression matching floating\n |        point numbers and expect the columns in your frame that have a\n |        numeric dtype to be matched. However, if those floating point\n |        numbers *are* strings, then you can do this.\n |      * This method has *a lot* of options. You are encouraged to experiment\n |        and play with this method to gain intuition about how it works.\n |      * When dict is used as the `to_replace` value, it is like\n |        key(s) in the dict are the to_replace part and\n |        value(s) in the dict are the value parameter.\n |\n |      Examples\n |      --------\n |\n |      **Scalar `to_replace` and `value`**\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4, 5])\n |      &gt;&gt;&gt; s.replace(1, 5)\n |      0    5\n |      1    2\n |      2    3\n |      3    4\n |      4    5\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n |      ...                    'B': [5, 6, 7, 8, 9],\n |      ...                    'C': ['a', 'b', 'c', 'd', 'e']})\n |      &gt;&gt;&gt; df.replace(0, 5)\n |          A  B  C\n |      0  5  5  a\n |      1  1  6  b\n |      2  2  7  c\n |      3  3  8  d\n |      4  4  9  e\n |\n |      **List-like `to_replace`**\n |\n |      &gt;&gt;&gt; df.replace([0, 1, 2, 3], 4)\n |          A  B  C\n |      0  4  5  a\n |      1  4  6  b\n |      2  4  7  c\n |      3  4  8  d\n |      4  4  9  e\n |\n |      &gt;&gt;&gt; df.replace([0, 1, 2, 3], [4, 3, 2, 1])\n |          A  B  C\n |      0  4  5  a\n |      1  3  6  b\n |      2  2  7  c\n |      3  1  8  d\n |      4  4  9  e\n |\n |      &gt;&gt;&gt; s.replace([1, 2], method='bfill')\n |      0    3\n |      1    3\n |      2    3\n |      3    4\n |      4    5\n |      dtype: int64\n |\n |      **dict-like `to_replace`**\n |\n |      &gt;&gt;&gt; df.replace({0: 10, 1: 100})\n |              A  B  C\n |      0   10  5  a\n |      1  100  6  b\n |      2    2  7  c\n |      3    3  8  d\n |      4    4  9  e\n |\n |      &gt;&gt;&gt; df.replace({'A': 0, 'B': 5}, 100)\n |              A    B  C\n |      0  100  100  a\n |      1    1    6  b\n |      2    2    7  c\n |      3    3    8  d\n |      4    4    9  e\n |\n |      &gt;&gt;&gt; df.replace({'A': {0: 100, 4: 400}})\n |              A  B  C\n |      0  100  5  a\n |      1    1  6  b\n |      2    2  7  c\n |      3    3  8  d\n |      4  400  9  e\n |\n |      **Regular expression `to_replace`**\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],\n |      ...                    'B': ['abc', 'bar', 'xyz']})\n |      &gt;&gt;&gt; df.replace(to_replace=r'^ba.$', value='new', regex=True)\n |              A    B\n |      0   new  abc\n |      1   foo  new\n |      2  bait  xyz\n |\n |      &gt;&gt;&gt; df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)\n |              A    B\n |      0   new  abc\n |      1   foo  bar\n |      2  bait  xyz\n |\n |      &gt;&gt;&gt; df.replace(regex=r'^ba.$', value='new')\n |              A    B\n |      0   new  abc\n |      1   foo  new\n |      2  bait  xyz\n |\n |      &gt;&gt;&gt; df.replace(regex={r'^ba.$': 'new', 'foo': 'xyz'})\n |              A    B\n |      0   new  abc\n |      1   xyz  new\n |      2  bait  xyz\n |\n |      &gt;&gt;&gt; df.replace(regex=[r'^ba.$', 'foo'], value='new')\n |              A    B\n |      0   new  abc\n |      1   new  new\n |      2  bait  xyz\n |\n |      Compare the behavior of ``s.replace({'a': None})`` and\n |      ``s.replace('a', None)`` to understand the peculiarities\n |      of the `to_replace` parameter:\n |\n |      &gt;&gt;&gt; s = pd.Series([10, 'a', 'a', 'b', 'a'])\n |\n |      When one uses a dict as the `to_replace` value, it is like the\n |      value(s) in the dict are equal to the `value` parameter.\n |      ``s.replace({'a': None})`` is equivalent to\n |      ``s.replace(to_replace={'a': None}, value=None, method=None)``:\n |\n |      &gt;&gt;&gt; s.replace({'a': None})\n |      0      10\n |      1    None\n |      2    None\n |      3       b\n |      4    None\n |      dtype: object\n |\n |      When ``value`` is not explicitly passed and `to_replace` is a scalar, list\n |      or tuple, `replace` uses the method parameter (default 'pad') to do the\n |      replacement. So this is why the 'a' values are being replaced by 10\n |      in rows 1 and 2 and 'b' in row 4 in this case.\n |\n |      &gt;&gt;&gt; s.replace('a')\n |      0    10\n |      1    10\n |      2    10\n |      3     b\n |      4     b\n |      dtype: object\n |\n |          .. deprecated:: 2.1.0\n |              The 'method' parameter and padding behavior are deprecated.\n |\n |      On the other hand, if ``None`` is explicitly passed for ``value``, it will\n |      be respected:\n |\n |      &gt;&gt;&gt; s.replace('a', None)\n |      0      10\n |      1    None\n |      2    None\n |      3       b\n |      4    None\n |      dtype: object\n |\n |          .. versionchanged:: 1.4.0\n |              Previously the explicit ``None`` was silently ignored.\n |\n |      When ``regex=True``, ``value`` is not ``None`` and `to_replace` is a string,\n |      the replacement will be applied in all columns of the DataFrame.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n |      ...                    'B': ['a', 'b', 'c', 'd', 'e'],\n |      ...                    'C': ['f', 'g', 'h', 'i', 'j']})\n |\n |      &gt;&gt;&gt; df.replace(to_replace='^[a-g]', value='e', regex=True)\n |          A  B  C\n |      0  0  e  e\n |      1  1  e  e\n |      2  2  e  h\n |      3  3  e  i\n |      4  4  e  j\n |\n |      If ``value`` is not ``None`` and `to_replace` is a dictionary, the dictionary\n |      keys will be the DataFrame columns that the replacement will be applied.\n |\n |      &gt;&gt;&gt; df.replace(to_replace={'B': '^[a-c]', 'C': '^[h-j]'}, value='e', regex=True)\n |          A  B  C\n |      0  0  e  f\n |      1  1  e  g\n |      2  2  e  e\n |      3  3  d  e\n |      4  4  e  e\n |\n |  resample(self, rule, axis: 'Axis | lib.NoDefault' = &lt;no_default&gt;, closed: \"Literal['right', 'left'] | None\" = None, label: \"Literal['right', 'left'] | None\" = None, convention: \"Literal['start', 'end', 's', 'e'] | lib.NoDefault\" = &lt;no_default&gt;, kind: \"Literal['timestamp', 'period'] | None | lib.NoDefault\" = &lt;no_default&gt;, on: 'Level | None' = None, level: 'Level | None' = None, origin: 'str | TimestampConvertibleTypes' = 'start_day', offset: 'TimedeltaConvertibleTypes | None' = None, group_keys: 'bool_t' = False) -&gt; 'Resampler'\n |      Resample time-series data.\n |\n |      Convenience method for frequency conversion and resampling of time series.\n |      The object must have a datetime-like index (`DatetimeIndex`, `PeriodIndex`,\n |      or `TimedeltaIndex`), or the caller must pass the label of a datetime-like\n |      series/index to the ``on``/``level`` keyword parameter.\n |\n |      Parameters\n |      ----------\n |      rule : DateOffset, Timedelta or str\n |          The offset string or object representing target conversion.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Which axis to use for up- or down-sampling. For `Series` this parameter\n |          is unused and defaults to 0. Must be\n |          `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.\n |\n |          .. deprecated:: 2.0.0\n |              Use frame.T.resample(...) instead.\n |      closed : {'right', 'left'}, default None\n |          Which side of bin interval is closed. The default is 'left'\n |          for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',\n |          'BA', 'BQE', and 'W' which all have a default of 'right'.\n |      label : {'right', 'left'}, default None\n |          Which bin edge label to label bucket with. The default is 'left'\n |          for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',\n |          'BA', 'BQE', and 'W' which all have a default of 'right'.\n |      convention : {'start', 'end', 's', 'e'}, default 'start'\n |          For `PeriodIndex` only, controls whether to use the start or\n |          end of `rule`.\n |\n |          .. deprecated:: 2.2.0\n |              Convert PeriodIndex to DatetimeIndex before resampling instead.\n |      kind : {'timestamp', 'period'}, optional, default None\n |          Pass 'timestamp' to convert the resulting index to a\n |          `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.\n |          By default the input representation is retained.\n |\n |          .. deprecated:: 2.2.0\n |              Convert index to desired type explicitly instead.\n |\n |      on : str, optional\n |          For a DataFrame, column to use instead of index for resampling.\n |          Column must be datetime-like.\n |      level : str or int, optional\n |          For a MultiIndex, level (name or number) to use for\n |          resampling. `level` must be datetime-like.\n |      origin : Timestamp or str, default 'start_day'\n |          The timestamp on which to adjust the grouping. The timezone of origin\n |          must match the timezone of the index.\n |          If string, must be one of the following:\n |\n |          - 'epoch': `origin` is 1970-01-01\n |          - 'start': `origin` is the first value of the timeseries\n |          - 'start_day': `origin` is the first day at midnight of the timeseries\n |\n |          - 'end': `origin` is the last value of the timeseries\n |          - 'end_day': `origin` is the ceiling midnight of the last day\n |\n |          .. versionadded:: 1.3.0\n |\n |          .. note::\n |\n |              Only takes effect for Tick-frequencies (i.e. fixed frequencies like\n |              days, hours, and minutes, rather than months or quarters).\n |      offset : Timedelta or str, default is None\n |          An offset timedelta added to the origin.\n |\n |      group_keys : bool, default False\n |          Whether to include the group keys in the result index when using\n |          ``.apply()`` on the resampled object.\n |\n |          .. versionadded:: 1.5.0\n |\n |              Not specifying ``group_keys`` will retain values-dependent behavior\n |              from pandas 1.4 and earlier (see :ref:`pandas 1.5.0 Release notes\n |              &lt;whatsnew_150.enhancements.resample_group_keys&gt;` for examples).\n |\n |          .. versionchanged:: 2.0.0\n |\n |              ``group_keys`` now defaults to ``False``.\n |\n |      Returns\n |      -------\n |      pandas.api.typing.Resampler\n |          :class:`~pandas.core.Resampler` object.\n |\n |      See Also\n |      --------\n |      Series.resample : Resample a Series.\n |      DataFrame.resample : Resample a DataFrame.\n |      groupby : Group Series/DataFrame by mapping, function, label, or list of labels.\n |      asfreq : Reindex a Series/DataFrame with the given frequency without grouping.\n |\n |      Notes\n |      -----\n |      See the `user guide\n |      &lt;https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling&gt;`__\n |      for more.\n |\n |      To learn more about the offset strings, please see `this link\n |      &lt;https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects&gt;`__.\n |\n |      Examples\n |      --------\n |      Start by creating a series with 9 one minute timestamps.\n |\n |      &gt;&gt;&gt; index = pd.date_range('1/1/2000', periods=9, freq='min')\n |      &gt;&gt;&gt; series = pd.Series(range(9), index=index)\n |      &gt;&gt;&gt; series\n |      2000-01-01 00:00:00    0\n |      2000-01-01 00:01:00    1\n |      2000-01-01 00:02:00    2\n |      2000-01-01 00:03:00    3\n |      2000-01-01 00:04:00    4\n |      2000-01-01 00:05:00    5\n |      2000-01-01 00:06:00    6\n |      2000-01-01 00:07:00    7\n |      2000-01-01 00:08:00    8\n |      Freq: min, dtype: int64\n |\n |      Downsample the series into 3 minute bins and sum the values\n |      of the timestamps falling into a bin.\n |\n |      &gt;&gt;&gt; series.resample('3min').sum()\n |      2000-01-01 00:00:00     3\n |      2000-01-01 00:03:00    12\n |      2000-01-01 00:06:00    21\n |      Freq: 3min, dtype: int64\n |\n |      Downsample the series into 3 minute bins as above, but label each\n |      bin using the right edge instead of the left. Please note that the\n |      value in the bucket used as the label is not included in the bucket,\n |      which it labels. For example, in the original series the\n |      bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\n |      value in the resampled bucket with the label ``2000-01-01 00:03:00``\n |      does not include 3 (if it did, the summed value would be 6, not 3).\n |\n |      &gt;&gt;&gt; series.resample('3min', label='right').sum()\n |      2000-01-01 00:03:00     3\n |      2000-01-01 00:06:00    12\n |      2000-01-01 00:09:00    21\n |      Freq: 3min, dtype: int64\n |\n |      To include this value close the right side of the bin interval,\n |      as shown below.\n |\n |      &gt;&gt;&gt; series.resample('3min', label='right', closed='right').sum()\n |      2000-01-01 00:00:00     0\n |      2000-01-01 00:03:00     6\n |      2000-01-01 00:06:00    15\n |      2000-01-01 00:09:00    15\n |      Freq: 3min, dtype: int64\n |\n |      Upsample the series into 30 second bins.\n |\n |      &gt;&gt;&gt; series.resample('30s').asfreq()[0:5]   # Select first 5 rows\n |      2000-01-01 00:00:00   0.0\n |      2000-01-01 00:00:30   NaN\n |      2000-01-01 00:01:00   1.0\n |      2000-01-01 00:01:30   NaN\n |      2000-01-01 00:02:00   2.0\n |      Freq: 30s, dtype: float64\n |\n |      Upsample the series into 30 second bins and fill the ``NaN``\n |      values using the ``ffill`` method.\n |\n |      &gt;&gt;&gt; series.resample('30s').ffill()[0:5]\n |      2000-01-01 00:00:00    0\n |      2000-01-01 00:00:30    0\n |      2000-01-01 00:01:00    1\n |      2000-01-01 00:01:30    1\n |      2000-01-01 00:02:00    2\n |      Freq: 30s, dtype: int64\n |\n |      Upsample the series into 30 second bins and fill the\n |      ``NaN`` values using the ``bfill`` method.\n |\n |      &gt;&gt;&gt; series.resample('30s').bfill()[0:5]\n |      2000-01-01 00:00:00    0\n |      2000-01-01 00:00:30    1\n |      2000-01-01 00:01:00    1\n |      2000-01-01 00:01:30    2\n |      2000-01-01 00:02:00    2\n |      Freq: 30s, dtype: int64\n |\n |      Pass a custom function via ``apply``\n |\n |      &gt;&gt;&gt; def custom_resampler(arraylike):\n |      ...     return np.sum(arraylike) + 5\n |      ...\n |      &gt;&gt;&gt; series.resample('3min').apply(custom_resampler)\n |      2000-01-01 00:00:00     8\n |      2000-01-01 00:03:00    17\n |      2000-01-01 00:06:00    26\n |      Freq: 3min, dtype: int64\n |\n |      For DataFrame objects, the keyword `on` can be used to specify the\n |      column instead of the index for resampling.\n |\n |      &gt;&gt;&gt; d = {'price': [10, 11, 9, 13, 14, 18, 17, 19],\n |      ...      'volume': [50, 60, 40, 100, 50, 100, 40, 50]}\n |      &gt;&gt;&gt; df = pd.DataFrame(d)\n |      &gt;&gt;&gt; df['week_starting'] = pd.date_range('01/01/2018',\n |      ...                                     periods=8,\n |      ...                                     freq='W')\n |      &gt;&gt;&gt; df\n |         price  volume week_starting\n |      0     10      50    2018-01-07\n |      1     11      60    2018-01-14\n |      2      9      40    2018-01-21\n |      3     13     100    2018-01-28\n |      4     14      50    2018-02-04\n |      5     18     100    2018-02-11\n |      6     17      40    2018-02-18\n |      7     19      50    2018-02-25\n |      &gt;&gt;&gt; df.resample('ME', on='week_starting').mean()\n |                     price  volume\n |      week_starting\n |      2018-01-31     10.75    62.5\n |      2018-02-28     17.00    60.0\n |\n |      For a DataFrame with MultiIndex, the keyword `level` can be used to\n |      specify on which level the resampling needs to take place.\n |\n |      &gt;&gt;&gt; days = pd.date_range('1/1/2000', periods=4, freq='D')\n |      &gt;&gt;&gt; d2 = {'price': [10, 11, 9, 13, 14, 18, 17, 19],\n |      ...       'volume': [50, 60, 40, 100, 50, 100, 40, 50]}\n |      &gt;&gt;&gt; df2 = pd.DataFrame(\n |      ...     d2,\n |      ...     index=pd.MultiIndex.from_product(\n |      ...         [days, ['morning', 'afternoon']]\n |      ...     )\n |      ... )\n |      &gt;&gt;&gt; df2\n |                            price  volume\n |      2000-01-01 morning       10      50\n |                 afternoon     11      60\n |      2000-01-02 morning        9      40\n |                 afternoon     13     100\n |      2000-01-03 morning       14      50\n |                 afternoon     18     100\n |      2000-01-04 morning       17      40\n |                 afternoon     19      50\n |      &gt;&gt;&gt; df2.resample('D', level=0).sum()\n |                  price  volume\n |      2000-01-01     21     110\n |      2000-01-02     22     140\n |      2000-01-03     32     150\n |      2000-01-04     36      90\n |\n |      If you want to adjust the start of the bins based on a fixed timestamp:\n |\n |      &gt;&gt;&gt; start, end = '2000-10-01 23:30:00', '2000-10-02 00:30:00'\n |      &gt;&gt;&gt; rng = pd.date_range(start, end, freq='7min')\n |      &gt;&gt;&gt; ts = pd.Series(np.arange(len(rng)) * 3, index=rng)\n |      &gt;&gt;&gt; ts\n |      2000-10-01 23:30:00     0\n |      2000-10-01 23:37:00     3\n |      2000-10-01 23:44:00     6\n |      2000-10-01 23:51:00     9\n |      2000-10-01 23:58:00    12\n |      2000-10-02 00:05:00    15\n |      2000-10-02 00:12:00    18\n |      2000-10-02 00:19:00    21\n |      2000-10-02 00:26:00    24\n |      Freq: 7min, dtype: int64\n |\n |      &gt;&gt;&gt; ts.resample('17min').sum()\n |      2000-10-01 23:14:00     0\n |      2000-10-01 23:31:00     9\n |      2000-10-01 23:48:00    21\n |      2000-10-02 00:05:00    54\n |      2000-10-02 00:22:00    24\n |      Freq: 17min, dtype: int64\n |\n |      &gt;&gt;&gt; ts.resample('17min', origin='epoch').sum()\n |      2000-10-01 23:18:00     0\n |      2000-10-01 23:35:00    18\n |      2000-10-01 23:52:00    27\n |      2000-10-02 00:09:00    39\n |      2000-10-02 00:26:00    24\n |      Freq: 17min, dtype: int64\n |\n |      &gt;&gt;&gt; ts.resample('17min', origin='2000-01-01').sum()\n |      2000-10-01 23:24:00     3\n |      2000-10-01 23:41:00    15\n |      2000-10-01 23:58:00    45\n |      2000-10-02 00:15:00    45\n |      Freq: 17min, dtype: int64\n |\n |      If you want to adjust the start of the bins with an `offset` Timedelta, the two\n |      following lines are equivalent:\n |\n |      &gt;&gt;&gt; ts.resample('17min', origin='start').sum()\n |      2000-10-01 23:30:00     9\n |      2000-10-01 23:47:00    21\n |      2000-10-02 00:04:00    54\n |      2000-10-02 00:21:00    24\n |      Freq: 17min, dtype: int64\n |\n |      &gt;&gt;&gt; ts.resample('17min', offset='23h30min').sum()\n |      2000-10-01 23:30:00     9\n |      2000-10-01 23:47:00    21\n |      2000-10-02 00:04:00    54\n |      2000-10-02 00:21:00    24\n |      Freq: 17min, dtype: int64\n |\n |      If you want to take the largest Timestamp as the end of the bins:\n |\n |      &gt;&gt;&gt; ts.resample('17min', origin='end').sum()\n |      2000-10-01 23:35:00     0\n |      2000-10-01 23:52:00    18\n |      2000-10-02 00:09:00    27\n |      2000-10-02 00:26:00    63\n |      Freq: 17min, dtype: int64\n |\n |      In contrast with the `start_day`, you can use `end_day` to take the ceiling\n |      midnight of the largest Timestamp as the end of the bins and drop the bins\n |      not containing data:\n |\n |      &gt;&gt;&gt; ts.resample('17min', origin='end_day').sum()\n |      2000-10-01 23:38:00     3\n |      2000-10-01 23:55:00    15\n |      2000-10-02 00:12:00    45\n |      2000-10-02 00:29:00    45\n |      Freq: 17min, dtype: int64\n |\n |  rolling(self, window: 'int | dt.timedelta | str | BaseOffset | BaseIndexer', min_periods: 'int | None' = None, center: 'bool_t' = False, win_type: 'str | None' = None, on: 'str | None' = None, axis: 'Axis | lib.NoDefault' = &lt;no_default&gt;, closed: 'IntervalClosedType | None' = None, step: 'int | None' = None, method: 'str' = 'single') -&gt; 'Window | Rolling'\n |      Provide rolling window calculations.\n |\n |      Parameters\n |      ----------\n |      window : int, timedelta, str, offset, or BaseIndexer subclass\n |          Size of the moving window.\n |\n |          If an integer, the fixed number of observations used for\n |          each window.\n |\n |          If a timedelta, str, or offset, the time period of each window. Each\n |          window will be a variable sized based on the observations included in\n |          the time-period. This is only valid for datetimelike indexes.\n |          To learn more about the offsets & frequency strings, please see `this link\n |          &lt;https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases&gt;`__.\n |\n |          If a BaseIndexer subclass, the window boundaries\n |          based on the defined ``get_window_bounds`` method. Additional rolling\n |          keyword arguments, namely ``min_periods``, ``center``, ``closed`` and\n |          ``step`` will be passed to ``get_window_bounds``.\n |\n |      min_periods : int, default None\n |          Minimum number of observations in window required to have a value;\n |          otherwise, result is ``np.nan``.\n |\n |          For a window that is specified by an offset, ``min_periods`` will default to 1.\n |\n |          For a window that is specified by an integer, ``min_periods`` will default\n |          to the size of the window.\n |\n |      center : bool, default False\n |          If False, set the window labels as the right edge of the window index.\n |\n |          If True, set the window labels as the center of the window index.\n |\n |      win_type : str, default None\n |          If ``None``, all points are evenly weighted.\n |\n |          If a string, it must be a valid `scipy.signal window function\n |          &lt;https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows&gt;`__.\n |\n |          Certain Scipy window types require additional parameters to be passed\n |          in the aggregation function. The additional parameters must match\n |          the keywords specified in the Scipy window type method signature.\n |\n |      on : str, optional\n |          For a DataFrame, a column label or Index level on which\n |          to calculate the rolling window, rather than the DataFrame's index.\n |\n |          Provided integer column is ignored and excluded from result since\n |          an integer index is not used to calculate the rolling window.\n |\n |      axis : int or str, default 0\n |          If ``0`` or ``'index'``, roll across the rows.\n |\n |          If ``1`` or ``'columns'``, roll across the columns.\n |\n |          For `Series` this parameter is unused and defaults to 0.\n |\n |          .. deprecated:: 2.1.0\n |\n |              The axis keyword is deprecated. For ``axis=1``,\n |              transpose the DataFrame first instead.\n |\n |      closed : str, default None\n |          If ``'right'``, the first point in the window is excluded from calculations.\n |\n |          If ``'left'``, the last point in the window is excluded from calculations.\n |\n |          If ``'both'``, the no points in the window are excluded from calculations.\n |\n |          If ``'neither'``, the first and last points in the window are excluded\n |          from calculations.\n |\n |          Default ``None`` (``'right'``).\n |\n |      step : int, default None\n |\n |          .. versionadded:: 1.5.0\n |\n |          Evaluate the window at every ``step`` result, equivalent to slicing as\n |          ``[::step]``. ``window`` must be an integer. Using a step argument other\n |          than None or 1 will produce a result with a different shape than the input.\n |\n |      method : str {'single', 'table'}, default 'single'\n |\n |          .. versionadded:: 1.3.0\n |\n |          Execute the rolling operation per single column or row (``'single'``)\n |          or over the entire object (``'table'``).\n |\n |          This argument is only implemented when specifying ``engine='numba'``\n |          in the method call.\n |\n |      Returns\n |      -------\n |      pandas.api.typing.Window or pandas.api.typing.Rolling\n |          An instance of Window is returned if ``win_type`` is passed. Otherwise,\n |          an instance of Rolling is returned.\n |\n |      See Also\n |      --------\n |      expanding : Provides expanding transformations.\n |      ewm : Provides exponential weighted functions.\n |\n |      Notes\n |      -----\n |      See :ref:`Windowing Operations &lt;window.generic&gt;` for further usage details\n |      and examples.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n |      &gt;&gt;&gt; df\n |           B\n |      0  0.0\n |      1  1.0\n |      2  2.0\n |      3  NaN\n |      4  4.0\n |\n |      **window**\n |\n |      Rolling sum with a window length of 2 observations.\n |\n |      &gt;&gt;&gt; df.rolling(2).sum()\n |           B\n |      0  NaN\n |      1  1.0\n |      2  3.0\n |      3  NaN\n |      4  NaN\n |\n |      Rolling sum with a window span of 2 seconds.\n |\n |      &gt;&gt;&gt; df_time = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]},\n |      ...                        index=[pd.Timestamp('20130101 09:00:00'),\n |      ...                               pd.Timestamp('20130101 09:00:02'),\n |      ...                               pd.Timestamp('20130101 09:00:03'),\n |      ...                               pd.Timestamp('20130101 09:00:05'),\n |      ...                               pd.Timestamp('20130101 09:00:06')])\n |\n |      &gt;&gt;&gt; df_time\n |                             B\n |      2013-01-01 09:00:00  0.0\n |      2013-01-01 09:00:02  1.0\n |      2013-01-01 09:00:03  2.0\n |      2013-01-01 09:00:05  NaN\n |      2013-01-01 09:00:06  4.0\n |\n |      &gt;&gt;&gt; df_time.rolling('2s').sum()\n |                             B\n |      2013-01-01 09:00:00  0.0\n |      2013-01-01 09:00:02  1.0\n |      2013-01-01 09:00:03  3.0\n |      2013-01-01 09:00:05  NaN\n |      2013-01-01 09:00:06  4.0\n |\n |      Rolling sum with forward looking windows with 2 observations.\n |\n |      &gt;&gt;&gt; indexer = pd.api.indexers.FixedForwardWindowIndexer(window_size=2)\n |      &gt;&gt;&gt; df.rolling(window=indexer, min_periods=1).sum()\n |           B\n |      0  1.0\n |      1  3.0\n |      2  2.0\n |      3  4.0\n |      4  4.0\n |\n |      **min_periods**\n |\n |      Rolling sum with a window length of 2 observations, but only needs a minimum of 1\n |      observation to calculate a value.\n |\n |      &gt;&gt;&gt; df.rolling(2, min_periods=1).sum()\n |           B\n |      0  0.0\n |      1  1.0\n |      2  3.0\n |      3  2.0\n |      4  4.0\n |\n |      **center**\n |\n |      Rolling sum with the result assigned to the center of the window index.\n |\n |      &gt;&gt;&gt; df.rolling(3, min_periods=1, center=True).sum()\n |           B\n |      0  1.0\n |      1  3.0\n |      2  3.0\n |      3  6.0\n |      4  4.0\n |\n |      &gt;&gt;&gt; df.rolling(3, min_periods=1, center=False).sum()\n |           B\n |      0  0.0\n |      1  1.0\n |      2  3.0\n |      3  3.0\n |      4  6.0\n |\n |      **step**\n |\n |      Rolling sum with a window length of 2 observations, minimum of 1 observation to\n |      calculate a value, and a step of 2.\n |\n |      &gt;&gt;&gt; df.rolling(2, min_periods=1, step=2).sum()\n |           B\n |      0  0.0\n |      2  3.0\n |      4  4.0\n |\n |      **win_type**\n |\n |      Rolling sum with a window length of 2, using the Scipy ``'gaussian'``\n |      window type. ``std`` is required in the aggregation function.\n |\n |      &gt;&gt;&gt; df.rolling(2, win_type='gaussian').sum(std=3)\n |                B\n |      0       NaN\n |      1  0.986207\n |      2  2.958621\n |      3       NaN\n |      4       NaN\n |\n |      **on**\n |\n |      Rolling sum with a window length of 2 days.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\n |      ...     'A': [pd.to_datetime('2020-01-01'),\n |      ...           pd.to_datetime('2020-01-01'),\n |      ...           pd.to_datetime('2020-01-02'),],\n |      ...     'B': [1, 2, 3], },\n |      ...     index=pd.date_range('2020', periods=3))\n |\n |      &gt;&gt;&gt; df\n |                          A  B\n |      2020-01-01 2020-01-01  1\n |      2020-01-02 2020-01-01  2\n |      2020-01-03 2020-01-02  3\n |\n |      &gt;&gt;&gt; df.rolling('2D', on='A').sum()\n |                          A    B\n |      2020-01-01 2020-01-01  1.0\n |      2020-01-02 2020-01-01  3.0\n |      2020-01-03 2020-01-02  6.0\n |\n |  sample(self, n: 'int | None' = None, frac: 'float | None' = None, replace: 'bool_t' = False, weights=None, random_state: 'RandomState | None' = None, axis: 'Axis | None' = None, ignore_index: 'bool_t' = False) -&gt; 'Self'\n |      Return a random sample of items from an axis of object.\n |\n |      You can use `random_state` for reproducibility.\n |\n |      Parameters\n |      ----------\n |      n : int, optional\n |          Number of items from axis to return. Cannot be used with `frac`.\n |          Default = 1 if `frac` = None.\n |      frac : float, optional\n |          Fraction of axis items to return. Cannot be used with `n`.\n |      replace : bool, default False\n |          Allow or disallow sampling of the same row more than once.\n |      weights : str or ndarray-like, optional\n |          Default 'None' results in equal probability weighting.\n |          If passed a Series, will align with target object on index. Index\n |          values in weights not found in sampled object will be ignored and\n |          index values in sampled object not in weights will be assigned\n |          weights of zero.\n |          If called on a DataFrame, will accept the name of a column\n |          when axis = 0.\n |          Unless weights are a Series, weights must be same length as axis\n |          being sampled.\n |          If weights do not sum to 1, they will be normalized to sum to 1.\n |          Missing values in the weights column will be treated as zero.\n |          Infinite values not allowed.\n |      random_state : int, array-like, BitGenerator, np.random.RandomState, np.random.Generator, optional\n |          If int, array-like, or BitGenerator, seed for random number generator.\n |          If np.random.RandomState or np.random.Generator, use as given.\n |\n |          .. versionchanged:: 1.4.0\n |\n |              np.random.Generator objects now accepted\n |\n |      axis : {0 or 'index', 1 or 'columns', None}, default None\n |          Axis to sample. Accepts axis number or name. Default is stat axis\n |          for given data type. For `Series` this parameter is unused and defaults to `None`.\n |      ignore_index : bool, default False\n |          If True, the resulting index will be labeled 0, 1, …, n - 1.\n |\n |          .. versionadded:: 1.3.0\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          A new object of same type as caller containing `n` items randomly\n |          sampled from the caller object.\n |\n |      See Also\n |      --------\n |      DataFrameGroupBy.sample: Generates random samples from each group of a\n |          DataFrame object.\n |      SeriesGroupBy.sample: Generates random samples from each group of a\n |          Series object.\n |      numpy.random.choice: Generates a random sample from a given 1-D numpy\n |          array.\n |\n |      Notes\n |      -----\n |      If `frac` &gt; 1, `replacement` should be set to `True`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'num_legs': [2, 4, 8, 0],\n |      ...                    'num_wings': [2, 0, 0, 0],\n |      ...                    'num_specimen_seen': [10, 2, 1, 8]},\n |      ...                   index=['falcon', 'dog', 'spider', 'fish'])\n |      &gt;&gt;&gt; df\n |              num_legs  num_wings  num_specimen_seen\n |      falcon         2          2                 10\n |      dog            4          0                  2\n |      spider         8          0                  1\n |      fish           0          0                  8\n |\n |      Extract 3 random elements from the ``Series`` ``df['num_legs']``:\n |      Note that we use `random_state` to ensure the reproducibility of\n |      the examples.\n |\n |      &gt;&gt;&gt; df['num_legs'].sample(n=3, random_state=1)\n |      fish      0\n |      spider    8\n |      falcon    2\n |      Name: num_legs, dtype: int64\n |\n |      A random 50% sample of the ``DataFrame`` with replacement:\n |\n |      &gt;&gt;&gt; df.sample(frac=0.5, replace=True, random_state=1)\n |            num_legs  num_wings  num_specimen_seen\n |      dog          4          0                  2\n |      fish         0          0                  8\n |\n |      An upsample sample of the ``DataFrame`` with replacement:\n |      Note that `replace` parameter has to be `True` for `frac` parameter &gt; 1.\n |\n |      &gt;&gt;&gt; df.sample(frac=2, replace=True, random_state=1)\n |              num_legs  num_wings  num_specimen_seen\n |      dog            4          0                  2\n |      fish           0          0                  8\n |      falcon         2          2                 10\n |      falcon         2          2                 10\n |      fish           0          0                  8\n |      dog            4          0                  2\n |      fish           0          0                  8\n |      dog            4          0                  2\n |\n |      Using a DataFrame column as weights. Rows with larger value in the\n |      `num_specimen_seen` column are more likely to be sampled.\n |\n |      &gt;&gt;&gt; df.sample(n=2, weights='num_specimen_seen', random_state=1)\n |              num_legs  num_wings  num_specimen_seen\n |      falcon         2          2                 10\n |      fish           0          0                  8\n |\n |  set_flags(self, *, copy: 'bool_t' = False, allows_duplicate_labels: 'bool_t | None' = None) -&gt; 'Self'\n |      Return a new object with updated flags.\n |\n |      Parameters\n |      ----------\n |      copy : bool, default False\n |          Specify if a copy of the object should be made.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      allows_duplicate_labels : bool, optional\n |          Whether the returned object allows duplicate labels.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          The same type as the caller.\n |\n |      See Also\n |      --------\n |      DataFrame.attrs : Global metadata applying to this dataset.\n |      DataFrame.flags : Global flags applying to this object.\n |\n |      Notes\n |      -----\n |      This method returns a new object that's a view on the same data\n |      as the input. Mutating the input or the output values will be reflected\n |      in the other.\n |\n |      This method is intended to be used in method chains.\n |\n |      \"Flags\" differ from \"metadata\". Flags reflect properties of the\n |      pandas object (the Series or DataFrame). Metadata refer to properties\n |      of the dataset, and should be stored in :attr:`DataFrame.attrs`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [1, 2]})\n |      &gt;&gt;&gt; df.flags.allows_duplicate_labels\n |      True\n |      &gt;&gt;&gt; df2 = df.set_flags(allows_duplicate_labels=False)\n |      &gt;&gt;&gt; df2.flags.allows_duplicate_labels\n |      False\n |\n |  squeeze(self, axis: 'Axis | None' = None)\n |      Squeeze 1 dimensional axis objects into scalars.\n |\n |      Series or DataFrames with a single element are squeezed to a scalar.\n |      DataFrames with a single column or a single row are squeezed to a\n |      Series. Otherwise the object is unchanged.\n |\n |      This method is most useful when you don't know if your\n |      object is a Series or DataFrame, but you do know it has just a single\n |      column. In that case you can safely call `squeeze` to ensure you have a\n |      Series.\n |\n |      Parameters\n |      ----------\n |      axis : {0 or 'index', 1 or 'columns', None}, default None\n |          A specific axis to squeeze. By default, all length-1 axes are\n |          squeezed. For `Series` this parameter is unused and defaults to `None`.\n |\n |      Returns\n |      -------\n |      DataFrame, Series, or scalar\n |          The projection after squeezing `axis` or all the axes.\n |\n |      See Also\n |      --------\n |      Series.iloc : Integer-location based indexing for selecting scalars.\n |      DataFrame.iloc : Integer-location based indexing for selecting Series.\n |      Series.to_frame : Inverse of DataFrame.squeeze for a\n |          single-column DataFrame.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; primes = pd.Series([2, 3, 5, 7])\n |\n |      Slicing might produce a Series with a single value:\n |\n |      &gt;&gt;&gt; even_primes = primes[primes % 2 == 0]\n |      &gt;&gt;&gt; even_primes\n |      0    2\n |      dtype: int64\n |\n |      &gt;&gt;&gt; even_primes.squeeze()\n |      2\n |\n |      Squeezing objects with more than one value in every axis does nothing:\n |\n |      &gt;&gt;&gt; odd_primes = primes[primes % 2 == 1]\n |      &gt;&gt;&gt; odd_primes\n |      1    3\n |      2    5\n |      3    7\n |      dtype: int64\n |\n |      &gt;&gt;&gt; odd_primes.squeeze()\n |      1    3\n |      2    5\n |      3    7\n |      dtype: int64\n |\n |      Squeezing is even more effective when used with DataFrames.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])\n |      &gt;&gt;&gt; df\n |         a  b\n |      0  1  2\n |      1  3  4\n |\n |      Slicing a single column will produce a DataFrame with the columns\n |      having only one value:\n |\n |      &gt;&gt;&gt; df_a = df[['a']]\n |      &gt;&gt;&gt; df_a\n |         a\n |      0  1\n |      1  3\n |\n |      So the columns can be squeezed down, resulting in a Series:\n |\n |      &gt;&gt;&gt; df_a.squeeze('columns')\n |      0    1\n |      1    3\n |      Name: a, dtype: int64\n |\n |      Slicing a single row from a single column will produce a single\n |      scalar DataFrame:\n |\n |      &gt;&gt;&gt; df_0a = df.loc[df.index &lt; 1, ['a']]\n |      &gt;&gt;&gt; df_0a\n |         a\n |      0  1\n |\n |      Squeezing the rows produces a single scalar Series:\n |\n |      &gt;&gt;&gt; df_0a.squeeze('rows')\n |      a    1\n |      Name: 0, dtype: int64\n |\n |      Squeezing all axes will project directly into a scalar:\n |\n |      &gt;&gt;&gt; df_0a.squeeze()\n |      1\n |\n |  swapaxes(self, axis1: 'Axis', axis2: 'Axis', copy: 'bool_t | None' = None) -&gt; 'Self'\n |      Interchange axes and swap values axes appropriately.\n |\n |      .. deprecated:: 2.1.0\n |          ``swapaxes`` is deprecated and will be removed.\n |          Please use ``transpose`` instead.\n |\n |      Returns\n |      -------\n |      same as input\n |\n |      Examples\n |      --------\n |      Please see examples for :meth:`DataFrame.transpose`.\n |\n |  tail(self, n: 'int' = 5) -&gt; 'Self'\n |      Return the last `n` rows.\n |\n |      This function returns last `n` rows from the object based on\n |      position. It is useful for quickly verifying data, for example,\n |      after sorting or appending rows.\n |\n |      For negative values of `n`, this function returns all rows except\n |      the first `|n|` rows, equivalent to ``df[|n|:]``.\n |\n |      If n is larger than the number of rows, this function returns all rows.\n |\n |      Parameters\n |      ----------\n |      n : int, default 5\n |          Number of rows to select.\n |\n |      Returns\n |      -------\n |      type of caller\n |          The last `n` rows of the caller object.\n |\n |      See Also\n |      --------\n |      DataFrame.head : The first `n` rows of the caller object.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n |      ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n |      &gt;&gt;&gt; df\n |            animal\n |      0  alligator\n |      1        bee\n |      2     falcon\n |      3       lion\n |      4     monkey\n |      5     parrot\n |      6      shark\n |      7      whale\n |      8      zebra\n |\n |      Viewing the last 5 lines\n |\n |      &gt;&gt;&gt; df.tail()\n |         animal\n |      4  monkey\n |      5  parrot\n |      6   shark\n |      7   whale\n |      8   zebra\n |\n |      Viewing the last `n` lines (three in this case)\n |\n |      &gt;&gt;&gt; df.tail(3)\n |        animal\n |      6  shark\n |      7  whale\n |      8  zebra\n |\n |      For negative values of `n`\n |\n |      &gt;&gt;&gt; df.tail(-3)\n |         animal\n |      3    lion\n |      4  monkey\n |      5  parrot\n |      6   shark\n |      7   whale\n |      8   zebra\n |\n |  take(self, indices, axis: 'Axis' = 0, **kwargs) -&gt; 'Self'\n |      Return the elements in the given *positional* indices along an axis.\n |\n |      This means that we are not indexing according to actual values in\n |      the index attribute of the object. We are indexing according to the\n |      actual position of the element in the object.\n |\n |      Parameters\n |      ----------\n |      indices : array-like\n |          An array of ints indicating which positions to take.\n |      axis : {0 or 'index', 1 or 'columns', None}, default 0\n |          The axis on which to select elements. ``0`` means that we are\n |          selecting rows, ``1`` means that we are selecting columns.\n |          For `Series` this parameter is unused and defaults to 0.\n |      **kwargs\n |          For compatibility with :meth:`numpy.take`. Has no effect on the\n |          output.\n |\n |      Returns\n |      -------\n |      same type as caller\n |          An array-like containing the elements taken from the object.\n |\n |      See Also\n |      --------\n |      DataFrame.loc : Select a subset of a DataFrame by labels.\n |      DataFrame.iloc : Select a subset of a DataFrame by positions.\n |      numpy.take : Take elements from an array along an axis.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([('falcon', 'bird', 389.0),\n |      ...                    ('parrot', 'bird', 24.0),\n |      ...                    ('lion', 'mammal', 80.5),\n |      ...                    ('monkey', 'mammal', np.nan)],\n |      ...                   columns=['name', 'class', 'max_speed'],\n |      ...                   index=[0, 2, 3, 1])\n |      &gt;&gt;&gt; df\n |           name   class  max_speed\n |      0  falcon    bird      389.0\n |      2  parrot    bird       24.0\n |      3    lion  mammal       80.5\n |      1  monkey  mammal        NaN\n |\n |      Take elements at positions 0 and 3 along the axis 0 (default).\n |\n |      Note how the actual indices selected (0 and 1) do not correspond to\n |      our selected indices 0 and 3. That's because we are selecting the 0th\n |      and 3rd rows, not rows whose indices equal 0 and 3.\n |\n |      &gt;&gt;&gt; df.take([0, 3])\n |           name   class  max_speed\n |      0  falcon    bird      389.0\n |      1  monkey  mammal        NaN\n |\n |      Take elements at indices 1 and 2 along the axis 1 (column selection).\n |\n |      &gt;&gt;&gt; df.take([1, 2], axis=1)\n |          class  max_speed\n |      0    bird      389.0\n |      2    bird       24.0\n |      3  mammal       80.5\n |      1  mammal        NaN\n |\n |      We may take elements using negative integers for positive indices,\n |      starting from the end of the object, just like with Python lists.\n |\n |      &gt;&gt;&gt; df.take([-1, -2])\n |           name   class  max_speed\n |      1  monkey  mammal        NaN\n |      3    lion  mammal       80.5\n |\n |  to_clipboard(self, *, excel: 'bool_t' = True, sep: 'str | None' = None, **kwargs) -&gt; 'None'\n |      Copy object to the system clipboard.\n |\n |      Write a text representation of object to the system clipboard.\n |      This can be pasted into Excel, for example.\n |\n |      Parameters\n |      ----------\n |      excel : bool, default True\n |          Produce output in a csv format for easy pasting into excel.\n |\n |          - True, use the provided separator for csv pasting.\n |          - False, write a string representation of the object to the clipboard.\n |\n |      sep : str, default ``'\\t'``\n |          Field delimiter.\n |      **kwargs\n |          These parameters will be passed to DataFrame.to_csv.\n |\n |      See Also\n |      --------\n |      DataFrame.to_csv : Write a DataFrame to a comma-separated values\n |          (csv) file.\n |      read_clipboard : Read text from clipboard and pass to read_csv.\n |\n |      Notes\n |      -----\n |      Requirements for your platform.\n |\n |        - Linux : `xclip`, or `xsel` (with `PyQt4` modules)\n |        - Windows : none\n |        - macOS : none\n |\n |      This method uses the processes developed for the package `pyperclip`. A\n |      solution to render any output string format is given in the examples.\n |\n |      Examples\n |      --------\n |      Copy the contents of a DataFrame to the clipboard.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])\n |\n |      &gt;&gt;&gt; df.to_clipboard(sep=',')  # doctest: +SKIP\n |      ... # Wrote the following to the system clipboard:\n |      ... # ,A,B,C\n |      ... # 0,1,2,3\n |      ... # 1,4,5,6\n |\n |      We can omit the index by passing the keyword `index` and setting\n |      it to false.\n |\n |      &gt;&gt;&gt; df.to_clipboard(sep=',', index=False)  # doctest: +SKIP\n |      ... # Wrote the following to the system clipboard:\n |      ... # A,B,C\n |      ... # 1,2,3\n |      ... # 4,5,6\n |\n |      Using the original `pyperclip` package for any string output format.\n |\n |      .. code-block:: python\n |\n |         import pyperclip\n |         html = df.style.to_html()\n |         pyperclip.copy(html)\n |\n |  to_csv(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, sep: 'str' = ',', na_rep: 'str' = '', float_format: 'str | Callable | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | list[str]' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, mode: 'str' = 'w', encoding: 'str | None' = None, compression: 'CompressionOptions' = 'infer', quoting: 'int | None' = None, quotechar: 'str' = '\"', lineterminator: 'str | None' = None, chunksize: 'int | None' = None, date_format: 'str | None' = None, doublequote: 'bool_t' = True, escapechar: 'str | None' = None, decimal: 'str' = '.', errors: 'OpenFileErrors' = 'strict', storage_options: 'StorageOptions | None' = None) -&gt; 'str | None'\n |      Write object to a comma-separated values (csv) file.\n |\n |      Parameters\n |      ----------\n |      path_or_buf : str, path object, file-like object, or None, default None\n |          String, path object (implementing os.PathLike[str]), or file-like\n |          object implementing a write() function. If None, the result is\n |          returned as a string. If a non-binary file object is passed, it should\n |          be opened with `newline=''`, disabling universal newlines. If a binary\n |          file object is passed, `mode` might need to contain a `'b'`.\n |      sep : str, default ','\n |          String of length 1. Field delimiter for the output file.\n |      na_rep : str, default ''\n |          Missing data representation.\n |      float_format : str, Callable, default None\n |          Format string for floating point numbers. If a Callable is given, it takes\n |          precedence over other numeric formatting parameters, like decimal.\n |      columns : sequence, optional\n |          Columns to write.\n |      header : bool or list of str, default True\n |          Write out the column names. If a list of strings is given it is\n |          assumed to be aliases for the column names.\n |      index : bool, default True\n |          Write row names (index).\n |      index_label : str or sequence, or False, default None\n |          Column label for index column(s) if desired. If None is given, and\n |          `header` and `index` are True, then the index names are used. A\n |          sequence should be given if the object uses MultiIndex. If\n |          False do not print fields for index names. Use index_label=False\n |          for easier importing in R.\n |      mode : {'w', 'x', 'a'}, default 'w'\n |          Forwarded to either `open(mode=)` or `fsspec.open(mode=)` to control\n |          the file opening. Typical values include:\n |\n |          - 'w', truncate the file first.\n |          - 'x', exclusive creation, failing if the file already exists.\n |          - 'a', append to the end of file if it exists.\n |\n |      encoding : str, optional\n |          A string representing the encoding to use in the output file,\n |          defaults to 'utf-8'. `encoding` is not supported if `path_or_buf`\n |          is a non-binary file object.\n |      compression : str or dict, default 'infer'\n |          For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is\n |          path-like, then detect compression from the following extensions: '.gz',\n |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n |          (otherwise no compression).\n |          Set to ``None`` for no compression.\n |          Can also be a dict with key ``'method'`` set\n |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n |          other key-value pairs are forwarded to\n |          ``zipfile.ZipFile``, ``gzip.GzipFile``,\n |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n |          ``tarfile.TarFile``, respectively.\n |          As an example, the following could be passed for faster compression and to create\n |          a reproducible gzip archive:\n |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n |\n |          .. versionadded:: 1.5.0\n |              Added support for `.tar` files.\n |\n |             May be a dict with key 'method' as compression mode\n |             and other entries as additional compression options if\n |             compression mode is 'zip'.\n |\n |             Passing compression options as keys in dict is\n |             supported for compression modes 'gzip', 'bz2', 'zstd', and 'zip'.\n |      quoting : optional constant from csv module\n |          Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n |          then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n |          will treat them as non-numeric.\n |      quotechar : str, default '\\\"'\n |          String of length 1. Character used to quote fields.\n |      lineterminator : str, optional\n |          The newline character or character sequence to use in the output\n |          file. Defaults to `os.linesep`, which depends on the OS in which\n |          this method is called ('\\\\n' for linux, '\\\\r\\\\n' for Windows, i.e.).\n |\n |          .. versionchanged:: 1.5.0\n |\n |              Previously was line_terminator, changed for consistency with\n |              read_csv and the standard library 'csv' module.\n |\n |      chunksize : int or None\n |          Rows to write at a time.\n |      date_format : str, default None\n |          Format string for datetime objects.\n |      doublequote : bool, default True\n |          Control quoting of `quotechar` inside a field.\n |      escapechar : str, default None\n |          String of length 1. Character used to escape `sep` and `quotechar`\n |          when appropriate.\n |      decimal : str, default '.'\n |          Character recognized as decimal separator. E.g. use ',' for\n |          European data.\n |      errors : str, default 'strict'\n |          Specifies how encoding and decoding errors are to be handled.\n |          See the errors argument for :func:`open` for a full list\n |          of options.\n |\n |      storage_options : dict, optional\n |          Extra options that make sense for a particular storage connection, e.g.\n |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n |          are forwarded to ``urllib.request.Request`` as header options. For other\n |          URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n |          details, and for more examples on storage options refer `here\n |          &lt;https://pandas.pydata.org/docs/user_guide/io.html?\n |          highlight=storage_options#reading-writing-remote-files&gt;`_.\n |\n |      Returns\n |      -------\n |      None or str\n |          If path_or_buf is None, returns the resulting csv format as a\n |          string. Otherwise returns None.\n |\n |      See Also\n |      --------\n |      read_csv : Load a CSV file into a DataFrame.\n |      to_excel : Write DataFrame to an Excel file.\n |\n |      Examples\n |      --------\n |      Create 'out.csv' containing 'df' without indices\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n |      ...                    'mask': ['red', 'purple'],\n |      ...                    'weapon': ['sai', 'bo staff']})\n |      &gt;&gt;&gt; df.to_csv('out.csv', index=False)  # doctest: +SKIP\n |\n |      Create 'out.zip' containing 'out.csv'\n |\n |      &gt;&gt;&gt; df.to_csv(index=False)\n |      'name,mask,weapon\\nRaphael,red,sai\\nDonatello,purple,bo staff\\n'\n |      &gt;&gt;&gt; compression_opts = dict(method='zip',\n |      ...                         archive_name='out.csv')  # doctest: +SKIP\n |      &gt;&gt;&gt; df.to_csv('out.zip', index=False,\n |      ...           compression=compression_opts)  # doctest: +SKIP\n |\n |      To write a csv file to a new folder or nested folder you will first\n |      need to create it using either Pathlib or os:\n |\n |      &gt;&gt;&gt; from pathlib import Path  # doctest: +SKIP\n |      &gt;&gt;&gt; filepath = Path('folder/subfolder/out.csv')  # doctest: +SKIP\n |      &gt;&gt;&gt; filepath.parent.mkdir(parents=True, exist_ok=True)  # doctest: +SKIP\n |      &gt;&gt;&gt; df.to_csv(filepath)  # doctest: +SKIP\n |\n |      &gt;&gt;&gt; import os  # doctest: +SKIP\n |      &gt;&gt;&gt; os.makedirs('folder/subfolder', exist_ok=True)  # doctest: +SKIP\n |      &gt;&gt;&gt; df.to_csv('folder/subfolder/out.csv')  # doctest: +SKIP\n |\n |  to_excel(self, excel_writer: 'FilePath | WriteExcelBuffer | ExcelWriter', *, sheet_name: 'str' = 'Sheet1', na_rep: 'str' = '', float_format: 'str | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'Sequence[Hashable] | bool_t' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, startrow: 'int' = 0, startcol: 'int' = 0, engine: \"Literal['openpyxl', 'xlsxwriter'] | None\" = None, merge_cells: 'bool_t' = True, inf_rep: 'str' = 'inf', freeze_panes: 'tuple[int, int] | None' = None, storage_options: 'StorageOptions | None' = None, engine_kwargs: 'dict[str, Any] | None' = None) -&gt; 'None'\n |      Write object to an Excel sheet.\n |\n |      To write a single object to an Excel .xlsx file it is only necessary to\n |      specify a target file name. To write to multiple sheets it is necessary to\n |      create an `ExcelWriter` object with a target file name, and specify a sheet\n |      in the file to write to.\n |\n |      Multiple sheets may be written to by specifying unique `sheet_name`.\n |      With all data written to the file it is necessary to save the changes.\n |      Note that creating an `ExcelWriter` object with a file name that already\n |      exists will result in the contents of the existing file being erased.\n |\n |      Parameters\n |      ----------\n |      excel_writer : path-like, file-like, or ExcelWriter object\n |          File path or existing ExcelWriter.\n |      sheet_name : str, default 'Sheet1'\n |          Name of sheet which will contain DataFrame.\n |      na_rep : str, default ''\n |          Missing data representation.\n |      float_format : str, optional\n |          Format string for floating point numbers. For example\n |          ``float_format=\"%.2f\"`` will format 0.1234 to 0.12.\n |      columns : sequence or list of str, optional\n |          Columns to write.\n |      header : bool or list of str, default True\n |          Write out the column names. If a list of string is given it is\n |          assumed to be aliases for the column names.\n |      index : bool, default True\n |          Write row names (index).\n |      index_label : str or sequence, optional\n |          Column label for index column(s) if desired. If not specified, and\n |          `header` and `index` are True, then the index names are used. A\n |          sequence should be given if the DataFrame uses MultiIndex.\n |      startrow : int, default 0\n |          Upper left cell row to dump data frame.\n |      startcol : int, default 0\n |          Upper left cell column to dump data frame.\n |      engine : str, optional\n |          Write engine to use, 'openpyxl' or 'xlsxwriter'. You can also set this\n |          via the options ``io.excel.xlsx.writer`` or\n |          ``io.excel.xlsm.writer``.\n |\n |      merge_cells : bool, default True\n |          Write MultiIndex and Hierarchical Rows as merged cells.\n |      inf_rep : str, default 'inf'\n |          Representation for infinity (there is no native representation for\n |          infinity in Excel).\n |      freeze_panes : tuple of int (length 2), optional\n |          Specifies the one-based bottommost row and rightmost column that\n |          is to be frozen.\n |      storage_options : dict, optional\n |          Extra options that make sense for a particular storage connection, e.g.\n |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n |          are forwarded to ``urllib.request.Request`` as header options. For other\n |          URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n |          details, and for more examples on storage options refer `here\n |          &lt;https://pandas.pydata.org/docs/user_guide/io.html?\n |          highlight=storage_options#reading-writing-remote-files&gt;`_.\n |\n |          .. versionadded:: 1.2.0\n |      engine_kwargs : dict, optional\n |          Arbitrary keyword arguments passed to excel engine.\n |\n |      See Also\n |      --------\n |      to_csv : Write DataFrame to a comma-separated values (csv) file.\n |      ExcelWriter : Class for writing DataFrame objects into excel sheets.\n |      read_excel : Read an Excel file into a pandas DataFrame.\n |      read_csv : Read a comma-separated values (csv) file into DataFrame.\n |      io.formats.style.Styler.to_excel : Add styles to Excel sheet.\n |\n |      Notes\n |      -----\n |      For compatibility with :meth:`~DataFrame.to_csv`,\n |      to_excel serializes lists and dicts to strings before writing.\n |\n |      Once a workbook has been saved it is not possible to write further\n |      data without rewriting the whole workbook.\n |\n |      Examples\n |      --------\n |\n |      Create, write to and save a workbook:\n |\n |      &gt;&gt;&gt; df1 = pd.DataFrame([['a', 'b'], ['c', 'd']],\n |      ...                    index=['row 1', 'row 2'],\n |      ...                    columns=['col 1', 'col 2'])\n |      &gt;&gt;&gt; df1.to_excel(\"output.xlsx\")  # doctest: +SKIP\n |\n |      To specify the sheet name:\n |\n |      &gt;&gt;&gt; df1.to_excel(\"output.xlsx\",\n |      ...              sheet_name='Sheet_name_1')  # doctest: +SKIP\n |\n |      If you wish to write to more than one sheet in the workbook, it is\n |      necessary to specify an ExcelWriter object:\n |\n |      &gt;&gt;&gt; df2 = df1.copy()\n |      &gt;&gt;&gt; with pd.ExcelWriter('output.xlsx') as writer:  # doctest: +SKIP\n |      ...     df1.to_excel(writer, sheet_name='Sheet_name_1')\n |      ...     df2.to_excel(writer, sheet_name='Sheet_name_2')\n |\n |      ExcelWriter can also be used to append to an existing Excel file:\n |\n |      &gt;&gt;&gt; with pd.ExcelWriter('output.xlsx',\n |      ...                     mode='a') as writer:  # doctest: +SKIP\n |      ...     df1.to_excel(writer, sheet_name='Sheet_name_3')\n |\n |      To set the library that is used to write the Excel file,\n |      you can pass the `engine` keyword (the default engine is\n |      automatically chosen depending on the file extension):\n |\n |      &gt;&gt;&gt; df1.to_excel('output1.xlsx', engine='xlsxwriter')  # doctest: +SKIP\n |\n |  to_hdf(self, path_or_buf: 'FilePath | HDFStore', *, key: 'str', mode: \"Literal['a', 'w', 'r+']\" = 'a', complevel: 'int | None' = None, complib: \"Literal['zlib', 'lzo', 'bzip2', 'blosc'] | None\" = None, append: 'bool_t' = False, format: \"Literal['fixed', 'table'] | None\" = None, index: 'bool_t' = True, min_itemsize: 'int | dict[str, int] | None' = None, nan_rep=None, dropna: 'bool_t | None' = None, data_columns: 'Literal[True] | list[str] | None' = None, errors: 'OpenFileErrors' = 'strict', encoding: 'str' = 'UTF-8') -&gt; 'None'\n |      Write the contained data to an HDF5 file using HDFStore.\n |\n |      Hierarchical Data Format (HDF) is self-describing, allowing an\n |      application to interpret the structure and contents of a file with\n |      no outside information. One HDF file can hold a mix of related objects\n |      which can be accessed as a group or as individual objects.\n |\n |      In order to add another DataFrame or Series to an existing HDF file\n |      please use append mode and a different a key.\n |\n |      .. warning::\n |\n |         One can store a subclass of ``DataFrame`` or ``Series`` to HDF5,\n |         but the type of the subclass is lost upon storing.\n |\n |      For more information see the :ref:`user guide &lt;io.hdf5&gt;`.\n |\n |      Parameters\n |      ----------\n |      path_or_buf : str or pandas.HDFStore\n |          File path or HDFStore object.\n |      key : str\n |          Identifier for the group in the store.\n |      mode : {'a', 'w', 'r+'}, default 'a'\n |          Mode to open file:\n |\n |          - 'w': write, a new file is created (an existing file with\n |            the same name would be deleted).\n |          - 'a': append, an existing file is opened for reading and\n |            writing, and if the file does not exist it is created.\n |          - 'r+': similar to 'a', but the file must already exist.\n |      complevel : {0-9}, default None\n |          Specifies a compression level for data.\n |          A value of 0 or None disables compression.\n |      complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n |          Specifies the compression library to be used.\n |          These additional compressors for Blosc are supported\n |          (default if no compressor specified: 'blosc:blosclz'):\n |          {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n |          'blosc:zlib', 'blosc:zstd'}.\n |          Specifying a compression library which is not available issues\n |          a ValueError.\n |      append : bool, default False\n |          For Table formats, append the input data to the existing.\n |      format : {'fixed', 'table', None}, default 'fixed'\n |          Possible values:\n |\n |          - 'fixed': Fixed format. Fast writing/reading. Not-appendable,\n |            nor searchable.\n |          - 'table': Table format. Write as a PyTables Table structure\n |            which may perform worse but allow more flexible operations\n |            like searching / selecting subsets of the data.\n |          - If None, pd.get_option('io.hdf.default_format') is checked,\n |            followed by fallback to \"fixed\".\n |      index : bool, default True\n |          Write DataFrame index as a column.\n |      min_itemsize : dict or int, optional\n |          Map column names to minimum string sizes for columns.\n |      nan_rep : Any, optional\n |          How to represent null values as str.\n |          Not allowed with append=True.\n |      dropna : bool, default False, optional\n |          Remove missing values.\n |      data_columns : list of columns or True, optional\n |          List of columns to create as indexed data columns for on-disk\n |          queries, or True to use all columns. By default only the axes\n |          of the object are indexed. See\n |          :ref:`Query via data columns&lt;io.hdf5-query-data-columns&gt;`. for\n |          more information.\n |          Applicable only to format='table'.\n |      errors : str, default 'strict'\n |          Specifies how encoding and decoding errors are to be handled.\n |          See the errors argument for :func:`open` for a full list\n |          of options.\n |      encoding : str, default \"UTF-8\"\n |\n |      See Also\n |      --------\n |      read_hdf : Read from HDF file.\n |      DataFrame.to_orc : Write a DataFrame to the binary orc format.\n |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n |      DataFrame.to_sql : Write to a SQL table.\n |      DataFrame.to_feather : Write out feather-format for DataFrames.\n |      DataFrame.to_csv : Write out to a csv file.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},\n |      ...                   index=['a', 'b', 'c'])  # doctest: +SKIP\n |      &gt;&gt;&gt; df.to_hdf('data.h5', key='df', mode='w')  # doctest: +SKIP\n |\n |      We can add another object to the same file:\n |\n |      &gt;&gt;&gt; s = pd.Series([1, 2, 3, 4])  # doctest: +SKIP\n |      &gt;&gt;&gt; s.to_hdf('data.h5', key='s')  # doctest: +SKIP\n |\n |      Reading from HDF file:\n |\n |      &gt;&gt;&gt; pd.read_hdf('data.h5', 'df')  # doctest: +SKIP\n |      A  B\n |      a  1  4\n |      b  2  5\n |      c  3  6\n |      &gt;&gt;&gt; pd.read_hdf('data.h5', 's')  # doctest: +SKIP\n |      0    1\n |      1    2\n |      2    3\n |      3    4\n |      dtype: int64\n |\n |  to_json(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, orient: \"Literal['split', 'records', 'index', 'table', 'columns', 'values'] | None\" = None, date_format: 'str | None' = None, double_precision: 'int' = 10, force_ascii: 'bool_t' = True, date_unit: 'TimeUnit' = 'ms', default_handler: 'Callable[[Any], JSONSerializable] | None' = None, lines: 'bool_t' = False, compression: 'CompressionOptions' = 'infer', index: 'bool_t | None' = None, indent: 'int | None' = None, storage_options: 'StorageOptions | None' = None, mode: \"Literal['a', 'w']\" = 'w') -&gt; 'str | None'\n |      Convert the object to a JSON string.\n |\n |      Note NaN's and None will be converted to null and datetime objects\n |      will be converted to UNIX timestamps.\n |\n |      Parameters\n |      ----------\n |      path_or_buf : str, path object, file-like object, or None, default None\n |          String, path object (implementing os.PathLike[str]), or file-like\n |          object implementing a write() function. If None, the result is\n |          returned as a string.\n |      orient : str\n |          Indication of expected JSON string format.\n |\n |          * Series:\n |\n |              - default is 'index'\n |              - allowed values are: {'split', 'records', 'index', 'table'}.\n |\n |          * DataFrame:\n |\n |              - default is 'columns'\n |              - allowed values are: {'split', 'records', 'index', 'columns',\n |                'values', 'table'}.\n |\n |          * The format of the JSON string:\n |\n |              - 'split' : dict like {'index' -&gt; [index], 'columns' -&gt; [columns],\n |                'data' -&gt; [values]}\n |              - 'records' : list like [{column -&gt; value}, ... , {column -&gt; value}]\n |              - 'index' : dict like {index -&gt; {column -&gt; value}}\n |              - 'columns' : dict like {column -&gt; {index -&gt; value}}\n |              - 'values' : just the values array\n |              - 'table' : dict like {'schema': {schema}, 'data': {data}}\n |\n |              Describing the data, where data component is like ``orient='records'``.\n |\n |      date_format : {None, 'epoch', 'iso'}\n |          Type of date conversion. 'epoch' = epoch milliseconds,\n |          'iso' = ISO8601. The default depends on the `orient`. For\n |          ``orient='table'``, the default is 'iso'. For all other orients,\n |          the default is 'epoch'.\n |      double_precision : int, default 10\n |          The number of decimal places to use when encoding\n |          floating point values. The possible maximal value is 15.\n |          Passing double_precision greater than 15 will raise a ValueError.\n |      force_ascii : bool, default True\n |          Force encoded string to be ASCII.\n |      date_unit : str, default 'ms' (milliseconds)\n |          The time unit to encode to, governs timestamp and ISO8601\n |          precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n |          microsecond, and nanosecond respectively.\n |      default_handler : callable, default None\n |          Handler to call if object cannot otherwise be converted to a\n |          suitable format for JSON. Should receive a single argument which is\n |          the object to convert and return a serialisable object.\n |      lines : bool, default False\n |          If 'orient' is 'records' write out line-delimited json format. Will\n |          throw ValueError if incorrect 'orient' since others are not\n |          list-like.\n |      compression : str or dict, default 'infer'\n |          For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is\n |          path-like, then detect compression from the following extensions: '.gz',\n |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n |          (otherwise no compression).\n |          Set to ``None`` for no compression.\n |          Can also be a dict with key ``'method'`` set\n |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n |          other key-value pairs are forwarded to\n |          ``zipfile.ZipFile``, ``gzip.GzipFile``,\n |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n |          ``tarfile.TarFile``, respectively.\n |          As an example, the following could be passed for faster compression and to create\n |          a reproducible gzip archive:\n |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n |\n |          .. versionadded:: 1.5.0\n |              Added support for `.tar` files.\n |\n |          .. versionchanged:: 1.4.0 Zstandard support.\n |\n |      index : bool or None, default None\n |          The index is only used when 'orient' is 'split', 'index', 'column',\n |          or 'table'. Of these, 'index' and 'column' do not support\n |          `index=False`.\n |\n |      indent : int, optional\n |         Length of whitespace used to indent each record.\n |\n |      storage_options : dict, optional\n |          Extra options that make sense for a particular storage connection, e.g.\n |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n |          are forwarded to ``urllib.request.Request`` as header options. For other\n |          URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n |          details, and for more examples on storage options refer `here\n |          &lt;https://pandas.pydata.org/docs/user_guide/io.html?\n |          highlight=storage_options#reading-writing-remote-files&gt;`_.\n |\n |      mode : str, default 'w' (writing)\n |          Specify the IO mode for output when supplying a path_or_buf.\n |          Accepted args are 'w' (writing) and 'a' (append) only.\n |          mode='a' is only supported when lines is True and orient is 'records'.\n |\n |      Returns\n |      -------\n |      None or str\n |          If path_or_buf is None, returns the resulting json format as a\n |          string. Otherwise returns None.\n |\n |      See Also\n |      --------\n |      read_json : Convert a JSON string to pandas object.\n |\n |      Notes\n |      -----\n |      The behavior of ``indent=0`` varies from the stdlib, which does not\n |      indent the output but does insert newlines. Currently, ``indent=0``\n |      and the default ``indent=None`` are equivalent in pandas, though this\n |      may change in a future release.\n |\n |      ``orient='table'`` contains a 'pandas_version' field under 'schema'.\n |      This stores the version of `pandas` used in the latest revision of the\n |      schema.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; from json import loads, dumps\n |      &gt;&gt;&gt; df = pd.DataFrame(\n |      ...     [[\"a\", \"b\"], [\"c\", \"d\"]],\n |      ...     index=[\"row 1\", \"row 2\"],\n |      ...     columns=[\"col 1\", \"col 2\"],\n |      ... )\n |\n |      &gt;&gt;&gt; result = df.to_json(orient=\"split\")\n |      &gt;&gt;&gt; parsed = loads(result)\n |      &gt;&gt;&gt; dumps(parsed, indent=4)  # doctest: +SKIP\n |      {\n |          \"columns\": [\n |              \"col 1\",\n |              \"col 2\"\n |          ],\n |          \"index\": [\n |              \"row 1\",\n |              \"row 2\"\n |          ],\n |          \"data\": [\n |              [\n |                  \"a\",\n |                  \"b\"\n |              ],\n |              [\n |                  \"c\",\n |                  \"d\"\n |              ]\n |          ]\n |      }\n |\n |      Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n |      Note that index labels are not preserved with this encoding.\n |\n |      &gt;&gt;&gt; result = df.to_json(orient=\"records\")\n |      &gt;&gt;&gt; parsed = loads(result)\n |      &gt;&gt;&gt; dumps(parsed, indent=4)  # doctest: +SKIP\n |      [\n |          {\n |              \"col 1\": \"a\",\n |              \"col 2\": \"b\"\n |          },\n |          {\n |              \"col 1\": \"c\",\n |              \"col 2\": \"d\"\n |          }\n |      ]\n |\n |      Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n |\n |      &gt;&gt;&gt; result = df.to_json(orient=\"index\")\n |      &gt;&gt;&gt; parsed = loads(result)\n |      &gt;&gt;&gt; dumps(parsed, indent=4)  # doctest: +SKIP\n |      {\n |          \"row 1\": {\n |              \"col 1\": \"a\",\n |              \"col 2\": \"b\"\n |          },\n |          \"row 2\": {\n |              \"col 1\": \"c\",\n |              \"col 2\": \"d\"\n |          }\n |      }\n |\n |      Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n |\n |      &gt;&gt;&gt; result = df.to_json(orient=\"columns\")\n |      &gt;&gt;&gt; parsed = loads(result)\n |      &gt;&gt;&gt; dumps(parsed, indent=4)  # doctest: +SKIP\n |      {\n |          \"col 1\": {\n |              \"row 1\": \"a\",\n |              \"row 2\": \"c\"\n |          },\n |          \"col 2\": {\n |              \"row 1\": \"b\",\n |              \"row 2\": \"d\"\n |          }\n |      }\n |\n |      Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n |\n |      &gt;&gt;&gt; result = df.to_json(orient=\"values\")\n |      &gt;&gt;&gt; parsed = loads(result)\n |      &gt;&gt;&gt; dumps(parsed, indent=4)  # doctest: +SKIP\n |      [\n |          [\n |              \"a\",\n |              \"b\"\n |          ],\n |          [\n |              \"c\",\n |              \"d\"\n |          ]\n |      ]\n |\n |      Encoding with Table Schema:\n |\n |      &gt;&gt;&gt; result = df.to_json(orient=\"table\")\n |      &gt;&gt;&gt; parsed = loads(result)\n |      &gt;&gt;&gt; dumps(parsed, indent=4)  # doctest: +SKIP\n |      {\n |          \"schema\": {\n |              \"fields\": [\n |                  {\n |                      \"name\": \"index\",\n |                      \"type\": \"string\"\n |                  },\n |                  {\n |                      \"name\": \"col 1\",\n |                      \"type\": \"string\"\n |                  },\n |                  {\n |                      \"name\": \"col 2\",\n |                      \"type\": \"string\"\n |                  }\n |              ],\n |              \"primaryKey\": [\n |                  \"index\"\n |              ],\n |              \"pandas_version\": \"1.4.0\"\n |          },\n |          \"data\": [\n |              {\n |                  \"index\": \"row 1\",\n |                  \"col 1\": \"a\",\n |                  \"col 2\": \"b\"\n |              },\n |              {\n |                  \"index\": \"row 2\",\n |                  \"col 1\": \"c\",\n |                  \"col 2\": \"d\"\n |              }\n |          ]\n |      }\n |\n |  to_latex(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | SequenceNotStr[str]' = True, index: 'bool_t' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool_t | None' = None, index_names: 'bool_t' = True, bold_rows: 'bool_t' = False, column_format: 'str | None' = None, longtable: 'bool_t | None' = None, escape: 'bool_t | None' = None, encoding: 'str | None' = None, decimal: 'str' = '.', multicolumn: 'bool_t | None' = None, multicolumn_format: 'str | None' = None, multirow: 'bool_t | None' = None, caption: 'str | tuple[str, str] | None' = None, label: 'str | None' = None, position: 'str | None' = None) -&gt; 'str | None'\n |      Render object to a LaTeX tabular, longtable, or nested table.\n |\n |      Requires ``\\usepackage{{booktabs}}``.  The output can be copy/pasted\n |      into a main LaTeX document or read from an external file\n |      with ``\\input{{table.tex}}``.\n |\n |      .. versionchanged:: 2.0.0\n |         Refactored to use the Styler implementation via jinja2 templating.\n |\n |      Parameters\n |      ----------\n |      buf : str, Path or StringIO-like, optional, default None\n |          Buffer to write to. If None, the output is returned as a string.\n |      columns : list of label, optional\n |          The subset of columns to write. Writes all columns by default.\n |      header : bool or list of str, default True\n |          Write out the column names. If a list of strings is given,\n |          it is assumed to be aliases for the column names.\n |      index : bool, default True\n |          Write row names (index).\n |      na_rep : str, default 'NaN'\n |          Missing data representation.\n |      formatters : list of functions or dict of {{str: function}}, optional\n |          Formatter functions to apply to columns' elements by position or\n |          name. The result of each function must be a unicode string.\n |          List must be of length equal to the number of columns.\n |      float_format : one-parameter function or str, optional, default None\n |          Formatter for floating point numbers. For example\n |          ``float_format=\"%.2f\"`` and ``float_format=\"{{:0.2f}}\".format`` will\n |          both result in 0.1234 being formatted as 0.12.\n |      sparsify : bool, optional\n |          Set to False for a DataFrame with a hierarchical index to print\n |          every multiindex key at each row. By default, the value will be\n |          read from the config module.\n |      index_names : bool, default True\n |          Prints the names of the indexes.\n |      bold_rows : bool, default False\n |          Make the row labels bold in the output.\n |      column_format : str, optional\n |          The columns format as specified in `LaTeX table format\n |          &lt;https://en.wikibooks.org/wiki/LaTeX/Tables&gt;`__ e.g. 'rcl' for 3\n |          columns. By default, 'l' will be used for all columns except\n |          columns of numbers, which default to 'r'.\n |      longtable : bool, optional\n |          Use a longtable environment instead of tabular. Requires\n |          adding a \\usepackage{{longtable}} to your LaTeX preamble.\n |          By default, the value will be read from the pandas config\n |          module, and set to `True` if the option ``styler.latex.environment`` is\n |          `\"longtable\"`.\n |\n |          .. versionchanged:: 2.0.0\n |             The pandas option affecting this argument has changed.\n |      escape : bool, optional\n |          By default, the value will be read from the pandas config\n |          module and set to `True` if the option ``styler.format.escape`` is\n |          `\"latex\"`. When set to False prevents from escaping latex special\n |          characters in column names.\n |\n |          .. versionchanged:: 2.0.0\n |             The pandas option affecting this argument has changed, as has the\n |             default value to `False`.\n |      encoding : str, optional\n |          A string representing the encoding to use in the output file,\n |          defaults to 'utf-8'.\n |      decimal : str, default '.'\n |          Character recognized as decimal separator, e.g. ',' in Europe.\n |      multicolumn : bool, default True\n |          Use \\multicolumn to enhance MultiIndex columns.\n |          The default will be read from the config module, and is set\n |          as the option ``styler.sparse.columns``.\n |\n |          .. versionchanged:: 2.0.0\n |             The pandas option affecting this argument has changed.\n |      multicolumn_format : str, default 'r'\n |          The alignment for multicolumns, similar to `column_format`\n |          The default will be read from the config module, and is set as the option\n |          ``styler.latex.multicol_align``.\n |\n |          .. versionchanged:: 2.0.0\n |             The pandas option affecting this argument has changed, as has the\n |             default value to \"r\".\n |      multirow : bool, default True\n |          Use \\multirow to enhance MultiIndex rows. Requires adding a\n |          \\usepackage{{multirow}} to your LaTeX preamble. Will print\n |          centered labels (instead of top-aligned) across the contained\n |          rows, separating groups via clines. The default will be read\n |          from the pandas config module, and is set as the option\n |          ``styler.sparse.index``.\n |\n |          .. versionchanged:: 2.0.0\n |             The pandas option affecting this argument has changed, as has the\n |             default value to `True`.\n |      caption : str or tuple, optional\n |          Tuple (full_caption, short_caption),\n |          which results in ``\\caption[short_caption]{{full_caption}}``;\n |          if a single string is passed, no short caption will be set.\n |      label : str, optional\n |          The LaTeX label to be placed inside ``\\label{{}}`` in the output.\n |          This is used with ``\\ref{{}}`` in the main ``.tex`` file.\n |\n |      position : str, optional\n |          The LaTeX positional argument for tables, to be placed after\n |          ``\\begin{{}}`` in the output.\n |\n |      Returns\n |      -------\n |      str or None\n |          If buf is None, returns the result as a string. Otherwise returns None.\n |\n |      See Also\n |      --------\n |      io.formats.style.Styler.to_latex : Render a DataFrame to LaTeX\n |          with conditional formatting.\n |      DataFrame.to_string : Render a DataFrame to a console-friendly\n |          tabular output.\n |      DataFrame.to_html : Render a DataFrame as an HTML table.\n |\n |      Notes\n |      -----\n |      As of v2.0.0 this method has changed to use the Styler implementation as\n |      part of :meth:`.Styler.to_latex` via ``jinja2`` templating. This means\n |      that ``jinja2`` is a requirement, and needs to be installed, for this method\n |      to function. It is advised that users switch to using Styler, since that\n |      implementation is more frequently updated and contains much more\n |      flexibility with the output.\n |\n |      Examples\n |      --------\n |      Convert a general DataFrame to LaTeX with formatting:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame(dict(name=['Raphael', 'Donatello'],\n |      ...                        age=[26, 45],\n |      ...                        height=[181.23, 177.65]))\n |      &gt;&gt;&gt; print(df.to_latex(index=False,\n |      ...                   formatters={\"name\": str.upper},\n |      ...                   float_format=\"{:.1f}\".format,\n |      ... ))  # doctest: +SKIP\n |      \\begin{tabular}{lrr}\n |      \\toprule\n |      name & age & height \\\\\n |      \\midrule\n |      RAPHAEL & 26 & 181.2 \\\\\n |      DONATELLO & 45 & 177.7 \\\\\n |      \\bottomrule\n |      \\end{tabular}\n |\n |  to_pickle(self, path: 'FilePath | WriteBuffer[bytes]', *, compression: 'CompressionOptions' = 'infer', protocol: 'int' = 5, storage_options: 'StorageOptions | None' = None) -&gt; 'None'\n |      Pickle (serialize) object to file.\n |\n |      Parameters\n |      ----------\n |      path : str, path object, or file-like object\n |          String, path object (implementing ``os.PathLike[str]``), or file-like\n |          object implementing a binary ``write()`` function. File path where\n |          the pickled object will be stored.\n |      compression : str or dict, default 'infer'\n |          For on-the-fly compression of the output data. If 'infer' and 'path' is\n |          path-like, then detect compression from the following extensions: '.gz',\n |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'\n |          (otherwise no compression).\n |          Set to ``None`` for no compression.\n |          Can also be a dict with key ``'method'`` set\n |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and\n |          other key-value pairs are forwarded to\n |          ``zipfile.ZipFile``, ``gzip.GzipFile``,\n |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or\n |          ``tarfile.TarFile``, respectively.\n |          As an example, the following could be passed for faster compression and to create\n |          a reproducible gzip archive:\n |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.\n |\n |          .. versionadded:: 1.5.0\n |              Added support for `.tar` files.\n |      protocol : int\n |          Int which indicates which protocol should be used by the pickler,\n |          default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible\n |          values are 0, 1, 2, 3, 4, 5. A negative value for the protocol\n |          parameter is equivalent to setting its value to HIGHEST_PROTOCOL.\n |\n |          .. [1] https://docs.python.org/3/library/pickle.html.\n |\n |      storage_options : dict, optional\n |          Extra options that make sense for a particular storage connection, e.g.\n |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n |          are forwarded to ``urllib.request.Request`` as header options. For other\n |          URLs (e.g. starting with \"s3://\", and \"gcs://\") the key-value pairs are\n |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more\n |          details, and for more examples on storage options refer `here\n |          &lt;https://pandas.pydata.org/docs/user_guide/io.html?\n |          highlight=storage_options#reading-writing-remote-files&gt;`_.\n |\n |      See Also\n |      --------\n |      read_pickle : Load pickled pandas object (or any object) from file.\n |      DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n |      DataFrame.to_sql : Write DataFrame to a SQL database.\n |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})  # doctest: +SKIP\n |      &gt;&gt;&gt; original_df  # doctest: +SKIP\n |         foo  bar\n |      0    0    5\n |      1    1    6\n |      2    2    7\n |      3    3    8\n |      4    4    9\n |      &gt;&gt;&gt; original_df.to_pickle(\"./dummy.pkl\")  # doctest: +SKIP\n |\n |      &gt;&gt;&gt; unpickled_df = pd.read_pickle(\"./dummy.pkl\")  # doctest: +SKIP\n |      &gt;&gt;&gt; unpickled_df  # doctest: +SKIP\n |         foo  bar\n |      0    0    5\n |      1    1    6\n |      2    2    7\n |      3    3    8\n |      4    4    9\n |\n |  to_sql(self, name: 'str', con, *, schema: 'str | None' = None, if_exists: \"Literal['fail', 'replace', 'append']\" = 'fail', index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, chunksize: 'int | None' = None, dtype: 'DtypeArg | None' = None, method: \"Literal['multi'] | Callable | None\" = None) -&gt; 'int | None'\n |      Write records stored in a DataFrame to a SQL database.\n |\n |      Databases supported by SQLAlchemy [1]_ are supported. Tables can be\n |      newly created, appended to, or overwritten.\n |\n |      Parameters\n |      ----------\n |      name : str\n |          Name of SQL table.\n |      con : sqlalchemy.engine.(Engine or Connection) or sqlite3.Connection\n |          Using SQLAlchemy makes it possible to use any DB supported by that\n |          library. Legacy support is provided for sqlite3.Connection objects. The user\n |          is responsible for engine disposal and connection closure for the SQLAlchemy\n |          connectable. See `here                 &lt;https://docs.sqlalchemy.org/en/20/core/connections.html&gt;`_.\n |          If passing a sqlalchemy.engine.Connection which is already in a transaction,\n |          the transaction will not be committed.  If passing a sqlite3.Connection,\n |          it will not be possible to roll back the record insertion.\n |\n |      schema : str, optional\n |          Specify the schema (if database flavor supports this). If None, use\n |          default schema.\n |      if_exists : {'fail', 'replace', 'append'}, default 'fail'\n |          How to behave if the table already exists.\n |\n |          * fail: Raise a ValueError.\n |          * replace: Drop the table before inserting new values.\n |          * append: Insert new values to the existing table.\n |\n |      index : bool, default True\n |          Write DataFrame index as a column. Uses `index_label` as the column\n |          name in the table. Creates a table index for this column.\n |      index_label : str or sequence, default None\n |          Column label for index column(s). If None is given (default) and\n |          `index` is True, then the index names are used.\n |          A sequence should be given if the DataFrame uses MultiIndex.\n |      chunksize : int, optional\n |          Specify the number of rows in each batch to be written at a time.\n |          By default, all rows will be written at once.\n |      dtype : dict or scalar, optional\n |          Specifying the datatype for columns. If a dictionary is used, the\n |          keys should be the column names and the values should be the\n |          SQLAlchemy types or strings for the sqlite3 legacy mode. If a\n |          scalar is provided, it will be applied to all columns.\n |      method : {None, 'multi', callable}, optional\n |          Controls the SQL insertion clause used:\n |\n |          * None : Uses standard SQL ``INSERT`` clause (one per row).\n |          * 'multi': Pass multiple values in a single ``INSERT`` clause.\n |          * callable with signature ``(pd_table, conn, keys, data_iter)``.\n |\n |          Details and a sample callable implementation can be found in the\n |          section :ref:`insert method &lt;io.sql.method&gt;`.\n |\n |      Returns\n |      -------\n |      None or int\n |          Number of rows affected by to_sql. None is returned if the callable\n |          passed into ``method`` does not return an integer number of rows.\n |\n |          The number of returned rows affected is the sum of the ``rowcount``\n |          attribute of ``sqlite3.Cursor`` or SQLAlchemy connectable which may not\n |          reflect the exact number of written rows as stipulated in the\n |          `sqlite3 &lt;https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount&gt;`__ or\n |          `SQLAlchemy &lt;https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.CursorResult.rowcount&gt;`__.\n |\n |          .. versionadded:: 1.4.0\n |\n |      Raises\n |      ------\n |      ValueError\n |          When the table already exists and `if_exists` is 'fail' (the\n |          default).\n |\n |      See Also\n |      --------\n |      read_sql : Read a DataFrame from a table.\n |\n |      Notes\n |      -----\n |      Timezone aware datetime columns will be written as\n |      ``Timestamp with timezone`` type with SQLAlchemy if supported by the\n |      database. Otherwise, the datetimes will be stored as timezone unaware\n |      timestamps local to the original timezone.\n |\n |      Not all datastores support ``method=\"multi\"``. Oracle, for example,\n |      does not support multi-value insert.\n |\n |      References\n |      ----------\n |      .. [1] https://docs.sqlalchemy.org\n |      .. [2] https://www.python.org/dev/peps/pep-0249/\n |\n |      Examples\n |      --------\n |      Create an in-memory SQLite database.\n |\n |      &gt;&gt;&gt; from sqlalchemy import create_engine\n |      &gt;&gt;&gt; engine = create_engine('sqlite://', echo=False)\n |\n |      Create a table from scratch with 3 rows.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})\n |      &gt;&gt;&gt; df\n |           name\n |      0  User 1\n |      1  User 2\n |      2  User 3\n |\n |      &gt;&gt;&gt; df.to_sql(name='users', con=engine)\n |      3\n |      &gt;&gt;&gt; from sqlalchemy import text\n |      &gt;&gt;&gt; with engine.connect() as conn:\n |      ...    conn.execute(text(\"SELECT * FROM users\")).fetchall()\n |      [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]\n |\n |      An `sqlalchemy.engine.Connection` can also be passed to `con`:\n |\n |      &gt;&gt;&gt; with engine.begin() as connection:\n |      ...     df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})\n |      ...     df1.to_sql(name='users', con=connection, if_exists='append')\n |      2\n |\n |      This is allowed to support operations that require that the same\n |      DBAPI connection is used for the entire operation.\n |\n |      &gt;&gt;&gt; df2 = pd.DataFrame({'name' : ['User 6', 'User 7']})\n |      &gt;&gt;&gt; df2.to_sql(name='users', con=engine, if_exists='append')\n |      2\n |      &gt;&gt;&gt; with engine.connect() as conn:\n |      ...    conn.execute(text(\"SELECT * FROM users\")).fetchall()\n |      [(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),\n |       (0, 'User 4'), (1, 'User 5'), (0, 'User 6'),\n |       (1, 'User 7')]\n |\n |      Overwrite the table with just ``df2``.\n |\n |      &gt;&gt;&gt; df2.to_sql(name='users', con=engine, if_exists='replace',\n |      ...            index_label='id')\n |      2\n |      &gt;&gt;&gt; with engine.connect() as conn:\n |      ...    conn.execute(text(\"SELECT * FROM users\")).fetchall()\n |      [(0, 'User 6'), (1, 'User 7')]\n |\n |      Use ``method`` to define a callable insertion method to do nothing\n |      if there's a primary key conflict on a table in a PostgreSQL database.\n |\n |      &gt;&gt;&gt; from sqlalchemy.dialects.postgresql import insert\n |      &gt;&gt;&gt; def insert_on_conflict_nothing(table, conn, keys, data_iter):\n |      ...     # \"a\" is the primary key in \"conflict_table\"\n |      ...     data = [dict(zip(keys, row)) for row in data_iter]\n |      ...     stmt = insert(table.table).values(data).on_conflict_do_nothing(index_elements=[\"a\"])\n |      ...     result = conn.execute(stmt)\n |      ...     return result.rowcount\n |      &gt;&gt;&gt; df_conflict.to_sql(name=\"conflict_table\", con=conn, if_exists=\"append\", method=insert_on_conflict_nothing)  # doctest: +SKIP\n |      0\n |\n |      For MySQL, a callable to update columns ``b`` and ``c`` if there's a conflict\n |      on a primary key.\n |\n |      &gt;&gt;&gt; from sqlalchemy.dialects.mysql import insert\n |      &gt;&gt;&gt; def insert_on_conflict_update(table, conn, keys, data_iter):\n |      ...     # update columns \"b\" and \"c\" on primary key conflict\n |      ...     data = [dict(zip(keys, row)) for row in data_iter]\n |      ...     stmt = (\n |      ...         insert(table.table)\n |      ...         .values(data)\n |      ...     )\n |      ...     stmt = stmt.on_duplicate_key_update(b=stmt.inserted.b, c=stmt.inserted.c)\n |      ...     result = conn.execute(stmt)\n |      ...     return result.rowcount\n |      &gt;&gt;&gt; df_conflict.to_sql(name=\"conflict_table\", con=conn, if_exists=\"append\", method=insert_on_conflict_update)  # doctest: +SKIP\n |      2\n |\n |      Specify the dtype (especially useful for integers with missing values).\n |      Notice that while pandas is forced to store the data as floating point,\n |      the database supports nullable integers. When fetching the data with\n |      Python, we get back integer scalars.\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [1, None, 2]})\n |      &gt;&gt;&gt; df\n |           A\n |      0  1.0\n |      1  NaN\n |      2  2.0\n |\n |      &gt;&gt;&gt; from sqlalchemy.types import Integer\n |      &gt;&gt;&gt; df.to_sql(name='integers', con=engine, index=False,\n |      ...           dtype={\"A\": Integer()})\n |      3\n |\n |      &gt;&gt;&gt; with engine.connect() as conn:\n |      ...   conn.execute(text(\"SELECT * FROM integers\")).fetchall()\n |      [(1,), (None,), (2,)]\n |\n |  to_xarray(self)\n |      Return an xarray object from the pandas object.\n |\n |      Returns\n |      -------\n |      xarray.DataArray or xarray.Dataset\n |          Data in the pandas structure converted to Dataset if the object is\n |          a DataFrame, or a DataArray if the object is a Series.\n |\n |      See Also\n |      --------\n |      DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n |\n |      Notes\n |      -----\n |      See the `xarray docs &lt;https://xarray.pydata.org/en/stable/&gt;`__\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([('falcon', 'bird', 389.0, 2),\n |      ...                    ('parrot', 'bird', 24.0, 2),\n |      ...                    ('lion', 'mammal', 80.5, 4),\n |      ...                    ('monkey', 'mammal', np.nan, 4)],\n |      ...                   columns=['name', 'class', 'max_speed',\n |      ...                            'num_legs'])\n |      &gt;&gt;&gt; df\n |           name   class  max_speed  num_legs\n |      0  falcon    bird      389.0         2\n |      1  parrot    bird       24.0         2\n |      2    lion  mammal       80.5         4\n |      3  monkey  mammal        NaN         4\n |\n |      &gt;&gt;&gt; df.to_xarray()  # doctest: +SKIP\n |      &lt;xarray.Dataset&gt;\n |      Dimensions:    (index: 4)\n |      Coordinates:\n |        * index      (index) int64 32B 0 1 2 3\n |      Data variables:\n |          name       (index) object 32B 'falcon' 'parrot' 'lion' 'monkey'\n |          class      (index) object 32B 'bird' 'bird' 'mammal' 'mammal'\n |          max_speed  (index) float64 32B 389.0 24.0 80.5 nan\n |          num_legs   (index) int64 32B 2 2 4 4\n |\n |      &gt;&gt;&gt; df['max_speed'].to_xarray()  # doctest: +SKIP\n |      &lt;xarray.DataArray 'max_speed' (index: 4)&gt;\n |      array([389. ,  24. ,  80.5,   nan])\n |      Coordinates:\n |        * index    (index) int64 0 1 2 3\n |\n |      &gt;&gt;&gt; dates = pd.to_datetime(['2018-01-01', '2018-01-01',\n |      ...                         '2018-01-02', '2018-01-02'])\n |      &gt;&gt;&gt; df_multiindex = pd.DataFrame({'date': dates,\n |      ...                               'animal': ['falcon', 'parrot',\n |      ...                                          'falcon', 'parrot'],\n |      ...                               'speed': [350, 18, 361, 15]})\n |      &gt;&gt;&gt; df_multiindex = df_multiindex.set_index(['date', 'animal'])\n |\n |      &gt;&gt;&gt; df_multiindex\n |                         speed\n |      date       animal\n |      2018-01-01 falcon    350\n |                 parrot     18\n |      2018-01-02 falcon    361\n |                 parrot     15\n |\n |      &gt;&gt;&gt; df_multiindex.to_xarray()  # doctest: +SKIP\n |      &lt;xarray.Dataset&gt;\n |      Dimensions:  (date: 2, animal: 2)\n |      Coordinates:\n |        * date     (date) datetime64[ns] 2018-01-01 2018-01-02\n |        * animal   (animal) object 'falcon' 'parrot'\n |      Data variables:\n |          speed    (date, animal) int64 350 18 361 15\n |\n |  truncate(self, before=None, after=None, axis: 'Axis | None' = None, copy: 'bool_t | None' = None) -&gt; 'Self'\n |      Truncate a Series or DataFrame before and after some index value.\n |\n |      This is a useful shorthand for boolean indexing based on index\n |      values above or below certain thresholds.\n |\n |      Parameters\n |      ----------\n |      before : date, str, int\n |          Truncate all rows before this index value.\n |      after : date, str, int\n |          Truncate all rows after this index value.\n |      axis : {0 or 'index', 1 or 'columns'}, optional\n |          Axis to truncate. Truncates the index (rows) by default.\n |          For `Series` this parameter is unused and defaults to 0.\n |      copy : bool, default is True,\n |          Return a copy of the truncated section.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Returns\n |      -------\n |      type of caller\n |          The truncated Series or DataFrame.\n |\n |      See Also\n |      --------\n |      DataFrame.loc : Select a subset of a DataFrame by label.\n |      DataFrame.iloc : Select a subset of a DataFrame by position.\n |\n |      Notes\n |      -----\n |      If the index being truncated contains only datetime values,\n |      `before` and `after` may be specified as strings instead of\n |      Timestamps.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n |      ...                    'B': ['f', 'g', 'h', 'i', 'j'],\n |      ...                    'C': ['k', 'l', 'm', 'n', 'o']},\n |      ...                   index=[1, 2, 3, 4, 5])\n |      &gt;&gt;&gt; df\n |         A  B  C\n |      1  a  f  k\n |      2  b  g  l\n |      3  c  h  m\n |      4  d  i  n\n |      5  e  j  o\n |\n |      &gt;&gt;&gt; df.truncate(before=2, after=4)\n |         A  B  C\n |      2  b  g  l\n |      3  c  h  m\n |      4  d  i  n\n |\n |      The columns of a DataFrame can be truncated.\n |\n |      &gt;&gt;&gt; df.truncate(before=\"A\", after=\"B\", axis=\"columns\")\n |         A  B\n |      1  a  f\n |      2  b  g\n |      3  c  h\n |      4  d  i\n |      5  e  j\n |\n |      For Series, only rows can be truncated.\n |\n |      &gt;&gt;&gt; df['A'].truncate(before=2, after=4)\n |      2    b\n |      3    c\n |      4    d\n |      Name: A, dtype: object\n |\n |      The index values in ``truncate`` can be datetimes or string\n |      dates.\n |\n |      &gt;&gt;&gt; dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')\n |      &gt;&gt;&gt; df = pd.DataFrame(index=dates, data={'A': 1})\n |      &gt;&gt;&gt; df.tail()\n |                           A\n |      2016-01-31 23:59:56  1\n |      2016-01-31 23:59:57  1\n |      2016-01-31 23:59:58  1\n |      2016-01-31 23:59:59  1\n |      2016-02-01 00:00:00  1\n |\n |      &gt;&gt;&gt; df.truncate(before=pd.Timestamp('2016-01-05'),\n |      ...             after=pd.Timestamp('2016-01-10')).tail()\n |                           A\n |      2016-01-09 23:59:56  1\n |      2016-01-09 23:59:57  1\n |      2016-01-09 23:59:58  1\n |      2016-01-09 23:59:59  1\n |      2016-01-10 00:00:00  1\n |\n |      Because the index is a DatetimeIndex containing only dates, we can\n |      specify `before` and `after` as strings. They will be coerced to\n |      Timestamps before truncation.\n |\n |      &gt;&gt;&gt; df.truncate('2016-01-05', '2016-01-10').tail()\n |                           A\n |      2016-01-09 23:59:56  1\n |      2016-01-09 23:59:57  1\n |      2016-01-09 23:59:58  1\n |      2016-01-09 23:59:59  1\n |      2016-01-10 00:00:00  1\n |\n |      Note that ``truncate`` assumes a 0 value for any unspecified time\n |      component (midnight). This differs from partial string slicing, which\n |      returns any partially matching dates.\n |\n |      &gt;&gt;&gt; df.loc['2016-01-05':'2016-01-10', :].tail()\n |                           A\n |      2016-01-10 23:59:55  1\n |      2016-01-10 23:59:56  1\n |      2016-01-10 23:59:57  1\n |      2016-01-10 23:59:58  1\n |      2016-01-10 23:59:59  1\n |\n |  tz_convert(self, tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None) -&gt; 'Self'\n |      Convert tz-aware axis to target time zone.\n |\n |      Parameters\n |      ----------\n |      tz : str or tzinfo object or None\n |          Target time zone. Passing ``None`` will convert to\n |          UTC and remove the timezone information.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis to convert\n |      level : int, str, default None\n |          If axis is a MultiIndex, convert a specific level. Otherwise\n |          must be None.\n |      copy : bool, default True\n |          Also make a copy of the underlying data.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |\n |      Returns\n |      -------\n |      Series/DataFrame\n |          Object with time zone converted axis.\n |\n |      Raises\n |      ------\n |      TypeError\n |          If the axis is tz-naive.\n |\n |      Examples\n |      --------\n |      Change to another time zone:\n |\n |      &gt;&gt;&gt; s = pd.Series(\n |      ...     [1],\n |      ...     index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']),\n |      ... )\n |      &gt;&gt;&gt; s.tz_convert('Asia/Shanghai')\n |      2018-09-15 07:30:00+08:00    1\n |      dtype: int64\n |\n |      Pass None to convert to UTC and get a tz-naive index:\n |\n |      &gt;&gt;&gt; s = pd.Series([1],\n |      ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))\n |      &gt;&gt;&gt; s.tz_convert(None)\n |      2018-09-14 23:30:00    1\n |      dtype: int64\n |\n |  tz_localize(self, tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None, ambiguous: 'TimeAmbiguous' = 'raise', nonexistent: 'TimeNonexistent' = 'raise') -&gt; 'Self'\n |      Localize tz-naive index of a Series or DataFrame to target time zone.\n |\n |      This operation localizes the Index. To localize the values in a\n |      timezone-naive Series, use :meth:`Series.dt.tz_localize`.\n |\n |      Parameters\n |      ----------\n |      tz : str or tzinfo or None\n |          Time zone to localize. Passing ``None`` will remove the\n |          time zone information and preserve local time.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          The axis to localize\n |      level : int, str, default None\n |          If axis ia a MultiIndex, localize a specific level. Otherwise\n |          must be None.\n |      copy : bool, default True\n |          Also make a copy of the underlying data.\n |\n |          .. note::\n |              The `copy` keyword will change behavior in pandas 3.0.\n |              `Copy-on-Write\n |              &lt;https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html&gt;`__\n |              will be enabled by default, which means that all methods with a\n |              `copy` keyword will use a lazy copy mechanism to defer the copy and\n |              ignore the `copy` keyword. The `copy` keyword will be removed in a\n |              future version of pandas.\n |\n |              You can already get the future behavior and improvements through\n |              enabling copy on write ``pd.options.mode.copy_on_write = True``\n |      ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n |          When clocks moved backward due to DST, ambiguous times may arise.\n |          For example in Central European Time (UTC+01), when going from\n |          03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n |          00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n |          `ambiguous` parameter dictates how ambiguous times should be\n |          handled.\n |\n |          - 'infer' will attempt to infer fall dst-transition hours based on\n |            order\n |          - bool-ndarray where True signifies a DST time, False designates\n |            a non-DST time (note that this flag is only applicable for\n |            ambiguous times)\n |          - 'NaT' will return NaT where there are ambiguous times\n |          - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n |            times.\n |      nonexistent : str, default 'raise'\n |          A nonexistent time does not exist in a particular timezone\n |          where clocks moved forward due to DST. Valid values are:\n |\n |          - 'shift_forward' will shift the nonexistent time forward to the\n |            closest existing time\n |          - 'shift_backward' will shift the nonexistent time backward to the\n |            closest existing time\n |          - 'NaT' will return NaT where there are nonexistent times\n |          - timedelta objects will shift nonexistent times by the timedelta\n |          - 'raise' will raise an NonExistentTimeError if there are\n |            nonexistent times.\n |\n |      Returns\n |      -------\n |      Series/DataFrame\n |          Same type as the input.\n |\n |      Raises\n |      ------\n |      TypeError\n |          If the TimeSeries is tz-aware and tz is not None.\n |\n |      Examples\n |      --------\n |      Localize local times:\n |\n |      &gt;&gt;&gt; s = pd.Series(\n |      ...     [1],\n |      ...     index=pd.DatetimeIndex(['2018-09-15 01:30:00']),\n |      ... )\n |      &gt;&gt;&gt; s.tz_localize('CET')\n |      2018-09-15 01:30:00+02:00    1\n |      dtype: int64\n |\n |      Pass None to convert to tz-naive index and preserve local time:\n |\n |      &gt;&gt;&gt; s = pd.Series([1],\n |      ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))\n |      &gt;&gt;&gt; s.tz_localize(None)\n |      2018-09-15 01:30:00    1\n |      dtype: int64\n |\n |      Be careful with DST changes. When there is sequential data, pandas\n |      can infer the DST time:\n |\n |      &gt;&gt;&gt; s = pd.Series(range(7),\n |      ...               index=pd.DatetimeIndex(['2018-10-28 01:30:00',\n |      ...                                       '2018-10-28 02:00:00',\n |      ...                                       '2018-10-28 02:30:00',\n |      ...                                       '2018-10-28 02:00:00',\n |      ...                                       '2018-10-28 02:30:00',\n |      ...                                       '2018-10-28 03:00:00',\n |      ...                                       '2018-10-28 03:30:00']))\n |      &gt;&gt;&gt; s.tz_localize('CET', ambiguous='infer')\n |      2018-10-28 01:30:00+02:00    0\n |      2018-10-28 02:00:00+02:00    1\n |      2018-10-28 02:30:00+02:00    2\n |      2018-10-28 02:00:00+01:00    3\n |      2018-10-28 02:30:00+01:00    4\n |      2018-10-28 03:00:00+01:00    5\n |      2018-10-28 03:30:00+01:00    6\n |      dtype: int64\n |\n |      In some cases, inferring the DST is impossible. In such cases, you can\n |      pass an ndarray to the ambiguous parameter to set the DST explicitly\n |\n |      &gt;&gt;&gt; s = pd.Series(range(3),\n |      ...               index=pd.DatetimeIndex(['2018-10-28 01:20:00',\n |      ...                                       '2018-10-28 02:36:00',\n |      ...                                       '2018-10-28 03:46:00']))\n |      &gt;&gt;&gt; s.tz_localize('CET', ambiguous=np.array([True, True, False]))\n |      2018-10-28 01:20:00+02:00    0\n |      2018-10-28 02:36:00+02:00    1\n |      2018-10-28 03:46:00+01:00    2\n |      dtype: int64\n |\n |      If the DST transition causes nonexistent times, you can shift these\n |      dates forward or backward with a timedelta object or `'shift_forward'`\n |      or `'shift_backward'`.\n |\n |      &gt;&gt;&gt; s = pd.Series(range(2),\n |      ...               index=pd.DatetimeIndex(['2015-03-29 02:30:00',\n |      ...                                       '2015-03-29 03:30:00']))\n |      &gt;&gt;&gt; s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n |      2015-03-29 03:00:00+02:00    0\n |      2015-03-29 03:30:00+02:00    1\n |      dtype: int64\n |      &gt;&gt;&gt; s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n |      2015-03-29 01:59:59.999999999+01:00    0\n |      2015-03-29 03:30:00+02:00              1\n |      dtype: int64\n |      &gt;&gt;&gt; s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1h'))\n |      2015-03-29 03:30:00+02:00    0\n |      2015-03-29 03:30:00+02:00    1\n |      dtype: int64\n |\n |  where(self, cond, other=nan, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -&gt; 'Self | None'\n |      Replace values where the condition is False.\n |\n |      Parameters\n |      ----------\n |      cond : bool Series/DataFrame, array-like, or callable\n |          Where `cond` is True, keep the original value. Where\n |          False, replace with corresponding value from `other`.\n |          If `cond` is callable, it is computed on the Series/DataFrame and\n |          should return boolean Series/DataFrame or array. The callable must\n |          not change input Series/DataFrame (though pandas doesn't check it).\n |      other : scalar, Series/DataFrame, or callable\n |          Entries where `cond` is False are replaced with\n |          corresponding value from `other`.\n |          If other is callable, it is computed on the Series/DataFrame and\n |          should return scalar or Series/DataFrame. The callable must not\n |          change input Series/DataFrame (though pandas doesn't check it).\n |          If not specified, entries will be filled with the corresponding\n |          NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension\n |          dtypes).\n |      inplace : bool, default False\n |          Whether to perform the operation in place on the data.\n |      axis : int, default None\n |          Alignment axis if needed. For `Series` this parameter is\n |          unused and defaults to 0.\n |      level : int, default None\n |          Alignment level if needed.\n |\n |      Returns\n |      -------\n |      Same type as caller or None if ``inplace=True``.\n |\n |      See Also\n |      --------\n |      :func:`DataFrame.mask` : Return an object of same shape as\n |          self.\n |\n |      Notes\n |      -----\n |      The where method is an application of the if-then idiom. For each\n |      element in the calling DataFrame, if ``cond`` is ``True`` the\n |      element is used; otherwise the corresponding element from the DataFrame\n |      ``other`` is used. If the axis of ``other`` does not align with axis of\n |      ``cond`` Series/DataFrame, the misaligned index positions will be filled with\n |      False.\n |\n |      The signature for :func:`DataFrame.where` differs from\n |      :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n |      ``np.where(m, df1, df2)``.\n |\n |      For further details and examples see the ``where`` documentation in\n |      :ref:`indexing &lt;indexing.where_mask&gt;`.\n |\n |      The dtype of the object takes precedence. The fill value is casted to\n |      the object's dtype, if this can be done losslessly.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series(range(5))\n |      &gt;&gt;&gt; s.where(s &gt; 0)\n |      0    NaN\n |      1    1.0\n |      2    2.0\n |      3    3.0\n |      4    4.0\n |      dtype: float64\n |      &gt;&gt;&gt; s.mask(s &gt; 0)\n |      0    0.0\n |      1    NaN\n |      2    NaN\n |      3    NaN\n |      4    NaN\n |      dtype: float64\n |\n |      &gt;&gt;&gt; s = pd.Series(range(5))\n |      &gt;&gt;&gt; t = pd.Series([True, False])\n |      &gt;&gt;&gt; s.where(t, 99)\n |      0     0\n |      1    99\n |      2    99\n |      3    99\n |      4    99\n |      dtype: int64\n |      &gt;&gt;&gt; s.mask(t, 99)\n |      0    99\n |      1     1\n |      2    99\n |      3    99\n |      4    99\n |      dtype: int64\n |\n |      &gt;&gt;&gt; s.where(s &gt; 1, 10)\n |      0    10\n |      1    10\n |      2    2\n |      3    3\n |      4    4\n |      dtype: int64\n |      &gt;&gt;&gt; s.mask(s &gt; 1, 10)\n |      0     0\n |      1     1\n |      2    10\n |      3    10\n |      4    10\n |      dtype: int64\n |\n |      &gt;&gt;&gt; df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n |      &gt;&gt;&gt; df\n |         A  B\n |      0  0  1\n |      1  2  3\n |      2  4  5\n |      3  6  7\n |      4  8  9\n |      &gt;&gt;&gt; m = df % 3 == 0\n |      &gt;&gt;&gt; df.where(m, -df)\n |         A  B\n |      0  0 -1\n |      1 -2  3\n |      2 -4 -5\n |      3  6 -7\n |      4 -8  9\n |      &gt;&gt;&gt; df.where(m, -df) == np.where(m, df, -df)\n |            A     B\n |      0  True  True\n |      1  True  True\n |      2  True  True\n |      3  True  True\n |      4  True  True\n |      &gt;&gt;&gt; df.where(m, -df) == df.mask(~m, -df)\n |            A     B\n |      0  True  True\n |      1  True  True\n |      2  True  True\n |      3  True  True\n |      4  True  True\n |\n |  xs(self, key: 'IndexLabel', axis: 'Axis' = 0, level: 'IndexLabel | None' = None, drop_level: 'bool_t' = True) -&gt; 'Self'\n |      Return cross-section from the Series/DataFrame.\n |\n |      This method takes a `key` argument to select data at a particular\n |      level of a MultiIndex.\n |\n |      Parameters\n |      ----------\n |      key : label or tuple of label\n |          Label contained in the index, or partially in a MultiIndex.\n |      axis : {0 or 'index', 1 or 'columns'}, default 0\n |          Axis to retrieve cross-section on.\n |      level : object, defaults to first n levels (n=1 or len(key))\n |          In case of a key partially contained in a MultiIndex, indicate\n |          which levels are used. Levels can be referred by label or position.\n |      drop_level : bool, default True\n |          If False, returns object with same levels as self.\n |\n |      Returns\n |      -------\n |      Series or DataFrame\n |          Cross-section from the original Series or DataFrame\n |          corresponding to the selected index levels.\n |\n |      See Also\n |      --------\n |      DataFrame.loc : Access a group of rows and columns\n |          by label(s) or a boolean array.\n |      DataFrame.iloc : Purely integer-location based indexing\n |          for selection by position.\n |\n |      Notes\n |      -----\n |      `xs` can not be used to set values.\n |\n |      MultiIndex Slicers is a generic way to get/set values on\n |      any level or levels.\n |      It is a superset of `xs` functionality, see\n |      :ref:`MultiIndex Slicers &lt;advanced.mi_slicers&gt;`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; d = {'num_legs': [4, 4, 2, 2],\n |      ...      'num_wings': [0, 0, 2, 2],\n |      ...      'class': ['mammal', 'mammal', 'mammal', 'bird'],\n |      ...      'animal': ['cat', 'dog', 'bat', 'penguin'],\n |      ...      'locomotion': ['walks', 'walks', 'flies', 'walks']}\n |      &gt;&gt;&gt; df = pd.DataFrame(data=d)\n |      &gt;&gt;&gt; df = df.set_index(['class', 'animal', 'locomotion'])\n |      &gt;&gt;&gt; df\n |                                 num_legs  num_wings\n |      class  animal  locomotion\n |      mammal cat     walks              4          0\n |             dog     walks              4          0\n |             bat     flies              2          2\n |      bird   penguin walks              2          2\n |\n |      Get values at specified index\n |\n |      &gt;&gt;&gt; df.xs('mammal')\n |                         num_legs  num_wings\n |      animal locomotion\n |      cat    walks              4          0\n |      dog    walks              4          0\n |      bat    flies              2          2\n |\n |      Get values at several indexes\n |\n |      &gt;&gt;&gt; df.xs(('mammal', 'dog', 'walks'))\n |      num_legs     4\n |      num_wings    0\n |      Name: (mammal, dog, walks), dtype: int64\n |\n |      Get values at specified index and level\n |\n |      &gt;&gt;&gt; df.xs('cat', level=1)\n |                         num_legs  num_wings\n |      class  locomotion\n |      mammal walks              4          0\n |\n |      Get values at several indexes and levels\n |\n |      &gt;&gt;&gt; df.xs(('bird', 'walks'),\n |      ...       level=[0, 'locomotion'])\n |               num_legs  num_wings\n |      animal\n |      penguin         2          2\n |\n |      Get values at specified column and axis\n |\n |      &gt;&gt;&gt; df.xs('num_wings', axis=1)\n |      class   animal   locomotion\n |      mammal  cat      walks         0\n |              dog      walks         0\n |              bat      flies         2\n |      bird    penguin  walks         2\n |      Name: num_wings, dtype: int64\n |\n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from pandas.core.generic.NDFrame:\n |\n |  dtypes\n |      Return the dtypes in the DataFrame.\n |\n |      This returns a Series with the data type of each column.\n |      The result's index is the original DataFrame's columns. Columns\n |      with mixed types are stored with the ``object`` dtype. See\n |      :ref:`the User Guide &lt;basics.dtypes&gt;` for more.\n |\n |      Returns\n |      -------\n |      pandas.Series\n |          The data type of each column.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'float': [1.0],\n |      ...                    'int': [1],\n |      ...                    'datetime': [pd.Timestamp('20180310')],\n |      ...                    'string': ['foo']})\n |      &gt;&gt;&gt; df.dtypes\n |      float              float64\n |      int                  int64\n |      datetime    datetime64[ns]\n |      string              object\n |      dtype: object\n |\n |  empty\n |      Indicator whether Series/DataFrame is empty.\n |\n |      True if Series/DataFrame is entirely empty (no items), meaning any of the\n |      axes are of length 0.\n |\n |      Returns\n |      -------\n |      bool\n |          If Series/DataFrame is empty, return True, if not return False.\n |\n |      See Also\n |      --------\n |      Series.dropna : Return series without null values.\n |      DataFrame.dropna : Return DataFrame with labels on given axis omitted\n |          where (all or any) data are missing.\n |\n |      Notes\n |      -----\n |      If Series/DataFrame contains only NaNs, it is still not considered empty. See\n |      the example below.\n |\n |      Examples\n |      --------\n |      An example of an actual empty DataFrame. Notice the index is empty:\n |\n |      &gt;&gt;&gt; df_empty = pd.DataFrame({'A' : []})\n |      &gt;&gt;&gt; df_empty\n |      Empty DataFrame\n |      Columns: [A]\n |      Index: []\n |      &gt;&gt;&gt; df_empty.empty\n |      True\n |\n |      If we only have NaNs in our DataFrame, it is not considered empty! We\n |      will need to drop the NaNs to make the DataFrame empty:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A' : [np.nan]})\n |      &gt;&gt;&gt; df\n |          A\n |      0 NaN\n |      &gt;&gt;&gt; df.empty\n |      False\n |      &gt;&gt;&gt; df.dropna().empty\n |      True\n |\n |      &gt;&gt;&gt; ser_empty = pd.Series({'A' : []})\n |      &gt;&gt;&gt; ser_empty\n |      A    []\n |      dtype: object\n |      &gt;&gt;&gt; ser_empty.empty\n |      False\n |      &gt;&gt;&gt; ser_empty = pd.Series()\n |      &gt;&gt;&gt; ser_empty.empty\n |      True\n |\n |  flags\n |      Get the properties associated with this pandas object.\n |\n |      The available flags are\n |\n |      * :attr:`Flags.allows_duplicate_labels`\n |\n |      See Also\n |      --------\n |      Flags : Flags that apply to pandas objects.\n |      DataFrame.attrs : Global metadata applying to this dataset.\n |\n |      Notes\n |      -----\n |      \"Flags\" differ from \"metadata\". Flags reflect properties of the\n |      pandas object (the Series or DataFrame). Metadata refer to properties\n |      of the dataset, and should be stored in :attr:`DataFrame.attrs`.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({\"A\": [1, 2]})\n |      &gt;&gt;&gt; df.flags\n |      &lt;Flags(allows_duplicate_labels=True)&gt;\n |\n |      Flags can be get or set using ``.``\n |\n |      &gt;&gt;&gt; df.flags.allows_duplicate_labels\n |      True\n |      &gt;&gt;&gt; df.flags.allows_duplicate_labels = False\n |\n |      Or by slicing with a key\n |\n |      &gt;&gt;&gt; df.flags[\"allows_duplicate_labels\"]\n |      False\n |      &gt;&gt;&gt; df.flags[\"allows_duplicate_labels\"] = True\n |\n |  ndim\n |      Return an int representing the number of axes / array dimensions.\n |\n |      Return 1 if Series. Otherwise return 2 if DataFrame.\n |\n |      See Also\n |      --------\n |      ndarray.ndim : Number of array dimensions.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n |      &gt;&gt;&gt; s.ndim\n |      1\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n |      &gt;&gt;&gt; df.ndim\n |      2\n |\n |  size\n |      Return an int representing the number of elements in this object.\n |\n |      Return the number of rows if Series. Otherwise return the number of\n |      rows times number of columns if DataFrame.\n |\n |      See Also\n |      --------\n |      ndarray.size : Number of elements in the array.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n |      &gt;&gt;&gt; s.size\n |      3\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n |      &gt;&gt;&gt; df.size\n |      4\n |\n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from pandas.core.generic.NDFrame:\n |\n |  attrs\n |      Dictionary of global attributes of this dataset.\n |\n |      .. warning::\n |\n |         attrs is experimental and may change without warning.\n |\n |      See Also\n |      --------\n |      DataFrame.flags : Global flags applying to this object.\n |\n |      Notes\n |      -----\n |      Many operations that create new datasets will copy ``attrs``. Copies\n |      are always deep so that changing ``attrs`` will only affect the\n |      present dataset. ``pandas.concat`` copies ``attrs`` only if all input\n |      datasets have the same ``attrs``.\n |\n |      Examples\n |      --------\n |      For Series:\n |\n |      &gt;&gt;&gt; ser = pd.Series([1, 2, 3])\n |      &gt;&gt;&gt; ser.attrs = {\"A\": [10, 20, 30]}\n |      &gt;&gt;&gt; ser.attrs\n |      {'A': [10, 20, 30]}\n |\n |      For DataFrame:\n |\n |      &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\n |      &gt;&gt;&gt; df.attrs = {\"A\": [10, 20, 30]}\n |      &gt;&gt;&gt; df.attrs\n |      {'A': [10, 20, 30]}\n |\n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from pandas.core.generic.NDFrame:\n |\n |  __array_priority__ = 1000\n |\n |  ----------------------------------------------------------------------\n |  Methods inherited from pandas.core.base.PandasObject:\n |\n |  __sizeof__(self) -&gt; 'int'\n |      Generates the total memory usage for an object that returns\n |      either a value or Series of values\n |\n |  ----------------------------------------------------------------------\n |  Methods inherited from pandas.core.accessor.DirNamesMixin:\n |\n |  __dir__(self) -&gt; 'list[str]'\n |      Provide method name lookup and completion.\n |\n |      Notes\n |      -----\n |      Only provide 'public' methods.\n |\n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from pandas.core.accessor.DirNamesMixin:\n |\n |  __dict__\n |      dictionary for instance variables\n |\n |  __weakref__\n |      list of weak references to the object\n |\n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from pandas.core.indexing.IndexingMixin:\n |\n |  at\n |      Access a single value for a row/column label pair.\n |\n |      Similar to ``loc``, in that both provide label-based lookups. Use\n |      ``at`` if you only need to get or set a single value in a DataFrame\n |      or Series.\n |\n |      Raises\n |      ------\n |      KeyError\n |          If getting a value and 'label' does not exist in a DataFrame or Series.\n |\n |      ValueError\n |          If row/column label pair is not a tuple or if any label\n |          from the pair is not a scalar for DataFrame.\n |          If label is list-like (*excluding* NamedTuple) for Series.\n |\n |      See Also\n |      --------\n |      DataFrame.at : Access a single value for a row/column pair by label.\n |      DataFrame.iat : Access a single value for a row/column pair by integer\n |          position.\n |      DataFrame.loc : Access a group of rows and columns by label(s).\n |      DataFrame.iloc : Access a group of rows and columns by integer\n |          position(s).\n |      Series.at : Access a single value by label.\n |      Series.iat : Access a single value by integer position.\n |      Series.loc : Access a group of rows by label(s).\n |      Series.iloc : Access a group of rows by integer position(s).\n |\n |      Notes\n |      -----\n |      See :ref:`Fast scalar value getting and setting &lt;indexing.basics.get_value&gt;`\n |      for more details.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n |      ...                   index=[4, 5, 6], columns=['A', 'B', 'C'])\n |      &gt;&gt;&gt; df\n |          A   B   C\n |      4   0   2   3\n |      5   0   4   1\n |      6  10  20  30\n |\n |      Get value at specified row/column pair\n |\n |      &gt;&gt;&gt; df.at[4, 'B']\n |      2\n |\n |      Set value at specified row/column pair\n |\n |      &gt;&gt;&gt; df.at[4, 'B'] = 10\n |      &gt;&gt;&gt; df.at[4, 'B']\n |      10\n |\n |      Get value within a Series\n |\n |      &gt;&gt;&gt; df.loc[5].at['B']\n |      4\n |\n |  iat\n |      Access a single value for a row/column pair by integer position.\n |\n |      Similar to ``iloc``, in that both provide integer-based lookups. Use\n |      ``iat`` if you only need to get or set a single value in a DataFrame\n |      or Series.\n |\n |      Raises\n |      ------\n |      IndexError\n |          When integer position is out of bounds.\n |\n |      See Also\n |      --------\n |      DataFrame.at : Access a single value for a row/column label pair.\n |      DataFrame.loc : Access a group of rows and columns by label(s).\n |      DataFrame.iloc : Access a group of rows and columns by integer position(s).\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n |      ...                   columns=['A', 'B', 'C'])\n |      &gt;&gt;&gt; df\n |          A   B   C\n |      0   0   2   3\n |      1   0   4   1\n |      2  10  20  30\n |\n |      Get value at specified row/column pair\n |\n |      &gt;&gt;&gt; df.iat[1, 2]\n |      1\n |\n |      Set value at specified row/column pair\n |\n |      &gt;&gt;&gt; df.iat[1, 2] = 10\n |      &gt;&gt;&gt; df.iat[1, 2]\n |      10\n |\n |      Get value within a series\n |\n |      &gt;&gt;&gt; df.loc[0].iat[1]\n |      2\n |\n |  iloc\n |      Purely integer-location based indexing for selection by position.\n |\n |      .. deprecated:: 2.2.0\n |\n |         Returning a tuple from a callable is deprecated.\n |\n |      ``.iloc[]`` is primarily integer position based (from ``0`` to\n |      ``length-1`` of the axis), but may also be used with a boolean\n |      array.\n |\n |      Allowed inputs are:\n |\n |      - An integer, e.g. ``5``.\n |      - A list or array of integers, e.g. ``[4, 3, 0]``.\n |      - A slice object with ints, e.g. ``1:7``.\n |      - A boolean array.\n |      - A ``callable`` function with one argument (the calling Series or\n |        DataFrame) and that returns valid output for indexing (one of the above).\n |        This is useful in method chains, when you don't have a reference to the\n |        calling object, but would like to base your selection on\n |        some value.\n |      - A tuple of row and column indexes. The tuple elements consist of one of the\n |        above inputs, e.g. ``(0, 1)``.\n |\n |      ``.iloc`` will raise ``IndexError`` if a requested indexer is\n |      out-of-bounds, except *slice* indexers which allow out-of-bounds\n |      indexing (this conforms with python/numpy *slice* semantics).\n |\n |      See more at :ref:`Selection by Position &lt;indexing.integer&gt;`.\n |\n |      See Also\n |      --------\n |      DataFrame.iat : Fast integer location scalar accessor.\n |      DataFrame.loc : Purely label-location based indexer for selection by label.\n |      Series.iloc : Purely integer-location based indexing for\n |                     selection by position.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n |      ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n |      ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000}]\n |      &gt;&gt;&gt; df = pd.DataFrame(mydict)\n |      &gt;&gt;&gt; df\n |            a     b     c     d\n |      0     1     2     3     4\n |      1   100   200   300   400\n |      2  1000  2000  3000  4000\n |\n |      **Indexing just the rows**\n |\n |      With a scalar integer.\n |\n |      &gt;&gt;&gt; type(df.iloc[0])\n |      &lt;class 'pandas.core.series.Series'&gt;\n |      &gt;&gt;&gt; df.iloc[0]\n |      a    1\n |      b    2\n |      c    3\n |      d    4\n |      Name: 0, dtype: int64\n |\n |      With a list of integers.\n |\n |      &gt;&gt;&gt; df.iloc[[0]]\n |         a  b  c  d\n |      0  1  2  3  4\n |      &gt;&gt;&gt; type(df.iloc[[0]])\n |      &lt;class 'pandas.core.frame.DataFrame'&gt;\n |\n |      &gt;&gt;&gt; df.iloc[[0, 1]]\n |           a    b    c    d\n |      0    1    2    3    4\n |      1  100  200  300  400\n |\n |      With a `slice` object.\n |\n |      &gt;&gt;&gt; df.iloc[:3]\n |            a     b     c     d\n |      0     1     2     3     4\n |      1   100   200   300   400\n |      2  1000  2000  3000  4000\n |\n |      With a boolean mask the same length as the index.\n |\n |      &gt;&gt;&gt; df.iloc[[True, False, True]]\n |            a     b     c     d\n |      0     1     2     3     4\n |      2  1000  2000  3000  4000\n |\n |      With a callable, useful in method chains. The `x` passed\n |      to the ``lambda`` is the DataFrame being sliced. This selects\n |      the rows whose index label even.\n |\n |      &gt;&gt;&gt; df.iloc[lambda x: x.index % 2 == 0]\n |            a     b     c     d\n |      0     1     2     3     4\n |      2  1000  2000  3000  4000\n |\n |      **Indexing both axes**\n |\n |      You can mix the indexer types for the index and columns. Use ``:`` to\n |      select the entire axis.\n |\n |      With scalar integers.\n |\n |      &gt;&gt;&gt; df.iloc[0, 1]\n |      2\n |\n |      With lists of integers.\n |\n |      &gt;&gt;&gt; df.iloc[[0, 2], [1, 3]]\n |            b     d\n |      0     2     4\n |      2  2000  4000\n |\n |      With `slice` objects.\n |\n |      &gt;&gt;&gt; df.iloc[1:3, 0:3]\n |            a     b     c\n |      1   100   200   300\n |      2  1000  2000  3000\n |\n |      With a boolean array whose length matches the columns.\n |\n |      &gt;&gt;&gt; df.iloc[:, [True, False, True, False]]\n |            a     c\n |      0     1     3\n |      1   100   300\n |      2  1000  3000\n |\n |      With a callable function that expects the Series or DataFrame.\n |\n |      &gt;&gt;&gt; df.iloc[:, lambda df: [0, 2]]\n |            a     c\n |      0     1     3\n |      1   100   300\n |      2  1000  3000\n |\n |  loc\n |      Access a group of rows and columns by label(s) or a boolean array.\n |\n |      ``.loc[]`` is primarily label based, but may also be used with a\n |      boolean array.\n |\n |      Allowed inputs are:\n |\n |      - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is\n |        interpreted as a *label* of the index, and **never** as an\n |        integer position along the index).\n |      - A list or array of labels, e.g. ``['a', 'b', 'c']``.\n |      - A slice object with labels, e.g. ``'a':'f'``.\n |\n |        .. warning:: Note that contrary to usual python slices, **both** the\n |            start and the stop are included\n |\n |      - A boolean array of the same length as the axis being sliced,\n |        e.g. ``[True, False, True]``.\n |      - An alignable boolean Series. The index of the key will be aligned before\n |        masking.\n |      - An alignable Index. The Index of the returned selection will be the input.\n |      - A ``callable`` function with one argument (the calling Series or\n |        DataFrame) and that returns valid output for indexing (one of the above)\n |\n |      See more at :ref:`Selection by Label &lt;indexing.label&gt;`.\n |\n |      Raises\n |      ------\n |      KeyError\n |          If any items are not found.\n |      IndexingError\n |          If an indexed key is passed and its index is unalignable to the frame index.\n |\n |      See Also\n |      --------\n |      DataFrame.at : Access a single value for a row/column label pair.\n |      DataFrame.iloc : Access group of rows and columns by integer position(s).\n |      DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the\n |                     Series/DataFrame.\n |      Series.loc : Access group of values using labels.\n |\n |      Examples\n |      --------\n |      **Getting values**\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n |      ...                   index=['cobra', 'viper', 'sidewinder'],\n |      ...                   columns=['max_speed', 'shield'])\n |      &gt;&gt;&gt; df\n |                  max_speed  shield\n |      cobra               1       2\n |      viper               4       5\n |      sidewinder          7       8\n |\n |      Single label. Note this returns the row as a Series.\n |\n |      &gt;&gt;&gt; df.loc['viper']\n |      max_speed    4\n |      shield       5\n |      Name: viper, dtype: int64\n |\n |      List of labels. Note using ``[[]]`` returns a DataFrame.\n |\n |      &gt;&gt;&gt; df.loc[['viper', 'sidewinder']]\n |                  max_speed  shield\n |      viper               4       5\n |      sidewinder          7       8\n |\n |      Single label for row and column\n |\n |      &gt;&gt;&gt; df.loc['cobra', 'shield']\n |      2\n |\n |      Slice with labels for row and single label for column. As mentioned\n |      above, note that both the start and stop of the slice are included.\n |\n |      &gt;&gt;&gt; df.loc['cobra':'viper', 'max_speed']\n |      cobra    1\n |      viper    4\n |      Name: max_speed, dtype: int64\n |\n |      Boolean list with the same length as the row axis\n |\n |      &gt;&gt;&gt; df.loc[[False, False, True]]\n |                  max_speed  shield\n |      sidewinder          7       8\n |\n |      Alignable boolean Series:\n |\n |      &gt;&gt;&gt; df.loc[pd.Series([False, True, False],\n |      ...                  index=['viper', 'sidewinder', 'cobra'])]\n |                           max_speed  shield\n |      sidewinder          7       8\n |\n |      Index (same behavior as ``df.reindex``)\n |\n |      &gt;&gt;&gt; df.loc[pd.Index([\"cobra\", \"viper\"], name=\"foo\")]\n |             max_speed  shield\n |      foo\n |      cobra          1       2\n |      viper          4       5\n |\n |      Conditional that returns a boolean Series\n |\n |      &gt;&gt;&gt; df.loc[df['shield'] &gt; 6]\n |                  max_speed  shield\n |      sidewinder          7       8\n |\n |      Conditional that returns a boolean Series with column labels specified\n |\n |      &gt;&gt;&gt; df.loc[df['shield'] &gt; 6, ['max_speed']]\n |                  max_speed\n |      sidewinder          7\n |\n |      Multiple conditional using ``&`` that returns a boolean Series\n |\n |      &gt;&gt;&gt; df.loc[(df['max_speed'] &gt; 1) & (df['shield'] &lt; 8)]\n |                  max_speed  shield\n |      viper          4       5\n |\n |      Multiple conditional using ``|`` that returns a boolean Series\n |\n |      &gt;&gt;&gt; df.loc[(df['max_speed'] &gt; 4) | (df['shield'] &lt; 5)]\n |                  max_speed  shield\n |      cobra               1       2\n |      sidewinder          7       8\n |\n |      Please ensure that each condition is wrapped in parentheses ``()``.\n |      See the :ref:`user guide&lt;indexing.boolean&gt;`\n |      for more details and explanations of Boolean indexing.\n |\n |      .. note::\n |          If you find yourself using 3 or more conditionals in ``.loc[]``,\n |          consider using :ref:`advanced indexing&lt;advanced.advanced_hierarchical&gt;`.\n |\n |          See below for using ``.loc[]`` on MultiIndex DataFrames.\n |\n |      Callable that returns a boolean Series\n |\n |      &gt;&gt;&gt; df.loc[lambda df: df['shield'] == 8]\n |                  max_speed  shield\n |      sidewinder          7       8\n |\n |      **Setting values**\n |\n |      Set value for all items matching the list of labels\n |\n |      &gt;&gt;&gt; df.loc[['viper', 'sidewinder'], ['shield']] = 50\n |      &gt;&gt;&gt; df\n |                  max_speed  shield\n |      cobra               1       2\n |      viper               4      50\n |      sidewinder          7      50\n |\n |      Set value for an entire row\n |\n |      &gt;&gt;&gt; df.loc['cobra'] = 10\n |      &gt;&gt;&gt; df\n |                  max_speed  shield\n |      cobra              10      10\n |      viper               4      50\n |      sidewinder          7      50\n |\n |      Set value for an entire column\n |\n |      &gt;&gt;&gt; df.loc[:, 'max_speed'] = 30\n |      &gt;&gt;&gt; df\n |                  max_speed  shield\n |      cobra              30      10\n |      viper              30      50\n |      sidewinder         30      50\n |\n |      Set value for rows matching callable condition\n |\n |      &gt;&gt;&gt; df.loc[df['shield'] &gt; 35] = 0\n |      &gt;&gt;&gt; df\n |                  max_speed  shield\n |      cobra              30      10\n |      viper               0       0\n |      sidewinder          0       0\n |\n |      Add value matching location\n |\n |      &gt;&gt;&gt; df.loc[\"viper\", \"shield\"] += 5\n |      &gt;&gt;&gt; df\n |                  max_speed  shield\n |      cobra              30      10\n |      viper               0       5\n |      sidewinder          0       0\n |\n |      Setting using a ``Series`` or a ``DataFrame`` sets the values matching the\n |      index labels, not the index positions.\n |\n |      &gt;&gt;&gt; shuffled_df = df.loc[[\"viper\", \"cobra\", \"sidewinder\"]]\n |      &gt;&gt;&gt; df.loc[:] += shuffled_df\n |      &gt;&gt;&gt; df\n |                  max_speed  shield\n |      cobra              60      20\n |      viper               0      10\n |      sidewinder          0       0\n |\n |      **Getting values on a DataFrame with an index that has integer labels**\n |\n |      Another example using integers for the index\n |\n |      &gt;&gt;&gt; df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n |      ...                   index=[7, 8, 9], columns=['max_speed', 'shield'])\n |      &gt;&gt;&gt; df\n |         max_speed  shield\n |      7          1       2\n |      8          4       5\n |      9          7       8\n |\n |      Slice with integer labels for rows. As mentioned above, note that both\n |      the start and stop of the slice are included.\n |\n |      &gt;&gt;&gt; df.loc[7:9]\n |         max_speed  shield\n |      7          1       2\n |      8          4       5\n |      9          7       8\n |\n |      **Getting values with a MultiIndex**\n |\n |      A number of examples using a DataFrame with a MultiIndex\n |\n |      &gt;&gt;&gt; tuples = [\n |      ...     ('cobra', 'mark i'), ('cobra', 'mark ii'),\n |      ...     ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n |      ...     ('viper', 'mark ii'), ('viper', 'mark iii')\n |      ... ]\n |      &gt;&gt;&gt; index = pd.MultiIndex.from_tuples(tuples)\n |      &gt;&gt;&gt; values = [[12, 2], [0, 4], [10, 20],\n |      ...           [1, 4], [7, 1], [16, 36]]\n |      &gt;&gt;&gt; df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n |      &gt;&gt;&gt; df\n |                           max_speed  shield\n |      cobra      mark i           12       2\n |                 mark ii           0       4\n |      sidewinder mark i           10      20\n |                 mark ii           1       4\n |      viper      mark ii           7       1\n |                 mark iii         16      36\n |\n |      Single label. Note this returns a DataFrame with a single index.\n |\n |      &gt;&gt;&gt; df.loc['cobra']\n |               max_speed  shield\n |      mark i          12       2\n |      mark ii          0       4\n |\n |      Single index tuple. Note this returns a Series.\n |\n |      &gt;&gt;&gt; df.loc[('cobra', 'mark ii')]\n |      max_speed    0\n |      shield       4\n |      Name: (cobra, mark ii), dtype: int64\n |\n |      Single label for row and column. Similar to passing in a tuple, this\n |      returns a Series.\n |\n |      &gt;&gt;&gt; df.loc['cobra', 'mark i']\n |      max_speed    12\n |      shield        2\n |      Name: (cobra, mark i), dtype: int64\n |\n |      Single tuple. Note using ``[[]]`` returns a DataFrame.\n |\n |      &gt;&gt;&gt; df.loc[[('cobra', 'mark ii')]]\n |                     max_speed  shield\n |      cobra mark ii          0       4\n |\n |      Single tuple for the index with a single label for the column\n |\n |      &gt;&gt;&gt; df.loc[('cobra', 'mark i'), 'shield']\n |      2\n |\n |      Slice from index tuple to single label\n |\n |      &gt;&gt;&gt; df.loc[('cobra', 'mark i'):'viper']\n |                           max_speed  shield\n |      cobra      mark i           12       2\n |                 mark ii           0       4\n |      sidewinder mark i           10      20\n |                 mark ii           1       4\n |      viper      mark ii           7       1\n |                 mark iii         16      36\n |\n |      Slice from index tuple to index tuple\n |\n |      &gt;&gt;&gt; df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n |                          max_speed  shield\n |      cobra      mark i          12       2\n |                 mark ii          0       4\n |      sidewinder mark i          10      20\n |                 mark ii          1       4\n |      viper      mark ii          7       1\n |\n |      Please see the :ref:`user guide&lt;advanced.advanced_hierarchical&gt;`\n |      for more details and explanations of advanced indexing.\n |\n |  ----------------------------------------------------------------------\n |  Methods inherited from pandas.core.arraylike.OpsMixin:\n |\n |  __add__(self, other)\n |      Get Addition of DataFrame and other, column-wise.\n |\n |      Equivalent to ``DataFrame.add(other)``.\n |\n |      Parameters\n |      ----------\n |      other : scalar, sequence, Series, dict or DataFrame\n |          Object to be added to the DataFrame.\n |\n |      Returns\n |      -------\n |      DataFrame\n |          The result of adding ``other`` to DataFrame.\n |\n |      See Also\n |      --------\n |      DataFrame.add : Add a DataFrame and another object, with option for index-\n |          or column-oriented addition.\n |\n |      Examples\n |      --------\n |      &gt;&gt;&gt; df = pd.DataFrame({'height': [1.5, 2.6], 'weight': [500, 800]},\n |      ...                   index=['elk', 'moose'])\n |      &gt;&gt;&gt; df\n |             height  weight\n |      elk       1.5     500\n |      moose     2.6     800\n |\n |      Adding a scalar affects all rows and columns.\n |\n |      &gt;&gt;&gt; df[['height', 'weight']] + 1.5\n |             height  weight\n |      elk       3.0   501.5\n |      moose     4.1   801.5\n |\n |      Each element of a list is added to a column of the DataFrame, in order.\n |\n |      &gt;&gt;&gt; df[['height', 'weight']] + [0.5, 1.5]\n |             height  weight\n |      elk       2.0   501.5\n |      moose     3.1   801.5\n |\n |      Keys of a dictionary are aligned to the DataFrame, based on column names;\n |      each value in the dictionary is added to the corresponding column.\n |\n |      &gt;&gt;&gt; df[['height', 'weight']] + {'height': 0.5, 'weight': 1.5}\n |             height  weight\n |      elk       2.0   501.5\n |      moose     3.1   801.5\n |\n |      When `other` is a :class:`Series`, the index of `other` is aligned with the\n |      columns of the DataFrame.\n |\n |      &gt;&gt;&gt; s1 = pd.Series([0.5, 1.5], index=['weight', 'height'])\n |      &gt;&gt;&gt; df[['height', 'weight']] + s1\n |             height  weight\n |      elk       3.0   500.5\n |      moose     4.1   800.5\n |\n |      Even when the index of `other` is the same as the index of the DataFrame,\n |      the :class:`Series` will not be reoriented. If index-wise alignment is desired,\n |      :meth:`DataFrame.add` should be used with `axis='index'`.\n |\n |      &gt;&gt;&gt; s2 = pd.Series([0.5, 1.5], index=['elk', 'moose'])\n |      &gt;&gt;&gt; df[['height', 'weight']] + s2\n |             elk  height  moose  weight\n |      elk    NaN     NaN    NaN     NaN\n |      moose  NaN     NaN    NaN     NaN\n |\n |      &gt;&gt;&gt; df[['height', 'weight']].add(s2, axis='index')\n |             height  weight\n |      elk       2.0   500.5\n |      moose     4.1   801.5\n |\n |      When `other` is a :class:`DataFrame`, both columns names and the\n |      index are aligned.\n |\n |      &gt;&gt;&gt; other = pd.DataFrame({'height': [0.2, 0.4, 0.6]},\n |      ...                      index=['elk', 'moose', 'deer'])\n |      &gt;&gt;&gt; df[['height', 'weight']] + other\n |             height  weight\n |      deer      NaN     NaN\n |      elk       1.7     NaN\n |      moose     3.0     NaN\n |\n |  __and__(self, other)\n |\n |  __eq__(self, other)\n |      Return self==value.\n |\n |  __floordiv__(self, other)\n |\n |  __ge__(self, other)\n |      Return self&gt;=value.\n |\n |  __gt__(self, other)\n |      Return self&gt;value.\n |\n |  __le__(self, other)\n |      Return self&lt;=value.\n |\n |  __lt__(self, other)\n |      Return self&lt;value.\n |\n |  __mod__(self, other)\n |\n |  __mul__(self, other)\n |\n |  __ne__(self, other)\n |      Return self!=value.\n |\n |  __or__(self, other)\n |      Return self|value.\n |\n |  __pow__(self, other)\n |\n |  __radd__(self, other)\n |\n |  __rand__(self, other)\n |\n |  __rfloordiv__(self, other)\n |\n |  __rmod__(self, other)\n |\n |  __rmul__(self, other)\n |\n |  __ror__(self, other)\n |      Return value|self.\n |\n |  __rpow__(self, other)\n |\n |  __rsub__(self, other)\n |\n |  __rtruediv__(self, other)\n |\n |  __rxor__(self, other)\n |\n |  __sub__(self, other)\n |\n |  __truediv__(self, other)\n |\n |  __xor__(self, other)\n |\n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from pandas.core.arraylike.OpsMixin:\n |\n |  __hash__ = None\n\n\n\n\nThis will display the help documentation for the DataFrame class in Pandas, including information on its methods, attributes, and usage examples.\n\nCreating a DataFrame by using a dictionary of Series:\n\n# a dictionary of series\nd = {\n    \"Col 1\": pd.Series([1.0, 2.0, 3.0], index=[\"a\", \"b\", \"c\"]),\n    \"Col 2\": pd.Series([1.0, 2.0, 3.0, 4.0], index=[\"a\", \"b\", \"c\", \"d\"]),\n}\ndf1 = pd.DataFrame(d)\ndf1\n\n\n\n\n\n\n\n\nCol 1\nCol 2\n\n\n\n\na\n1.0\n1.0\n\n\nb\n2.0\n2.0\n\n\nc\n3.0\n3.0\n\n\nd\nNaN\n4.0\n\n\n\n\n\n\n\n\n# table with rows: d, b  and a of the above dictionary\ndf2 = pd.DataFrame(d, index=[\"d\", \"b\", \"a\"])\ndf2\n\n\n\n\n\n\n\n\nCol 1\nCol 2\n\n\n\n\nd\nNaN\n4.0\n\n\nb\n2.0\n2.0\n\n\na\n1.0\n1.0\n\n\n\n\n\n\n\nNote: NaN, standing for not a number, is a numeric data type used to represent any value that is undefined. It is by default not included in computations.\n\n\nCreating a DataFrame by using a dictionary of Series, lists, ndarrays:\n\n# a dictionary \ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie', 'David'],\n    'Age': pd.Series([25, 30, 35, 40]),\n    'City': ['New York', 'Los Angeles', 'Chicago', 'Houston'],\n    'Salary': np.array([50000, 60000, 75000, 90000])\n}\n\ndf3 = pd.DataFrame(data)\ndf3\n\n\n\n\n\n\n\n\nName\nAge\nCity\nSalary\n\n\n\n\n0\nAlice\n25\nNew York\n50000\n\n\n1\nBob\n30\nLos Angeles\n60000\n\n\n2\nCharlie\n35\nChicago\n75000\n\n\n3\nDavid\n40\nHouston\n90000\n\n\n\n\n\n\n\n\n\nIndexes and Columns of DataFrames\nConsider the following DataFrame,\n\nd = {\"one\": [1.0, 2.0, 3.0, 4.0], \"two\": [4.0, 3.0, 2.0, 1.0]}\ndf3 = pd.DataFrame(d, index=[\"a\", \"b\", \"c\", \"d\"])\ndf3\n\n\n\n\n\n\n\n\none\ntwo\n\n\n\n\na\n1.0\n4.0\n\n\nb\n2.0\n3.0\n\n\nc\n3.0\n2.0\n\n\nd\n4.0\n1.0\n\n\n\n\n\n\n\nTo print and update row names:\n\ndf3.index = [\"row 1\", \"row 2\", \"row 3\", \"row 4\"]\ndf3\n\n\n\n\n\n\n\n\none\ntwo\n\n\n\n\nrow 1\n1.0\n4.0\n\n\nrow 2\n2.0\n3.0\n\n\nrow 3\n3.0\n2.0\n\n\nrow 4\n4.0\n1.0\n\n\n\n\n\n\n\nTo print and update column names:\n\ndf3.columns = [\"Column_1\", \"Column_2\"]\ndf3\n\n\n\n\n\n\n\n\nColumn_1\nColumn_2\n\n\n\n\nrow 1\n1.0\n4.0\n\n\nrow 2\n2.0\n3.0\n\n\nrow 3\n3.0\n2.0\n\n\nrow 4\n4.0\n1.0\n\n\n\n\n\n\n\nThis method is straightforward if you want to rename all columns at once, but make sure the list you provide matches the number of columns in the DataFrame.\nTo rename columns in a DataFrame, you can use the rename() method:\n\n# Rename columns using a dictionary\ndf3_renamed = df3.rename(columns={'Column_1': 'new_name1', 'Column_2': 'new_name2'})\n\n# Display the updated DataFrame\ndf3_renamed\n\n\n\n\n\n\n\n\nnew_name1\nnew_name2\n\n\n\n\nrow 1\n1.0\n4.0\n\n\nrow 2\n2.0\n3.0\n\n\nrow 3\n3.0\n2.0\n\n\nrow 4\n4.0\n1.0\n\n\n\n\n\n\n\nHere the columns parameter takes a dictionary where the keys are the old column names and the values are the new column names. This method does not modify the original DataFrame unless you specify inplace=True.\nTo print the data type of each column:\n\ndf = pd.DataFrame(\n    {\n        \"A\": np.random.uniform(low=0, high=1, size=12),\n        \"B\": pd.date_range(start=\"20230102\", periods=12),\n        \"C\": pd.Series(range(1, 13), index=[\"R1\", \"R2\", \"R3\", \"R4\", \"R5\", \"R6\", \"R7\", \"R8\" ,\"R9\", \"R10\", \"R11\", \"R12\"]),\n        \"D\": np.random.randint(1, high=100, size=12),\n        \"E\": pd.Categorical([\"red\", \"green\", \"blue\", \"white\", \"pink\", \"brown\", \"black\", \"purple\", \"orange\", \"grey\", \"violet\", \"yellow\"]),\n        \"F\": \"foo\",\n    }, index = [\"R1\", \"R2\", \"R3\", \"R4\", \"R5\", \"R6\", \"R7\", \"R8\" ,\"R9\", \"R10\", \"R11\", \"R12\"]\n)\nprint(df.dtypes)\n\nA           float64\nB    datetime64[ns]\nC             int64\nD             int64\nE          category\nF            object\ndtype: object"
  },
  {
    "objectID": "vignettes/2_Intro_pandas.html#reading-and-writing-to-a-file",
    "href": "vignettes/2_Intro_pandas.html#reading-and-writing-to-a-file",
    "title": "Getting started with pandas",
    "section": "Reading and Writing to a file",
    "text": "Reading and Writing to a file\nUp to this point, all the data we’ve been dealing with has been manually entered into our scripts, and the outcomes of our computations have simply been displayed in the terminal. However, in the real world, data will typically be provided by the users of our programs (which could include you!), and we often need to store the results of our analyses in a more permanent location than just printing them to the screen. During this session, we’ll explore a few commonly used methods for importing data into our programs by reading/writing files from disk using the pandas library.\nIt’s worth noting that there are numerous other ways to access data, such as querying a database or retrieving data from a network, such as the internet. While we won’t cover these methods in this session, Python offers excellent support for interacting with databases and networks, either through its standard library or via external modules.\n\nComma-Seperated Values (CSV) file or Text file\nRead a CSV or text file:\npd.read_csv(\"path_to_file.csv\")\n\n# read a text file with values separated by spaces\npd.read_csv(\"path_to_file.txt\", delimeter=' ')\nWrite a DataFrame df to a CSV or text file:\ndf.to_csv(\"path_to_file.csv\")\ndf.to_csv(\"path_to_file.txt\")\n\n\nExcel file\nRead an excel file:\npd.read_excel(\"path_to_file.xls\", sheet_name=\"Sheet1\")\npd.read_excel(\"path/to/file/name/file_name.csv\")\nWrite a DataFrame df to an excel file:\ndf.to_excel(\"path_to_file.xlsx\", sheet_name=\"Sheet1\")\n\n\n\n\n\n\nChallenge\n\n\n\nRead the CSV file associated with the Metabric dataset from this link into a Pandas DataFrame named metabric: “https://zenodo.org/record/6450144/files/metabric_clinical_and_expression_data.csv”.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nimport pandas as pd\n\n# Load the Metabric dataset from the URL into a DataFrame\nmetabric = pd.read_csv(\"https://zenodo.org/record/6450144/files/metabric_clinical_and_expression_data.csv\")"
  },
  {
    "objectID": "vignettes/2_Intro_pandas.html#viewing-data",
    "href": "vignettes/2_Intro_pandas.html#viewing-data",
    "title": "Getting started with pandas",
    "section": "Viewing data",
    "text": "Viewing data\nThe DataFrame class offers multiple methods to view and interact with data. Below are some useful methods and how to access their help documentation.\nTo open the help page for any method in the DataFrame class, use the following code.\n\nimport pandas as pd\nhelp(pd.DataFrame.method_name)\n# or help(pandas.DataFrame.method_name)\n\nFor example, to open the help page for DataFrame.head():\n\nimport pandas as pd\nhelp(pd.DataFrame.head)  \n# or help(pandas.DataFrame.head)\n\n\n\n\nHelp on function head in module pandas.core.generic:\n\nhead(self, n: 'int' = 5) -&gt; 'Self'\n    Return the first `n` rows.\n\n    This function returns the first `n` rows for the object based\n    on position. It is useful for quickly testing if your object\n    has the right type of data in it.\n\n    For negative values of `n`, this function returns all rows except\n    the last `|n|` rows, equivalent to ``df[:n]``.\n\n    If n is larger than the number of rows, this function returns all rows.\n\n    Parameters\n    ----------\n    n : int, default 5\n        Number of rows to select.\n\n    Returns\n    -------\n    same type as caller\n        The first `n` rows of the caller object.\n\n    See Also\n    --------\n    DataFrame.tail: Returns the last `n` rows.\n\n    Examples\n    --------\n    &gt;&gt;&gt; df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n    ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n    &gt;&gt;&gt; df\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    5     parrot\n    6      shark\n    7      whale\n    8      zebra\n\n    Viewing the first 5 lines\n\n    &gt;&gt;&gt; df.head()\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n\n    Viewing the first `n` lines (three in this case)\n\n    &gt;&gt;&gt; df.head(3)\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n\n    For negative values of `n`\n\n    &gt;&gt;&gt; df.head(-3)\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    5     parrot\n\n\n\n\nSimilarly, to open the help page for DataFrame.columns:\n\nimport pandas as pd\nhelp(pd.DataFrame.columns)  \n# or help(pandas.DataFrame.columns)\n\n\n\n\nHelp on AxisProperty:\n\n    The column labels of the DataFrame.\n\n    Examples\n    --------\n    &gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\n    &gt;&gt;&gt; df\n         A  B\n    0    1  3\n    1    2  4\n    &gt;&gt;&gt; df.columns\n    Index(['A', 'B'], dtype='object')\n\n\n\n\nThis approach works for any other method or attribute of the DataFrame class.\n\nUse DataFrame.head() to view the top rows of the DataFrame. It returns the top 5 rows of the DataFrame.\n\ndf.head()\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\n\n\n\n\n\nDataFrame.tail() shows the last 5 rows of the DataFrame.\n\ndf.tail()\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\n\n\n\n\n\nDataFrame.index returns the index (row labels) of the DataFrame.\n\ndf.index\n\nIndex(['R1', 'R2', 'R3', 'R4', 'R5', 'R6', 'R7', 'R8', 'R9', 'R10', 'R11',\n       'R12'],\n      dtype='object')\n\n\nDataFrame.columns returns the column names of the DataFrame.\n\ndf.columns\n\nIndex(['A', 'B', 'C', 'D', 'E', 'F'], dtype='object')\n\n\nDataFrame.dtypes shows the data type of each column in the DataFrame, allowing you to understand what kind of data each column holds (e.g., integers, floats, or strings).\n\ndf.dtypes\n\nA           float64\nB    datetime64[ns]\nC             int64\nD             int64\nE          category\nF            object\ndtype: object\n\n\nTo get the shape of the DataFrame (i.e., the number of rows and columns), use:\n\ndf.shape\n\n(12, 6)\n\n\nTo get the dimensions of the DataFrame (i.e., the number of axes: rows and columns), use:\n\ndf.ndim\n\n2\n\n\nTo get the number of rows in the DataFrame, use:\n\ndf.shape[0]\n\n12\n\n\nTo get the number of columns in the DataFrame, use:\n\ndf.shape[1]\n\n6\n\n\nTo get a NumPy representation of the underlying data without the index or column labels, use:\n\ndf.to_numpy()\n\narray([[0.06285773359399205, Timestamp('2023-01-02 00:00:00'), 1, 22,\n        'red', 'foo'],\n       [0.5359310080461891, Timestamp('2023-01-03 00:00:00'), 2, 53,\n        'green', 'foo'],\n       [0.6565720384279885, Timestamp('2023-01-04 00:00:00'), 3, 87,\n        'blue', 'foo'],\n       [0.6472256785674247, Timestamp('2023-01-05 00:00:00'), 4, 9,\n        'white', 'foo'],\n       [0.2602973716268183, Timestamp('2023-01-06 00:00:00'), 5, 47,\n        'pink', 'foo'],\n       [0.9596873966925793, Timestamp('2023-01-07 00:00:00'), 6, 92,\n        'brown', 'foo'],\n       [0.3505336096166519, Timestamp('2023-01-08 00:00:00'), 7, 58,\n        'black', 'foo'],\n       [0.26611170297093123, Timestamp('2023-01-09 00:00:00'), 8, 18,\n        'purple', 'foo'],\n       [0.4367271698302484, Timestamp('2023-01-10 00:00:00'), 9, 8,\n        'orange', 'foo'],\n       [0.2795587208208977, Timestamp('2023-01-11 00:00:00'), 10, 64,\n        'grey', 'foo'],\n       [0.31125004583084914, Timestamp('2023-01-12 00:00:00'), 11, 39,\n        'violet', 'foo'],\n       [0.6160745893169569, Timestamp('2023-01-13 00:00:00'), 12, 46,\n        'yellow', 'foo']], dtype=object)\n\n\nDataFrame.describe() provides a quick statistical summary of the data. This summary includes:\n\ncount: The number of rows for each column.\nmean: The average value for each numerical column.\nstd: The standard deviation, which measures how spread out the values are.\nmin: The minimum value for each column.\npercentiles: Includes the 25th, 50th (median), and 75th percentiles, also known as the 1st, 2nd, and 3rd quartiles.\nmax: The maximum value in each column.\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\ncount\n12.000000\n12\n12.000000\n12.000000\n\n\nmean\n0.448569\n2023-01-07 12:00:00\n6.500000\n45.250000\n\n\nmin\n0.062858\n2023-01-02 00:00:00\n1.000000\n8.000000\n\n\n25%\n0.276197\n2023-01-04 18:00:00\n3.750000\n21.000000\n\n\n50%\n0.393630\n2023-01-07 12:00:00\n6.500000\n46.500000\n\n\n75%\n0.623862\n2023-01-10 06:00:00\n9.250000\n59.500000\n\n\nmax\n0.959687\n2023-01-13 00:00:00\n12.000000\n92.000000\n\n\nstd\n0.243897\nNaN\n3.605551\n27.847393\n\n\n\n\n\n\n\nThe DataFrame.info() method provides a concise summary of the DataFrame’s structure. It is particularly useful for quickly inspecting the basic details of a DataFrame, such as its index, column names, data types, and memory usage.\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 12 entries, R1 to R12\nData columns (total 6 columns):\n #   Column  Non-Null Count  Dtype         \n---  ------  --------------  -----         \n 0   A       12 non-null     float64       \n 1   B       12 non-null     datetime64[ns]\n 2   C       12 non-null     int64         \n 3   D       12 non-null     int64         \n 4   E       12 non-null     category      \n 5   F       12 non-null     object        \ndtypes: category(1), datetime64[ns](1), float64(1), int64(2), object(1)\nmemory usage: 984.0+ bytes\n\n\nDataFrame.t transpose your data. This results in a DataFrame where the columns of the DataFrame are now rows and the rows are now columns.\n\ndf.T\n\n\n\n\n\n\n\n\nR1\nR2\nR3\nR4\nR5\nR6\nR7\nR8\nR9\nR10\nR11\nR12\n\n\n\n\nA\n0.062858\n0.535931\n0.656572\n0.647226\n0.260297\n0.959687\n0.350534\n0.266112\n0.436727\n0.279559\n0.31125\n0.616075\n\n\nB\n2023-01-02 00:00:00\n2023-01-03 00:00:00\n2023-01-04 00:00:00\n2023-01-05 00:00:00\n2023-01-06 00:00:00\n2023-01-07 00:00:00\n2023-01-08 00:00:00\n2023-01-09 00:00:00\n2023-01-10 00:00:00\n2023-01-11 00:00:00\n2023-01-12 00:00:00\n2023-01-13 00:00:00\n\n\nC\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nD\n22\n53\n87\n9\n47\n92\n58\n18\n8\n64\n39\n46\n\n\nE\nred\ngreen\nblue\nwhite\npink\nbrown\nblack\npurple\norange\ngrey\nviolet\nyellow\n\n\nF\nfoo\nfoo\nfoo\nfoo\nfoo\nfoo\nfoo\nfoo\nfoo\nfoo\nfoo\nfoo\n\n\n\n\n\n\n\nDataFrame.sort_index() sorts by an axis. If no arguments are provided to this function, it restore to default value where axis = 0 (same as axis = 'index') (rows).axis = 1 (same as axis = 'columns') argument sort based on columns. This sorts the column labels rather than values in the table. This function accepts another argument called ascending which takes a boolean value (True or False).\n\ndf.sort_index(axis=1, ascending=False)\n\n\n\n\n\n\n\n\nF\nE\nD\nC\nB\nA\n\n\n\n\nR1\nfoo\nred\n22\n1\n2023-01-02\n0.062858\n\n\nR2\nfoo\ngreen\n53\n2\n2023-01-03\n0.535931\n\n\nR3\nfoo\nblue\n87\n3\n2023-01-04\n0.656572\n\n\nR4\nfoo\nwhite\n9\n4\n2023-01-05\n0.647226\n\n\nR5\nfoo\npink\n47\n5\n2023-01-06\n0.260297\n\n\nR6\nfoo\nbrown\n92\n6\n2023-01-07\n0.959687\n\n\nR7\nfoo\nblack\n58\n7\n2023-01-08\n0.350534\n\n\nR8\nfoo\npurple\n18\n8\n2023-01-09\n0.266112\n\n\nR9\nfoo\norange\n8\n9\n2023-01-10\n0.436727\n\n\nR10\nfoo\ngrey\n64\n10\n2023-01-11\n0.279559\n\n\nR11\nfoo\nviolet\n39\n11\n2023-01-12\n0.311250\n\n\nR12\nfoo\nyellow\n46\n12\n2023-01-13\n0.616075\n\n\n\n\n\n\n\nDataFrame.sort_values() sorts based on columns. The by argument takes a name or list of column names to sort the DataFrame.\n\ndf.sort_values(by=\"E\")\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR7\n0.350534\n2023-01-08\n7\n58\nblack\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\n\nPrint the top 5 and the bottom 5 rows of the metabric dataset.\nProvide a high-level overview of the content and then display the content of the metabric dataset.\nWhat is the number of rows and columns in the dataset?\nSort the dataset based on the age_at_diagnosis column.\nSort the dataset based on the Survival_time column.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Print the top 5 rows of the `metabric` dataset\nmetabric.head()\n\n# Print the bottom 5 rows of the `metabric` dataset\nmetabric.tail()\n\n# high-level overview of the content\nmetabric.info()\nmetabric.describe()\n\n# Print the no. of rows (records) and columns (features) in the `metabric` dataset\nmetabric.shape\n# print number of rows only\ndf.shape[0]\n# print number of columns only\ndf.shape[1]\n\n# Sort based on the `age_at_diagnosis` column\ndf.sort_values(\"age_at_diagnosis)\n\n# Sort based on the `Survival_time` column\ndf.sort_values(\"Survival_time)"
  },
  {
    "objectID": "vignettes/2_Intro_pandas.html#selecting-data",
    "href": "vignettes/2_Intro_pandas.html#selecting-data",
    "title": "Getting started with pandas",
    "section": "Selecting data",
    "text": "Selecting data\n\nSelecting based on labels\nDataFrame.loc() is used to retrieve a group of rows and/or columns by labels in the DataFrame.\n\nSelecting a row:\n\ndf.loc[\"R5\"]\n\nA               0.260297\nB    2023-01-06 00:00:00\nC                      5\nD                     47\nE                   pink\nF                    foo\nName: R5, dtype: object\n\n\nSelecting a range of rows:\n\ndf.loc[[\"R1\", \"R2\", \"R5\"]]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\n\n\n\n\n\n\ndf.loc[\"R2\":\"R4\"]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\n\n\n\n\n\nSelecting a column:\n\ndf.loc[:, \"E\"]\n\nR1        red\nR2      green\nR3       blue\nR4      white\nR5       pink\nR6      brown\nR7      black\nR8     purple\nR9     orange\nR10      grey\nR11    violet\nR12    yellow\nName: E, dtype: category\nCategories (12, object): ['black', 'blue', 'brown', 'green', ..., 'red', 'violet', 'white', 'yellow']\n\n\nSelecting a range of columns:\n\ndf.loc[:, [\"A\",\"C\"]]\n\n\n\n\n\n\n\n\nA\nC\n\n\n\n\nR1\n0.062858\n1\n\n\nR2\n0.535931\n2\n\n\nR3\n0.656572\n3\n\n\nR4\n0.647226\n4\n\n\nR5\n0.260297\n5\n\n\nR6\n0.959687\n6\n\n\nR7\n0.350534\n7\n\n\nR8\n0.266112\n8\n\n\nR9\n0.436727\n9\n\n\nR10\n0.279559\n10\n\n\nR11\n0.311250\n11\n\n\nR12\n0.616075\n12\n\n\n\n\n\n\n\n\ndf.loc[:, \"D\":\"F\"]\n\n\n\n\n\n\n\n\nD\nE\nF\n\n\n\n\nR1\n22\nred\nfoo\n\n\nR2\n53\ngreen\nfoo\n\n\nR3\n87\nblue\nfoo\n\n\nR4\n9\nwhite\nfoo\n\n\nR5\n47\npink\nfoo\n\n\nR6\n92\nbrown\nfoo\n\n\nR7\n58\nblack\nfoo\n\n\nR8\n18\npurple\nfoo\n\n\nR9\n8\norange\nfoo\n\n\nR10\n64\ngrey\nfoo\n\n\nR11\n39\nviolet\nfoo\n\n\nR12\n46\nyellow\nfoo\n\n\n\n\n\n\n\nSelecting a row and a column:\n\ndf.loc[\"R5\", \"A\"]\n\n0.2602973716268183\n\n\nSelecting a range of rows and columns:\n\ndf.loc[\"R3\":\"R5\", \"D\":\"F\"]\n\n\n\n\n\n\n\n\nD\nE\nF\n\n\n\n\nR3\n87\nblue\nfoo\n\n\nR4\n9\nwhite\nfoo\n\n\nR5\n47\npink\nfoo\n\n\n\n\n\n\n\n\ndf.loc[[\"R3\",\"R2\"], [\"B\",\"D\",\"F\"]]\n\n\n\n\n\n\n\n\nB\nD\nF\n\n\n\n\nR3\n2023-01-04\n87\nfoo\n\n\nR2\n2023-01-03\n53\nfoo\n\n\n\n\n\n\n\nSelecting a scalar using DataFrame.at() function:\n\ndf.at[\"R1\", \"A\"]\n\n0.06285773359399205\n\n\n\n\n\nSelecting based on integer positions\nDataFrame.iloc() is used to retrieve a group of rows and/or columns by integer position in the DataFrame. Note: integer position range from 0 to length-1 of rows or columns.\n\nSelecting a row:\n\ndf.iloc[4]\n\nA               0.260297\nB    2023-01-06 00:00:00\nC                      5\nD                     47\nE                   pink\nF                    foo\nName: R5, dtype: object\n\n\nSelecting a range of rows:\n\ndf.iloc[[0, 1, 4]]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\n\n\n\n\n\n\ndf.iloc[2:6]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\n\n\n\n\n\n\nSelect top 3 rows\n\ndf.iloc[:3]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\n\n\n\n\n\nSelect all rows in the ascending order\n\ndf.iloc[::-1]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR7\n0.350534\n2023-01-08\n7\n58\nblack\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\n\n\n\n\n\n\nSelecting a column:\n\ndf.iloc[:, 4]\n\nR1        red\nR2      green\nR3       blue\nR4      white\nR5       pink\nR6      brown\nR7      black\nR8     purple\nR9     orange\nR10      grey\nR11    violet\nR12    yellow\nName: E, dtype: category\nCategories (12, object): ['black', 'blue', 'brown', 'green', ..., 'red', 'violet', 'white', 'yellow']\n\n\nSelecting a range of columns:\n\ndf.iloc[:, [0, 2]]\n\n\n\n\n\n\n\n\nA\nC\n\n\n\n\nR1\n0.062858\n1\n\n\nR2\n0.535931\n2\n\n\nR3\n0.656572\n3\n\n\nR4\n0.647226\n4\n\n\nR5\n0.260297\n5\n\n\nR6\n0.959687\n6\n\n\nR7\n0.350534\n7\n\n\nR8\n0.266112\n8\n\n\nR9\n0.436727\n9\n\n\nR10\n0.279559\n10\n\n\nR11\n0.311250\n11\n\n\nR12\n0.616075\n12\n\n\n\n\n\n\n\n\ndf.iloc[:, 2:5]\n\n\n\n\n\n\n\n\nC\nD\nE\n\n\n\n\nR1\n1\n22\nred\n\n\nR2\n2\n53\ngreen\n\n\nR3\n3\n87\nblue\n\n\nR4\n4\n9\nwhite\n\n\nR5\n5\n47\npink\n\n\nR6\n6\n92\nbrown\n\n\nR7\n7\n58\nblack\n\n\nR8\n8\n18\npurple\n\n\nR9\n9\n8\norange\n\n\nR10\n10\n64\ngrey\n\n\nR11\n11\n39\nviolet\n\n\nR12\n12\n46\nyellow\n\n\n\n\n\n\n\nSelecting a row and a column:\n\ndf.iloc[4, 0]\n\n0.2602973716268183\n\n\nSelecting a range of rows and columns:\n\ndf.iloc[2:5, 3:6]\n\n\n\n\n\n\n\n\nD\nE\nF\n\n\n\n\nR3\n87\nblue\nfoo\n\n\nR4\n9\nwhite\nfoo\n\n\nR5\n47\npink\nfoo\n\n\n\n\n\n\n\n\ndf.iloc[[1,3,5], [2,4]]\n\n\n\n\n\n\n\n\nC\nE\n\n\n\n\nR2\n2\ngreen\n\n\nR4\n4\nwhite\n\n\nR6\n6\nbrown\n\n\n\n\n\n\n\nSelecting a scalar using DataFrame.iat() function:\n\ndf.iat[0, 1]\n\nTimestamp('2023-01-02 00:00:00')\n\n\n\n\n\nSubset Variables - columns\n\n\n\n\n\nYou can pass a list of columns to [] to select columns in that order.\n\nSelect a single column by name\n\ndf[\"E\"]\n\nR1        red\nR2      green\nR3       blue\nR4      white\nR5       pink\nR6      brown\nR7      black\nR8     purple\nR9     orange\nR10      grey\nR11    violet\nR12    yellow\nName: E, dtype: category\nCategories (12, object): ['black', 'blue', 'brown', 'green', ..., 'red', 'violet', 'white', 'yellow']\n\n\n\ndf.E\n\nR1        red\nR2      green\nR3       blue\nR4      white\nR5       pink\nR6      brown\nR7      black\nR8     purple\nR9     orange\nR10      grey\nR11    violet\nR12    yellow\nName: E, dtype: category\nCategories (12, object): ['black', 'blue', 'brown', 'green', ..., 'red', 'violet', 'white', 'yellow']\n\n\nSelect a range of columns with specific names\n\ndf[[\"A\",\"C\"]]\n\n\n\n\n\n\n\n\nA\nC\n\n\n\n\nR1\n0.062858\n1\n\n\nR2\n0.535931\n2\n\n\nR3\n0.656572\n3\n\n\nR4\n0.647226\n4\n\n\nR5\n0.260297\n5\n\n\nR6\n0.959687\n6\n\n\nR7\n0.350534\n7\n\n\nR8\n0.266112\n8\n\n\nR9\n0.436727\n9\n\n\nR10\n0.279559\n10\n\n\nR11\n0.311250\n11\n\n\nR12\n0.616075\n12\n\n\n\n\n\n\n\nTo subset a DataFrame while excluding specific columns\n\ndf.drop(columns=[\"A\",\"B\"])\n\n\n\n\n\n\n\n\nC\nD\nE\nF\n\n\n\n\nR1\n1\n22\nred\nfoo\n\n\nR2\n2\n53\ngreen\nfoo\n\n\nR3\n3\n87\nblue\nfoo\n\n\nR4\n4\n9\nwhite\nfoo\n\n\nR5\n5\n47\npink\nfoo\n\n\nR6\n6\n92\nbrown\nfoo\n\n\nR7\n7\n58\nblack\nfoo\n\n\nR8\n8\n18\npurple\nfoo\n\n\nR9\n9\n8\norange\nfoo\n\n\nR10\n10\n64\ngrey\nfoo\n\n\nR11\n11\n39\nviolet\nfoo\n\n\nR12\n12\n46\nyellow\nfoo\n\n\n\n\n\n\n\n\ndf.drop([\"C\",\"E\", \"F\"], axis=1)\n\n\n\n\n\n\n\n\nA\nB\nD\n\n\n\n\nR1\n0.062858\n2023-01-02\n22\n\n\nR2\n0.535931\n2023-01-03\n53\n\n\nR3\n0.656572\n2023-01-04\n87\n\n\nR4\n0.647226\n2023-01-05\n9\n\n\nR5\n0.260297\n2023-01-06\n47\n\n\nR6\n0.959687\n2023-01-07\n92\n\n\nR7\n0.350534\n2023-01-08\n58\n\n\nR8\n0.266112\n2023-01-09\n18\n\n\nR9\n0.436727\n2023-01-10\n8\n\n\nR10\n0.279559\n2023-01-11\n64\n\n\nR11\n0.311250\n2023-01-12\n39\n\n\nR12\n0.616075\n2023-01-13\n46\n\n\n\n\n\n\n\n\n\n\nSubset Observations - rows\n\n\n\n\n\nWith DataFrame, slicing inside of [] slices the rows. This is provided largely as a convenience since it is such a common operation.\n\nSelect the first row\n\ndf[:1]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\n\n\n\n\n\nSelect the first five row\n\ndf[:5]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\n\n\n\n\n\nSelect a range of rows\n\ndf[3:6]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\n\n\n\n\n\nSelect the last row\n\ndf[-1:]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\n\n\n\n\n\nSelect the last three row\n\ndf[-3:]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\n\n\n\n\n\nSelect a range of rows\n\ndf[-5:-2]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\n\n\n\n\n\nSelect all rows in the ascending order\n\ndf[::-1]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR7\n0.350534\n2023-01-08\n7\n58\nblack\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\n\n\n\n\n\n\n\n\nSubset by condition\nExtract rows that meet a logical criteria.\n\nSelect rows where values in column C is greater than 6\n\nabove_6 = df[\"C\"] &gt; 6 # expression over the dataframe that returns a boolean vector \nprint(above_6)\ndf[above_6]\n\nR1     False\nR2     False\nR3     False\nR4     False\nR5     False\nR6     False\nR7      True\nR8      True\nR9      True\nR10     True\nR11     True\nR12     True\nName: C, dtype: bool\n\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR7\n0.350534\n2023-01-08\n7\n58\nblack\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\n\n\n\n\n\nSelect rows where values in column D is less than or equal to 50\n\ndf[df[\"D\"]&lt;= 50]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\n\n\n\n\n\n\ndf[df.D &lt;= 50]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\n\n\n\n\n\nUsing isin() function for filtering:\n\n# select the rows with values orange and yellow\ndf[df[\"E\"].isin([\"yellow\", \"orange\"])]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\n\n\n\n\n\nSelect rows with Column E is equal to pink or blue\n\ndf[df.E.isin([\"pink\", \"blue\"])]\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\n\n\n\n\n\nRemove duplicate rows (only considers columns).\n\n# Add a duplicate row (e.g., duplicating row \"R5\") to df\ndf = pd.concat([df, df.loc[[\"R5\"]]])\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\nR7\n0.350534\n2023-01-08\n7\n58\nblack\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\n\n\n\n\n\n\ndf = df.drop_duplicates()\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\nR7\n0.350534\n2023-01-08\n7\n58\nblack\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\n\n\n\n\n\nRandomly select n rows.\n\ndf.sample(n=10) \n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR7\n0.350534\n2023-01-08\n7\n58\nblack\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\n\n\n\n\n\nRandomly select fraction of rows.\n\ndf.sample(frac=0.5)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\n\n\n\n\n\nSelect and order top n entries.\n\ndf.nlargest(3, 'D')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\n\n\n\n\n\nSelect and order bottom n entries.\n\ndf.nsmallest(5, 'A')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\n\n\n\n\n\nTo subset a DataFrame while excluding specific rows\n\ndf.drop(index=[\"R1\",\"R2\",\"R3\"])\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\nR7\n0.350534\n2023-01-08\n7\n58\nblack\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\n\n\n\n\n\n\ndf.drop([\"R2\",\"R4\",\"R6\",\"R8\"], axis=0)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR7\n0.350534\n2023-01-08\n7\n58\nblack\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\n\n\n\n\n\n\n\n\nfilter Function\nThe filter() function is used to subset rows or columns based on labels, such as column names or index labels. It is not used for filtering based on the actual values within the DataFrame but rather for subsetting by selecting specific rows or columns.\nDataFrame.filter(items=None, like=None, regex=None, axis=None)\n\nitems: List of labels to filter based on.\nlike: Substring used to filter column or row names containing the provided string.\nregex: Regular expression to filter column or row names.\naxis: Specifies whether to filter on columns (axis=1) or rows (axis=0).\n\nLoad the cms_hospital_patient_satisfaction.csv file from the data folder into a DataFrame named cms, which will be used for the following examples.\n\ncms = pd.read_csv('data/patient_satisfaction/cms_hospital_patient_satisfaction.csv')\n\n\nFilter by Specific Column Names: Select columns “Facility Name” and “Overall Rating”.\n\ncms.filter(items=['Facility Name', 'Overall Rating'], axis=1)\n\n\n\n\n\n\n\n\nFacility Name\nOverall Rating\n\n\n\n\n0\nSCRIPPS GREEN HOSPITAL\n5\n\n\n1\nST BERNARD HOSPITAL\n2\n\n\n2\nSOUTH LAKE HOSPITAL\n2\n\n\n3\nMERCY HOSPITAL FORT SMITH\n3\n\n\n4\nBAPTIST MEMORIAL HOSPITAL\n2\n\n\n5\nST JOSEPH REGIONAL HEALTH CENTER\n3\n\n\n6\nGREENE COUNTY GENERAL HOSPITAL\n3\n\n\n7\nSOUTHWEST MEMORIAL HOSPITAL\n3\n\n\n8\nSENTARA GENERAL HOSPITAL\n3\n\n\n9\nPIEDMONT FAYETTE HOSPITAL\n2\n\n\n10\nMISSION COMMUNITY HOSPITAL\n3\n\n\n11\nDOCTORS HOSPITAL\n3\n\n\n12\nSUMNER REGIONAL MEDICAL CENTER\n2\n\n\n13\nWHIDBEY GENERAL HOSPITAL\n3\n\n\n14\nNORTHRIDGE MEDICAL CENTER\n2\n\n\n\n\n\n\n\nFilter by Row Index Labels: Select rows with index labels 1,3, 5.\n\ncms.filter(items=[1,3,5], axis=0)\n\n\n\n\n\n\n\n\nID\nFacility Name\nCounty\nHospital Type\nStar Rating\nNo of Surveys\nResponse Rate\nOverall Rating\n\n\n\n\n1\n140103\nST BERNARD HOSPITAL\nCOOK\nAcute Care Hospital\n1\n264\n6\n2\n\n\n3\n40062\nMERCY HOSPITAL FORT SMITH\nSEBASTIAN\nAcute Care Hospital\n3\n2506\n35\n3\n\n\n5\n450011\nST JOSEPH REGIONAL HEALTH CENTER\nBRAZOS\nAcute Care Hospital\n3\n1379\n24\n3\n\n\n\n\n\n\n\nFilter Columns by Substring: Select columns whose names contain the substring \"Rating\".\n\ncms.filter(like=\"Rating\", axis=1)\n\n\n\n\n\n\n\n\nStar Rating\nOverall Rating\n\n\n\n\n0\n4\n5\n\n\n1\n1\n2\n\n\n2\n2\n2\n\n\n3\n3\n3\n\n\n4\n2\n2\n\n\n5\n3\n3\n\n\n6\n3\n3\n\n\n7\n4\n3\n\n\n8\n4\n3\n\n\n9\n2\n2\n\n\n10\n3\n3\n\n\n11\n4\n3\n\n\n12\n4\n2\n\n\n13\n3\n3\n\n\n14\n3\n2\n\n\n\n\n\n\n\nFilter Columns by Regular Expression: Select columns whose names start with the letter \"N\".\n\ncms.filter(regex=\"^N\", axis=1)\n\n\n\n\n\n\n\n\nNo of Surveys\n\n\n\n\n0\n3110\n\n\n1\n264\n\n\n2\n1382\n\n\n3\n2506\n\n\n4\n1799\n\n\n5\n1379\n\n\n6\n114\n\n\n7\n247\n\n\n8\n619\n\n\n9\n1714\n\n\n10\n241\n\n\n11\n393\n\n\n12\n680\n\n\n13\n389\n\n\n14\n1110\n\n\n\n\n\n\n\nFilter Rows by Regular Expression: Select rows whose index has two digits.\n\ncms.filter(regex=\"\\d{2}\", axis=0)\n\n&lt;&gt;:1: SyntaxWarning:\n\ninvalid escape sequence '\\d'\n\n&lt;&gt;:1: SyntaxWarning:\n\ninvalid escape sequence '\\d'\n\n/var/folders/8g/qvx6xyzs72q3wv286d96s_y91yzgmv/T/ipykernel_35053/750778274.py:1: SyntaxWarning:\n\ninvalid escape sequence '\\d'\n\n\n\n\n\n\n\n\n\n\nID\nFacility Name\nCounty\nHospital Type\nStar Rating\nNo of Surveys\nResponse Rate\nOverall Rating\n\n\n\n\n10\n50704\nMISSION COMMUNITY HOSPITAL\nLOS ANGELES\nAcute Care Hospital\n3\n241\n14\n3\n\n\n11\n100296\nDOCTORS HOSPITAL\nMIAMI-DADE\nAcute Care Hospital\n4\n393\n24\n3\n\n\n12\n440003\nSUMNER REGIONAL MEDICAL CENTER\nSUMNER\nAcute Care Hospital\n4\n680\n35\n2\n\n\n13\n501339\nWHIDBEY GENERAL HOSPITAL\nISLAND\nCritical Access Hospital\n3\n389\n29\n3\n\n\n14\n50116\nNORTHRIDGE MEDICAL CENTER\nLOS ANGELES\nAcute Care Hospital\n3\n1110\n20\n2\n\n\n\n\n\n\n\n\n\n\nquery() Function\nThe query() function allows you to filter rows based on specific conditions applied to the values within the DataFrame. It enables writing SQL-like queries on a DataFrame using column names as variables.\nDataFrame.query(expr, inplace=False, **kwargs)\n\nexpr: A string expression used for filtering.\ninplace: Whether to perform the operation in place.\nkwargs: Additional arguments (e.g., to pass column names with spaces).\n\n\nFilter Rows Based on a Condition: Select rows where the value in column \"Overall Rating\" is greater than 2.\n\ncms.query(\"`Overall Rating` &gt; 2\")\n\n\n\n\n\n\n\n\nID\nFacility Name\nCounty\nHospital Type\nStar Rating\nNo of Surveys\nResponse Rate\nOverall Rating\n\n\n\n\n0\n50424\nSCRIPPS GREEN HOSPITAL\nSAN DIEGO\nAcute Care Hospital\n4\n3110\n41\n5\n\n\n3\n40062\nMERCY HOSPITAL FORT SMITH\nSEBASTIAN\nAcute Care Hospital\n3\n2506\n35\n3\n\n\n5\n450011\nST JOSEPH REGIONAL HEALTH CENTER\nBRAZOS\nAcute Care Hospital\n3\n1379\n24\n3\n\n\n6\n151317\nGREENE COUNTY GENERAL HOSPITAL\nGREENE\nCritical Access Hospital\n3\n114\n22\n3\n\n\n7\n61327\nSOUTHWEST MEMORIAL HOSPITAL\nMONTEZUMA\nCritical Access Hospital\n4\n247\n34\n3\n\n\n8\n490057\nSENTARA GENERAL HOSPITAL\nVIRGINIA BEACH\nAcute Care Hospital\n4\n619\n32\n3\n\n\n10\n50704\nMISSION COMMUNITY HOSPITAL\nLOS ANGELES\nAcute Care Hospital\n3\n241\n14\n3\n\n\n11\n100296\nDOCTORS HOSPITAL\nMIAMI-DADE\nAcute Care Hospital\n4\n393\n24\n3\n\n\n13\n501339\nWHIDBEY GENERAL HOSPITAL\nISLAND\nCritical Access Hospital\n3\n389\n29\n3\n\n\n\n\n\n\n\nFilter Rows Based on Multiple Conditions: Select rows where \"Overall Rating\" is greater than 2 and the \"Response Rate\" is less than 30.\n\ncms.query(\"`Overall Rating` &gt; 2 and `Response Rate` &lt; 30\")\n\n\n\n\n\n\n\n\nID\nFacility Name\nCounty\nHospital Type\nStar Rating\nNo of Surveys\nResponse Rate\nOverall Rating\n\n\n\n\n5\n450011\nST JOSEPH REGIONAL HEALTH CENTER\nBRAZOS\nAcute Care Hospital\n3\n1379\n24\n3\n\n\n6\n151317\nGREENE COUNTY GENERAL HOSPITAL\nGREENE\nCritical Access Hospital\n3\n114\n22\n3\n\n\n10\n50704\nMISSION COMMUNITY HOSPITAL\nLOS ANGELES\nAcute Care Hospital\n3\n241\n14\n3\n\n\n11\n100296\nDOCTORS HOSPITAL\nMIAMI-DADE\nAcute Care Hospital\n4\n393\n24\n3\n\n\n13\n501339\nWHIDBEY GENERAL HOSPITAL\nISLAND\nCritical Access Hospital\n3\n389\n29\n3\n\n\n\n\n\n\n\nFilter Using a String Condition: Select rows where \"County\" is equal to \"LOS ANGELES\".\n\ncms.query(\"County == 'LOS ANGELES'\")\n\n\n\n\n\n\n\n\nID\nFacility Name\nCounty\nHospital Type\nStar Rating\nNo of Surveys\nResponse Rate\nOverall Rating\n\n\n\n\n10\n50704\nMISSION COMMUNITY HOSPITAL\nLOS ANGELES\nAcute Care Hospital\n3\n241\n14\n3\n\n\n14\n50116\nNORTHRIDGE MEDICAL CENTER\nLOS ANGELES\nAcute Care Hospital\n3\n1110\n20\n2\n\n\n\n\n\n\n\nFilter Rows Using or Condition: Select rows where \"Star Rating\" or \"Overall Rating”` is greater than 3.\n\ncms.query(\"`Star Rating` &gt; 3 or `Overall Rating` &gt; 3\")\n\n\n\n\n\n\n\n\nID\nFacility Name\nCounty\nHospital Type\nStar Rating\nNo of Surveys\nResponse Rate\nOverall Rating\n\n\n\n\n0\n50424\nSCRIPPS GREEN HOSPITAL\nSAN DIEGO\nAcute Care Hospital\n4\n3110\n41\n5\n\n\n7\n61327\nSOUTHWEST MEMORIAL HOSPITAL\nMONTEZUMA\nCritical Access Hospital\n4\n247\n34\n3\n\n\n8\n490057\nSENTARA GENERAL HOSPITAL\nVIRGINIA BEACH\nAcute Care Hospital\n4\n619\n32\n3\n\n\n11\n100296\nDOCTORS HOSPITAL\nMIAMI-DADE\nAcute Care Hospital\n4\n393\n24\n3\n\n\n12\n440003\nSUMNER REGIONAL MEDICAL CENTER\nSUMNER\nAcute Care Hospital\n4\n680\n35\n2\n\n\n\n\n\n\n\nUse Variable Inside query(): Use a variable to filter rows dynamically.\n\nthreshold = 25\ncms.query(\"`Response Rate` &gt; @threshold\")\n\n\n\n\n\n\n\n\nID\nFacility Name\nCounty\nHospital Type\nStar Rating\nNo of Surveys\nResponse Rate\nOverall Rating\n\n\n\n\n0\n50424\nSCRIPPS GREEN HOSPITAL\nSAN DIEGO\nAcute Care Hospital\n4\n3110\n41\n5\n\n\n3\n40062\nMERCY HOSPITAL FORT SMITH\nSEBASTIAN\nAcute Care Hospital\n3\n2506\n35\n3\n\n\n7\n61327\nSOUTHWEST MEMORIAL HOSPITAL\nMONTEZUMA\nCritical Access Hospital\n4\n247\n34\n3\n\n\n8\n490057\nSENTARA GENERAL HOSPITAL\nVIRGINIA BEACH\nAcute Care Hospital\n4\n619\n32\n3\n\n\n12\n440003\nSUMNER REGIONAL MEDICAL CENTER\nSUMNER\nAcute Care Hospital\n4\n680\n35\n2\n\n\n13\n501339\nWHIDBEY GENERAL HOSPITAL\nISLAND\nCritical Access Hospital\n3\n389\n29\n3\n\n\n\n\n\n\n\nFilter Rows Based on Index: Filter based on the index:\n\ncms.query('index == 5')\n\n\n\n\n\n\n\n\nID\nFacility Name\nCounty\nHospital Type\nStar Rating\nNo of Surveys\nResponse Rate\nOverall Rating\n\n\n\n\n5\n450011\nST JOSEPH REGIONAL HEALTH CENTER\nBRAZOS\nAcute Care Hospital\n3\n1379\n24\n3"
  },
  {
    "objectID": "vignettes/2_Intro_pandas.html#setting-data",
    "href": "vignettes/2_Intro_pandas.html#setting-data",
    "title": "Getting started with pandas",
    "section": "Setting data",
    "text": "Setting data\nOnce a subset of data is filtered using any of the methods discussed before the assignment operator can be used to assign different data. A few examples is shown below.\nConsider the following DataFrame for the examples listed below,\n\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n0.062858\n2023-01-02\n1\n22\nred\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\nR7\n0.350534\n2023-01-08\n7\n58\nblack\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\n\n\n\n\n\n\nUpdate a single cell in the DataFrame:\n\ndf.at[\"R1\", \"A\"] = 1.0\ndf.head()\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n1.000000\n2023-01-02\n1\n22\nred\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\n\n\n\n\n\nUpdate multiple cells in the DataFrame:\n\n# select the rows with values orange and yellow\ndf_sub = df[df.E.isin([\"yellow\", \"orange\"])]\n\ndf_sub[\"E\"] = [\"red\", \"green\"]\ndf_sub\n\n/var/folders/8g/qvx6xyzs72q3wv286d96s_y91yzgmv/T/ipykernel_35053/2504028862.py:4: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR9\n0.436727\n2023-01-10\n9\n8\nred\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\ngreen\nfoo\n\n\n\n\n\n\n\nThe above command shows a warning which says that we are trying to set (or update) values of a copy of a DataFrame rather than the original DataFrame. Recall that df_sub[\"E\"] = df[df[\"E\"].isin([\"yellow\", \"orange\"])], that means we are trying to update yellow and orange in the DataFrame to red and green. However, since we are updating a copy of the DataFrame, row R9 and R12 of the DataFrame df is not still updated as shown below.\n\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n1.000000\n2023-01-02\n1\n22\nred\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\nR7\n0.350534\n2023-01-08\n7\n58\nblack\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\norange\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\nyellow\nfoo\n\n\n\n\n\n\n\nIf we want to update the original DataFrame, we should set as follows.\n\ndf.loc[df.E.isin([\"yellow\", \"orange\"]), \"E\"] = [\"red\", \"green\"]\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n1.000000\n2023-01-02\n1\n22\nred\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\nR7\n0.350534\n2023-01-08\n7\n58\nblack\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\nred\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\ngreen\nfoo\n\n\n\n\n\n\n\nAnother useful function within this library is the replace() function which find a value(s) on a DataFrame and replace it with another value on all columns and rows.\n\n\ndf.replace('red', 'blue')\n\n/var/folders/8g/qvx6xyzs72q3wv286d96s_y91yzgmv/T/ipykernel_35053/294335307.py:1: FutureWarning:\n\nThe behavior of Series.replace (and DataFrame.replace) with CategoricalDtype is deprecated. In a future version, replace will only be used for cases that preserve the categories. To change the categories, use ser.cat.rename_categories instead.\n\n\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n1.000000\n2023-01-02\n1\n22\nblue\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\nR7\n0.350534\n2023-01-08\n7\n58\nblack\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\nblue\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\ngreen\nfoo\n\n\n\n\n\n\n\nAdding a new row to the DataFrame:\n\n# Add a new row using `loc[]`\ndf.loc['R15'] = [0.891133, pd.to_datetime(\"2023-01-16\"), 13, 30, 'blue', 'foo']\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n1.000000\n2023-01-02\n1\n22\nred\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2\n53\ngreen\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3\n87\nblue\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4\n9\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5\n47\npink\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6\n92\nbrown\nfoo\n\n\nR7\n0.350534\n2023-01-08\n7\n58\nblack\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8\n18\npurple\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9\n8\nred\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10\n64\ngrey\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11\n39\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12\n46\ngreen\nfoo\n\n\nR15\n0.891133\n2023-01-16\n13\n30\nblue\nfoo\n\n\n\n\n\n\n\n\n# Add a new row using `append()`\nnew_row = pd.DataFrame({'A': [0.425755], 'B': pd.to_datetime(\"2023-01-17\")}, index=['R17'])\ndf = pd.concat([df, new_row])\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\n\n\n\n\nR1\n1.000000\n2023-01-02\n1.0\n22.0\nred\nfoo\n\n\nR2\n0.535931\n2023-01-03\n2.0\n53.0\ngreen\nfoo\n\n\nR3\n0.656572\n2023-01-04\n3.0\n87.0\nblue\nfoo\n\n\nR4\n0.647226\n2023-01-05\n4.0\n9.0\nwhite\nfoo\n\n\nR5\n0.260297\n2023-01-06\n5.0\n47.0\npink\nfoo\n\n\nR6\n0.959687\n2023-01-07\n6.0\n92.0\nbrown\nfoo\n\n\nR7\n0.350534\n2023-01-08\n7.0\n58.0\nblack\nfoo\n\n\nR8\n0.266112\n2023-01-09\n8.0\n18.0\npurple\nfoo\n\n\nR9\n0.436727\n2023-01-10\n9.0\n8.0\nred\nfoo\n\n\nR10\n0.279559\n2023-01-11\n10.0\n64.0\ngrey\nfoo\n\n\nR11\n0.311250\n2023-01-12\n11.0\n39.0\nviolet\nfoo\n\n\nR12\n0.616075\n2023-01-13\n12.0\n46.0\ngreen\nfoo\n\n\nR15\n0.891133\n2023-01-16\n13.0\n30.0\nblue\nfoo\n\n\nR17\n0.425755\n2023-01-17\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nSetting values in a categorical column works as long as the value is included in the categories:\n\n# assign a column as a categorical column\ncms['Hospital Type'] = pd.Categorical(cms['Hospital Type']) \n\n# update a value\ncms.loc[1, 'Hospital Type'] = 'Specialty Hospital'\n\nTypeError: Cannot setitem on a Categorical with a new category (Specialty Hospital), set the categories first\n\n\nThis result in an error stating that Python cannot set item on a Categorical column with a new category (Specialty Hospital), that is not defined. To fix this error you can define the categories explicitly as follows:\n\n# Define a categorical column with fixed categories\ncms['Hospital Type'] = pd.Categorical(cms['Hospital Type'], categories=['Acute Care Hospital', 'Critical Access Hospital', 'Specialty Hospital']) \n\n# update a value\ncms.loc[1, 'Hospital Type'] = 'Specialty Hospital'\n\ncms\n\n\n\n\n\n\n\n\nID\nFacility Name\nCounty\nHospital Type\nStar Rating\nNo of Surveys\nResponse Rate\nOverall Rating\n\n\n\n\n0\n50424\nSCRIPPS GREEN HOSPITAL\nSAN DIEGO\nAcute Care Hospital\n4\n3110\n41\n5\n\n\n1\n140103\nST BERNARD HOSPITAL\nCOOK\nSpecialty Hospital\n1\n264\n6\n2\n\n\n2\n100051\nSOUTH LAKE HOSPITAL\nLAKE\nAcute Care Hospital\n2\n1382\n20\n2\n\n\n3\n40062\nMERCY HOSPITAL FORT SMITH\nSEBASTIAN\nAcute Care Hospital\n3\n2506\n35\n3\n\n\n4\n440048\nBAPTIST MEMORIAL HOSPITAL\nSHELBY\nAcute Care Hospital\n2\n1799\n18\n2\n\n\n5\n450011\nST JOSEPH REGIONAL HEALTH CENTER\nBRAZOS\nAcute Care Hospital\n3\n1379\n24\n3\n\n\n6\n151317\nGREENE COUNTY GENERAL HOSPITAL\nGREENE\nCritical Access Hospital\n3\n114\n22\n3\n\n\n7\n61327\nSOUTHWEST MEMORIAL HOSPITAL\nMONTEZUMA\nCritical Access Hospital\n4\n247\n34\n3\n\n\n8\n490057\nSENTARA GENERAL HOSPITAL\nVIRGINIA BEACH\nAcute Care Hospital\n4\n619\n32\n3\n\n\n9\n110215\nPIEDMONT FAYETTE HOSPITAL\nFAYETTE\nAcute Care Hospital\n2\n1714\n21\n2\n\n\n10\n50704\nMISSION COMMUNITY HOSPITAL\nLOS ANGELES\nAcute Care Hospital\n3\n241\n14\n3\n\n\n11\n100296\nDOCTORS HOSPITAL\nMIAMI-DADE\nAcute Care Hospital\n4\n393\n24\n3\n\n\n12\n440003\nSUMNER REGIONAL MEDICAL CENTER\nSUMNER\nAcute Care Hospital\n4\n680\n35\n2\n\n\n13\n501339\nWHIDBEY GENERAL HOSPITAL\nISLAND\nCritical Access Hospital\n3\n389\n29\n3\n\n\n14\n50116\nNORTHRIDGE MEDICAL CENTER\nLOS ANGELES\nAcute Care Hospital\n3\n1110\n20\n2\n\n\n\n\n\n\n\n\nThis concludes the introduction to the Pandas section. In the next section, we will dive into data manipulation using Pandas. We will explore various functions within this library to generate basic statistics, providing a clearer understanding of the underlying data."
  }
]